(undo-tree-save-format-version . 1)
"b1f81d98bfbcd86b7b68e284341a139c96381f3e"
[nil nil nil nil (25813 26030 567198 317000) 0 nil]
([nil nil ((#("C" 0 1 (face font-lock-type-face fontified t)) . -1007) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1008) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1009) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1010) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1011) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -1012) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1013) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) 1014 (t 25812 42083 303382 295000)) nil (25813 26030 567189 372000) 0 nil])
([nil nil ((229 . 230) (#("," 0 1 (fontified t)) . -229) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#(" " 0 1 (fontified t)) . -230) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -231) (undo-tree-id81 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -232) (undo-tree-id82 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -233) (undo-tree-id83 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -234) (undo-tree-id84 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -235) (undo-tree-id85 . -1) (#("}" 0 1 (fontified t)) . -236) (undo-tree-id86 . -1) 237 (t 25813 26030 579549 195000)) nil (25813 26075 796633 185000) 0 nil])
([nil nil ((990 . 1003) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -990) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -991) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -992) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -993) (undo-tree-id93 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -994) (undo-tree-id94 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -995) (undo-tree-id95 . -1) 996 (990 . 996) (986 . 990) (985 . 986) (#("
" 0 1 (fontified t)) . -1005) (undo-tree-id96 . -1) (#("	" 0 1 (fontified t)) . -1006) (undo-tree-id97 . -1) 1007 (1005 . 1007) (#("
" 0 1 (fontified t)) . -1052) (undo-tree-id98 . -1) (#("	" 0 1 (fontified t)) . -1053) (undo-tree-id99 . -1) 1054 (1052 . 1054) (#("
" 0 1 (fontified t)) . -1052) (undo-tree-id100 . -1) (#("	" 0 1 (fontified t)) . -1053) (undo-tree-id101 . -1) 1054 (1052 . 1054) (1049 . 1052) (1032 . 1049) (1031 . 1032) (1010 . 1031) (#("(" 0 1 (fontified t)) . -1010) (undo-tree-id102 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1011) (undo-tree-id103 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1012) (undo-tree-id104 . -1) 1013 (1007 . 1013) (#("L" 0 1 (face font-lock-type-face fontified t)) . -1007) (undo-tree-id105 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1008) (undo-tree-id106 . -1) 1009 (#("g" 0 1 (face font-lock-type-face fontified t)) . -1009) (undo-tree-id107 . -1) 1010 (1007 . 1010) (#("L" 0 1 (face font-lock-type-face fontified t)) . -1007) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1008) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1009) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("(" 0 1 (fontified t)) . -1010) (undo-tree-id120 . -1) 1011 (1010 . 1011) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1010) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1011) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1012) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1013) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#(" " 0 1 (fontified t)) . -1014) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) 1015 (1000 . 1003) (t 25813 26075 806195 695000)) nil (25813 26350 80428 122000) 0 nil])
([nil nil ((1025 . 1037) (#("W" 0 1 (face font-lock-type-face fontified t)) . -1025) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -1026) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1027) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1028) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1029) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("L" 0 1 (face font-lock-type-face fontified t)) . -1030) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1031) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1032) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1033) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1034) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1035) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1036) (undo-tree-id170 . -1) (undo-tree-id171 . -1) 1037 (1033 . 1037) (1025 . 1030) (1070 . 1072) (t 25813 26350 126076 197000)) nil (25813 26457 834640 232000) 0 nil])
([nil nil ((1024 . 1025) (1023 . 1024) (1022 . 1023) (1013 . 1022) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1013) (undo-tree-id172 . -1) (undo-tree-id173 . -1) 1014 (1013 . 1014) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1013) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1014) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1015) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1016) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1017) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) 1018 (1081 . 1098) (t 25813 26457 879363 593000)) nil (25813 26605 648548 709000) 0 nil])
([nil nil ((#("	NoChannelDatabase
" 0 1 (fontified t) 1 18 (face font-lock-type-face fontified t) 18 19 (fontified t)) . 1087) (undo-tree-id208 . -14) (undo-tree-id209 . -18) (undo-tree-id210 . -1) (undo-tree-id211 . -18) (undo-tree-id212 . -14) (undo-tree-id213 . -14) (undo-tree-id214 . -14) (undo-tree-id215 . -14) (undo-tree-id216 . -14) (undo-tree-id217 . -14) (undo-tree-id218 . -14) (undo-tree-id219 . -14) (undo-tree-id220 . -14) (undo-tree-id221 . -19) 1101 (t 25813 26605 649301 247000)) nil (25813 26663 622216 846000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1107) (undo-tree-id207 . -1) (1108 . 1109) (1106 . 1108) (1090 . 1106) (1088 . 1090)) nil (25813 26663 622201 682000) 0 nil])
([nil nil ((1108 . 1124) (1106 . 1108)) nil (25813 26663 622185 765000) 0 nil])
([nil nil ((1123 . 1124) (t 25813 26663 622610 287000)) nil (25813 26676 691842 381000) 0 nil])
([nil nil ((#("pub enum ErrorContext<E> {
	LoggingError(ser::GuildId, Option<ser::ChannelId>, E),
}

" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 21 (face font-lock-type-face fontified t) 21 22 (fontified t) 22 23 (face font-lock-type-face fontified t) 23 24 (fontified t) 24 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 40 (face font-lock-type-face fontified t) 40 41 (fontified t) 41 44 (face font-lock-constant-face fontified t) 44 46 (fontified t) 46 53 (face font-lock-type-face fontified t) 53 55 (fontified t) 55 61 (face font-lock-type-face fontified t) 61 62 (fontified t) 62 65 (face font-lock-constant-face fontified t) 65 67 (fontified t) 67 76 (face font-lock-type-face fontified t) 76 77 (fontified t) 77 79 (fontified t) 79 80 (face font-lock-type-face fontified t) 80 83 (fontified t) 83 85 (fontified t) 85 86 (fontified t)) . 1004) (undo-tree-id478 . -85) (undo-tree-id479 . -9) (undo-tree-id480 . -9) (undo-tree-id481 . -85) (undo-tree-id482 . -9) (undo-tree-id483 . -9) (undo-tree-id484 . -85) (undo-tree-id485 . -83) (undo-tree-id486 . -28) (undo-tree-id487 . -83) (undo-tree-id488 . -9) (undo-tree-id489 . -45) (t 25813 26676 699271 485000)) nil (25814 24059 815423 252000) 0 nil])
([nil nil ((1052 . 1064) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1052) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -1053) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1054) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1055) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) 1056 (#("n" 0 1 (face font-lock-type-face fontified t)) . -1056) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1057) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (#("l" 0 1 (face font-lock-type-face fontified nil)) . -1058) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1059) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1060) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1061) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1062) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1063) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1064) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1065) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) 1066 (1006 . 1009) (#("	" 0 1 (fontified nil)) . -1009) (undo-tree-id474 . -1) (1010 . 1011) (1008 . 1010) (1006 . 1008) (985 . 1006) (#("L" 0 1 (face font-lock-type-face fontified t)) . -1041) (undo-tree-id475 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1042) (undo-tree-id476 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1043) (undo-tree-id477 . -1) 1044 (1041 . 1044) (1039 . 1041)) nil (25814 24059 815299 418000) 0 nil])
([nil nil ((1036 . 1054) (1031 . 1036) (#("s" 0 1 (fontified t)) . -1031) (undo-tree-id490 . -1) (#("e" 0 1 (fontified t)) . -1032) (undo-tree-id491 . -1) (#("r" 0 1 (fontified t)) . -1033) (undo-tree-id492 . -1) (#(":" 0 1 (fontified t)) . -1034) (undo-tree-id493 . -1) 1035 (1025 . 1035) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1025) (undo-tree-id494 . -1) 1026 (1022 . 1026) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1022) (undo-tree-id495 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -1023) (undo-tree-id496 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1024) (undo-tree-id497 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1025) (undo-tree-id498 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1026) (undo-tree-id499 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1027) (undo-tree-id500 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1028) (undo-tree-id501 . -1) 1029 (1017 . 1029) (1013 . 1017) (1011 . 1013) (t 25814 24059 815927 905000)) nil (25814 24270 269883 715000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-type-face fontified t)) . -1005) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (#("<" 0 1 (fontified t)) . -1006) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1007) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (#(">" 0 1 (fontified t)) . -1008) (undo-tree-id512 . -1) 1009 (#("," 0 1 (fontified t)) . -1053) (undo-tree-id513 . -1) (#(" " 0 1 (fontified t)) . -1054) (undo-tree-id514 . -1) 1055 (1053 . 1055) (t 25814 24270 279245 763000)) nil (25814 24331 123440 893000) 0 nil])
([nil nil ((1005 . 1006)) nil (25814 24331 123390 208000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1105) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) 1106 (t 25814 24331 132558 315000)) nil (25814 25750 69757 282000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1055) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1056) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (#("/" 0 1 (face font-lock-doc-face fontified t)) . -1057) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -1058) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -1059) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -1060) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -1061) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -1062) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -1063) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -1064) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -1065) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -1066) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -1067) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -1068) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -1069) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -1070) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -1071) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (#("
" 0 1 (face font-lock-doc-face fontified t)) . -1072) (undo-tree-id661 . -1) 1073 (1072 . 1073) (1053 . 1054) (t 25814 25750 69541 521000)) nil (25814 25815 34144 228000) 0 nil])
([nil nil ((1087 . 1095) (1079 . 1087) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1079) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1080) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1081) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1082) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1083) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1084) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1085) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1086) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1087) (undo-tree-id678 . -1) 1088 (t 25814 25815 36217 342000)) nil (25814 25907 882055 895000) 0 nil])
([nil nil ((1055 . 1071) (#("
" 0 1 (fontified t)) . -1096) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (#("	" 0 1 (fontified t)) . -1097) (undo-tree-id681 . -1) (undo-tree-id682 . -1) 1098 (1097 . 1098) (#("	" 0 1 (fontified nil)) . 1096) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (1097 . 1098) (t 25814 25907 882887 391000)) nil (25814 31691 8864 268000) 0 nil])
([nil nil ((994 . 997) (1136 . 1139) (1081 . 1084) (1140 . 1142) (#("	" 0 1 (fontified nil)) . -1141) (undo-tree-id687 . -1) (1142 . 1143) (1140 . 1142) (1128 . 1140) (1121 . 1128) (#("Display" 0 7 (fontified nil)) . 1121) (1121 . 1128) (#("Display (alias {})" 0 18 (fontified nil)) . -1121) (1121 . 1139) (#("Display" 0 7 (face font-lock-type-face fontified t)) . -1121) (undo-tree-id688 . -7) 1128 (1121 . 1128) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1121) (undo-tree-id689 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1122) (undo-tree-id690 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1123) (undo-tree-id691 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -1124) (undo-tree-id692 . -1) 1125 (1116 . 1125) (1114 . 1116) (t 25814 31691 10374 766000)) nil (25814 31739 212768 49000) 0 nil])
([nil nil ((#("#[derive(Debug)]
pub enum LogError {
	NoErrorChannel(LogType),
	PermissionError(ser::Permissions),
	OtherError(anyhow::Error)
}

" 0 16 (face font-lock-preprocessor-face fontified t) 16 17 (fontified t) 17 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 25 (fontified t face font-lock-keyword-face) 25 26 (fontified t) 26 34 (face font-lock-type-face fontified t) 34 38 (fontified t) 38 52 (face font-lock-type-face fontified t) 52 53 (fontified t) 53 60 (face font-lock-type-face fontified t) 60 64 (fontified t) 64 79 (face font-lock-type-face fontified t) 79 80 (fontified t) 80 83 (face font-lock-constant-face fontified t) 83 85 (fontified t) 85 96 (face font-lock-type-face fontified t) 96 100 (fontified t) 100 110 (face font-lock-type-face fontified t) 110 111 (fontified t) 111 117 (face font-lock-constant-face fontified t) 117 119 (fontified t) 119 124 (face font-lock-type-face fontified t) 124 129 (fontified t)) . 2797) (undo-tree-id693 . -128) (undo-tree-id694 . -128) (undo-tree-id695 . -128) (undo-tree-id696 . -128) (undo-tree-id697 . -26) (undo-tree-id698 . -17) (undo-tree-id699 . -17) (undo-tree-id700 . -126) (undo-tree-id701 . -126) (undo-tree-id702 . -126) (undo-tree-id703 . -126) (undo-tree-id704 . -128) (undo-tree-id705 . -128) (undo-tree-id706 . -128) (undo-tree-id707 . -128) (undo-tree-id708 . -128) (undo-tree-id709 . -128) (undo-tree-id710 . -128) (undo-tree-id711 . -129) 2925 (t 25814 31739 220227 758000)) nil (25814 31784 193973 955000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1151) (undo-tree-id712 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1152) (undo-tree-id713 . -1) 1153 (1151 . 1153) (t 25814 31784 203432 18000)) nil (25814 31797 383278 996000) 0 nil])
([nil nil ((#("impl Display for LogError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
			Self::NoErrorChannel(guild, logtype) =>
				write!(f, \"guild {guild} doesn't have a channel set up for logs of type {logtype}\"),
			Self::PermissionError(permissions) =>
				write!(f, \"guild {guild} \")
			Self::OtherError(err) => Display::fmt(&err, f)
		}
    }
}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 25 (face font-lock-type-face fontified t) 25 28 (fontified t) 28 32 (fontified t) 32 34 (face font-lock-keyword-face fontified t) 34 35 (fontified t) 35 38 (face font-lock-function-name-face fontified t) 38 39 (fontified t) 39 40 (face rust-ampersand-face fontified t) 40 44 (face font-lock-keyword-face fontified t) 44 46 (fontified t) 46 47 (face font-lock-variable-name-face fontified t) 47 49 (fontified t) 49 50 (face rust-ampersand-face fontified t) 50 53 (face font-lock-keyword-face fontified t) 53 54 (fontified t) 54 57 (face font-lock-constant-face fontified t) 57 59 (fontified t) 59 62 (face font-lock-constant-face fontified t) 62 64 (fontified t) 64 73 (face font-lock-type-face fontified t) 73 75 (fontified t) 75 76 (face font-lock-variable-name-face fontified t) 76 80 (fontified t) 80 81 (fontified t syntax-table (1)) 81 82 (fontified t) 82 85 (face font-lock-constant-face fontified t) 85 87 (fontified t) 87 90 (face font-lock-constant-face fontified t) 90 92 (fontified t) 92 98 (face font-lock-type-face fontified t) 98 109 (fontified t) 109 114 (face font-lock-keyword-face fontified t) 114 115 (fontified t) 115 119 (face font-lock-keyword-face fontified t) 119 125 (fontified t) 125 129 (face font-lock-type-face fontified t) 129 131 (fontified t) 131 145 (face font-lock-type-face fontified t) 145 163 (fontified t) 163 164 (fontified t syntax-table (1)) 164 169 (fontified t) 169 175 (face rust-builtin-formatting-macro fontified t) 175 179 (fontified t) 179 186 (face font-lock-string-face fontified t) 186 193 (face rust-string-interpolation fontified t) 193 241 (face font-lock-string-face fontified t) 241 250 (face rust-string-interpolation fontified t) 250 251 (face font-lock-string-face fontified t) 251 257 (fontified t) 257 261 (face font-lock-type-face fontified t) 261 263 (fontified t) 263 278 (face font-lock-type-face fontified t) 278 293 (fontified t) 293 294 (fontified t syntax-table (1)) 294 299 (fontified t) 299 305 (face rust-builtin-formatting-macro fontified t) 305 309 (fontified t) 309 316 (face font-lock-string-face fontified t) 316 323 (face rust-string-interpolation fontified t) 323 325 (face font-lock-string-face fontified t) 325 330 (fontified t) 330 334 (face font-lock-type-face fontified t) 334 336 (fontified t) 336 346 (face font-lock-type-face fontified t) 346 353 (fontified t) 353 354 (fontified t syntax-table (1)) 354 355 (fontified t) 355 362 (face font-lock-type-face fontified t) 362 368 (fontified t) 368 369 (face rust-ampersand-face fontified t) 369 390 (fontified t)) . 2797) (undo-tree-id714 . -389) (undo-tree-id715 . -389) (undo-tree-id716 . -389) (undo-tree-id717 . -110) (undo-tree-id718 . -389) (undo-tree-id719 . -110) (undo-tree-id720 . -110) (undo-tree-id721 . -101) (undo-tree-id722 . -101) (undo-tree-id723 . -101) (undo-tree-id724 . -101) (undo-tree-id725 . -389) (undo-tree-id726 . -389) (undo-tree-id727 . -390) 3186 (t 25814 31797 393395 554000)) nil (25814 31811 454917 139000) 0 nil])
([nil nil ((#("impl From<anyhow::Error> for LogError {
	fn from(err: anyhow::Error) -> Self {
		Self::OtherError(err)
	}
}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 16 (face font-lock-constant-face fontified t) 16 18 (fontified t) 18 23 (face font-lock-type-face fontified t) 23 25 (fontified t) 25 28 (face font-lock-keyword-face fontified t) 28 29 (fontified t) 29 37 (face font-lock-type-face fontified t) 37 40 (fontified t) 40 41 (fontified t) 41 43 (face font-lock-keyword-face fontified t) 43 44 (fontified t) 44 48 (face font-lock-function-name-face fontified t) 48 49 (fontified t) 49 52 (face font-lock-variable-name-face fontified t) 52 54 (fontified t) 54 60 (face font-lock-constant-face fontified t) 60 62 (fontified t) 62 67 (face font-lock-type-face fontified t) 67 70 (fontified t) 70 71 (fontified t syntax-table (1)) 71 72 (fontified t) 72 76 (face font-lock-type-face fontified t) 76 81 (fontified t) 81 85 (face font-lock-type-face fontified t) 85 87 (fontified t) 87 97 (face font-lock-type-face fontified t) 97 109 (fontified t)) . 2797) (undo-tree-id728 . -108) (undo-tree-id729 . -108) (undo-tree-id730 . -108) (undo-tree-id731 . -9) (undo-tree-id732 . -108) (undo-tree-id733 . -9) (undo-tree-id734 . -9) (undo-tree-id735 . -9) (undo-tree-id736 . -9) (undo-tree-id737 . -9) (undo-tree-id738 . -9) (undo-tree-id739 . -108) (undo-tree-id740 . -108) (undo-tree-id741 . -109) 2905 (t 25814 31811 463357 315000)) nil (25814 31821 966789 760000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1151) (undo-tree-id754 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -1152) (undo-tree-id755 . -1) (#(" " 0 1 (fontified t)) . -1153) (undo-tree-id756 . -1) (#("f" 0 1 (face font-lock-function-name-face fontified t)) . -1154) (undo-tree-id757 . -1) (#("m" 0 1 (face font-lock-function-name-face fontified t)) . -1155) (undo-tree-id758 . -1) (#("t" 0 1 (face font-lock-function-name-face fontified t)) . -1156) (undo-tree-id759 . -1) 1157 (1151 . 1157) (t 25814 31821 973329 185000)) nil (25814 31984 425292 399000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 1231 1238 nil nil nil nil nil)) nil 21 nil nil nil nil)) (1149 . 1245) (#("
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        ${0:todo!()}
    }
" 0 1 (fontified nil) 1 53 (fontified nil) 53 54 (syntax-table (1) fontified nil) 54 100 (fontified nil) 100 101 (fontified nil)) . 1149) (undo-tree-id750 . -1) (undo-tree-id751 . 1) (undo-tree-id752 . 1) (1150 . 1249) (#("	" 0 1 (fontified t)) . 1150) (undo-tree-id753 . -1) 1149) nil (25814 31984 425281 594000) 0 nil])
([nil nil ((apply yas--snippet-revive 1149 1245 #s(yas--snippet nil (#s(yas--field 0 1231 1238 nil nil nil nil nil)) nil 21 nil nil nil nil))) nil (25814 31984 425274 553000) 0 nil])
([nil nil ((#("todo!()" 0 5 (face font-lock-preprocessor-face fontified t) 5 7 (fontified t)) . 1231) (undo-tree-id747 . -6) (undo-tree-id748 . -6) (undo-tree-id749 . -6)) nil (25814 31984 425272 417000) 0 nil])
([nil nil ((165 . 166) (162 . 165) (#("fmt" 0 3 (fontified nil)) . 162) (162 . 165) (#("fmt" 0 3 (fontified t)) . -162) (undo-tree-id742 . -3) (undo-tree-id743 . -3) (undo-tree-id744 . -3) (undo-tree-id745 . -3) (undo-tree-id746 . -3) 165 (153 . 165) (152 . 153)) nil (25814 31984 425263 475000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-constant-face fontified t)) . -1213) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -1214) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -1215) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (#(":" 0 1 (fontified t)) . -1216) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (#(":" 0 1 (fontified t)) . -1217) (undo-tree-id770 . -1) (undo-tree-id771 . -1) 1218 (#("s" 0 1 (face font-lock-constant-face fontified t)) . -1190) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -1191) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -1192) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (#(":" 0 1 (fontified t)) . -1193) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (#(":" 0 1 (fontified t)) . -1194) (undo-tree-id784 . -1) 1195 (t 25814 31984 469602 775000)) nil (25814 31997 541466 231000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1250) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (1251 . 1252) (1247 . 1251) (1235 . 1247) (t 25814 31997 549574 165000)) nil (25814 32163 795744 750000) 0 nil])
([nil nil ((1344 . 1347) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -1344) (undo-tree-id785 . -1) 1345 (1340 . 1345) (#("p" 0 1 (face rust-string-interpolation fontified t)) . -1340) (undo-tree-id786 . -1) 1341 (1334 . 1341) (1323 . 1334) (#("l" 0 1 (face font-lock-string-face fontified t)) . -1323) (undo-tree-id787 . -1) 1324 (1323 . 1324) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1323) (undo-tree-id788 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1324) (undo-tree-id789 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -1325) (undo-tree-id790 . -1) 1326 (1305 . 1326) (1301 . 1305) (1298 . 1301) (1287 . 1298) (1282 . 1287) (1279 . 1282) (apply yas--snippet-revive 1251 1279 #s(yas--snippet nil (#s(yas--field 1 1270 1278 nil nil nil t #s(yas--exit 1279 nil))) #s(yas--exit 1279 nil) 22 nil #s(yas--field 1 1270 1278 nil nil nil t #s(yas--exit 1279 nil)) nil nil)) (1271 . 1278) (#("l" 0 1 (fontified t)) . -1271) (undo-tree-id791 . -1) (undo-tree-id792 . -1) 1272 (1270 . 1272) (#("o" 0 1 (fontified t)) . -1270) (undo-tree-id793 . -1) (undo-tree-id794 . -1) 1271 (1270 . 1271) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1270 1278 nil nil nil t #s(yas--exit 1279 nil))) #s(yas--exit 1279 nil) 22 nil #s(yas--field 1 1270 1278 nil nil nil t #s(yas--exit 1279 nil)) nil nil)) (1251 . 1271) (#("Self::NoLogChannel($1)$0" 0 24 (fontified nil)) . 1251) (1251 . 1275) (#("NoLog" 0 5 (fontified nil)) . 1251) (1251 . 1256) (#("Self::NoLogChannel(…)" 0 21 (fontified nil)) . -1251) (1251 . 1272) (#("NoLog" 0 5 (face font-lock-type-face fontified t)) . -1251) (undo-tree-id795 . -5) 1256 (1251 . 1256) (1247 . 1251)) nil (25814 32163 795735 386000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -347) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (#("o" 0 1 (fontified t)) . -348) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (#("d" 0 1 (face font-lock-keyword-face fontified t)) . -349) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (#(" " 0 1 (fontified t)) . -350) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) 351 (347 . 351) (346 . 348) (t 25814 32163 839241 895000)) nil (25814 32249 239671 651000) 0 nil])
([nil nil ((1071 . 1078) (#("Log" 0 3 (fontified nil)) . 1071) (1071 . 1074) (#("LogType" 0 7 (fontified nil)) . -1071) (1071 . 1078) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -1071) (undo-tree-id850 . -3) (undo-tree-id851 . -3) 1074 (1069 . 1074) (#("	" 0 1 (fontified nil)) . -1109) (undo-tree-id852 . -1) (1110 . 1111) (1108 . 1110) (1106 . 1108) (1091 . 1106) (#("LogEr" 0 5 (fontified nil)) . 1091) (1091 . 1096) (#("LogErrorContext" 0 15 (fontified nil)) . -1091) (1091 . 1106) (#("LogEr" 0 5 (face font-lock-type-face fontified t)) . -1091) (undo-tree-id853 . -5) 1096 (1091 . 1096) (1086 . 1091) (1079 . 1086) (#("Displa" 0 6 (fontified nil)) . 1079) (1079 . 1085) (#("Display (alias {})" 0 18 (fontified nil)) . -1079) (1079 . 1097) (#("Displa" 0 6 (face font-lock-type-face fontified t)) . -1079) (undo-tree-id854 . -6) 1085 (1079 . 1085) (#("L" 0 1 (face font-lock-type-face fontified t)) . -1079) (undo-tree-id855 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1080) (undo-tree-id856 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1081) (undo-tree-id857 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1082) (undo-tree-id858 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1083) (undo-tree-id859 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1084) (undo-tree-id860 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1085) (undo-tree-id861 . -1) 1086 (#("r" 0 1 (face font-lock-type-face fontified t)) . -1086) (undo-tree-id862 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1087) (undo-tree-id863 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1088) (undo-tree-id864 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1089) (undo-tree-id865 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1090) (undo-tree-id866 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1091) (undo-tree-id867 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -1092) (undo-tree-id868 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1093) (undo-tree-id869 . -1) (#(" " 0 1 (fontified t)) . -1094) (undo-tree-id870 . -1) (#("f" 0 1 (fontified t)) . -1095) (undo-tree-id871 . -1) (#("o" 0 1 (fontified t)) . -1096) (undo-tree-id872 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -1097) (undo-tree-id873 . -1) (#(" " 0 1 (fontified t)) . -1098) (undo-tree-id874 . -1) (#("=" 0 1 (fontified t)) . -1099) (undo-tree-id875 . -1) (#("=" 0 1 (fontified t)) . -1100) (undo-tree-id876 . -1) (#("=" 0 1 (fontified t)) . -1101) (undo-tree-id877 . -1) (#("=" 0 1 (fontified t)) . -1102) (undo-tree-id878 . -1) (#("=" 0 1 (fontified t)) . -1103) (undo-tree-id879 . -1) (#("=" 0 1 (fontified t)) . -1104) (undo-tree-id880 . -1) (#("=" 0 1 (fontified t)) . -1105) (undo-tree-id881 . -1) (#("=" 0 1 (fontified t)) . -1106) (undo-tree-id882 . -1) 1107 (1099 . 1107) (1094 . 1099) (1079 . 1094) (#("Log" 0 3 (fontified nil)) . 1079) (1079 . 1082) (#("LogErrorContext" 0 15 (fontified nil)) . -1079) (1079 . 1094) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -1079) (undo-tree-id883 . -3) 1082 (1074 . 1082) (1072 . 1074) (t 25814 32249 249090 367000)) nil (25814 34829 259601 119000) 0 nil])
([nil nil ((apply yas--snippet-revive 1117 1203 #s(yas--snippet nil (#s(yas--field 0 1189 1196 nil nil nil nil nil)) nil 44 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 1189 1196 nil nil nil nil nil)) nil 44 nil nil nil nil)) (1117 . 1203) (#("
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        ${0:todo!()}
    }
" 0 1 (fontified nil) 1 48 (fontified nil) 48 49 (syntax-table (1) fontified nil) 49 90 (fontified nil) 90 91 (fontified nil)) . 1117) (1118 . 1207) (#("	" 0 1 (fontified t)) . 1118) 1117 (1117 . 1119) (t 25814 34829 261885 618000)) nil (25814 45965 913157 600000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1198) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (1199 . 1200) (1195 . 1199) (1192 . 1195) (1183 . 1192) (1181 . 1183) (#("       " 0 7 (fontified t)) . 1181) (undo-tree-id990 . -7) (undo-tree-id991 . -7) (undo-tree-id992 . -7) (undo-tree-id993 . -7) (undo-tree-id994 . -7) (undo-tree-id995 . -7) (undo-tree-id996 . -7) (undo-tree-id997 . -7) (undo-tree-id998 . -7) (undo-tree-id999 . -7) (undo-tree-id1000 . -7) (undo-tree-id1001 . -7) (undo-tree-id1002 . -7) (undo-tree-id1003 . -7) (undo-tree-id1004 . -7) 1188 (#("A" 0 1 (face font-lock-type-face fontified t)) . -1188) (undo-tree-id1005 . -1) 1189 (1188 . 1189) (#(" todo!()" 0 1 (fontified t) 1 6 (face font-lock-preprocessor-face fontified t) 6 8 (fontified t)) . 1188) (undo-tree-id1006 . -8) (undo-tree-id1007 . 7) (undo-tree-id1008 . -7) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -8) (undo-tree-id1021 . -8)) nil (25814 45965 913153 905000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1361) (undo-tree-id884 . -1) (undo-tree-id885 . -1) 1362 (1361 . 1362) (#("," 0 1 (fontified t)) . -1361) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (#("
" 0 1 (fontified t)) . -1362) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (#("	" 0 1 (fontified t)) . -1363) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (#("	" 0 1 (fontified t)) . -1364) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (#("	" 0 1 (fontified t)) . -1365) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (#("	" 0 1 (fontified t)) . -1366) (undo-tree-id897 . -1) (undo-tree-id898 . -1) 1367 (1362 . 1367) (1356 . 1362) (1345 . 1356) (#("l" 0 1 (fontified t)) . -1345) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (#("d" 0 1 (fontified t)) . -1346) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (#("_" 0 1 (fontified t)) . -1347) (undo-tree-id903 . -1) (undo-tree-id904 . -1) 1348 (1347 . 1348) (1339 . 1343) 1343 (1339 . 1343) (1334 . 1339) (1333 . 1334) (1417 . 1418) (1401 . 1417) (#("{" 0 1 (face rust-string-interpolation fontified t)) . -1401) (undo-tree-id905 . -1) 1402 (1397 . 1402) (#("p" 0 1 (face font-lock-string-face fontified t)) . -1397) (undo-tree-id906 . -1) 1398 (1392 . 1398) (1276 . 1279) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1276) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (#("v" 0 1 (face font-lock-string-face fontified t)) . -1277) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1278) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1279) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1280) (undo-tree-id915 . -1) (undo-tree-id916 . -1) 1281 (1375 . 1394) (1370 . 1375) (1356 . 1370) (#(")" 0 1 (fontified t)) . -1356) (undo-tree-id917 . -1) (#("," 0 1 (fontified t)) . -1357) (undo-tree-id918 . -1) 1358 (1345 . 1358) (1341 . 1345) (1337 . 1341) (1334 . 1337) (1299 . 1300) (#("
" 0 1 (face font-lock-string-face fontified t)) . -1299) (undo-tree-id919 . -1) 1300 (#(" " 0 1 (face font-lock-string-face fontified nil)) . 1299) (undo-tree-id920 . -1) (1300 . 1301) (1310 . 1315) (1316 . 1329) (1311 . 1316) (#(":" 0 1 (face font-lock-string-face fontified t)) . -1311) (undo-tree-id921 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1312) (undo-tree-id922 . -1) 1313 (1311 . 1313) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1311) (undo-tree-id923 . -1) 1312 (1311 . 1312) (1300 . 1303) (#("i" 0 1 (face font-lock-string-face fontified t)) . -1300) (undo-tree-id924 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1301) (undo-tree-id925 . -1) 1302 (#(" " 0 1 (face font-lock-string-face fontified t)) . -1310) (undo-tree-id926 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -1311) (undo-tree-id927 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1312) (undo-tree-id928 . -1) 1313 (1311 . 1313) (1304 . 1311) (1300 . 1304) (#("f" 0 1 (face font-lock-string-face fontified t)) . -1300) (undo-tree-id929 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1301) (undo-tree-id930 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1302) (undo-tree-id931 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1303) (undo-tree-id932 . -1) 1304 (1300 . 1304) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1268) (undo-tree-id933 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1269) (undo-tree-id934 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1270) (undo-tree-id935 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1271) (undo-tree-id936 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1272) (undo-tree-id937 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1273) (undo-tree-id938 . -1) (#("w" 0 1 (face font-lock-string-face fontified t)) . -1274) (undo-tree-id939 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -1275) (undo-tree-id940 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -1276) (undo-tree-id941 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -1277) (undo-tree-id942 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1278) (undo-tree-id943 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1279) (undo-tree-id944 . -1) 1280 (1300 . 1312) (1280 . 1300) (#("f" 0 1 (face font-lock-string-face fontified t)) . -1280) (undo-tree-id945 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1281) (undo-tree-id946 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1282) (undo-tree-id947 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -1283) (undo-tree-id948 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1284) (undo-tree-id949 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1285) (undo-tree-id950 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1286) (undo-tree-id951 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -1287) (undo-tree-id952 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1288) (undo-tree-id953 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -1289) (undo-tree-id954 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1290) (undo-tree-id955 . -1) 1291 (1278 . 1291) (1257 . 1278) (1252 . 1257) (#(" " 0 1 (fontified t)) . -1252) (undo-tree-id956 . -1) (#("{" 0 1 (fontified t)) . -1253) (undo-tree-id957 . -1) (#("
" 0 1 (fontified t)) . -1254) (undo-tree-id958 . -1) (#("	" 0 1 (fontified t)) . -1255) (undo-tree-id959 . -1) (#("	" 0 1 (fontified t)) . -1256) (undo-tree-id960 . -1) (#("	" 0 1 (fontified t)) . -1257) (undo-tree-id961 . -1) (#("	" 0 1 (fontified t)) . -1258) (undo-tree-id962 . -1) (#("
" 0 1 (fontified t)) . -1259) (undo-tree-id963 . -1) (#("	" 0 1 (fontified t)) . -1260) (undo-tree-id964 . -1) (#("	" 0 1 (fontified t)) . -1261) (undo-tree-id965 . -1) (#("	" 0 1 (fontified t)) . -1262) (undo-tree-id966 . -1) (#("}" 0 1 (fontified t)) . -1263) (undo-tree-id967 . -1) 1264 (1254 . 1259) (#("	" 0 1 (fontified nil)) . -1258) (undo-tree-id968 . -1) (1259 . 1260) (1254 . 1259) (1251 . 1254) (1249 . 1251) (1240 . 1248) (1237 . 1238) (1225 . 1230) (1225 . 1232) (1218 . 1223) (#("r" 0 1 (fontified t)) . -1218) (undo-tree-id969 . -1) (undo-tree-id970 . -1) 1219 (1218 . 1219) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1214) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1215) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1216) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1217) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (#(":" 0 1 (fontified t)) . -1218) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (#(":" 0 1 (fontified t)) . -1219) (undo-tree-id981 . -1) 1220 (1184 . 1195) (#("s" 0 1 (fontified t)) . -1184) (undo-tree-id982 . -1) 1185 (1183 . 1185) (1180 . 1183) (apply yas--snippet-revive 1205 1214 #s(yas--snippet nil (#s(yas--field 1 1209 1209 nil nil nil nil #s(yas--field 2 1211 1211 nil nil nil nil #s(yas--field 3 1213 1213 nil nil nil nil #s(yas--exit 1214 nil)))) #s(yas--field 2 1211 1211 nil nil nil nil #s(yas--field 3 1213 1213 nil nil nil nil #s(yas--exit 1214 nil))) #s(yas--field 3 1213 1213 nil nil nil nil #s(yas--exit 1214 nil))) #s(yas--exit 1214 nil) 45 nil #s(yas--field 1 1209 1209 nil nil nil nil #s(yas--field 2 1211 1211 nil nil nil nil #s(yas--field 3 1213 1213 nil nil nil nil #s(yas--exit 1214 nil)))) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1209 1209 nil nil nil nil #s(yas--field 2 1211 1211 nil nil nil nil #s(yas--field 3 1213 1213 nil nil nil nil #s(yas--exit 1214 nil)))) #s(yas--field 2 1211 1211 nil nil nil nil #s(yas--field 3 1213 1213 nil nil nil nil #s(yas--exit 1214 nil))) #s(yas--field 3 1213 1213 nil nil nil nil #s(yas--exit 1214 nil))) #s(yas--exit 1214 nil) 45 nil #s(yas--field 1 1209 1209 nil nil nil nil #s(yas--field 2 1211 1211 nil nil nil nil #s(yas--field 3 1213 1213 nil nil nil nil #s(yas--exit 1214 nil)))) nil nil)) (1205 . 1214) (#("Log($1, $2, $3)$0" 0 17 (fontified nil)) . 1205) (1205 . 1222) (#("Log(…)" 0 6 (fontified nil)) . -1205) (1205 . 1211) (1199 . 1205) (#("L" 0 1 (face font-lock-type-face fontified t)) . -1199) (undo-tree-id983 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1200) (undo-tree-id984 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1201) (undo-tree-id985 . -1) 1202 (1199 . 1202) (1195 . 1199)) nil (25814 45965 913015 271000) 0 nil])
([nil nil ((1446 . 1448)) nil (25814 45965 912914 961000) 0 nil])
([nil nil ((1187 . 1195) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1187) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1188) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1189) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1190) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (#(":" 0 1 (fontified t)) . -1191) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (#(":" 0 1 (fontified t)) . -1192) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (#("*" 0 1 (fontified t)) . -1193) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (#(";" 0 1 (fontified t)) . -1194) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) 1195 (t 25814 45965 957913 69000)) nil (25814 45989 391549 804000) 0 nil])
([nil nil ((#("		use Self::*;
" 0 2 (fontified t) 2 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 10 (face font-lock-type-face fontified t) 10 14 (fontified t) 14 15 (fontified t)) . 1181) (undo-tree-id1038 . -10) (undo-tree-id1039 . 1) (undo-tree-id1040 . -14) (undo-tree-id1041 . -15) (undo-tree-id1042 . 1) (undo-tree-id1043 . -10) (undo-tree-id1044 . -10) (undo-tree-id1045 . -10) (undo-tree-id1046 . -10) (undo-tree-id1047 . -10) (undo-tree-id1048 . -10) (undo-tree-id1049 . -10) (undo-tree-id1050 . -10) (undo-tree-id1051 . -10) (undo-tree-id1052 . -10) (undo-tree-id1053 . -10) (undo-tree-id1054 . -15) 1191 (t 25814 45989 401235 317000)) nil (25814 45995 827871 328000) 0 nil])
([nil nil ((1204 . 1206) (1187 . 1204) (#("Log" 0 3 (fontified nil)) . 1187) (1187 . 1190) (#("LogErrorContext::" 0 17 (fontified nil)) . -1187) (1187 . 1204) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -1187) (undo-tree-id1055 . -3) (undo-tree-id1056 . -3) 1190 (1183 . 1190) (1180 . 1183) (t 25814 45995 827898 946000)) nil (25814 46004 98632 571000) 0 nil])
([nil nil ((1451 . 1461) (#("data" 0 4 (fontified nil)) . 1451) (undo-tree-id1057 . -4) (1450 . 1451) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1450 1461 nil nil nil t #s(yas--exit 1462 nil))) #s(yas--exit 1462 nil) 80 nil #s(yas--field 1 1450 1461 nil nil nil t #s(yas--exit 1462 nil)) nil nil)) (1445 . 1455) (#("link(${1:data})$0" 0 17 (fontified nil)) . 1445) (1445 . 1462) (#("link" 0 4 (fontified nil)) . 1445) (1445 . 1449) (#("link(…) (as Linkable)" 0 21 (fontified nil)) . -1445) (1445 . 1466) (#("link" 0 4 (fontified t)) . -1445) (undo-tree-id1058 . -4) 1449 (1437 . 1449) (1418 . 1422) 1433 (1418 . 1433) (1413 . 1418) (1412 . 1413) (apply yas--snippet-revive 1404 1412 #s(yas--snippet nil (#s(yas--field 1 1409 1411 nil nil nil t #s(yas--exit 1412 nil))) #s(yas--exit 1412 nil) 79 nil #s(yas--field 1 1409 1411 nil nil nil t #s(yas--exit 1412 nil)) nil nil)) (1410 . 1411) (#("data" 0 4 (fontified nil)) . 1410) (1409 . 1410) (168 . 199) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1409 1411 nil nil nil t #s(yas--exit 1412 nil))) #s(yas--exit 1412 nil) 79 nil #s(yas--field 1 1409 1411 nil nil nil t #s(yas--exit 1412 nil)) nil nil)) (1373 . 1383) (#("link(${1:data})$0" 0 17 (fontified nil)) . 1373) (1373 . 1390) (#("link" 0 4 (fontified nil)) . 1373) (1373 . 1377) (#("link(…) (use crate::linkable::Linkable)" 0 39 (fontified nil)) . -1373) (1373 . 1412) (#("link" 0 4 (fontified t)) . -1373) (undo-tree-id1059 . -4) 1377 (1372 . 1377) (t 25814 46004 101228 370000)) nil (25814 46049 577820 611000) 0 nil])
([nil nil ((apply yas--snippet-revive 1445 1462 #s(yas--snippet nil (#s(yas--field 1 1450 1461 nil nil nil t #s(yas--exit 1462 nil))) #s(yas--exit 1462 nil) 80 nil #s(yas--field 1 1450 1461 nil nil nil t #s(yas--exit 1462 nil)) nil nil))) nil (25814 46059 781327 609000) 0 nil])
([nil nil ((1455 . 1456) (t 25814 46049 587873 559000)) nil (25814 46059 781323 447000) 0 nil])
([nil nil ((apply yas--snippet-revive 1588 1596 #s(yas--snippet nil (#s(yas--field 1 1593 1595 nil nil nil t #s(yas--exit 1596 nil))) #s(yas--exit 1596 nil) 81 nil #s(yas--field 1 1593 1595 nil nil nil t #s(yas--exit 1596 nil)) nil nil)) (1594 . 1595) (#("data" 0 4 (fontified nil)) . 1594) (1593 . 1594) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1593 1595 nil nil nil t #s(yas--exit 1596 nil))) #s(yas--exit 1596 nil) 81 nil #s(yas--field 1 1593 1595 nil nil nil t #s(yas--exit 1596 nil)) nil nil)) (1588 . 1598) (#("link(${1:data})$0" 0 17 (fontified nil)) . 1588) (1588 . 1605) (#("link" 0 4 (fontified nil)) . 1588) (1588 . 1592) (#("link(…) (as Linkable)" 0 21 (fontified nil)) . -1588) (1588 . 1609) (#("link" 0 4 (fontified t)) . -1588) (undo-tree-id1060 . -4) 1592 (1587 . 1592) (1543 . 1545) (#("f" 0 1 (face font-lock-string-face fontified t)) . -1543) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1544) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1545) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) 1546 (1340 . 1342) (#("f" 0 1 (face font-lock-string-face fontified t)) . -1340) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1341) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1342) (undo-tree-id1071 . -1) 1343 (#(" " 0 1 (face font-lock-string-face fontified t)) . -1560) (undo-tree-id1072 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1561) (undo-tree-id1073 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1562) (undo-tree-id1074 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1563) (undo-tree-id1075 . -1) 1564 (#("{" 0 1 (face font-lock-string-face fontified t)) . -1564) (undo-tree-id1076 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -1565) (undo-tree-id1077 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -1566) (undo-tree-id1078 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1567) (undo-tree-id1079 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1568) (undo-tree-id1080 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1569) (undo-tree-id1081 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1570) (undo-tree-id1082 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -1571) (undo-tree-id1083 . -1) (#("_" 0 1 (face font-lock-string-face fontified t)) . -1572) (undo-tree-id1084 . -1) (#("l" 0 1 (face font-lock-string-face fontified nil)) . -1573) (undo-tree-id1085 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -1574) (undo-tree-id1086 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1575) (undo-tree-id1087 . -1) (#("k" 0 1 (face font-lock-string-face fontified t)) . -1576) (undo-tree-id1088 . -1) (#("}" 0 1 (face rust-string-interpolation fontified t)) . -1577) (undo-tree-id1089 . -1) 1578 (#("." 0 1 (fontified t)) . -1607) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) 1608 (1599 . 1608) (1585 . 1589) 1595 (1585 . 1595) (1580 . 1585) (1579 . 1580) (#("," 0 1 (fontified t)) . -1579) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) 1580 (1579 . 1580) (1576 . 1578) (1555 . 1576) (1548 . 1555) (t 25814 46059 791202 80000)) nil (25814 46134 861454 541000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1704) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -1705) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (#(" " 0 1 (fontified t)) . -1706) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (#("f" 0 1 (face font-lock-function-name-face fontified t)) . -1707) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (#("m" 0 1 (face font-lock-function-name-face fontified t)) . -1708) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (#("t" 0 1 (face font-lock-function-name-face fontified t)) . -1709) (undo-tree-id1104 . -1) 1710 (1704 . 1710) (1702 . 1704) (#("	" 0 1 (fontified nil)) . -1703) (undo-tree-id1105 . -1) (1704 . 1705) (1702 . 1704) (1700 . 1702) (1692 . 1700) (#("Log" 0 3 (fontified nil)) . 1692) (1692 . 1695) (#("LogError" 0 8 (fontified nil)) . -1692) (1692 . 1700) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -1692) (undo-tree-id1106 . -3) 1695 (1675 . 1695) (1673 . 1675) (t 25814 46134 871166 708000)) nil (25814 47751 68372 945000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1799) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (1800 . 1801) (1796 . 1800) (1784 . 1796) (1781 . 1784) (1779 . 1781) (1769 . 1779) (#("LogE" 0 4 (fontified nil)) . 1769) (1769 . 1773) (#("LogError::" 0 10 (fontified nil)) . -1769) (1769 . 1779) (#("LogE" 0 4 (face font-lock-type-face fontified t)) . -1769) (undo-tree-id1112 . -4) 1773 (1765 . 1773) (1762 . 1765) (#("	" 0 1 (fontified nil)) . -1764) (undo-tree-id1113 . -1) (1765 . 1766) (1762 . 1765) (1760 . 1762) (1754 . 1760) (#("Resu" 0 4 (fontified nil)) . 1754) (1754 . 1758) (#("Result" 0 6 (fontified nil)) . -1754) (1754 . 1760) (#("Resu" 0 4 (face font-lock-type-face fontified t)) . -1754) (undo-tree-id1114 . -4) 1758 (1740 . 1758) (1731 . 1740) (#("Form" 0 4 (fontified nil)) . 1731) (1731 . 1735) (#("Formatter" 0 9 (fontified nil)) . -1731) (1731 . 1740) (#("Form" 0 4 (face font-lock-type-face fontified t)) . -1731) (undo-tree-id1115 . -4) 1735 (1730 . 1735) (1709 . 1730) (1704 . 1709) (#("f" 0 1 (fontified t)) . -1704) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (#("m" 0 1 (fontified t)) . -1705) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) 1706 (1704 . 1706) (t 25814 47751 73774 75000)) nil (25814 47895 509870 169000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 1814 1815 nil nil nil nil nil)) nil 85 nil nil nil nil)) (1796 . 1829) (#("
			NoLogChannel(${0:_}) => todo!(),
" 0 4 (fontified nil) 4 26 (fontified nil) 26 27 (syntax-table (1) fontified nil) 27 37 (fontified nil)) . 1796) (1833 . 1835) (1797 . 1800) (#("    " 0 4 (fontified nil)) . 1797) (1797 . 1834) (#("		" 0 2 (fontified t)) . 1797) 1796 (t 25814 47895 560388 330000)) nil (25814 47944 631810 964000) 0 nil])
([nil nil ((apply yas--snippet-revive 1796 1829 #s(yas--snippet nil (#s(yas--field 0 1814 1815 nil nil nil nil nil)) nil 85 nil nil nil nil))) nil (25814 47944 631808 739000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -1661) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (#("L" 0 1 (face font-lock-type-face fontified t)) . -1662) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1663) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1664) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1665) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -1666) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1667) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1668) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (#(")" 0 1 (fontified t)) . -1669) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) 1670 (1797 . 1800) (#("    " 0 4 (fontified t)) . 1797)) nil (25814 47944 631803 20000) 0 nil])
([nil nil ((1833 . 1841) (1825 . 1833) (#("," 0 1 (face font-lock-string-face fontified t)) . -1825) (undo-tree-id1149 . -1) 1826 (#("(" 0 1 (fontified t)) . -1803) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (#("_" 0 1 (fontified t)) . -1804) (undo-tree-id1153 . -1) (#(")" 0 1 (fontified t)) . -1805) (undo-tree-id1154 . 1) (undo-tree-id1155 . -1) 1806 (1818 . 1828) (#(" " 0 1 (fontified t)) . -1818) (undo-tree-id1156 . -1) (#("," 0 1 (fontified t)) . -1819) (undo-tree-id1157 . -1) 1820 (1807 . 1820) (#("=" 0 1 (fontified t)) . -1807) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -1808) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (#(" " 0 1 (fontified t)) . -1809) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (#("t" 0 1 (fontified t)) . -1810) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (#("o" 0 1 (fontified t)) . -1811) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (#("d" 0 1 (fontified t)) . -1812) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (#("o" 0 1 (fontified t)) . -1813) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (#("!" 0 1 (fontified t)) . -1814) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (#("(" 0 1 (fontified t)) . -1815) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (#(")" 0 1 (fontified t)) . -1816) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) 1817 (t 25814 47944 640369 808000)) nil (25814 48184 569766 197000) 0 nil])
([nil nil ((#("impl Display for LogError {
	fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
		use LogError::*;
		match self {
			NoLogChannel => write!(f, \"no log channel set up\")
		}
	}
}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 25 (face font-lock-type-face fontified t) 25 28 (fontified t) 28 29 (fontified t) 29 31 (face font-lock-keyword-face fontified t) 31 32 (fontified t) 32 35 (face font-lock-function-name-face fontified t) 35 36 (fontified t) 36 37 (face rust-ampersand-face fontified t) 37 41 (face font-lock-keyword-face fontified t) 41 43 (fontified t) 43 44 (face font-lock-variable-name-face fontified t) 44 46 (fontified t) 46 47 (face rust-ampersand-face fontified t) 47 50 (face font-lock-keyword-face fontified t) 50 51 (fontified t) 51 54 (face font-lock-constant-face fontified t) 54 56 (fontified t) 56 65 (face font-lock-type-face fontified t) 65 67 (fontified t) 67 68 (face font-lock-variable-name-face fontified t) 68 72 (fontified t) 72 73 (fontified t syntax-table (1)) 73 74 (fontified t) 74 77 (face font-lock-constant-face fontified t) 77 79 (fontified t) 79 85 (face font-lock-type-face fontified t) 85 88 (fontified t) 88 90 (fontified t) 90 93 (face font-lock-keyword-face fontified t) 93 94 (fontified t) 94 102 (face font-lock-type-face fontified t) 102 107 (fontified t) 107 109 (fontified t) 109 114 (face font-lock-keyword-face fontified t) 114 115 (fontified t) 115 119 (face font-lock-keyword-face fontified t) 119 121 (fontified t) 121 122 (fontified t) 122 125 (fontified t) 125 137 (face font-lock-type-face fontified t) 137 139 (fontified t) 139 140 (syntax-table (1) fontified t) 140 141 (fontified t) 141 147 (face rust-builtin-formatting-macro fontified t) 147 151 (fontified t) 151 174 (face font-lock-string-face fontified t) 174 175 (fontified t) 175 176 (fontified t) 176 178 (fontified t) 178 179 (fontified t) 179 180 (fontified t) 180 182 (fontified t) 182 183 (fontified t) 183 184 (fontified t) 184 185 (fontified t) 185 186 (fontified t)) . 1666) (undo-tree-id1195 . -185) (undo-tree-id1196 . 11) (undo-tree-id1197 . -185) (undo-tree-id1198 . -185) (undo-tree-id1199 . -66) (undo-tree-id1200 . -87) (undo-tree-id1201 . 11) (undo-tree-id1202 . -167) (undo-tree-id1203 . -185) (undo-tree-id1204 . -186) (t 25814 48184 580275 302000)) nil (25814 48201 854896 9000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -1799) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (#("l" 0 1 (fontified t)) . -1800) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (#("o" 0 1 (fontified t)) . -1801) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (#("g" 0 1 (fontified t)) . -1802) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (#("_" 0 1 (fontified t)) . -1803) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (#("t" 0 1 (fontified t)) . -1804) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (#("y" 0 1 (fontified t)) . -1805) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (#("p" 0 1 (fontified t)) . -1806) (undo-tree-id1192 . -1) (#("e" 0 1 (fontified t)) . -1807) (undo-tree-id1193 . -1) (#(")" 0 1 (fontified t)) . -1808) (undo-tree-id1194 . -1) 1809) nil (25814 48201 854883 384000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -1852) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (#("`" 0 1 (face font-lock-string-face fontified t)) . -1853) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (#("{" 0 1 (face font-lock-string-face fontified t)) . -1854) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -1855) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (#("`" 0 1 (face font-lock-string-face fontified t)) . -1856) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) 1857 (#("o" 0 1 (face font-lock-string-face fontified t)) . -1856) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -1857) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (#("_" 0 1 (face font-lock-string-face fontified t)) . -1858) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1859) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (#("y" 0 1 (face font-lock-string-face fontified t)) . -1860) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (#("p" 0 1 (face font-lock-string-face fontified t)) . -1861) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1862) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (#("}" 0 1 (face rust-string-interpolation fontified t)) . -1863) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) 1864 (t 25814 48201 863601 619000)) nil (25814 48214 773595 760000) 0 nil])
([nil nil ((174 . 187) (169 . 174) (#("Error" 0 5 (fontified nil)) . -169) (169 . 174) (153 . 169) (152 . 153) (#("
" 0 1 (fontified t)) . -376) (undo-tree-id1310 . -1) (#("u" 0 1 (fontified t)) . -377) (undo-tree-id1311 . -1) (#("s" 0 1 (fontified t)) . -378) (undo-tree-id1312 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -379) (undo-tree-id1313 . -1) (#(" " 0 1 (fontified t)) . -380) (undo-tree-id1314 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -381) (undo-tree-id1315 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -382) (undo-tree-id1316 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -383) (undo-tree-id1317 . -1) 384 (382 . 384) (377 . 382) (376 . 377) (1867 . 1868) (#("
" 0 1 (fontified t)) . -1867) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (#("i" 0 1 (fontified t)) . -1868) (undo-tree-id1321 . -1) (#("m" 0 1 (fontified t)) . -1869) (undo-tree-id1322 . -1) (#("p" 0 1 (fontified t)) . -1870) (undo-tree-id1323 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -1871) (undo-tree-id1324 . -1) (#(" " 0 1 (fontified t)) . -1872) (undo-tree-id1325 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1873) (undo-tree-id1326 . -1) (#("r" 0 1 (face font-lock-type-face fontified nil)) . -1874) (undo-tree-id1327 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1875) (undo-tree-id1328 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1876) (undo-tree-id1329 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1877) (undo-tree-id1330 . -1) 1878 (1868 . 1878) (t 25814 48214 780263 27000)) nil (25814 48305 294184 944000) 0 nil])
([nil nil ((#("use std::error::Error as StdError;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 9 (fontified t) 9 14 (face font-lock-constant-face fontified t) 14 16 (fontified t) 16 21 (face font-lock-type-face fontified t) 21 22 (fontified t) 22 24 (face font-lock-keyword-face fontified t) 24 25 (fontified t) 25 33 (face font-lock-type-face fontified t) 33 34 (fontified t) 34 35 (fontified t)) . 153) (undo-tree-id1331 . 1) (undo-tree-id1332 . -34) (undo-tree-id1333 . 1) (undo-tree-id1334 . -33) (undo-tree-id1335 . -33) 186 (t 25814 48305 310225 835000)) nil (25814 48308 492777 180000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1897) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (1898 . 1899) (1896 . 1898) (1894 . 1896) (1886 . 1894) (#("LogE" 0 4 (fontified nil)) . 1886) (1886 . 1890) (#("LogError" 0 8 (fontified nil)) . -1886) (1886 . 1894) (#("LogE" 0 4 (face font-lock-type-face fontified t)) . -1886) (undo-tree-id1340 . -4) (undo-tree-id1341 . -4) (undo-tree-id1342 . -4) (undo-tree-id1343 . -4) (undo-tree-id1344 . -4) (undo-tree-id1345 . -4) (undo-tree-id1346 . -4) 1890 (1881 . 1890) (1873 . 1881) (#("StdEr" 0 5 (fontified nil)) . 1873) (1873 . 1878) (#("StdError" 0 8 (fontified nil)) . -1873) (1873 . 1881) (#("StdEr" 0 5 (face font-lock-type-face fontified t)) . -1873) (undo-tree-id1347 . -5) 1878 (1873 . 1878) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1873) (undo-tree-id1348 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1874) (undo-tree-id1349 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1875) (undo-tree-id1350 . -1) 1876 (1868 . 1876) (1866 . 1868) (t 25814 48308 500224 514000)) nil (25814 48341 202113 344000) 0 nil])
([nil nil ((1032 . 1048) (1031 . 1032) (t 25814 48341 213544 269000)) nil (25814 48364 863121 315000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1913) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) 1914 (#("
" 0 1 (fontified t)) . -1913) (undo-tree-id1358 . -1) (#("	" 0 1 (fontified t)) . -1914) (undo-tree-id1359 . -1) 1915 (1913 . 1915) (t 25814 48364 876867 740000)) nil (25814 48480 156358 745000) 0 nil])
([nil nil ((#("		.ok_or(LogError::NoErrorChannel(guild, log_type))?;
" 0 9 (fontified t) 9 17 (face font-lock-type-face fontified t) 17 19 (fontified t) 19 33 (face font-lock-type-face fontified t) 33 51 (fontified t) 51 52 (face rust-question-mark fontified t) 52 54 (fontified t)) . 3857) (undo-tree-id1360 . -31) (undo-tree-id1361 . -53) (undo-tree-id1362 . -31) (undo-tree-id1363 . -31) (undo-tree-id1364 . -31) (undo-tree-id1365 . -31) (undo-tree-id1366 . -31) (undo-tree-id1367 . -31) (undo-tree-id1368 . -31) (undo-tree-id1369 . -31) (undo-tree-id1370 . -31) (undo-tree-id1371 . -31) (undo-tree-id1372 . -31) (undo-tree-id1373 . -31) (undo-tree-id1374 . -31) (undo-tree-id1375 . -31) (undo-tree-id1376 . -31) (undo-tree-id1377 . -54) 3888 (t 25814 48480 163485 931000)) nil (25815 53020 366406 389000) 0 nil])
([nil nil ((3856 . 3857)) nil (25815 53020 366366 913000) 0 nil])
([nil nil ((3697 . 3710) (3690 . 3697) (#("R" 0 1 (face font-lock-type-face fontified t)) . -3690) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3691) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -3692) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -3693) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -3694) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -3695) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (#("<" 0 1 (fontified t)) . -3696) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (#("s" 0 1 (fontified t)) . -3697) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (#("e" 0 1 (fontified nil)) . -3698) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (#("r" 0 1 (fontified t)) . -3699) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (#(":" 0 1 (fontified t)) . -3700) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (#(":" 0 1 (fontified t)) . -3701) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -3702) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3703) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -3704) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3705) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -3706) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) 3707 (3703 . 3707) (3690 . 3703) (#("R" 0 1 (face font-lock-type-face fontified t)) . -3690) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3691) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -3692) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -3693) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -3694) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -3695) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (#("<" 0 1 (fontified t)) . -3696) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (#("s" 0 1 (fontified t)) . -3697) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (#("e" 0 1 (fontified t)) . -3698) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) 3699 (#("r" 0 1 (fontified t)) . -3699) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (#(":" 0 1 (fontified t)) . -3700) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (#(":" 0 1 (fontified t)) . -3701) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -3702) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3703) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -3704) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -3705) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -3706) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -3707) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3708) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (#("," 0 1 (fontified nil)) . -3709) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (#(" " 0 1 (fontified t)) . -3710) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (#("L" 0 1 (face font-lock-type-face fontified t)) . -3711) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3712) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -3713) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -3714) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3715) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3716) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3717) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3718) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (#(">" 0 1 (fontified t)) . -3719) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) 3720 (t 25815 53020 370318 98000)) nil (25815 53072 744287 586000) 0 nil])
([nil nil ((281 . 288) (277 . 281) (276 . 277) (t 25815 53072 750308 85000)) nil (25815 53114 858615 35000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . 261)) nil (25815 53114 858613 636000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . -273) (undo-tree-id1501 . -1) 274) nil (25815 53114 858612 608000) 0 nil])
([nil nil ((291 . 293) (#(":" 0 1 (fontified t)) . -291) (undo-tree-id1497 . -1) (#(":" 0 1 (fontified t)) . -292) (undo-tree-id1498 . -1) 293 (284 . 293) (#(":" 0 1 (fontified t)) . -284) (undo-tree-id1499 . -1) (#(":" 0 1 (fontified t)) . -285) (undo-tree-id1500 . -1) 286) nil (25815 53114 858609 888000) 0 nil])
([nil nil ((293 . 300) (#("E" 0 1 (face font-lock-type-face fontified t)) . -293) (undo-tree-id1496 . -1) 294 (293 . 294)) nil (25815 53114 858602 450000) 0 nil])
([nil nil ((291 . 292) (t 25815 53114 870267 222000)) nil (25815 53123 398076 138000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -404) (undo-tree-id1502 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -405) (undo-tree-id1503 . -1) 406 (405 . 406) (404 . 405) (t 25815 53123 400257 127000)) nil (25815 53145 218699 308000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -3110) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (#("n" 0 1 (fontified t)) . -3111) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (#("y" 0 1 (fontified t)) . -3112) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (#("h" 0 1 (fontified t)) . -3113) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (#("o" 0 1 (fontified t)) . -3114) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (#("w" 0 1 (fontified t)) . -3115) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (#(":" 0 1 (fontified t)) . -3116) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (#(":" 0 1 (fontified t)) . -3117) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) 3118 (t 25815 53145 230231 856000)) nil (25815 55498 893134 961000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -3183) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -3184) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) 3185 (3183 . 3185) (t 25815 55498 899186 433000)) nil (25815 55711 924610 292000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -3421) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -3422) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) 3423 (3421 . 3423) (t 25815 55672 279159 394000)) nil (25815 55774 321336 414000) 0 nil] [nil nil ((3200 . 3203) (#("op" 0 2 (fontified nil)) . 3200) (undo-tree-id1769 . -2) (3199 . 3200) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3199 3201 nil nil nil t #s(yas--exit 3202 nil))) #s(yas--exit 3202 nil) 121 nil #s(yas--field 1 3199 3201 nil nil nil t #s(yas--exit 3202 nil)) nil nil)) (3191 . 3202) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 3191) (3191 . 3209) (#("map" 0 3 (fontified nil)) . 3191) (3191 . 3194) (#("map_err(…)" 0 10 (fontified nil)) . -3191) (3191 . 3201) (#("map" 0 3 (fontified t)) . -3191) (undo-tree-id1770 . -3) 3194 (3191 . 3194) (3182 . 3190) (#("		" 0 2 (fontified t)) . -3182) 3184 (3184 . 3184) (3184 . 3185) (3181 . 3184) (t 25815 55672 279159 394000)) ((#("
		" 0 1 (fontified t) 1 3 (fontified nil)) . 3181) (undo-tree-id1771 . -3) (undo-tree-id1772 . -3) (undo-tree-id1773 . -3) (undo-tree-id1774 . -1) (undo-tree-id1775 . -3) (#("." 0 1 (fontified nil)) . 3184) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (3182 . 3184) (#("        " 0 8 (fontified nil)) . 3182) (#("map" 0 3 (fontified nil)) . 3191) (undo-tree-id1780 . -3) (3191 . 3194) (#("map_err(…)" 0 10 (fontified nil)) . 3191) (3191 . 3201) (#("map" 0 3 (fontified nil)) . 3191) (3191 . 3194) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 3191) (3191 . 3209) (#("map_err(op)" 0 8 (fontified nil) 8 10 (fontified nil) 10 11 (fontified nil)) . 3191) (undo-tree-id1781 . 1) (undo-tree-id1782 . -8) (undo-tree-id1783 . -8) (undo-tree-id1784 . -8) (undo-tree-id1785 . -8) (apply yas--snippet-revive 3191 3202 #s(yas--snippet nil (#s(yas--field 1 3199 3201 nil nil nil t #s(yas--exit 3202 nil))) #s(yas--exit 3202 nil) 121 nil #s(yas--field 1 3199 3201 nil nil nil t #s(yas--exit 3202 nil)) nil nil)) (#("|" 0 1 (fontified nil)) . 3199) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (3200 . 3202) (#("e| " 0 3 (fontified t)) . 3200) (undo-tree-id1789 . -2) (undo-tree-id1790 . -2) (undo-tree-id1791 . -3) (undo-tree-id1792 . -2)) (25815 55711 921477 979000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3181) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (#(" " 0 1 (fontified t)) . -3182) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (#(" " 0 1 (fontified t)) . -3183) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (#(" " 0 1 (fontified t)) . -3184) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (#(" " 0 1 (fontified t)) . -3185) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (#(" " 0 1 (fontified t)) . -3186) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (#(" " 0 1 (fontified t)) . -3187) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (#(" " 0 1 (fontified t)) . -3188) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (#(" " 0 1 (fontified t)) . -3189) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) 3190 (#(".map_err(|e| Error)" 0 1 (fontified t) 1 13 (fontified t) 13 18 (face font-lock-type-face fontified t) 18 19 (fontified t)) . 3190) (undo-tree-id1843 . -19) (undo-tree-id1844 . -9) (undo-tree-id1845 . 1) (undo-tree-id1846 . -19) (apply yas--snippet-revive 3191 3209 #s(yas--snippet nil (#s(yas--field 1 3199 3208 nil nil nil t #s(yas--exit 3209 nil))) #s(yas--exit 3209 nil) 126 nil #s(yas--field 1 3199 3208 nil nil nil t #s(yas--exit 3209 nil)) nil nil)) (3203 . 3208) (3200 . 3203) (#("op" 0 2 (fontified nil)) . 3200) (3199 . 3200) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3199 3208 nil nil nil t #s(yas--exit 3209 nil))) #s(yas--exit 3209 nil) 126 nil #s(yas--field 1 3199 3208 nil nil nil t #s(yas--exit 3209 nil)) nil nil)) (3191 . 3202) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 3191) (3191 . 3209) (#("map" 0 3 (fontified nil)) . 3191) (3191 . 3194) (#("map_err(…)" 0 10 (fontified nil)) . -3191) (3191 . 3201) (#("map" 0 3 (fontified t)) . -3191) (undo-tree-id1847 . -3) 3194 (3191 . 3194) (3182 . 3190) (#("		" 0 2 (fontified t)) . -3182) 3184 (3184 . 3184) (3184 . 3185) (3181 . 3184) (t 25815 55774 329140 745000)) nil (25815 55923 164782 409000) 0 nil])
nil
([nil nil ((3194 . 3197) (3181 . 3194) (t 25815 55923 172444 37000)) nil (25815 56173 706273 22000) 0 nil])
([nil nil ((3182 . 3189) (#("map_err" 0 7 (fontified nil)) . 3182) (3182 . 3189) (#("map_err" 0 7 (fontified t)) . -3182) (undo-tree-id1848 . -3) (undo-tree-id1849 . -7) (undo-tree-id1850 . -7) 3189 (3187 . 3189) (3186 . 3187) (3185 . 3186) (t 25815 56173 722387 961000)) nil (25815 56205 865391 163000) 0 nil])
([nil nil ((#("::errors" 0 2 (fontified t) 2 8 (face font-lock-constant-face fontified t)) . -284) (undo-tree-id1851 . -8) 292 (294 . 303) (300 . 307) (apply yas--snippet-revive 3182 3188 #s(yas--snippet nil nil #s(yas--exit 3188 nil) 133 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3188 nil) 133 nil nil nil nil)) (3182 . 3188) (#("meii()$0" 0 8 (fontified nil)) . 3182) (3182 . 3190) (#("mei" 0 3 (fontified nil)) . 3182) (3182 . 3185) (#("meii() (use crate::errors::MEII)" 0 32 (fontified nil)) . -3182) (3182 . 3214) (#("mei" 0 3 (fontified t)) . -3182) (undo-tree-id1852 . -3) (undo-tree-id1853 . -3) (undo-tree-id1854 . -3) (undo-tree-id1855 . -3) (undo-tree-id1856 . -3) 3185 (3181 . 3185) (#("." 0 1 (fontified t)) . -3181) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (#("m" 0 1 (fontified t)) . -3182) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (#("a" 0 1 (fontified t)) . -3183) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (#("p" 0 1 (fontified t)) . -3184) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (#("_" 0 1 (fontified t)) . -3185) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (#("e" 0 1 (fontified t)) . -3186) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (#("r" 0 1 (fontified t)) . -3187) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (#("r" 0 1 (fontified t)) . -3188) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (#("(" 0 1 (fontified t)) . -3189) (undo-tree-id1884 . 1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -3190) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -3191) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -3192) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3193) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (#(":" 0 1 (fontified t)) . -3194) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (#(":" 0 1 (fontified t)) . -3195) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (#("i" 0 1 (fontified t)) . -3196) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -3197) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (#("t" 0 1 (fontified t)) . -3198) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (#("o" 0 1 (fontified t)) . -3199) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (#(")" 0 1 (fontified t)) . -3200) (undo-tree-id1911 . -1) 3201 (apply yas--snippet-revive 3329 3348 #s(yas--snippet nil (#s(yas--field 1 3337 3347 nil nil nil t #s(yas--exit 3348 nil))) #s(yas--exit 3348 nil) 128 nil #s(yas--field 1 3337 3347 nil nil nil t #s(yas--exit 3348 nil)) nil nil)) (3346 . 3347) (#("o" 0 1 (fontified t)) . -3346) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) 3347 (3338 . 3347) (#("op" 0 2 (fontified nil)) . 3338) (3337 . 3338) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3337 3347 nil nil nil t #s(yas--exit 3348 nil))) #s(yas--exit 3348 nil) 128 nil #s(yas--field 1 3337 3347 nil nil nil t #s(yas--exit 3348 nil)) nil nil)) (3329 . 3340) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 3329) (3329 . 3347) (#("map" 0 3 (fontified nil)) . 3329) (3329 . 3332) (#("map_err(…)" 0 10 (fontified nil)) . -3329) (3329 . 3339) (#("map" 0 3 (fontified t)) . -3329) (undo-tree-id1914 . -3) 3332 (3328 . 3332) (t 25815 56205 869047 94000)) nil (25815 56921 811606 490000) 0 nil])
([nil nil ((3326 . 3330) (#("p" 0 1 (fontified t)) . -3326) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (#("_" 0 1 (fontified t)) . -3327) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (#("e" 0 1 (fontified t)) . -3328) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (#("r" 0 1 (fontified t)) . -3329) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (#("r" 0 1 (fontified t)) . -3330) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (#("(" 0 1 (fontified t)) . -3331) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -3332) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -3333) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (#("t" 0 1 (face font-lock-type-face fontified nil)) . -3334) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3335) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (#(":" 0 1 (fontified t)) . -3336) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (#(":" 0 1 (fontified t)) . -3337) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (#("i" 0 1 (fontified t)) . -3338) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -3339) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (#("t" 0 1 (fontified t)) . -3340) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (#("o" 0 1 (fontified t)) . -3341) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (#(")" 0 1 (fontified t)) . -3342) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) 3343 (t 25815 56921 815535 559000)) nil (25815 56933 663135 510000) 0 nil])
([nil nil ((3325 . 3326) (#("a" 0 1 (fontified t)) . 3325) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (t 25815 56933 682199 173000)) nil (25815 56943 180918 818000) 0 nil])
([nil nil ((3323 . 3326) (t 25815 56943 182196 716000)) nil (25815 56947 176014 350000) 0 nil])
([nil nil ((3445 . 3448) (apply yas--snippet-revive 3446 3452 #s(yas--snippet nil nil #s(yas--exit 3452 nil) 134 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3452 nil) 134 nil nil nil nil)) (3446 . 3452) (#("meii()$0" 0 8 (fontified nil)) . 3446) (3446 . 3454) (#("meii() (as MEII)" 0 16 (fontified nil)) . -3446) (3446 . 3462) (3445 . 3446) (t 25815 56947 185529 11000)) nil (25815 57031 438211 372000) 0 nil])
([nil nil ((apply yas--snippet-revive 3552 3558 #s(yas--snippet nil nil #s(yas--exit 3558 nil) 135 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3558 nil) 135 nil nil nil nil)) (3552 . 3558) (#("meii()$0" 0 8 (fontified nil)) . 3552) (3552 . 3560) (#("meii" 0 4 (fontified nil)) . 3552) (3552 . 3556) (#("meii() (as MEII)" 0 16 (fontified nil)) . -3552) (3552 . 3568) (#("meii" 0 4 (fontified t)) . -3552) (undo-tree-id1967 . -4) (undo-tree-id1968 . -4) (undo-tree-id1969 . -4) 3556 (3552 . 3556) (3543 . 3551) (#("		" 0 2 (fontified t)) . -3543) (undo-tree-id1970 . -2) 3545 (3545 . 3545) (3545 . 3546) (3542 . 3545) (t 25815 57031 438840 526000)) nil (25815 57049 505903 273000) 0 nil])
([nil nil ((3468 . 3469) (307 . 314) (3456 . 3456) (3456 . 3461) (#("Error" 0 5 (fontified nil)) . 3456) (3456 . 3461) (#("Error (use crate::errors::Error)" 0 32 (fontified nil)) . -3456) (3456 . 3488) (#("Error" 0 5 (face font-lock-type-face fontified t)) . -3456) (undo-tree-id1971 . -5) (undo-tree-id1972 . -5) (undo-tree-id1973 . -5) (undo-tree-id1974 . -5) 3461 (3453 . 3461) (#(":" 0 1 (fontified t)) . -3453) (undo-tree-id1975 . -1) 3454 (3453 . 3454) (t 25815 57049 518835 826000)) nil (25815 57076 917211 727000) 0 nil])
([nil nil ((3572 . 3581) (t 25815 57076 922162 42000)) nil (25815 57084 331869 118000) 0 nil])
([nil nil ((3543 . 3545) (314 . 329) (3515 . 3515) (3515 . 3528) (#("Internal" 0 8 (fontified nil)) . 3515) (3515 . 3523) (#("InternalError (use crate::errors::InternalError)" 0 48 (fontified nil)) . -3515) (3515 . 3563) (#("Internal" 0 8 (face font-lock-type-face fontified t)) . -3515) (undo-tree-id1976 . -8) 3523 (3517 . 3523) (3515 . 3517) (#("S" 0 1 (face font-lock-type-face fontified t)) . -3515) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3516) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3517) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (#(":" 0 1 (fontified t)) . -3518) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (#(":" 0 1 (fontified t)) . -3519) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) 3520 (3515 . 3520) (#("I" 0 1 (face font-lock-type-face fontified t)) . -3515) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -3516) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -3517) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3518) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3519) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) 3520 (3515 . 3520) (#("I" 0 1 (face font-lock-type-face fontified t)) . -3515) (undo-tree-id1997 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -3516) (undo-tree-id1998 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -3517) (undo-tree-id1999 . -1) 3518 (3515 . 3518) (#("I" 0 1 (face font-lock-type-face fontified t)) . -3515) (undo-tree-id2000 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -3516) (undo-tree-id2001 . -1) (#("v" 0 1 (face font-lock-type-face fontified t)) . -3517) (undo-tree-id2002 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -3518) (undo-tree-id2003 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -3519) (undo-tree-id2004 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -3520) (undo-tree-id2005 . -1) 3521 (3515 . 3521) (#("
" 0 1 (fontified t)) . -1667) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (#("pub enum InternalLogError {
	
}" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 25 (face font-lock-type-face fontified t) 25 30 (fontified t) 30 31 (fontified t)) . 1668) (undo-tree-id2009 . -31) (1695 . 1697) (#("	" 0 1 (fontified nil)) . -1696) (undo-tree-id2010 . -1) (1697 . 1698) (1695 . 1697) (1693 . 1695) (1672 . 1693) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1672) (undo-tree-id2011 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1673) (undo-tree-id2012 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1674) (undo-tree-id2013 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -1675) (undo-tree-id2014 . -1) (#(" " 0 1 (fontified t)) . -1676) (undo-tree-id2015 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -1677) (undo-tree-id2016 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1678) (undo-tree-id2017 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1679) (undo-tree-id2018 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1680) (undo-tree-id2019 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1681) (undo-tree-id2020 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1682) (undo-tree-id2021 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1683) (undo-tree-id2022 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1684) (undo-tree-id2023 . -1) 1685 (1668 . 1685) (1667 . 1669) (#("a" 0 1 (fontified t)) . -3514) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (#("n" 0 1 (fontified t)) . -3515) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) 3516 (#("y" 0 1 (fontified t)) . -3516) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (#("h" 0 1 (fontified t)) . -3517) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (#("o" 0 1 (fontified t)) . -3518) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (#("w" 0 1 (fontified t)) . -3519) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (#("!" 0 1 (fontified t)) . -3520) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (#("(" 0 1 (fontified t)) . -3521) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -3522) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (#("w" 0 1 (face font-lock-string-face fontified t)) . -3523) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -3524) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -3525) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -3526) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (#("g" 0 1 (face font-lock-string-face fontified nil)) . -3527) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (#(" " 0 1 (face font-lock-string-face fontified nil)) . -3528) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -3529) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -3530) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (#("z" 0 1 (face font-lock-string-face fontified t)) . -3531) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -3532) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -3533) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (#("B" 0 1 (face font-lock-string-face fontified t)) . -3534) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (#("Y" 0 1 (face font-lock-string-face fontified t)) . -3535) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) 3536 (#("T" 0 1 (face font-lock-string-face fontified t)) . -3536) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (#("E" 0 1 (face font-lock-string-face fontified t)) . -3537) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (#("A" 0 1 (face font-lock-string-face fontified t)) . -3538) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -3539) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -3540) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -3541) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -3542) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -3543) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -3544) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -3545) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (#("_" 0 1 (face font-lock-string-face fontified t)) . -3546) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -3547) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -3548) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -3549) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -3550) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (#("n" 0 1 (face font-lock-string-face fontified nil)) . -3551) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -3552) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -3553) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -3554) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -3555) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (#(")" 0 1 (fontified t)) . -3556) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) 3557 (#("
" 0 1 (fontified t)) . -3558) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (#(" " 0 1 (fontified t)) . -3559) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (#(" " 0 1 (fontified t)) . -3560) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (#(" " 0 1 (fontified t)) . -3561) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (#(" " 0 1 (fontified t)) . -3562) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (#(" " 0 1 (fontified t)) . -3563) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (#(" " 0 1 (fontified t)) . -3564) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (#(" " 0 1 (fontified t)) . -3565) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (#(" " 0 1 (fontified t)) . -3566) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (#("." 0 1 (fontified t)) . -3567) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (#("m" 0 1 (fontified t)) . -3568) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) 3569 (#("e" 0 1 (fontified t)) . -3569) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (#("i" 0 1 (fontified nil)) . -3570) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (#("i" 0 1 (fontified t)) . -3571) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (#(":" 0 1 (fontified t)) . -3572) (undo-tree-id2138 . -1) (#(":" 0 1 (fontified t)) . -3573) (undo-tree-id2139 . -1) (#("<" 0 1 (fontified t)) . -3574) (undo-tree-id2140 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -3575) (undo-tree-id2141 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3576) (undo-tree-id2142 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3577) (undo-tree-id2143 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3578) (undo-tree-id2144 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3579) (undo-tree-id2145 . -1) (#(">" 0 1 (fontified t)) . -3580) (undo-tree-id2146 . -1) (#("(" 0 1 (fontified t)) . -3581) (undo-tree-id2147 . -1) (#(")" 0 1 (fontified t)) . -3582) (undo-tree-id2148 . -1) 3583 (t 25815 57084 332160 119000)) nil (25816 3193 11069 218000) 0 nil])
([nil nil ((#("M" 0 1 (face font-lock-type-face fontified t)) . -303) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -304) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -305) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -306) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("," 0 1 (fontified t)) . -307) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#(" " 0 1 (fontified t)) . -308) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) 309 (t 25816 3193 28333 667000)) nil (25817 10111 363202 137000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -3206) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("m" 0 1 (fontified t)) . -3207) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("e" 0 1 (fontified t)) . -3208) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("i" 0 1 (fontified t)) . -3209) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("i" 0 1 (fontified t)) . -3210) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#("(" 0 1 (fontified t)) . -3211) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#(")" 0 1 (fontified t)) . -3212) (undo-tree-id95 . -1) 3213 (t 25817 10111 381975 579000)) nil (25817 10180 699417 369000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3333) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("	" 0 1 (fontified t)) . -3334) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("	" 0 1 (fontified t)) . -3335) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("." 0 1 (fontified t)) . -3336) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (#("m" 0 1 (fontified t)) . -3337) (undo-tree-id111 . -1) (#("e" 0 1 (fontified t)) . -3338) (undo-tree-id112 . -1) (#("i" 0 1 (fontified t)) . -3339) (undo-tree-id113 . -1) (#("i" 0 1 (fontified t)) . -3340) (undo-tree-id114 . -1) (#("(" 0 1 (fontified t)) . -3341) (undo-tree-id115 . -1) (#(")" 0 1 (fontified t)) . -3342) (undo-tree-id116 . -1) 3343 (t 25817 10180 715076 245000)) nil (25817 10194 933501 403000) 0 nil])
([nil nil ((3520 . 3522) (#(":" 0 1 (fontified t)) . -3520) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (#(":" 0 1 (fontified t)) . -3521) (undo-tree-id123 . -1) (undo-tree-id124 . -1) 3522 (t 25817 10194 948362 285000)) nil (25817 10401 525488 998000) 0 nil])
([nil nil ((#("		.meii::<Error>()?
" 0 10 (fontified t) 10 15 (face font-lock-type-face fontified t) 15 18 (fontified t) 18 19 (face rust-question-mark fontified t) 19 20 (fontified t)) . 3446) (undo-tree-id119 . -19) (undo-tree-id120 . -18) 3464) nil (25817 10401 525465 902000) 0 nil])
([nil nil ((apply yas--snippet-revive 3502 3529 #s(yas--snippet nil nil #s(yas--exit 3529 nil) 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3529 nil) 9 nil nil nil nil)) (3502 . 3529) (#("InvalidByteADiscordIDFormat$0" 0 29 (fontified nil)) . 3502) (3502 . 3531) (#("InvalidByteADiscordIDFormat" 0 27 (fontified nil)) . -3502) (3502 . 3529) (3500 . 3502) (#(":" 0 1 (fontified t)) . -3500) (undo-tree-id117 . -1) (#(":" 0 1 (fontified t)) . -3501) (undo-tree-id118 . -1) 3502) nil (25817 10401 525444 649000) 0 nil])
([nil nil ((3445 . 3446) (t 25817 10401 541024 131000)) nil (25817 10455 543602 866000) 0 nil])
([nil nil ((3956 . 3964) (#("log_" 0 4 (fontified nil)) . 3956) (3956 . 3960) (#("log_type" 0 8 (fontified nil)) . -3956) (3956 . 3964) (#("log_" 0 4 (fontified t)) . -3956) (undo-tree-id125 . -4) (undo-tree-id126 . -4) (undo-tree-id127 . -4) (undo-tree-id128 . -4) (undo-tree-id129 . -4) 3960 (3956 . 3960) (#("k" 0 1 (fontified t)) . -3956) (undo-tree-id130 . -1) (#("i" 0 1 (fontified t)) . -3957) (undo-tree-id131 . -1) (#("g" 0 1 (fontified t)) . -3958) (undo-tree-id132 . -1) 3959 (3956 . 3959) (#("(" 0 1 (fontified t)) . -3956) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (#(")" 0 1 (fontified t)) . -3957) (undo-tree-id135 . -1) (undo-tree-id136 . -1) 3958 (3950 . 3954) (#("(" 0 1 (fontified t)) . -3950) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (#(")" 0 1 (fontified t)) . -3951) (undo-tree-id139 . -1) (undo-tree-id140 . -1) 3952 (3943 . 3948) (#("guild" 0 5 (fontified nil)) . 3943) (3943 . 3948) (#("guild" 0 5 (fontified t)) . -3943) (undo-tree-id141 . -5) (undo-tree-id142 . -5) 3948 (3943 . 3948) (#("(" 0 1 (fontified t)) . -3943) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#(")" 0 1 (fontified t)) . -3944) (undo-tree-id145 . -1) (undo-tree-id146 . -1) 3945 (3904 . 3907) (apply yas--snippet-revive 3936 3951 #s(yas--snippet nil (#s(yas--field 1 3940 3942 nil nil nil nil #s(yas--field 2 3944 3946 nil nil nil nil #s(yas--field 3 3948 3950 nil nil nil nil #s(yas--exit 3951 nil)))) #s(yas--field 2 3944 3946 nil nil nil nil #s(yas--field 3 3948 3950 nil nil nil nil #s(yas--exit 3951 nil))) #s(yas--field 3 3948 3950 nil nil nil nil #s(yas--exit 3951 nil))) #s(yas--exit 3951 nil) 12 nil #s(yas--field 1 3940 3942 nil nil nil nil #s(yas--field 2 3944 3946 nil nil nil nil #s(yas--field 3 3948 3950 nil nil nil nil #s(yas--exit 3951 nil)))) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3940 3942 nil nil nil nil #s(yas--field 2 3944 3946 nil nil nil nil #s(yas--field 3 3948 3950 nil nil nil nil #s(yas--exit 3951 nil)))) #s(yas--field 2 3944 3946 nil nil nil nil #s(yas--field 3 3948 3950 nil nil nil nil #s(yas--exit 3951 nil))) #s(yas--field 3 3948 3950 nil nil nil nil #s(yas--exit 3951 nil))) #s(yas--exit 3951 nil) 12 nil #s(yas--field 1 3940 3942 nil nil nil nil #s(yas--field 2 3944 3946 nil nil nil nil #s(yas--field 3 3948 3950 nil nil nil nil #s(yas--exit 3951 nil)))) nil nil)) (3936 . 3951) (#("Log(${1:()}, ${2:()}, ${3:()})$0" 0 32 (fontified nil)) . 3936) (3936 . 3968) (#("Log(…)" 0 6 (fontified nil)) . -3936) (3936 . 3942) (3934 . 3936) (3919 . 3934) (#("LogE" 0 4 (fontified nil)) . 3919) (3919 . 3923) (#("LogErrorContext" 0 15 (fontified nil)) . -3919) (3919 . 3934) (#("LogE" 0 4 (face font-lock-type-face fontified t)) . -3919) (undo-tree-id147 . -3) (undo-tree-id148 . -4) 3923 (3919 . 3923) (apply yas--snippet-revive 3905 3920 #s(yas--snippet nil (#s(yas--field 1 3919 3919 nil nil nil t #s(yas--exit 3920 nil))) #s(yas--exit 3920 nil) 10 nil #s(yas--field 1 3919 3919 nil nil nil t #s(yas--exit 3920 nil)) nil nil)) (#("L" 0 1 (face font-lock-type-face fontified t)) . -3919) (undo-tree-id149 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3920) (undo-tree-id150 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -3921) (undo-tree-id151 . -1) 3922 (3919 . 3922) (#("L" 0 1 (face font-lock-type-face fontified t)) . -3919) (undo-tree-id152 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3920) (undo-tree-id153 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -3921) (undo-tree-id154 . -1) 3922 (3920 . 3922) (#("context" 0 7 (fontified nil)) . 3920) (3919 . 3920) (323 . 341) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3919 3919 nil nil nil t #s(yas--exit 3920 nil))) #s(yas--exit 3920 nil) 10 nil #s(yas--field 1 3919 3919 nil nil nil t #s(yas--exit 3920 nil)) nil nil)) (3887 . 3909) (#("contextualize(${1:context})$0" 0 29 (fontified nil)) . 3887) (3887 . 3916) (#("contextualize(…) (use crate::errors::Contextualizable)" 0 54 (fontified nil)) . -3887) (3887 . 3941) (3886 . 3887) (t 25817 10455 557519 96000)) nil (25817 11070 702569 712000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t)) . -3917) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) 3918 (3917 . 3918) (4058 . 4060) (4037 . 4058) (4022 . 4037) (#("LogErrorCont" 0 12 (fontified nil)) . 4022) (4022 . 4034) (#("LogErrorContext" 0 15 (fontified nil)) . -4022) (4022 . 4037) (#("LogErrorCont" 0 12 (face font-lock-type-face fontified t)) . -4022) (undo-tree-id187 . -12) 4034 (4030 . 4034) (4021 . 4030) (4000 . 4021) (#("r" 0 1 (fontified t)) . -4000) (undo-tree-id188 . -1) (#("e" 0 1 (fontified t)) . -4001) (undo-tree-id189 . -1) (#("s" 0 1 (fontified t)) . -4002) (undo-tree-id190 . -1) (#("t" 0 1 (fontified t)) . -4003) (undo-tree-id191 . -1) (#("r" 0 1 (fontified t)) . -4004) (undo-tree-id192 . -1) (#("e" 0 1 (fontified t)) . -4005) (undo-tree-id193 . -1) (#("s" 0 1 (fontified t)) . -4006) (undo-tree-id194 . -1) (#("." 0 1 (fontified t)) . -4007) (undo-tree-id195 . -1) 4008 (4000 . 4008) (3999 . 4000) (#("	" 0 1 (fontified nil)) . 3998) (undo-tree-id196 . -1) (3997 . 4000) (#("t" 0 1 (fontified t)) . -3993) (undo-tree-id197 . -1) (#("h" 0 1 (fontified t)) . -3994) (undo-tree-id198 . -1) (#("r" 0 1 (fontified t)) . -3995) (undo-tree-id199 . -1) (#("o" 0 1 (fontified t)) . -3996) (undo-tree-id200 . -1) (#("w" 0 1 (fontified t)) . -3997) (undo-tree-id201 . -1) 3998 (3993 . 3998) (#("y" 0 1 (fontified t)) . -3993) (undo-tree-id202 . -1) (#("e" 0 1 (fontified t)) . -3994) (undo-tree-id203 . -1) (#("e" 0 1 (fontified t)) . -3995) (undo-tree-id204 . -1) (#("t" 0 1 (fontified t)) . -3996) (undo-tree-id205 . -1) 3997 (3993 . 3997) (3984 . 3985) (3995 . 3996) (3975 . 3975) (3975 . 3984) (3971 . 3975) (3976 . 3979) (#("." 0 1 (fontified t)) . -3979) (undo-tree-id206 . -1) (#("c" 0 1 (fontified t)) . -3980) (undo-tree-id207 . -1) (#("o" 0 1 (fontified t)) . -3981) (undo-tree-id208 . -1) (#("n" 0 1 (fontified t)) . -3982) (undo-tree-id209 . -1) 3983 (3979 . 3983) (#("	" 0 1 (fontified nil)) . -3978) (undo-tree-id210 . -1) (3979 . 3980) (3976 . 3979) (3971 . 3976) (#("l" 0 1 (fontified t)) . -3971) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#("e" 0 1 (fontified t)) . -3972) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -3973) (undo-tree-id215 . -1) (#(" " 0 1 (fontified t)) . -3974) (undo-tree-id216 . -1) 3975 (3973 . 3975) (3971 . 3973) (t 25817 11070 756009 445000)) nil (25817 12141 628673 975000) 0 nil])
([nil nil ((4000 . 4002) (apply yas--snippet-revive 3987 3999 #s(yas--snippet nil nil #s(yas--exit 3999 nil) 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3999 nil) 14 nil nil nil nil)) (3987 . 3999) (#("NoLogChannel$0" 0 14 (fontified nil)) . 3987) (3987 . 4001) (#("Log" 0 3 (fontified nil)) . 3987) (3987 . 3990) (#("NoLogChannel" 0 12 (fontified nil)) . -3987) (3987 . 3999) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -3987) (undo-tree-id165 . -3) (undo-tree-id166 . -3) 3990 (3985 . 3990) (3977 . 3985) (#("Log" 0 3 (fontified nil)) . 3977) (3977 . 3980) (#("LogError" 0 8 (fontified nil)) . -3977) (3977 . 3985) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -3977) (undo-tree-id167 . -3) 3980 (3977 . 3980) (#("e" 0 1 (fontified t)) . -3977) (undo-tree-id168 . -1) (#("r" 0 1 (fontified t)) . -3978) (undo-tree-id169 . -1) (#("r" 0 1 (fontified t)) . -3979) (undo-tree-id170 . -1) 3980 (3968 . 3970) (apply yas--snippet-revive 3969 3979 #s(yas--snippet nil (#s(yas--field 1 3975 3978 nil nil nil nil #s(yas--exit 3979 nil))) #s(yas--exit 3979 nil) 13 nil #s(yas--field 1 3975 3978 nil nil nil nil #s(yas--exit 3979 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3975 3978 nil nil nil nil #s(yas--exit 3979 nil))) #s(yas--exit 3979 nil) 13 nil #s(yas--field 1 3975 3978 nil nil nil nil #s(yas--exit 3979 nil)) nil nil)) (3969 . 3979) (#("ok_or(${1:err})$0" 0 17 (fontified nil)) . 3969) (3969 . 3986) (#("ok_" 0 3 (fontified nil)) . 3969) (3969 . 3972) (#("ok_or(…)" 0 8 (fontified nil)) . -3969) (3969 . 3977) (#("ok_" 0 3 (fontified t)) . -3969) (undo-tree-id171 . -3) 3972 (3969 . 3972) (#("		" 0 2 (fontified t)) . -3968) (3970 . 3970) (3970 . 3971) (3967 . 3970) (#(";" 0 1 (fontified t)) . -3967) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("
" 0 1 (fontified t)) . -3968) (undo-tree-id176 . -1) (#("	" 0 1 (fontified t)) . -3969) (undo-tree-id177 . -1) 3970 (3968 . 3970)) nil (25817 12141 628568 397000) 0 nil])
([nil nil ((4106 . 4107) (4105 . 4106) (4097 . 4105) (#("log_" 0 4 (fontified nil)) . 4097) (4097 . 4101) (#("log_type" 0 8 (fontified nil)) . -4097) (4097 . 4105) (#("log_" 0 4 (fontified t)) . -4097) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -4) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -4) 4101 (4092 . 4101) (#("_" 0 1 (fontified t)) . -4092) (undo-tree-id161 . -1) 4093 (4092 . 4093) (#("c" 0 1 (fontified t)) . -4092) (undo-tree-id162 . -1) (#("h" 0 1 (fontified t)) . -4093) (undo-tree-id163 . -1) (#("a" 0 1 (fontified t)) . -4094) (undo-tree-id164 . -1) 4095 (4094 . 4095)) nil (25817 12141 628348 874000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -4026) (undo-tree-id589 . -1) (#("l" 0 1 (fontified t)) . -4027) (undo-tree-id590 . -1) (#("o" 0 1 (fontified t)) . -4028) (undo-tree-id591 . -1) (#("g" 0 1 (fontified t)) . -4029) (undo-tree-id592 . -1) (#("c" 0 1 (fontified t)) . -4030) (undo-tree-id593 . -1) (#("h" 0 1 (fontified t)) . -4031) (undo-tree-id594 . -1) (#("." 0 1 (fontified t)) . -4032) (undo-tree-id595 . -1) 4033 (4027 . 4033) (4026 . 4027) (#("	" 0 1 (fontified t)) . -4026) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (#("l" 0 1 (fontified t)) . -4027) (undo-tree-id600 . -1) (#("e" 0 1 (fontified t)) . -4028) (undo-tree-id601 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -4029) (undo-tree-id602 . -1) (#(" " 0 1 (fontified t)) . -4030) (undo-tree-id603 . -1) (#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -4031) (undo-tree-id604 . -1) 4032 (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -4032) (undo-tree-id605 . -1) (#("f" 0 1 (face font-lock-variable-name-face fontified t)) . -4033) (undo-tree-id606 . -1) 4034 (4027 . 4034) (#("l" 0 1 (fontified t)) . -4027) (undo-tree-id607 . -1) (#("o" 0 1 (fontified t)) . -4028) (undo-tree-id608 . -1) 4029 (4027 . 4029) (t 25817 12141 645885 623000)) nil (25817 12615 505490 758000) 0 nil])
([nil nil ((1170 . 1198) (#(", Option<ser::ChannelId>" 0 1 (fontified t) 1 2 (fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face fontified t) 8 9 (fontified t) 9 10 (face font-lock-constant-face fontified t) 10 11 (face font-lock-constant-face fontified t) 11 12 (face font-lock-constant-face fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (face font-lock-type-face fontified t) 15 16 (face font-lock-type-face fontified t) 16 17 (face font-lock-type-face fontified t) 17 18 (face font-lock-type-face fontified t) 18 19 (face font-lock-type-face fontified t) 19 20 (face font-lock-type-face fontified t) 20 21 (face font-lock-type-face fontified t) 21 22 (face font-lock-type-face fontified t) 22 23 (face font-lock-type-face fontified t) 23 24 (fontified t)) . 1160) (undo-tree-id621 . -24) (undo-tree-id622 . -24) (undo-tree-id623 . -24) (undo-tree-id624 . -24) (undo-tree-id625 . -24) (undo-tree-id626 . -24) (undo-tree-id627 . -24) (undo-tree-id628 . -24) (undo-tree-id629 . -24) (undo-tree-id630 . -24) (undo-tree-id631 . -24) (undo-tree-id632 . -24) (undo-tree-id633 . -24) (t 25817 12623 138340 137000)) ((1160 . 1184) (#("," 0 1 (fontified nil)) . 1170) (#("
	" 0 1 (fontified t) 1 2 (fontified nil)) . 1171) (#("InChannel" 0 9 (face font-lock-type-face fontified nil)) . 1173) (#("(" 0 1 (fontified nil)) . 1182) (#("ser::ChannelId)" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t) 5 14 (face font-lock-type-face fontified t) 14 15 (fontified t)) . 1183)) (25817 12652 478653 182000) 0 nil])
([nil nil ((#(" to {channel_link}" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face rust-string-interpolation fontified t) 5 6 (face rust-string-interpolation fontified t) 6 7 (face rust-string-interpolation fontified t) 7 8 (face rust-string-interpolation fontified t) 8 9 (face rust-string-interpolation fontified t) 9 10 (face rust-string-interpolation fontified t) 10 11 (face rust-string-interpolation fontified t) 11 12 (face rust-string-interpolation fontified t) 12 13 (face rust-string-interpolation fontified t) 13 14 (face rust-string-interpolation fontified t) 14 15 (face rust-string-interpolation fontified t) 15 16 (face rust-string-interpolation fontified t) 16 17 (face rust-string-interpolation fontified t) 17 18 (face rust-string-interpolation fontified t)) . 1443)) ((1443 . 1461)) (25817 12652 828753 211000) 0 nil])
([nil nil ((#("Some(channel),=" 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil) 13 14 (fontified nil) 14 15 (fontified nil)) . 1355) (undo-tree-id634 . -14) (1369 . 1370) (1538 . 1556) (#("Log(guild, None, log_type)" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (face font-lock-type-face fontified t) 12 13 (face font-lock-type-face fontified t) 13 14 (face font-lock-type-face fontified t) 14 15 (face font-lock-type-face fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t)) . 1538)) ((1538 . 1564) (#("InChannel(channel)" 0 9 (face font-lock-type-face fontified t) 9 18 (fontified t)) . 1538) (#("=" 0 1 (fontified nil)) . 1369) (1355 . 1370)) (25817 12653 314272 155000) 0 nil])
([nil nil ((#(",
					   channel_link = channel.link(Some(*guild))" 0 1 (fontified t) 1 18 (fontified t) 18 38 (fontified t) 38 42 (face font-lock-type-face fontified t) 42 51 (fontified t)) . 1467)) ((1467 . 1518) (t 25817 12596 361726 460000)) (25817 12653 741593 620000) 0 nil])
([nil nil ((1599 . 1603) (1593 . 1606)) ((#("," 0 1 (fontified nil)) . 1593) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id613 . -1) (#("
				" 0 1 (fontified t) 1 5 (fontified nil)) . 1594) (undo-tree-id614 . -5) (undo-tree-id615 . -5) (undo-tree-id617 . -5) (#("channel" 0 7 (fontified nil)) . 1599) (undo-tree-id618 . -6) (undo-tree-id619 . -6) (#("	   " 0 4 (fontified t)) . 1599)) (25817 12654 515383 537000) 0 nil])
([nil nil ((1595 . 1603) (#(" " 0 1 (fontified t)) . -1595) (undo-tree-id676 . -1) 1596 (#("=" 0 1 (fontified t)) . -1596) (undo-tree-id677 . -1) (#(" " 0 1 (fontified t)) . -1597) (undo-tree-id678 . -1) (#("c" 0 1 (fontified t)) . -1598) (undo-tree-id679 . -1) (#("h" 0 1 (fontified t)) . -1599) (undo-tree-id680 . -1) 1600 (1595 . 1600) (1531 . 1538) (#("l" 0 1 (face rust-string-interpolation fontified t)) . -1531) (undo-tree-id681 . -1) (#("i" 0 1 (face rust-string-interpolation fontified t)) . -1532) (undo-tree-id682 . -1) (#("n" 0 1 (face rust-string-interpolation fontified t)) . -1533) (undo-tree-id683 . -1) (#("k" 0 1 (face rust-string-interpolation fontified t)) . -1534) (undo-tree-id684 . -1) 1535 (1528 . 1535) (1523 . 1528) (1522 . 1524) (1521 . 1523) (#("[" 0 1 (face font-lock-string-face fontified t)) . -1521) (undo-tree-id685 . -1) 1522 (1518 . 1522) (#("l" 0 1 (face font-lock-string-face fontified t)) . -1518) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1519) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -1520) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1521) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1522) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (#("y" 0 1 (face font-lock-string-face fontified t)) . -1523) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (#("p" 0 1 (face font-lock-string-face fontified t)) . -1524) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1525) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1526) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (#("`" 0 1 (face font-lock-string-face fontified t)) . -1527) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (#("{" 0 1 (face font-lock-string-face fontified t)) . -1528) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -1529) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1530) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -1531) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (#("_" 0 1 (face font-lock-string-face fontified t)) . -1532) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (#("t" 0 1 (face font-lock-string-face fontified nil)) . -1533) (undo-tree-id716 . -1) (undo-tree-id717 . -1) 1534 (#("y" 0 1 (face font-lock-string-face fontified nil)) . -1534) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (#("p" 0 1 (face font-lock-string-face fontified t)) . -1535) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1536) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (#("}" 0 1 (face rust-string-interpolation fontified t)) . -1537) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (#("`" 0 1 (face font-lock-string-face fontified t)) . -1538) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1539) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -1540) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1541) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1542) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (#("{" 0 1 (face font-lock-string-face fontified t)) . -1543) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -1544) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -1545) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -1546) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -1547) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -1548) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (#("_" 0 1 (face font-lock-string-face fontified t)) . -1549) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -1550) (undo-tree-id750 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -1551) (undo-tree-id751 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1552) (undo-tree-id752 . -1) (#("k" 0 1 (face font-lock-string-face fontified t)) . -1553) (undo-tree-id753 . -1) (#("}" 0 1 (face rust-string-interpolation fontified t)) . -1554) (undo-tree-id754 . -1) 1555) nil (25817 12734 775754 70000) 0 nil])
([nil nil ((1576 . 1586) (1570 . 1576) (1566 . 1570) (1541 . 1542) (#("," 0 1 (fontified t)) . -1541) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (#("
" 0 1 (fontified t)) . -1542) (undo-tree-id638 . -1) (#("	" 0 1 (fontified t)) . -1543) (undo-tree-id639 . 1) (undo-tree-id640 . -1) (#("	" 0 1 (fontified t)) . -1544) (undo-tree-id641 . -1) (#("	" 0 1 (fontified t)) . -1545) (undo-tree-id642 . -1) (#("	" 0 1 (fontified t)) . -1546) (undo-tree-id643 . -1) (#("	" 0 1 (fontified t)) . -1547) (undo-tree-id644 . -1) (#(" " 0 1 (fontified t)) . -1548) (undo-tree-id645 . -1) (#(" " 0 1 (fontified t)) . -1549) (undo-tree-id646 . -1) (#(" " 0 1 (fontified t)) . -1550) (undo-tree-id647 . -1) (#("g" 0 1 (fontified t)) . -1551) (undo-tree-id648 . -1) (#("u" 0 1 (fontified t)) . -1552) (undo-tree-id649 . -1) (#("i" 0 1 (fontified t)) . -1553) (undo-tree-id650 . -1) (#("l" 0 1 (fontified t)) . -1554) (undo-tree-id651 . -1) (#("d" 0 1 (fontified t)) . -1555) (undo-tree-id652 . -1) (#("_" 0 1 (fontified t)) . -1556) (undo-tree-id653 . -1) (#("l" 0 1 (fontified t)) . -1557) (undo-tree-id654 . -1) 1558 (#("i" 0 1 (fontified nil)) . -1558) (undo-tree-id655 . -1) (#("n" 0 1 (fontified nil)) . -1559) (undo-tree-id656 . -1) (#("k" 0 1 (fontified t)) . -1560) (undo-tree-id657 . -1) (#(" " 0 1 (fontified t)) . -1561) (undo-tree-id658 . -1) (#("=" 0 1 (fontified t)) . -1562) (undo-tree-id659 . -1) (#(" " 0 1 (fontified t)) . -1563) (undo-tree-id660 . -1) (#("g" 0 1 (fontified t)) . -1564) (undo-tree-id661 . -1) (#("u" 0 1 (fontified t)) . -1565) (undo-tree-id662 . -1) (#("i" 0 1 (fontified t)) . -1566) (undo-tree-id663 . -1) (#("l" 0 1 (fontified t)) . -1567) (undo-tree-id664 . -1) (#("d" 0 1 (fontified t)) . -1568) (undo-tree-id665 . -1) (#("." 0 1 (fontified t)) . -1569) (undo-tree-id666 . -1) (#("l" 0 1 (fontified t)) . -1570) (undo-tree-id667 . -1) (#("i" 0 1 (fontified t)) . -1571) (undo-tree-id668 . -1) (#("n" 0 1 (fontified t)) . -1572) (undo-tree-id669 . -1) (#("k" 0 1 (fontified t)) . -1573) (undo-tree-id670 . -1) (#("(" 0 1 (fontified t)) . -1574) (undo-tree-id671 . -1) (#("(" 0 1 (fontified t)) . -1575) (undo-tree-id672 . -1) (#(")" 0 1 (fontified t)) . -1576) (undo-tree-id673 . -1) (#(")" 0 1 (fontified t)) . -1577) (undo-tree-id674 . -1) (#("," 0 1 (fontified t)) . -1578) (undo-tree-id675 . -1) 1579) nil (25817 12734 775632 488000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1600) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1601) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) 1602 (1600 . 1602) (t 25817 12734 791449 38000)) nil (25817 12760 257975 708000) 0 nil])
([nil nil ((1576 . 1586) (#("." 0 1 (fontified t)) . -1576) (undo-tree-id761 . -1) (#("m" 0 1 (fontified t)) . -1577) (undo-tree-id762 . -1) (#("e" 0 1 (fontified t)) . -1578) (undo-tree-id763 . -1) (#("n" 0 1 (fontified t)) . -1579) (undo-tree-id764 . -1) (#("t" 0 1 (fontified t)) . -1580) (undo-tree-id765 . -1) 1581 (1576 . 1581) (#("," 0 1 (fontified t)) . -1576) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) 1577 (1575 . 1577) (#("l" 0 1 (fontified t)) . -1575) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (#("." 0 1 (fontified t)) . -1576) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (#("m" 0 1 (fontified t)) . -1577) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (#("e" 0 1 (fontified t)) . -1578) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (#("n" 0 1 (fontified t)) . -1579) (undo-tree-id781 . -1) (#("t" 0 1 (fontified t)) . -1580) (undo-tree-id782 . -1) (#("i" 0 1 (fontified t)) . -1581) (undo-tree-id783 . -1) (#("o" 0 1 (fontified t)) . -1582) (undo-tree-id784 . -1) (#("n" 0 1 (fontified t)) . -1583) (undo-tree-id785 . -1) (#("(" 0 1 (fontified t)) . -1584) (undo-tree-id786 . -1) (#(")" 0 1 (fontified t)) . -1585) (undo-tree-id787 . -1) 1586 (t 25817 12760 304730 380000)) nil (25817 12776 967790 817000) 0 nil])
([nil nil ((396 . 409) (t 25817 12776 978029 609000)) nil (25817 12786 388888 911000) 0 nil])
([nil nil ((428 . 430) (422 . 428) (#("e" 0 1 (face font-lock-type-face fontified t)) . -422) (undo-tree-id841 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -423) (undo-tree-id842 . -1) 424 (412 . 424) (411 . 412) (t 25817 12786 404676 950000)) nil (25817 12811 135506 574000) 0 nil])
([nil nil ((430 . 433)) nil (25817 12811 135500 278000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -385) (undo-tree-id817 . -1) (#(" " 0 1 (fontified t)) . -386) (undo-tree-id818 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -387) (undo-tree-id819 . -1) 388 (#("e" 0 1 (face font-lock-type-face fontified t)) . -388) (undo-tree-id820 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -389) (undo-tree-id821 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -390) (undo-tree-id822 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -391) (undo-tree-id823 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -392) (undo-tree-id824 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -393) (undo-tree-id825 . -1) (#("I" 0 1 (face font-lock-type-face fontified nil)) . -394) (undo-tree-id826 . -1) (#("d" 0 1 (face font-lock-type-face fontified nil)) . -395) (undo-tree-id827 . -1) (#("," 0 1 (fontified t)) . -396) (undo-tree-id828 . -1) (#(" " 0 1 (fontified t)) . -397) (undo-tree-id829 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -398) (undo-tree-id830 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -399) (undo-tree-id831 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -400) (undo-tree-id832 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -401) (undo-tree-id833 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -402) (undo-tree-id834 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -403) (undo-tree-id835 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -404) (undo-tree-id836 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -405) (undo-tree-id837 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -406) (undo-tree-id838 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -407) (undo-tree-id839 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -408) (undo-tree-id840 . -1) 409) nil (25817 12811 135491 681000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . -373) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (#("s" 0 1 (fontified t)) . -374) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (#("e" 0 1 (fontified t)) . -375) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (#("l" 0 1 (fontified t)) . -376) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (#("f" 0 1 (fontified t)) . -377) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (#(" " 0 1 (fontified t)) . -378) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (#("a" 0 1 (fontified t)) . -379) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) 380 (#("s" 0 1 (fontified t)) . -380) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (#(" " 0 1 (fontified t)) . -381) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) 382 (#("}" 0 1 (fontified t)) . -385) (undo-tree-id815 . 1) (undo-tree-id816 . -1) 386) nil (25817 12811 135445 936000) 0 nil])
([nil nil ((371 . 375) (#(":" 0 1 (fontified t)) . -371) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (#(":" 0 1 (fontified t)) . -372) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) 373 (t 25817 12811 144626 86000)) nil (25817 12817 57103 637000) 0 nil])
([nil nil ((#("use anyhow::anyhow;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-constant-face fontified t) 10 20 (fontified t)) . 402) (undo-tree-id866 . -19) (undo-tree-id867 . -19) (undo-tree-id868 . -18) (undo-tree-id869 . -19) (undo-tree-id870 . -19) (undo-tree-id871 . -18) (undo-tree-id872 . -18) (undo-tree-id873 . -18) (undo-tree-id874 . -18) (undo-tree-id875 . -18) (undo-tree-id876 . -20) 420 (t 25817 12817 67947 212000)) nil (25817 12822 621764 763000) 0 nil])
([nil nil ((apply yas--snippet-revive 3855 3861 #s(yas--snippet nil nil #s(yas--exit 3861 nil) 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3861 nil) 15 nil nil nil nil)) (3855 . 3861) (#("into()$0" 0 8 (fontified nil)) . 3855) (3855 . 3863) (#("into() (as Into)" 0 16 (fontified nil)) . -3855) (3855 . 3871) (3854 . 3855) (t 25817 12822 674602 312000)) nil (25817 12842 895922 797000) 0 nil])
([nil nil ((3644 . 3649) (3642 . 3644) (3635 . 3642) (3633 . 3635) (3632 . 3633) (t 25817 12842 911227 150000)) nil (25817 13108 504360 17000) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-type-face fontified t)) . -3856) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3857) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -3858) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3859) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (#("," 0 1 (fontified t)) . -3860) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (#(" " 0 1 (fontified t)) . -3861) (undo-tree-id890 . -1) (undo-tree-id891 . -1) 3862) nil (25817 13108 504349 983000) 0 nil])
([nil nil ((#("	restres.contextualize(LogErrorContext::Log(guild, Some(logch), log_type))
" 0 23 (fontified t) 23 38 (face font-lock-type-face fontified t) 38 40 (fontified t) 40 43 (face font-lock-type-face fontified t) 43 51 (fontified t) 51 55 (face font-lock-type-face fontified t) 55 64 (fontified t) 64 74 (fontified t) 74 75 (fontified t)) . 3939) (undo-tree-id953 . -74) (undo-tree-id954 . -1) (undo-tree-id955 . -26) (undo-tree-id956 . -47) (undo-tree-id957 . -47) 3986 (t 25817 13108 520955 766000)) nil (25817 13168 521749 595000) 0 nil])
([nil nil ((3911 . 3912) (#("	" 0 1 (fontified t)) . -3911) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (#("l" 0 1 (fontified t)) . -3912) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (#("e" 0 1 (fontified t)) . -3913) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (#("t" 0 1 (fontified t)) . -3914) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (#(" " 0 1 (fontified t)) . -3915) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -3916) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -3917) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -3918) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -3919) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -3920) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -3921) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -3922) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (#(" " 0 1 (fontified t)) . -3923) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (#("=" 0 1 (fontified t)) . -3924) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (#(" " 0 1 (fontified t)) . -3925) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) 3926) nil (25817 13168 521715 707000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3923) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) 3924) nil (25817 13168 521659 465000) 0 nil])
([nil nil ((3810 . 3811)) nil (25817 13168 521652 743000) 0 nil])
([nil nil ((#("		.contextualize(LogErrorContext::Log(guild, log_type).into())?
" 0 2 (fontified t) 2 3 (fontified t) 3 17 (fontified t) 17 32 (face font-lock-type-face fontified t) 32 34 (fontified t) 34 37 (face font-lock-type-face fontified t) 37 38 (fontified t) 38 43 (fontified t) 43 45 (fontified t) 45 53 (fontified t) 53 55 (fontified t) 55 61 (fontified t) 61 62 (fontified t) 62 63 (face rust-question-mark fontified t) 63 64 (fontified t)) . 3812) (undo-tree-id892 . -63) (undo-tree-id893 . -63) (undo-tree-id894 . -63) (undo-tree-id895 . -23) (undo-tree-id896 . -8) (undo-tree-id897 . -8) (undo-tree-id898 . -8) (undo-tree-id899 . -8) (undo-tree-id900 . -8) (undo-tree-id901 . -8) (undo-tree-id902 . -8) (undo-tree-id903 . -8) (undo-tree-id904 . -64) 3820) nil (25817 13168 521645 768000) 0 nil])
([nil nil ((3902 . 3907) (#("logc" 0 4 (fontified nil)) . 3902) (3902 . 3906) (#("logch" 0 5 (fontified nil)) . -3902) (3902 . 3907) (#("logc" 0 4 (fontified t)) . -3902) (undo-tree-id997 . -4) (undo-tree-id998 . -4) 3906 (3903 . 3906) (#("()" 0 2 (fontified nil)) . 3903) (3902 . 3903) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3902 3907 nil nil nil t #s(yas--exit 3908 nil))) #s(yas--exit 3908 nil) 17 nil #s(yas--field 1 3902 3907 nil nil nil t #s(yas--exit 3908 nil)) nil nil)) (3892 . 3905) (#("InChannel(${1:()})$0" 0 20 (fontified nil)) . 3892) (3892 . 3912) (#("InChannel(…)" 0 12 (fontified nil)) . -3892) (3892 . 3904) (3890 . 3892) (3875 . 3890) (#("LogE" 0 4 (fontified nil)) . 3875) (3875 . 3879) (#("LogErrorContext" 0 15 (fontified nil)) . -3875) (3875 . 3890) (#("LogE" 0 4 (face font-lock-type-face fontified t)) . -3875) (undo-tree-id999 . -4) 3879 (3861 . 3879) (3860 . 3861) (#(";" 0 1 (fontified t)) . -3860) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) 3861 (3856 . 3857) (t 25817 13168 537798 601000)) nil (25817 13423 409071 128000) 0 nil])
([nil nil ((apply yas--snippet-revive 3892 3908 #s(yas--snippet nil (#s(yas--field 1 3902 3907 nil nil nil t #s(yas--exit 3908 nil))) #s(yas--exit 3908 nil) 17 nil #s(yas--field 1 3902 3907 nil nil nil t #s(yas--exit 3908 nil)) nil nil))) nil (25817 13423 409054 68000) 0 nil])
([nil nil ((3886 . 3893) (#("builder" 0 7 (fontified nil)) . 3886) (3886 . 3893) (#("builder" 0 7 (fontified t)) . -3886) (undo-tree-id958 . -7) (undo-tree-id959 . -7) 3893 (3886 . 3893) (#("f" 0 1 (fontified t)) . -3886) (undo-tree-id960 . -1) (undo-tree-id961 . -1) 3887 (3889 . 3892) (apply yas--snippet-revive 3855 3889 #s(yas--snippet nil (#s(yas--field 1 3868 3872 nil nil nil nil #s(yas--field 2 3874 3888 nil nil nil t #s(yas--exit 3889 nil))) #s(yas--field 2 3874 3888 nil nil nil t #s(yas--exit 3889 nil))) #s(yas--exit 3889 nil) 18 nil #s(yas--field 2 3874 3888 nil nil nil t #s(yas--exit 3889 nil)) nil nil)) (apply yas--snippet-revive 3880 3888 #s(yas--snippet nil (#s(yas--field 1 3886 3887 nil nil nil nil #s(yas--exit 3888 nil))) #s(yas--exit 3888 nil) 19 nil #s(yas--field 1 3886 3887 nil nil nil nil #s(yas--exit 3888 nil)) #s(yas--field 2 3874 3888 nil nil nil t #s(yas--exit 3889 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3886 3887 nil nil nil nil #s(yas--exit 3888 nil))) #s(yas--exit 3888 nil) 19 nil #s(yas--field 1 3886 3887 nil nil nil nil #s(yas--exit 3888 nil)) #s(yas--field 2 3874 3888 nil nil nil t #s(yas--exit 3889 nil)) nil)) (3880 . 3888) (#("embed(${1:f})$0" 0 15 (fontified nil)) . 3880) (3880 . 3895) (#("embed" 0 5 (fontified nil)) . 3880) (3880 . 3885) (#("embed(…)" 0 8 (fontified nil)) . -3880) (3880 . 3888) (#("embed" 0 5 (fontified t)) . -3880) (undo-tree-id962 . -5) (undo-tree-id963 . -5) 3885 (3875 . 3885) (#("f" 0 1 (fontified nil)) . 3875) (3874 . 3875) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3868 3872 nil nil nil nil #s(yas--field 2 3874 3888 nil nil nil t #s(yas--exit 3889 nil))) #s(yas--field 2 3874 3888 nil nil nil t #s(yas--exit 3889 nil))) #s(yas--exit 3889 nil) 18 nil #s(yas--field 2 3874 3888 nil nil nil t #s(yas--exit 3889 nil)) nil nil)) (3855 . 3876) (#("send_message(${1:http}, ${2:f})$0" 0 33 (fontified nil)) . 3855) (3855 . 3888) (#("send" 0 4 (fontified nil)) . 3855) (3855 . 3859) (#("send_message(…)" 0 15 (fontified nil)) . -3855) (3855 . 3870) (#("send" 0 4 (fontified t)) . -3855) (undo-tree-id964 . -4) 3859 (3854 . 3859) (#("." 0 1 (fontified t)) . -3854) (undo-tree-id965 . -1) (#("p" 0 1 (fontified t)) . -3855) (undo-tree-id966 . -1) (#("o" 0 1 (fontified t)) . -3856) (undo-tree-id967 . -1) (#("s" 0 1 (fontified t)) . -3857) (undo-tree-id968 . -1) (#("t" 0 1 (fontified t)) . -3858) (undo-tree-id969 . -1) 3859 (3849 . 3859) (#("t" 0 1 (fontified t)) . -3849) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) 3850 (#("ry {
		
	}" 0 2 (face font-lock-keyword-face fontified t) 2 5 (fontified t) 5 7 (fontified t) 7 8 (fontified t) 8 10 (fontified t)) . 3850) (undo-tree-id979 . -10) (undo-tree-id980 . -10) (undo-tree-id981 . -6) (undo-tree-id982 . -6) (undo-tree-id983 . -6) (undo-tree-id984 . -4) (undo-tree-id985 . -6) (undo-tree-id986 . -10) (3856 . 3857) (#("	" 0 1 (fontified t)) . -3856) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (#("l" 0 1 (fontified t)) . -3857) (undo-tree-id990 . -1) (#("o" 0 1 (fontified t)) . -3858) (undo-tree-id991 . -1) (#("g" 0 1 (fontified t)) . -3859) (undo-tree-id992 . -1) (#("c" 0 1 (fontified t)) . -3860) (undo-tree-id993 . -1) (#("h" 0 1 (fontified t)) . -3861) (undo-tree-id994 . -1) (#("." 0 1 (fontified t)) . -3862) (undo-tree-id995 . -1) 3863 (3857 . 3863) (#("e" 0 1 (fontified t)) . -3857) (undo-tree-id996 . -1) 3858 (3857 . 3858) (3908 . 3909)) nil (25817 13423 409038 170000) 0 nil])
([nil nil ((3661 . 3662) (3654 . 3661) (#("Messa" 0 5 (fontified nil)) . 3654) (3654 . 3659) (#("Message" 0 7 (fontified nil)) . -3654) (3654 . 3661) (#("Messa" 0 5 (face font-lock-type-face fontified t)) . -3654) (undo-tree-id1003 . -5) (undo-tree-id1004 . -5) (undo-tree-id1005 . -5) (undo-tree-id1006 . -5) 3659 (3649 . 3659) (t 25817 13423 428250 881000)) nil (25817 13571 313188 679000) 0 nil])
([nil nil ((3646 . 3647) (3642 . 3646) (t 25817 13571 368350 130000)) nil (25817 13577 59018 263000) 0 nil])
([nil nil ((4036 . 4044) (#("log_" 0 4 (fontified nil)) . 4036) (undo-tree-id1007 . -4) (4036 . 4040) (#("log_type" 0 8 (fontified nil)) . -4036) (undo-tree-id1008 . -8) (4036 . 4044) (#("log_" 0 4 (fontified t)) . -4036) (undo-tree-id1009 . -4) (undo-tree-id1010 . -4) (undo-tree-id1011 . -4) (undo-tree-id1012 . -4) (undo-tree-id1013 . -4) (undo-tree-id1014 . -4) (undo-tree-id1015 . -4) (undo-tree-id1016 . -4) 4040 (4037 . 4040) (#("()" 0 2 (fontified nil)) . 4037) (undo-tree-id1017 . -2) (4036 . 4037) (4029 . 4034) (#("guild" 0 5 (fontified nil)) . 4029) (undo-tree-id1018 . -5) (4029 . 4034) (#("guild" 0 5 (fontified t)) . -4029) (undo-tree-id1019 . -5) (undo-tree-id1020 . -5) (undo-tree-id1021 . -5) 4034 (4031 . 4034) (#("l" 0 1 (fontified t)) . -4031) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (#("d" 0 1 (fontified t)) . -4032) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) 4033 (4030 . 4033) (#("()" 0 2 (fontified nil)) . 4030) (undo-tree-id1028 . -2) (4029 . 4030) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4029 4034 nil nil nil t #s(yas--field 2 4036 4044 nil nil nil t #s(yas--exit 4045 nil))) #s(yas--field 2 4036 4044 nil nil nil t #s(yas--exit 4045 nil))) #s(yas--exit 4045 nil) 20 nil #s(yas--field 2 4036 4044 nil nil nil t #s(yas--exit 4045 nil)) nil nil)) (4025 . 4036) (#("Log(${1:()}, ${2:()})$0" 0 23 (fontified nil)) . 4025) (4025 . 4048) (#("Log(…)" 0 6 (fontified nil)) . -4025) (4025 . 4031) (4023 . 4025) (4008 . 4023) (#("Log" 0 3 (fontified nil)) . 4008) (4008 . 4011) (#("LogErrorContext" 0 15 (fontified nil)) . -4008) (4008 . 4023) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -4008) (undo-tree-id1029 . -3) 4011 (4008 . 4011) (#("L" 0 1 (face font-lock-type-face fontified t)) . -4008) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -4009) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -4010) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) 4011 (4008 . 4011) (4000 . 4009) (3993 . 4000) (3991 . 3992) 3992 (3940 . 3941) 3948 (3929 . 3930) 3933 (3879 . 3880) 3883 (3875 . 3877) (3841 . 3842) 3850 (3830 . 3831) 3835 (3782 . 3783) 3787 (3775 . 3780) (3773 . 3775) (3913 . 3916) (3919 . 3920) (3914 . 3919) (#("await" 0 5 (fontified nil)) . -3914) (3914 . 3919) (3913 . 3914) (t 25817 13577 68352 136000)) nil (25817 13749 731111 311000) 0 nil])
([nil nil ((3990 . 3991) (t 25817 13749 788361 146000) (apply yas--snippet-revive 4025 4045 #s(yas--snippet nil (#s(yas--field 1 4029 4034 nil nil nil t #s(yas--field 2 4036 4044 nil nil nil t #s(yas--exit 4045 nil))) #s(yas--field 2 4036 4044 nil nil nil t #s(yas--exit 4045 nil))) #s(yas--exit 4045 nil) 20 nil #s(yas--field 2 4036 4044 nil nil nil t #s(yas--exit 4045 nil)) nil nil))) nil (25817 13791 263924 880000) 0 nil])
([nil nil ((3680 . 3682) (#("s" 0 1 (fontified t)) . -3680) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (#("e" 0 1 (fontified t)) . -3681) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (#("r" 0 1 (fontified t)) . -3682) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (#(":" 0 1 (fontified t)) . -3683) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (#(":" 0 1 (fontified t)) . -3684) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -3685) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3686) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -3687) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -3688) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -3689) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -3690) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3691) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) 3692) nil (25817 13791 263917 288000) 0 nil])
([nil nil ((3927 . 3931) (3943 . 3944) (3927 . 3943) (#("/" 0 1 (fontified t)) . -3927) (undo-tree-id1036 . -1) 3928 (3927 . 3928)) nil (25817 13791 263861 638000) 0 nil])
([nil nil ((3935 . 3939) (t 25817 13791 285017 26000)) nil (25817 13798 402338 569000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -4097) (undo-tree-id1087 . -2) (undo-tree-id1088 . -2) (undo-tree-id1089 . -2) (undo-tree-id1090 . -2) (4099 . 4100) (4096 . 4099) (4090 . 4096) (#("retval" 0 6 (fontified nil)) . 4090) (4090 . 4096) (#("retval" 0 6 (fontified t)) . -4090) (undo-tree-id1091 . -6) (undo-tree-id1092 . -6) (undo-tree-id1093 . -6) (undo-tree-id1094 . -6) (undo-tree-id1095 . -6) 4096 (4090 . 4096) (4088 . 4090) (4087 . 4088) (3784 . 3790) (3772 . 3784) (3771 . 3772) (3765 . 3771) (t 25817 13798 411681 405000)) nil (25817 13821 789264 453000) 0 nil])
([nil nil ((#("	retval
" 0 1 (fontified t) 1 8 (fontified t)) . 4089) (undo-tree-id1073 . -7) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -7) (undo-tree-id1078 . -7) (undo-tree-id1079 . 1) (undo-tree-id1080 . -8) (undo-tree-id1081 . -8) (undo-tree-id1082 . -8) (undo-tree-id1083 . -8) (undo-tree-id1084 . -8) (undo-tree-id1085 . -8) (undo-tree-id1086 . -8)) nil (25817 13821 789242 520000) 0 nil])
([nil nil ((4090 . 4096) (#("retval" 0 6 (fontified nil)) . 4090) (4090 . 4096) (#("retval" 0 6 (fontified t)) . -4090) (undo-tree-id1096 . -6) (undo-tree-id1097 . -5) (undo-tree-id1098 . -6) (undo-tree-id1099 . -6) (undo-tree-id1100 . -6) (undo-tree-id1101 . -6) 4096 (4090 . 4096) (4088 . 4090) (t 25817 13821 801673 41000)) nil (25817 13834 327718 918000) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -3951) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) 3952 (t 25817 13834 345001 364000)) nil (25817 13845 153227 207000) 0 nil])
([nil nil ((4029 . 4030) (t 25817 13845 178330 84000)) nil (25817 13850 3870 232000) 0 nil])
([nil nil ((3678 . 3680) (apply yas--snippet-revive 3671 3679 #s(yas--snippet nil nil #s(yas--exit 3678 nil) 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3678 nil) 21 nil nil nil nil)) (3671 . 3679) (#("Result<$0>" 0 10 (fontified nil)) . 3671) (3671 . 3681) (#("Result" 0 6 (fontified nil)) . 3671) (3671 . 3677) (#("Result<…>" 0 9 (fontified nil)) . -3671) (3671 . 3680) (#("Result" 0 6 (face font-lock-type-face fontified t)) . -3671) (undo-tree-id1109 . -6) (undo-tree-id1110 . -6) (undo-tree-id1111 . -6) (undo-tree-id1112 . -6) (undo-tree-id1113 . -6) 3677 (3667 . 3677) (t 25817 13850 21661 270000)) nil (25817 13878 871826 885000) 0 nil])
([nil nil ((3778 . 3779) (#("	" 0 1 (fontified t)) . -3778) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (#("l" 0 1 (fontified t)) . -3779) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (#("e" 0 1 (fontified t)) . -3780) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (#("t" 0 1 (fontified t)) . -3781) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (#(" " 0 1 (fontified t)) . -3782) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) 3783 (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -3783) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -3784) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -3785) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (#("v" 0 1 (face font-lock-variable-name-face fontified t)) . -3786) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -3787) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -3788) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (#(":" 0 1 (fontified t)) . -3789) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (#(" " 0 1 (fontified t)) . -3790) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -3791) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3792) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -3793) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -3794) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -3795) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -3796) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (#("<" 0 1 (fontified t)) . -3797) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (#("(" 0 1 (fontified t)) . -3798) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (#(")" 0 1 (fontified t)) . -3799) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (#(">" 0 1 (fontified t)) . -3800) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (#(" " 0 1 (fontified t)) . -3801) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (#("=" 0 1 (fontified t)) . -3802) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (#(" " 0 1 (fontified t)) . -3803) (undo-tree-id1195 . -1) 3804 (t 25817 13878 891647 423000)) nil (25817 13893 465134 168000) 0 nil])
([nil nil ((#("	retval
" 0 1 (fontified t) 1 7 (fontified t) 7 8 (fontified t)) . 4078) (undo-tree-id1114 . 7) (undo-tree-id1115 . -7) (undo-tree-id1116 . -8)) nil (25817 13893 464764 517000) 0 nil])
([nil nil ((4049 . 4051) (4049 . 4055) (4048 . 4049) (3800 . 3804) (3779 . 3800) (t 25817 13893 481639 762000)) nil (25817 14011 210705 326000) 0 nil])
([nil nil ((#("	let retval: Result<()> = try {
" 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 11 (face font-lock-variable-name-face fontified t) 11 13 (fontified t) 13 19 (face font-lock-type-face fontified t) 19 26 (fontified t) 26 29 (face font-lock-keyword-face fontified t) 29 31 (fontified t) 31 32 (fontified t)) . 3778) (undo-tree-id1508 . -31) (undo-tree-id1509 . -20) (t 25817 14011 228229 933000)) nil (25817 14211 470749 698000) 0 nil])
([nil nil ((#("	retval.contextualize(LogErrorContext::Log(guild, log_type));
" 0 22 (fontified t) 22 37 (face font-lock-type-face fontified t) 37 39 (fontified t) 39 42 (face font-lock-type-face fontified t) 42 43 (fontified t) 43 48 (fontified t) 48 50 (fontified t) 50 58 (fontified t) 58 59 (fontified t) 59 62 (fontified t)) . 4018) (undo-tree-id1502 . -5) (undo-tree-id1503 . 61) (undo-tree-id1504 . -61) (undo-tree-id1505 . 57) (undo-tree-id1506 . -5) (undo-tree-id1507 . -5) 4023) nil (25817 14211 470745 389000) 0 nil])
([nil nil ((#("	};
" 0 1 (fontified t) 1 4 (fontified t)) . 4014) (undo-tree-id1491 . -4) (undo-tree-id1492 . -3) (undo-tree-id1493 . -4) (undo-tree-id1494 . -4) (undo-tree-id1495 . -4) (undo-tree-id1496 . -4) (undo-tree-id1497 . -4) (undo-tree-id1498 . -4) (undo-tree-id1499 . -4) (undo-tree-id1500 . -4) (undo-tree-id1501 . -4)) nil (25817 14211 470736 662000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -3954) (#("	" 0 1 (fontified t)) . -3930) (#("	" 0 1 (fontified t)) . -3921) 3920 (#("	" 0 1 (fontified t)) . -3872) (#("	" 0 1 (fontified t)) . -3870) (undo-tree-id1490 . -1) 3871 (#("	" 0 1 (fontified t)) . -3836) (#("	" 0 1 (fontified t)) . -3826) 3825 (#("	" 0 1 (fontified t)) . -3779) 3778) nil (25817 14211 470718 899000) 0 nil])
([nil nil ((4040 . 4043) (3988 . 3989) 4002 (3963 . 3964) 3973 (3953 . 3954) 3959 (3903 . 3904) 3933 (#(" " 0 1 (fontified t)) . -3901) (undo-tree-id1485 . -1) 3902 (3889 . 3902) (#("M" 0 1 (face font-lock-type-face fontified t)) . -3889) (undo-tree-id1486 . -1) 3890 (3889 . 3890) (#("<" 0 1 (fontified t)) . -3889) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) 3890 (3889 . 3890) (3871 . 3889) (3870 . 3871) (#("	" 0 1 (fontified nil)) . 3869) (undo-tree-id1489 . -1) (3870 . 3871)) nil (25817 14211 470710 967000) 0 nil])
([nil nil ((#("			.contextualize(LogErrorContext::InChannel(logch))?;
" 0 3 (fontified t) 3 18 (fontified t) 18 33 (face font-lock-type-face fontified t) 33 35 (fontified t) 35 44 (face font-lock-type-face fontified t) 44 45 (fontified t) 45 50 (fontified t) 50 52 (fontified t) 52 53 (face rust-question-mark fontified t) 53 55 (fontified t)) . 3986) (undo-tree-id1474 . -54) (undo-tree-id1475 . -1) (undo-tree-id1476 . -17) (undo-tree-id1477 . -17) (undo-tree-id1478 . -17) (undo-tree-id1479 . 1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -55) 3987) nil (25817 14211 470696 247000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3999) (undo-tree-id1196 . -1) (#("	" 0 1 (fontified t)) . -4000) (undo-tree-id1197 . -1) (#("	" 0 1 (fontified t)) . -4001) (undo-tree-id1198 . -1) 4002 (3993 . 3999) (#("retval" 0 6 (fontified nil)) . 3993) (3993 . 3999) (#("retval" 0 6 (fontified t)) . -3993) (undo-tree-id1199 . -6) 3999 (3993 . 3999) (3992 . 3993) (#("	" 0 1 (fontified nil)) . 3991) (undo-tree-id1200 . -1) (3990 . 3993) (3989 . 3990) (#("		" 0 2 (fontified nil)) . -3988) (undo-tree-id1201 . -2) (3990 . 3991) (3986 . 3990) (3981 . 3986) (#("r" 0 1 (fontified t)) . -3981) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (#("e" 0 1 (fontified t)) . -3982) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (#("t" 0 1 (fontified t)) . -3983) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) 3984 (3982 . 3984) (3981 . 3982) (3980 . 3981) (#(")" 0 1 (fontified t)) . -3980) (undo-tree-id1208 . -1) 3981 (3980 . 3981) (3975 . 3980) (#("after" 0 5 (fontified nil)) . 3975) (3975 . 3980) (#("after" 0 5 (fontified t)) . -3975) (undo-tree-id1209 . -5) 3980 (3976 . 3980) (#("d" 0 1 (fontified t)) . -3976) (undo-tree-id1210 . -1) 3977 (3975 . 3977) (3972 . 3975) (3970 . 3971) (#("
" 0 1 (fontified t)) . -3970) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (#("	" 0 1 (fontified t)) . -3971) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (#("	" 0 1 (fontified t)) . -3972) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (#("	" 0 1 (fontified t)) . -3973) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) 3974 (#("." 0 1 (fontified t)) . -3974) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (#("m" 0 1 (fontified t)) . -3975) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (#("a" 0 1 (fontified t)) . -3976) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (#("p" 0 1 (fontified t)) . -3977) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (#("_" 0 1 (fontified t)) . -3978) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (#("e" 0 1 (fontified t)) . -3979) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (#("r" 0 1 (fontified t)) . -3980) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (#("r" 0 1 (fontified t)) . -3981) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (#("(" 0 1 (fontified t)) . -3982) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -3983) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3984) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3985) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified nil)) . -3986) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified nil)) . -3987) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (#(":" 0 1 (fontified t)) . -3988) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (#(":" 0 1 (fontified t)) . -3989) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (#("f" 0 1 (fontified t)) . -3990) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (#("r" 0 1 (fontified t)) . -3991) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (#("o" 0 1 (fontified t)) . -3992) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (#("m" 0 1 (fontified t)) . -3993) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (#(")" 0 1 (fontified t)) . -3994) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) 3995 (3996 . 3999) (3913 . 3914) (3994 . 3995) (3904 . 3904) (3904 . 3913) (#("." 0 1 (fontified t)) . -3985) (undo-tree-id1461 . -1) 3986 (3985 . 3986) (#("
" 0 1 (fontified t)) . -3985) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (#("." 0 1 (fontified t)) . -3986) (undo-tree-id1471 . -1) (undo-tree-id1472 . 1) 3987 (#("			" 0 3 (fontified t)) . -3986) (undo-tree-id1473 . 3) (3989 . 3989) (3989 . 3990) (3988 . 3989)) nil (25817 14211 470649 886000) 0 nil])
([nil nil ((1 . 4256) (#("use std::collections::{HashMap, hash_map};
use std::fmt::Display;
use std::error::Error as StdError;
use std::hash::Hash;
use std::marker::PhantomData;
use std::fmt;

use crate::linkable::Linkable;
use crate::pg;
use crate::pgtyp::{FromSql, ToSql};
use crate::PoiseContext;
use crate::errors::{Result, Error, InternalError, Contextualizable};
use poise::serenity_prelude as ser;
use ser::Mentionable;
use tokio::sync::RwLock;



pub const GET_LOGCH: &str = \"SELECT channel_id FROM log_channels WHERE server_id = $1 AND log_type = $2\";

#[derive(Clone, Copy, PartialEq, Eq, Debug, ToSql, FromSql)]
pub enum LogType {
    Purge,
}

impl Display for LogType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		match self {
			Purge => write!(f, \"purge\")
		}
    }
}

impl Into<u8> for LogType {
	fn into(self) -> u8 {
		use LogType::*;
		match self {
			Purge => 0
		}
	}
}

#[derive(Clone, Copy, PartialEq, Eq, Debug)]
pub enum LogEventType {
	Delete = 0,
	Create = 1,
	Edit = 2,
}

impl Into<u8> for LogEventType {
	fn into(self) -> u8 {
		self as u8
	}
}

#[derive(Debug)]
pub enum LogErrorContext {
	Log(ser::GuildId, LogType),
	InChannel(ser::ChannelId)
}

impl Display for LogErrorContext {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
		use LogErrorContext::*;
		match self {
			Log(guild,  log_type) =>
				write!(f, \"logging log type `{log_type}` in {guild_link}\",
					   guild_link = guild.link(())),
			InChannel(channel) =>
				write!(f, \"logging to `{channel_mention}`\",
					   channel_mention = channel.mention())
		}
    }
}


#[derive(Debug)]
pub enum LogError {
	NoLogChannel,
}

impl Display for LogError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
			Self::NoLogChannel =>
				write!(f, \"no log channel set up for log type\")
		}
    }
}

impl StdError for LogError {}



/// thread-safe map from any type to a mask of any type that supports Into<u8>
pub struct MaskMap<T: Eq + Hash, M: Into<u8>>(RwLock<HashMap<T, u32>>, PhantomData<M>);

impl<T: Eq + Hash, M: Into<u8>> MaskMap<T, M> {
	pub fn new() -> Self {
		Self(RwLock::new(HashMap::new()), PhantomData)
	}

	pub async fn set(&mut self, key: T, log_type: M) {
		*self.0.write().await.entry(key).or_insert(0) |= 1 << log_type.into();
	}

	pub async fn unset(&mut self, key: T, log_type: M) {
		use hash_map::Entry::*;
		match self.0.write().await.entry(key) {
			Occupied(mut occ) => {
				let mask = occ.get_mut();
				*mask &= !(1 << log_type.into());
				if *mask == 0 {
					occ.remove_entry();
				}
			},
			Vacant(_) => {},
		}
	}

	pub async fn check(&mut self, key: T, log_type: M) -> bool {
		let val = self.0.read().await.get(&key).map(|x| *x).unwrap_or(0);
		(val >> log_type.into()) & 1 == 1
	}
}

/// A collection of [`MaskMap`] used to prevent logging of things that are already being logged.
pub struct LogMasks {
	pub messages: MaskMap<ser::MessageId, LogEventType>
}

async fn get_logch(
    data: &crate::Data,
    guild: ser::GuildId,
    log_type: LogType,
) -> Result<Option<ser::ChannelId>> {
    let conn = data.dbconn.get().await?;
    let Some(row): Option<pg::Row> = conn
        .query_opt(GET_LOGCH, &[&guild.0.to_be_bytes(), &log_type])
        .await?
    else {
        return Ok(None);
    };

    let channelid: [u8; 8] = row
        .try_get::<_, Vec<u8>>(0)?
        .try_into()
        .map_err(|_| InternalError::InvalidByteADiscordIDFormat)?;

    Ok(Some(ser::ChannelId(u64::from_be_bytes(channelid))))
}


async fn post_log<F>(
	http: impl AsRef<ser::Http>,
	data: &crate::Data,
	guild: ser::GuildId,
	log_type: LogType,
	builder: F,
	after: impl FnOnce(ser::Message) -> Result<()>
) -> Result<()>
where F: for<'a> FnOnce(&'a mut ser::CreateEmbed) -> &'a mut ser::CreateEmbed
{
	let logch = get_logch(data, guild, log_type)
		.await?
		.ok_or(LogError::NoLogChannel)?;

	let retval: Result<()> = try {
		let msg = logch.send_message(http, |m| m.embed(builder))
			.await?;
		after(msg)?
	};

	retval
}

pub(crate) async fn log_purge(
	ctx: &PoiseContext<'_>,
	limit: u16,
	inlast: Option<u16>,
	pattern: Option<String>,
	reason: Option<String>,
	messages: impl IntoIterator<Item = ser::Message>
) -> anyhow::Result<()> {
	
	Ok(())
}
" 0 4232 (fontified nil)) . 1) (t 25817 14211 491384 555000)) nil (25817 24213 70197 900000) 0 nil])
([nil nil ((4041 . 4046) (#("log" 0 3 (fontified nil)) . 4041) (undo-tree-id0 . -3) (4041 . 4044) (#("logch" 0 5 (fontified nil)) . -4041) (undo-tree-id1 . -5) (4041 . 4046) (#("log" 0 3 (fontified t)) . -4041) (undo-tree-id2 . -3) (undo-tree-id3 . -3) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (undo-tree-id6 . -3) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (undo-tree-id11 . -3) 4044 (4042 . 4044) (#("()" 0 2 (fontified nil)) . 4042) (undo-tree-id12 . -2) (4041 . 4042) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4041 4046 nil nil nil t #s(yas--exit 4047 nil))) #s(yas--exit 4047 nil) 11 nil #s(yas--field 1 4041 4046 nil nil nil t #s(yas--exit 4047 nil)) nil nil)) (4031 . 4044) (#("InChannel(${1:()})$0" 0 20 (fontified nil)) . 4031) (4031 . 4051) (#("InChannel(…)" 0 12 (fontified nil)) . -4031) (4031 . 4043) (4029 . 4031) (4014 . 4029) (#("LogErroCon" 0 10 (fontified nil)) . 4014) (4014 . 4024) (#("LogErrorContext" 0 15 (fontified nil)) . -4014) (4014 . 4029) (#("LogErroCon" 0 10 (face font-lock-type-face fontified t)) . -4014) (undo-tree-id13 . -7) (undo-tree-id14 . -10) (undo-tree-id15 . -7) (undo-tree-id16 . -7) 4024 (4021 . 4024) (#("r" 0 1 (face font-lock-type-face fontified t)) . -4021) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#(":" 0 1 (fontified t)) . -4022) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#(":" 0 1 (fontified t)) . -4023) (undo-tree-id25 . -1) 4024 (4022 . 4024) (#(":" 0 1 (fontified t)) . -4022) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#(":" 0 1 (fontified t)) . -4023) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -4024) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -4025) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -4026) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 4027 (4022 . 4027) (4014 . 4022) (#("LogE" 0 4 (fontified nil)) . 4014) (4014 . 4018) (#("LogError" 0 8 (fontified nil)) . -4014) (4014 . 4022) (#("LogE" 0 4 (face font-lock-type-face fontified t)) . -4014) (undo-tree-id36 . -4) 4018 (4014 . 4018) (#("c" 0 1 (fontified t)) . -4014) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("o" 0 1 (fontified t)) . -4015) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("n" 0 1 (fontified t)) . -4016) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("t" 0 1 (fontified t)) . -4017) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("e" 0 1 (fontified t)) . -4018) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("x" 0 1 (fontified t)) . -4019) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("t" 0 1 (fontified t)) . -4020) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 4021 (t 25817 24213 227375 714000)) nil (25818 12479 423759 688000) 0 nil])
([nil nil ((apply yas--snippet-revive 4031 4047 #s(yas--snippet nil (#s(yas--field 1 4041 4046 nil nil nil t #s(yas--exit 4047 nil))) #s(yas--exit 4047 nil) 11 nil #s(yas--field 1 4041 4046 nil nil nil t #s(yas--exit 4047 nil)) nil nil))) nil (25818 12972 283645 12000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -4249) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("n" 0 1 (fontified t)) . -4250) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("y" 0 1 (fontified t)) . -4251) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("h" 0 1 (fontified t)) . -4252) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("o" 0 1 (fontified t)) . -4253) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("w" 0 1 (fontified t)) . -4254) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#(":" 0 1 (fontified t)) . -4255) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#(":" 0 1 (fontified t)) . -4256) (undo-tree-id72 . -1) (undo-tree-id73 . -1) 4257 (#("
" 0 1 (fontified t)) . -3990) (undo-tree-id74 . -1) (#("
" 0 1 (fontified t)) . -3991) (undo-tree-id75 . -1) (#("	" 0 1 (fontified t)) . -3992) (undo-tree-id76 . -1) 3993 (3992 . 3993) (#("	" 0 1 (fontified nil)) . 3991) (undo-tree-id77 . -1) (3990 . 3993) (t 25818 12479 446374 662000)) nil (25818 12972 283619 144000) 0 nil])
([nil nil ((#("	Ok(())
" 0 1 (fontified t) 1 3 (face font-lock-type-face fontified t) 3 8 (fontified t)) . 4264) (undo-tree-id140 . -7) (undo-tree-id141 . -1) (undo-tree-id142 . -1) 4265 (t 25818 12972 299376 932000)) nil (25818 13054 153243 596000) 0 nil])
([nil nil ((apply yas--snippet-revive 4263 4331 #s(yas--snippet nil (#s(yas--field 1 4272 4276 nil nil nil nil #s(yas--field 2 4278 4288 nil nil nil t #s(yas--field 3 4290 4304 nil nil nil t #s(yas--field 4 4306 4314 nil nil nil nil #s(yas--field 5 4316 4323 nil nil nil nil #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil))))))) #s(yas--field 2 4278 4288 nil nil nil t #s(yas--field 3 4290 4304 nil nil nil t #s(yas--field 4 4306 4314 nil nil nil nil #s(yas--field 5 4316 4323 nil nil nil nil #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil)))))) #s(yas--field 3 4290 4304 nil nil nil t #s(yas--field 4 4306 4314 nil nil nil nil #s(yas--field 5 4316 4323 nil nil nil nil #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil))))) #s(yas--field 4 4306 4314 nil nil nil nil #s(yas--field 5 4316 4323 nil nil nil nil #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil)))) #s(yas--field 5 4316 4323 nil nil nil nil #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil))) #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil))) #s(yas--exit 4331 nil) 12 nil #s(yas--field 3 4290 4304 nil nil nil t #s(yas--field 4 4306 4314 nil nil nil nil #s(yas--field 5 4316 4323 nil nil nil nil #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil))))) nil nil)) (apply yas--snippet-revive 4294 4304 #s(yas--snippet nil nil #s(yas--exit 4304 nil) 14 nil nil #s(yas--field 3 4290 4304 nil nil nil t #s(yas--field 4 4306 4314 nil nil nil nil #s(yas--field 5 4316 4323 nil nil nil nil #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil))))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4304 nil) 14 nil nil #s(yas--field 3 4290 4304 nil nil nil t #s(yas--field 4 4306 4314 nil nil nil nil #s(yas--field 5 4316 4323 nil nil nil nil #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil))))) nil)) (4294 . 4304) (#("guild_id()$0" 0 12 (fontified nil)) . 4294) (4294 . 4306) (#("guil" 0 4 (fontified nil)) . 4294) (4294 . 4298) (#("guild_id()" 0 10 (fontified nil)) . -4294) (4294 . 4304) (#("guil" 0 4 (fontified t)) . -4294) (undo-tree-id137 . -4) (undo-tree-id138 . -4) 4298 (4292 . 4298) (4291 . 4292) (#("guild" 0 5 (fontified nil)) . 4291) (4290 . 4291) (apply yas--snippet-revive 4282 4288 #s(yas--snippet nil nil #s(yas--exit 4288 nil) 13 nil nil #s(yas--field 2 4278 4288 nil nil nil t #s(yas--field 3 4290 4304 nil nil nil t #s(yas--field 4 4306 4314 nil nil nil nil #s(yas--field 5 4316 4323 nil nil nil nil #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil)))))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4288 nil) 13 nil nil #s(yas--field 2 4278 4288 nil nil nil t #s(yas--field 3 4290 4304 nil nil nil t #s(yas--field 4 4306 4314 nil nil nil nil #s(yas--field 5 4316 4323 nil nil nil nil #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil)))))) nil)) (4282 . 4288) (#("data()$0" 0 8 (fontified nil)) . 4282) (4282 . 4290) (#("data()" 0 6 (fontified nil)) . -4282) (4282 . 4288) (4279 . 4282) (#("data" 0 4 (fontified nil)) . 4279) (4278 . 4279) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4272 4276 nil nil nil nil #s(yas--field 2 4278 4288 nil nil nil t #s(yas--field 3 4290 4304 nil nil nil t #s(yas--field 4 4306 4314 nil nil nil nil #s(yas--field 5 4316 4323 nil nil nil nil #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil))))))) #s(yas--field 2 4278 4288 nil nil nil t #s(yas--field 3 4290 4304 nil nil nil t #s(yas--field 4 4306 4314 nil nil nil nil #s(yas--field 5 4316 4323 nil nil nil nil #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil)))))) #s(yas--field 3 4290 4304 nil nil nil t #s(yas--field 4 4306 4314 nil nil nil nil #s(yas--field 5 4316 4323 nil nil nil nil #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil))))) #s(yas--field 4 4306 4314 nil nil nil nil #s(yas--field 5 4316 4323 nil nil nil nil #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil)))) #s(yas--field 5 4316 4323 nil nil nil nil #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil))) #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil))) #s(yas--exit 4331 nil) 12 nil #s(yas--field 3 4290 4304 nil nil nil t #s(yas--field 4 4306 4314 nil nil nil nil #s(yas--field 5 4316 4323 nil nil nil nil #s(yas--field 6 4325 4330 nil nil nil nil #s(yas--exit 4331 nil))))) nil nil)) (4263 . 4316) (#("post_log(${1:http}, ${2:data}, ${3:guild}, ${4:log_type}, ${5:builder}, ${6:after})$0" 0 85 (fontified nil)) . 4263) (4263 . 4348) (#("post" 0 4 (fontified nil)) . 4263) (4263 . 4267) (#("post_log(…)" 0 11 (fontified nil)) . -4263) (4263 . 4274) (#("post" 0 4 (fontified t)) . -4263) (undo-tree-id139 . -4) 4267 (4263 . 4267)) nil (25818 13054 153232 866000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -786) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . 1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("	" 0 1 (fontified t)) . -787) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("	" 0 1 (fontified t)) . -788) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("	" 0 1 (fontified t)) . -789) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) 790 (786 . 790) (785 . 786) (749 . 758) (#("S" 0 1 (face font-lock-type-face fontified t)) . -749) (undo-tree-id136 . -1) 750 (749 . 750)) nil (25818 13054 153207 277000) 0 nil])
([nil nil ((4281 . 4285) (#("c" 0 1 (fontified t)) . -4281) (undo-tree-id143 . -1) 4282 (4281 . 4282) (#("(" 0 1 (fontified t)) . -4281) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#("h" 0 1 (fontified t)) . -4282) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("t" 0 1 (fontified t)) . -4283) (undo-tree-id150 . -1) (#("t" 0 1 (fontified t)) . -4284) (undo-tree-id151 . -1) (#("p" 0 1 (fontified t)) . -4285) (undo-tree-id152 . -1) 4286 (t 25818 13054 172662 714000)) nil (25818 13070 185722 633000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4358) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("e" 0 1 (fontified t)) . -4359) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("." 0 1 (fontified t)) . -4360) (undo-tree-id158 . -1) (undo-tree-id159 . -1) 4361 (4355 . 4361) (4353 . 4355) (#(" " 0 1 (fontified nil)) . 4352) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (4353 . 4354) (#("b" 0 1 (fontified t)) . -4353) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("u" 0 1 (fontified t)) . -4354) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("i" 0 1 (fontified t)) . -4355) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("l" 0 1 (fontified t)) . -4356) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("d" 0 1 (fontified t)) . -4357) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("e" 0 1 (fontified t)) . -4358) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("r" 0 1 (fontified t)) . -4359) (undo-tree-id174 . -1) (undo-tree-id175 . -1) 4360 (apply yas--snippet-revive 4337 4351 #s(yas--snippet nil nil #s(yas--exit 4351 nil) 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4351 nil) 15 nil nil nil nil)) (4337 . 4351) (#("LogType::Purge$0" 0 16 (fontified nil)) . 4337) (4337 . 4353) (#("LogTyp" 0 6 (fontified nil)) . 4337) (4337 . 4343) (#("LogType::Purge" 0 14 (fontified nil)) . -4337) (4337 . 4351) (#("LogTyp" 0 6 (face font-lock-type-face fontified t)) . -4337) (undo-tree-id176 . -6) 4343 (4337 . 4343) (#("l" 0 1 (fontified t)) . -4337) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#("L" 0 1 (fontified t)) . -4338) (undo-tree-id179 . -1) 4339 (4338 . 4339) (#("o" 0 1 (fontified t)) . -4338) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("g" 0 1 (fontified t)) . -4339) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("_" 0 1 (fontified t)) . -4340) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("t" 0 1 (fontified t)) . -4341) (undo-tree-id186 . -1) (#("y" 0 1 (fontified t)) . -4342) (undo-tree-id187 . -1) (#("p" 0 1 (fontified t)) . -4343) (undo-tree-id188 . -1) (#("e" 0 1 (fontified t)) . -4344) (undo-tree-id189 . -1) 4345 (4335 . 4337) (#(" " 0 1 (fontified nil)) . 4334) (undo-tree-id190 . -1) (4335 . 4336) (4326 . 4328) (#(" " 0 1 (fontified nil)) . 4325) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (4326 . 4327) (4312 . 4314) (#(" " 0 1 (fontified nil)) . 4311) (undo-tree-id193 . -1) (4312 . 4313) (4304 . 4307) (4321 . 4326) (#("guild" 0 5 (fontified nil)) . 4321) (4321 . 4326) (#("guild" 0 5 (fontified t)) . -4321) (undo-tree-id194 . -5) (undo-tree-id195 . -5) 4326 (4325 . 4326) (4321 . 4325) (#("c" 0 1 (fontified t)) . -4321) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (#("t" 0 1 (fontified t)) . -4322) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("x" 0 1 (fontified t)) . -4323) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("." 0 1 (fontified t)) . -4324) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("g" 0 1 (fontified t)) . -4325) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#("u" 0 1 (fontified nil)) . -4326) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (#("i" 0 1 (fontified nil)) . -4327) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#("l" 0 1 (fontified t)) . -4328) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("d" 0 1 (fontified t)) . -4329) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (#("_" 0 1 (fontified t)) . -4330) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#("i" 0 1 (fontified t)) . -4331) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#("d" 0 1 (fontified t)) . -4332) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("(" 0 1 (fontified t)) . -4333) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (#(")" 0 1 (fontified t)) . -4334) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) 4335 (4119 . 4139) (4117 . 4119) (t 25818 13070 199320 217000)) nil (25818 13204 454483 489000) 0 nil])
([nil nil ((4368 . 4369) (#("name" 0 4 (fontified nil)) . 4368) (undo-tree-id238 . -4) (4367 . 4368) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4367 4386 nil nil nil t #s(yas--field 2 4388 4393 nil nil nil nil #s(yas--field 3 4395 4401 nil nil nil nil #s(yas--exit 4402 nil)))) #s(yas--field 2 4388 4393 nil nil nil nil #s(yas--field 3 4395 4401 nil nil nil nil #s(yas--exit 4402 nil))) #s(yas--field 3 4395 4401 nil nil nil nil #s(yas--exit 4402 nil))) #s(yas--exit 4402 nil) 16 nil #s(yas--field 1 4367 4386 nil nil nil t #s(yas--field 2 4388 4393 nil nil nil nil #s(yas--field 3 4395 4401 nil nil nil nil #s(yas--exit 4402 nil)))) nil nil)) (4361 . 4387) (#("field(${1:name}, ${2:value}, ${3:inline})$0" 0 43 (fontified nil)) . 4361) (4361 . 4404) (#("field(…)" 0 8 (fontified nil)) . -4361) (4361 . 4369) (4358 . 4361) (t 25818 13204 475911 726000)) nil (25818 13230 341400 492000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4368 . 4369) (nil fontified nil 4368 . 4369) (4368 . 4369) 4367) nil (25818 14214 962629 863000) 0 nil] [nil nil ((nil rear-nonsticky nil 4368 . 4369) (nil fontified nil 4368 . 4369) (4368 . 4369) 4367) ((#("🔥" 0 1 (face font-lock-string-face rear-nonsticky nil fontified nil)) . 4368) (nil rear-nonsticky t 4368 . 4369)) (25818 13230 332824 895000) 0 nil])
([nil nil ((4371 . 4372) (#("t" 0 1 (fontified t)) . -4371) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (#("i" 0 1 (fontified t)) . -4372) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (#("t" 0 1 (fontified t)) . -4373) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (#("l" 0 1 (fontified t)) . -4374) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (#("e" 0 1 (fontified t)) . -4375) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) 4376 (4360 . 4364) (apply yas--snippet-revive 4361 4373 #s(yas--snippet nil (#s(yas--field 1 4367 4372 nil nil nil nil #s(yas--exit 4373 nil))) #s(yas--exit 4373 nil) 17 nil #s(yas--field 1 4367 4372 nil nil nil nil #s(yas--exit 4373 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4367 4372 nil nil nil nil #s(yas--exit 4373 nil))) #s(yas--exit 4373 nil) 17 nil #s(yas--field 1 4367 4372 nil nil nil nil #s(yas--exit 4373 nil)) nil nil)) (4361 . 4373) (#("title(${1:title})$0" 0 19 (fontified nil)) . 4361) (4361 . 4380) (#("title" 0 5 (fontified nil)) . 4361) (4361 . 4366) (#("title(…)" 0 8 (fontified nil)) . -4361) (4361 . 4369) (#("title" 0 5 (fontified t)) . -4361) (undo-tree-id350 . -5) 4366 (4361 . 4366) (4360 . 4361) (#("
" 0 1 (fontified t)) . -4360) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("	" 0 1 (fontified t)) . -4361) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (#("	" 0 1 (fontified t)) . -4362) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#("	" 0 1 (fontified t)) . -4363) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) 4364 (#("." 0 1 (fontified t)) . -4364) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (#("f" 0 1 (fontified t)) . -4365) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (#("i" 0 1 (fontified t)) . -4366) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (#("e" 0 1 (fontified t)) . -4367) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (#("l" 0 1 (fontified t)) . -4368) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (#("d" 0 1 (fontified t)) . -4369) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (#("(" 0 1 (fontified t)) . -4370) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -4371) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (#("🔥" 0 1 (face font-lock-string-face rear-nonsticky t fontified t)) . -4372) (undo-tree-id422 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -4373) (undo-tree-id423 . -1) (#("P" 0 1 (face font-lock-string-face fontified t)) . -4374) (undo-tree-id424 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -4375) (undo-tree-id425 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -4376) (undo-tree-id426 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -4377) (undo-tree-id427 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -4378) (undo-tree-id428 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -4379) (undo-tree-id429 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -4380) (undo-tree-id430 . -1) (#("M" 0 1 (face font-lock-string-face fontified t)) . -4381) (undo-tree-id431 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -4382) (undo-tree-id432 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -4383) (undo-tree-id433 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -4384) (undo-tree-id434 . -1) 4385 (#("a" 0 1 (face font-lock-string-face fontified t)) . -4385) (undo-tree-id435 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -4386) (undo-tree-id436 . -1) (#("e" 0 1 (face font-lock-string-face fontified nil)) . -4387) (undo-tree-id437 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -4388) (undo-tree-id438 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -4389) (undo-tree-id439 . 1) (undo-tree-id440 . -1) (#("," 0 1 (fontified t)) . -4390) (undo-tree-id441 . -1) (#(" " 0 1 (fontified t)) . -4391) (undo-tree-id442 . -1) (#("v" 0 1 (fontified t)) . -4392) (undo-tree-id443 . -1) (#("a" 0 1 (fontified t)) . -4393) (undo-tree-id444 . -1) (#("l" 0 1 (fontified t)) . -4394) (undo-tree-id445 . -1) (#("u" 0 1 (fontified t)) . -4395) (undo-tree-id446 . -1) (#("e" 0 1 (fontified t)) . -4396) (undo-tree-id447 . -1) (#("," 0 1 (fontified t)) . -4397) (undo-tree-id448 . -1) (#(" " 0 1 (fontified t)) . -4398) (undo-tree-id449 . -1) (#("i" 0 1 (fontified t)) . -4399) (undo-tree-id450 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -4400) (undo-tree-id451 . -1) (#("l" 0 1 (fontified t)) . -4401) (undo-tree-id452 . -1) (#("i" 0 1 (fontified t)) . -4402) (undo-tree-id453 . -1) (#("n" 0 1 (fontified t)) . -4403) (undo-tree-id454 . -1) (#("e" 0 1 (fontified t)) . -4404) (undo-tree-id455 . -1) (#(")" 0 1 (fontified t)) . -4405) (undo-tree-id456 . -1) 4406 (4360 . 4364) (apply yas--snippet-revive 4361 4402 #s(yas--snippet nil (#s(yas--field 1 4367 4386 nil nil nil t #s(yas--field 2 4388 4393 nil nil nil nil #s(yas--field 3 4395 4401 nil nil nil nil #s(yas--exit 4402 nil)))) #s(yas--field 2 4388 4393 nil nil nil nil #s(yas--field 3 4395 4401 nil nil nil nil #s(yas--exit 4402 nil))) #s(yas--field 3 4395 4401 nil nil nil nil #s(yas--exit 4402 nil))) #s(yas--exit 4402 nil) 16 nil #s(yas--field 1 4367 4386 nil nil nil t #s(yas--field 2 4388 4393 nil nil nil nil #s(yas--field 3 4395 4401 nil nil nil nil #s(yas--exit 4402 nil)))) nil nil)) (4369 . 4385)) nil (25818 14214 962607 98000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 4372 . 4373) (nil fontified nil 4372 . 4373) (4372 . 4373) 4371) nil (25818 14214 962371 552000) 0 nil])
([nil nil ((4759 . 4767) (#(")" 0 1 (fontified t)) . -4759) (undo-tree-id239 . -1) 4760 (4753 . 4760) (4732 . 4753) (4722 . 4732) (4717 . 4722) (#("	" 0 1 (fontified nil)) . -4721) (undo-tree-id240 . -1) (4722 . 4723) (4717 . 4722) (4708 . 4717) (4687 . 4708) (4684 . 4687) (#("			" 0 3 (fontified nil)) . 4683) (undo-tree-id241 . -3) (4682 . 4687) (4676 . 4677) (4671 . 4675) (#("i" 0 1 (fontified t)) . -4671) (undo-tree-id242 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -4672) (undo-tree-id243 . -1) (#("l" 0 1 (fontified t)) . -4673) (undo-tree-id244 . -1) (#("i" 0 1 (fontified t)) . -4674) (undo-tree-id245 . -1) (#("n" 0 1 (fontified t)) . -4675) (undo-tree-id246 . -1) (#("e" 0 1 (fontified t)) . -4676) (undo-tree-id247 . -1) 4677 (apply yas--snippet-revive 4628 4678 #s(yas--snippet nil (#s(yas--field 1 4634 4643 nil nil nil t #s(yas--field 2 4645 4669 nil nil nil t #s(yas--field 3 4671 4677 nil nil nil nil #s(yas--exit 4678 nil)))) #s(yas--field 2 4645 4669 nil nil nil t #s(yas--field 3 4671 4677 nil nil nil nil #s(yas--exit 4678 nil))) #s(yas--field 3 4671 4677 nil nil nil nil #s(yas--exit 4678 nil))) #s(yas--exit 4678 nil) 23 nil #s(yas--field 2 4645 4669 nil nil nil t #s(yas--field 3 4671 4677 nil nil nil nil #s(yas--exit 4678 nil))) nil nil)) (4656 . 4665) (4654 . 4658) (4646 . 4656) (#("value" 0 5 (fontified nil)) . 4646) (4645 . 4646) (4635 . 4642) (4635 . 4636) (#("name" 0 4 (fontified nil)) . 4635) (4634 . 4635) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4634 4643 nil nil nil t #s(yas--field 2 4645 4669 nil nil nil t #s(yas--field 3 4671 4677 nil nil nil nil #s(yas--exit 4678 nil)))) #s(yas--field 2 4645 4669 nil nil nil t #s(yas--field 3 4671 4677 nil nil nil nil #s(yas--exit 4678 nil))) #s(yas--field 3 4671 4677 nil nil nil nil #s(yas--exit 4678 nil))) #s(yas--exit 4678 nil) 23 nil #s(yas--field 2 4645 4669 nil nil nil t #s(yas--field 3 4671 4677 nil nil nil nil #s(yas--exit 4678 nil))) nil nil)) (4628 . 4654) (#("field(${1:name}, ${2:value}, ${3:inline})$0" 0 43 (fontified nil)) . 4628) (4628 . 4671) (#("field" 0 5 (fontified nil)) . 4628) (4628 . 4633) (#("field(…)" 0 8 (fontified nil)) . -4628) (4628 . 4636) (#("field" 0 5 (fontified t)) . -4628) (undo-tree-id248 . -5) 4633 (4626 . 4633) (4621 . 4626) (#("	" 0 1 (fontified nil)) . -4625) (undo-tree-id249 . -1) (4626 . 4627) (4621 . 4626) (4601 . 4621) (#("i" 0 1 (fontified t)) . -4601) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -4602) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#("l" 0 1 (fontified t)) . -4603) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("a" 0 1 (fontified t)) . -4604) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (#("s" 0 1 (fontified t)) . -4605) (undo-tree-id258 . -1) (undo-tree-id259 . -1) 4606 (4596 . 4606) (4589 . 4596) (4586 . 4589) (#("			" 0 3 (fontified nil)) . 4585) (undo-tree-id260 . -3) (4588 . 4589) (4585 . 4588) (4586 . 4589) (#("			" 0 3 (fontified nil)) . 4585) (undo-tree-id261 . -3) (4584 . 4589) (4588 . 4589) (4584 . 4588) (4578 . 4579) (4573 . 4577) (#("i" 0 1 (fontified t)) . -4573) (undo-tree-id262 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -4574) (undo-tree-id263 . -1) (#("l" 0 1 (fontified t)) . -4575) (undo-tree-id264 . -1) (#("i" 0 1 (fontified t)) . -4576) (undo-tree-id265 . -1) 4577 (#("n" 0 1 (fontified t)) . -4577) (undo-tree-id266 . -1) (#("e" 0 1 (fontified t)) . -4578) (undo-tree-id267 . -1) 4579 (apply yas--snippet-revive 4526 4580 #s(yas--snippet nil (#s(yas--field 1 4532 4541 nil nil nil t #s(yas--field 2 4543 4571 nil nil nil t #s(yas--field 3 4573 4579 nil nil nil nil #s(yas--exit 4580 nil)))) #s(yas--field 2 4543 4571 nil nil nil t #s(yas--field 3 4573 4579 nil nil nil nil #s(yas--exit 4580 nil))) #s(yas--field 3 4573 4579 nil nil nil nil #s(yas--exit 4580 nil))) #s(yas--exit 4580 nil) 22 nil #s(yas--field 2 4543 4571 nil nil nil t #s(yas--field 3 4573 4579 nil nil nil nil #s(yas--exit 4580 nil))) nil nil)) (4552 . 4569) (4551 . 4553) (4551 . 4552) (#("}" 0 1 (fontified t)) . -4551) (undo-tree-id268 . -1) (undo-tree-id269 . -1) 4552 (4544 . 4552) (#("value" 0 5 (fontified nil)) . 4544) (4543 . 4544) (4533 . 4540) (4533 . 4534) (#("name" 0 4 (fontified nil)) . 4533) (4532 . 4533) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4532 4541 nil nil nil t #s(yas--field 2 4543 4571 nil nil nil t #s(yas--field 3 4573 4579 nil nil nil nil #s(yas--exit 4580 nil)))) #s(yas--field 2 4543 4571 nil nil nil t #s(yas--field 3 4573 4579 nil nil nil nil #s(yas--exit 4580 nil))) #s(yas--field 3 4573 4579 nil nil nil nil #s(yas--exit 4580 nil))) #s(yas--exit 4580 nil) 22 nil #s(yas--field 2 4543 4571 nil nil nil t #s(yas--field 3 4573 4579 nil nil nil nil #s(yas--exit 4580 nil))) nil nil)) (4526 . 4552) (#("field(${1:name}, ${2:value}, ${3:inline})$0" 0 43 (fontified nil)) . 4526) (4526 . 4569) (#("fiel" 0 4 (fontified nil)) . 4526) (4526 . 4530) (#("field(…)" 0 8 (fontified nil)) . -4526) (4526 . 4534) (#("fiel" 0 4 (fontified t)) . -4526) (undo-tree-id270 . -4) 4530 (4524 . 4530) (4519 . 4524) (#("	" 0 1 (fontified nil)) . -4523) (undo-tree-id271 . -1) (4524 . 4525) (4519 . 4524) (4517 . 4519) (4511 . 4517) (#("inl" 0 3 (fontified nil)) . 4511) (4511 . 4514) (#("inlast" 0 6 (fontified nil)) . -4511) (4511 . 4517) (#("inl" 0 3 (fontified t)) . -4511) (undo-tree-id272 . -3) 4514 (4494 . 4514) (#(" " 0 1 (fontified t)) . -4494) (undo-tree-id273 . -1) 4495 (4489 . 4495) (4486 . 4489) (#("			" 0 3 (fontified nil)) . 4485) (undo-tree-id274 . -3) (4484 . 4489) (4483 . 4484) (4483 . 4486) (4452 . 4453) 4460 (4401 . 4402) 4405 (4369 . 4370) (4360 . 4364) (4476 . 4477) (4359 . 4359) (4359 . 4360) (#(" " 0 1 (fontified t)) . -4360) (undo-tree-id275 . -1) (#("{" 0 1 (fontified t)) . -4361) (undo-tree-id276 . -1) 4362 (4360 . 4362) (4461 . 4466) (#("limit" 0 5 (fontified nil)) . 4461) (4461 . 4466) (#("limit" 0 5 (fontified t)) . -4461) (undo-tree-id277 . -5) (undo-tree-id278 . -5) 4466 (4461 . 4466) (#("v" 0 1 (fontified t)) . -4461) (undo-tree-id279 . -1) (#("a" 0 1 (fontified t)) . -4462) (undo-tree-id280 . -1) (#("l" 0 1 (fontified t)) . -4463) (undo-tree-id281 . -1) (#("u" 0 1 (fontified t)) . -4464) (undo-tree-id282 . -1) (#("e" 0 1 (fontified t)) . -4465) (undo-tree-id283 . -1) 4466 (4453 . 4458) (apply yas--snippet-revive 4436 4440 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (4436 . 4440) (#("true" 0 4 (fontified nil)) . 4436) (4436 . 4440) (#("true" 0 4 (fontified nil)) . 4436) (4436 . 4440) (#("true" 0 4 (face font-lock-keyword-face fontified t)) . -4436) (undo-tree-id284 . -4) (undo-tree-id285 . -4) 4440 (4434 . 4440) (4446 . 4448) (#("n" 0 1 (fontified t)) . -4446) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("a" 0 1 (fontified t)) . -4447) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (#("m" 0 1 (fontified t)) . -4448) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (#("e" 0 1 (fontified t)) . -4449) (undo-tree-id292 . -1) 4450 (4435 . 4439) (apply yas--snippet-revive 4436 4462 #s(yas--snippet nil (#s(yas--field 1 4442 4446 nil nil nil nil #s(yas--field 2 4448 4453 nil nil nil nil #s(yas--field 3 4455 4461 nil nil nil nil #s(yas--exit 4462 nil)))) #s(yas--field 2 4448 4453 nil nil nil nil #s(yas--field 3 4455 4461 nil nil nil nil #s(yas--exit 4462 nil))) #s(yas--field 3 4455 4461 nil nil nil nil #s(yas--exit 4462 nil))) #s(yas--exit 4462 nil) 20 nil #s(yas--field 1 4442 4446 nil nil nil nil #s(yas--field 2 4448 4453 nil nil nil nil #s(yas--field 3 4455 4461 nil nil nil nil #s(yas--exit 4462 nil)))) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4442 4446 nil nil nil nil #s(yas--field 2 4448 4453 nil nil nil nil #s(yas--field 3 4455 4461 nil nil nil nil #s(yas--exit 4462 nil)))) #s(yas--field 2 4448 4453 nil nil nil nil #s(yas--field 3 4455 4461 nil nil nil nil #s(yas--exit 4462 nil))) #s(yas--field 3 4455 4461 nil nil nil nil #s(yas--exit 4462 nil))) #s(yas--exit 4462 nil) 20 nil #s(yas--field 1 4442 4446 nil nil nil nil #s(yas--field 2 4448 4453 nil nil nil nil #s(yas--field 3 4455 4461 nil nil nil nil #s(yas--exit 4462 nil)))) nil nil)) (4436 . 4462) (#("field(${1:name}, ${2:value}, ${3:inline})$0" 0 43 (fontified nil)) . 4436) (4436 . 4479) (#("fiel" 0 4 (fontified nil)) . 4436) (4436 . 4440) (#("field(…)" 0 8 (fontified nil)) . -4436) (4436 . 4444) (#("fiel" 0 4 (fontified t)) . -4436) (undo-tree-id293 . -4) 4440 (4435 . 4440) (4392 . 4395) (apply yas--snippet-revive 4422 4431 #s(yas--snippet nil nil #s(yas--exit 4431 nil) 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4431 nil) 19 nil nil nil nil)) (4422 . 4431) (#("mention()$0" 0 11 (fontified nil)) . 4422) (4422 . 4433) (#("ment" 0 4 (fontified nil)) . 4422) (4422 . 4426) (#("mention() (as Mentionable)" 0 26 (fontified nil)) . -4422) (4422 . 4448) (#("ment" 0 4 (fontified t)) . -4422) (undo-tree-id294 . -4) (undo-tree-id295 . -4) 4426 (4422 . 4426) (4421 . 4422) (#("." 0 1 (fontified t)) . -4421) (undo-tree-id296 . -1) (undo-tree-id297 . -1) 4422 (4421 . 4422) (apply yas--snippet-revive 4413 4421 #s(yas--snippet nil nil #s(yas--exit 4421 nil) 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4421 nil) 18 nil nil nil nil)) (4413 . 4421) (#("author()$0" 0 10 (fontified nil)) . 4413) (4413 . 4423) (#("author()" 0 8 (fontified nil)) . -4413) (4413 . 4421) (4409 . 4413) (4407 . 4409) (4403 . 4406) (4400 . 4403) (4399 . 4401) (4399 . 4400) (#("P" 0 1 (face font-lock-type-face fontified t)) . -4399) (undo-tree-id298 . -1) (undo-tree-id299 . -1) 4400 (4393 . 4400) (#("			" 0 3 (fontified t)) . -4392) (4395 . 4395) (4395 . 4396) (4391 . 4395) (4373 . 4390)) nil (25818 14214 962329 141000) 0 nil])
([nil nil ((apply yas--snippet-revive 4476 4480 #s(yas--snippet nil nil nil 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 24 nil nil nil nil)) (4476 . 4480) (#("true" 0 4 (fontified nil)) . 4476) (4476 . 4480) (#("true" 0 4 (fontified nil)) . 4476) (4476 . 4480) (#("true" 0 4 (face font-lock-keyword-face fontified t)) . -4476) (undo-tree-id457 . -4) (undo-tree-id458 . -4) (undo-tree-id459 . -4) (undo-tree-id460 . -4) (undo-tree-id461 . -4) (undo-tree-id462 . -4) (undo-tree-id463 . -4) (undo-tree-id464 . -4) (undo-tree-id465 . -4) (undo-tree-id466 . -4) 4480 (4476 . 4480) (#("i" 0 1 (fontified t)) . -4476) (undo-tree-id467 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -4477) (undo-tree-id468 . -1) (#("l" 0 1 (fontified t)) . -4478) (undo-tree-id469 . -1) (#("i" 0 1 (fontified t)) . -4479) (undo-tree-id470 . -1) (#("n" 0 1 (fontified t)) . -4480) (undo-tree-id471 . -1) (#("e" 0 1 (fontified t)) . -4481) (undo-tree-id472 . -1) 4482 (t 25818 14214 981411 945000)) nil (25818 14227 567749 298000) 0 nil])
([nil nil ((4520 . 4528) (apply yas--snippet-revive 4508 4520 #s(yas--snippet nil nil #s(yas--exit 4520 nil) 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4520 nil) 25 nil nil nil nil)) (4508 . 4520) (#("channel_id()$0" 0 14 (fontified nil)) . 4508) (4508 . 4522) (#("channel_id()" 0 12 (fontified nil)) . -4508) (4508 . 4520) (4507 . 4508) (4486 . 4507) (4481 . 4486) (#(";" 0 1 (fontified t)) . -4481) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) 4482 (4790 . 4794) (4793 . 4794) (4790 . 4793) (4786 . 4790) (#("|" 0 1 (fontified t)) . -4786) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (#(" " 0 1 (fontified t)) . -4787) (undo-tree-id478 . -1) (undo-tree-id479 . -1) 4788 (4784 . 4788) (#("
" 0 1 (fontified t)) . -4784) (undo-tree-id480 . -1) (#("	" 0 1 (fontified t)) . -4785) (undo-tree-id481 . -1) 4786 (4785 . 4786) (#(" " 0 1 (fontified nil)) . 4784) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (4785 . 4786) (#("a" 0 1 (fontified t)) . -4785) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (#("f" 0 1 (fontified t)) . -4786) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (#("t" 0 1 (fontified t)) . -4787) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (#("e" 0 1 (fontified t)) . -4788) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (#("r" 0 1 (fontified t)) . -4789) (undo-tree-id492 . -1) (undo-tree-id493 . -1) 4790 (t 25818 14227 581391 868000)) nil (25818 14329 97028 369000) 0 nil])
([nil nil ((3727 . 3731) (344 . 376) (apply yas--snippet-revive 3685 3696 #s(yas--snippet nil nil #s(yas--exit 3695 nil) 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3695 nil) 27 nil nil nil nil)) (3685 . 3696) (#("BoxFuture<$0>" 0 13 (fontified nil)) . 3685) (3685 . 3698) (#("BoxFu" 0 5 (fontified nil)) . 3685) (3685 . 3690) (#("BoxFuture<…> (use futures::future::BoxFuture)" 0 45 (fontified nil)) . -3685) (3685 . 3730) (#("BoxFu" 0 5 (face font-lock-type-face fontified t)) . -3685) (undo-tree-id505 . -5) 3690 (3685 . 3690) (#("R" 0 1 (face font-lock-type-face fontified t)) . -3685) (undo-tree-id506 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3686) (undo-tree-id507 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -3687) (undo-tree-id508 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -3688) (undo-tree-id509 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -3689) (undo-tree-id510 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -3690) (undo-tree-id511 . -1) (#("<" 0 1 (fontified t)) . -3691) (undo-tree-id512 . -1) (#("(" 0 1 (fontified t)) . -3692) (undo-tree-id513 . -1) (#(")" 0 1 (fontified t)) . -3693) (undo-tree-id514 . -1) 3694 (#(">" 0 1 (fontified t)) . -3694) (undo-tree-id515 . -1) 3695 (3535 . 3538) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -3535) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (#("," 0 1 (fontified t)) . -3536) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (#(" " 0 1 (fontified t)) . -3537) (undo-tree-id520 . -1) (undo-tree-id521 . -1) 3538 (3534 . 3538) (4894 . 4899) (#("await" 0 5 (fontified nil)) . -4894) (4894 . 4899) (4893 . 4894) (apply yas--snippet-revive 4853 4888 #s(yas--snippet nil (#s(yas--field 1 4874 4877 nil nil nil t #s(yas--field 2 4879 4880 nil nil nil t #s(yas--field 3 4882 4887 nil nil nil t #s(yas--exit 4888 nil)))) #s(yas--field 2 4879 4880 nil nil nil t #s(yas--field 3 4882 4887 nil nil nil t #s(yas--exit 4888 nil))) #s(yas--field 3 4882 4887 nil nil nil t #s(yas--exit 4888 nil))) #s(yas--exit 4888 nil) 26 nil #s(yas--field 3 4882 4887 nil nil nil t #s(yas--exit 4888 nil)) nil nil)) (#("." 0 1 (fontified t)) . -4887) (undo-tree-id522 . -1) (undo-tree-id523 . -1) 4888 (4883 . 4888) (#("f" 0 1 (fontified nil)) . 4883) (4882 . 4883) (#("message_id" 0 10 (fontified nil)) . 4880) (4879 . 4880) (4874 . 4877) (#("ctx" 0 3 (fontified nil)) . 4874) (4874 . 4877) (#("ctx" 0 3 (fontified t)) . -4874) (undo-tree-id524 . -3) (undo-tree-id525 . -3) 4877 (4875 . 4877) (#("http" 0 4 (fontified nil)) . 4875) (4874 . 4875) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4874 4877 nil nil nil t #s(yas--field 2 4879 4880 nil nil nil t #s(yas--field 3 4882 4887 nil nil nil t #s(yas--exit 4888 nil)))) #s(yas--field 2 4879 4880 nil nil nil t #s(yas--field 3 4882 4887 nil nil nil t #s(yas--exit 4888 nil))) #s(yas--field 3 4882 4887 nil nil nil t #s(yas--exit 4888 nil))) #s(yas--exit 4888 nil) 26 nil #s(yas--field 3 4882 4887 nil nil nil t #s(yas--exit 4888 nil)) nil nil)) (4853 . 4894) (#("create_public_thread(${1:http}, ${2:message_id}, ${3:f})$0" 0 58 (fontified nil)) . 4853) (4853 . 4911) (#("create_public_thread(…) (alias create_thread)" 0 45 (fontified nil)) . -4853) (4853 . 4898) (4851 . 4853) (#("d" 0 1 (fontified t)) . -4851) (undo-tree-id526 . -1) (#("." 0 1 (fontified t)) . -4852) (undo-tree-id527 . -1) (#("s" 0 1 (fontified t)) . -4853) (undo-tree-id528 . -1) (#("t" 0 1 (fontified t)) . -4854) (undo-tree-id529 . -1) (#("a" 0 1 (fontified t)) . -4855) (undo-tree-id530 . -1) (#("r" 0 1 (fontified t)) . -4856) (undo-tree-id531 . -1) 4857 (4853 . 4857) (4852 . 4853) (4842 . 4852) (#("channel" 0 7 (fontified nil)) . 4842) (4842 . 4849) (#("channel_id" 0 10 (fontified nil)) . -4842) (4842 . 4852) (#("channel" 0 7 (fontified t)) . -4842) (undo-tree-id532 . -7) 4849 (4840 . 4849) (#("m" 0 1 (fontified t)) . -4840) (undo-tree-id533 . -1) (#("." 0 1 (fontified t)) . -4841) (undo-tree-id534 . -1) (#("t" 0 1 (fontified t)) . -4842) (undo-tree-id535 . -1) (#("h" 0 1 (fontified t)) . -4843) (undo-tree-id536 . -1) (#("r" 0 1 (fontified t)) . -4844) (undo-tree-id537 . -1) (#("e" 0 1 (fontified t)) . -4845) (undo-tree-id538 . -1) (#("a" 0 1 (fontified t)) . -4846) (undo-tree-id539 . -1) 4847 (4842 . 4847) (4841 . 4842) (#("." 0 1 (fontified t)) . -4841) (undo-tree-id540 . -1) (#("c" 0 1 (fontified t)) . -4842) (undo-tree-id541 . -1) (#("r" 0 1 (fontified t)) . -4843) (undo-tree-id542 . -1) (#("e" 0 1 (fontified t)) . -4844) (undo-tree-id543 . -1) 4845 (4840 . 4845) (t 25818 14329 117905 961000)) nil (25818 14689 700343 894000) 0 nil])
([nil nil ((#("	after: impl FnOnce(ser::Message) -> BoxFuture<'b, >
" 0 1 (fontified t) 1 6 (face font-lock-variable-name-face fontified t) 6 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 19 (face font-lock-type-face fontified t) 19 20 (fontified t) 20 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 32 (face font-lock-type-face fontified t) 32 35 (fontified t) 35 36 (syntax-table (1) fontified t) 36 37 (fontified t) 37 46 (face font-lock-type-face fontified t) 46 48 (fontified t) 48 49 (face font-lock-variable-name-face fontified t) 49 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t)) . 3680) (undo-tree-id499 . 2) (undo-tree-id500 . -52) (undo-tree-id501 . -50) (undo-tree-id502 . -50) (undo-tree-id503 . 2) (undo-tree-id504 . -51) 3730) nil (25818 14689 700274 233000) 0 nil])
([nil nil ((#(", |m| {
			m.channel_id.create_public_thread(ctx, m, |t| t)
		}" 0 8 (fontified t) 8 13 (fontified t) 13 24 (fontified t) 24 45 (fontified t) 45 48 (fontified t) 48 59 (fontified t) 59 60 (fontified t) 60 63 (fontified t)) . 4817) (undo-tree-id494 . -62) (undo-tree-id495 . -62) (undo-tree-id496 . -3) (undo-tree-id497 . -62) (undo-tree-id498 . -62)) nil (25818 14689 700261 886000) 0 nil])
([nil nil ((4283 . 4297)) nil (25818 14689 700238 876000) 0 nil])
([nil nil ((4840 . 4842) (4838 . 4839) (4838 . 4839) (t 25818 14689 724129 779000)) nil (25818 14697 899260 614000) 0 nil])
([nil nil ((4842 . 4848) (t 25818 14697 910787 708000)) nil (25818 14747 214736 349000) 0 nil])
([nil nil ((4842 . 4843) (#("	" 0 1 (fontified nil)) . 4841) (undo-tree-id547 . -1) (4840 . 4843) (t 25818 14747 234069 322000)) nil (25818 14754 884870 83000) 0 nil])
([nil nil ((#("		after(msg)?
" 0 12 (fontified t) 12 13 (face rust-question-mark fontified t) 13 14 (fontified t)) . 3971) (undo-tree-id544 . -4) (undo-tree-id545 . -13) (undo-tree-id546 . -4) 3975) nil (25818 14754 884856 798000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -3919) 3918 (3869 . 3870) (#("	" 0 1 (fontified nil)) . 3868) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (3869 . 3870) (3868 . 3869) (#(" " 0 1 (fontified t)) . 3868) (#("	" 0 1 (fontified t)) . -3868) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (#("	" 0 1 (fontified t)) . -3869) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (#("l" 0 1 (fontified t)) . -3870) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (#("e" 0 1 (fontified t)) . -3871) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -3872) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (#(" " 0 1 (fontified t)) . -3873) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -3874) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -3875) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (#("g" 0 1 (face font-lock-variable-name-face fontified t)) . -3876) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (#(" " 0 1 (fontified t)) . -3877) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (#("=" 0 1 (fontified t)) . -3878) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) 3879 (#("
" 0 1 (fontified t)) . -3938) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (#("	" 0 1 (fontified t)) . -3939) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (#("}" 0 1 (fontified t)) . -3940) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (#(";" 0 1 (fontified t)) . -3941) (undo-tree-id611 . -1) (undo-tree-id612 . -1) 3942 (#("
" 0 1 (fontified t)) . -3867) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (#("	" 0 1 (fontified t)) . -3868) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (#("l" 0 1 (fontified t)) . -3869) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (#("e" 0 1 (fontified t)) . -3870) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -3871) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (#(" " 0 1 (fontified t)) . -3872) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -3873) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -3874) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -3875) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (#("v" 0 1 (face font-lock-variable-name-face fontified t)) . -3876) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -3877) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -3878) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (#(":" 0 1 (fontified t)) . -3879) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (#(" " 0 1 (fontified t)) . -3880) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -3881) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3882) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -3883) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -3884) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (#("l" 0 1 (face font-lock-type-face fontified nil)) . -3885) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -3886) (undo-tree-id651 . -1) (undo-tree-id652 . -1) 3887 (#(" " 0 1 (fontified t)) . -3887) (undo-tree-id653 . -1) 3888 (3887 . 3888) (#("<" 0 1 (fontified t)) . -3887) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (#("(" 0 1 (fontified t)) . -3888) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (#(")" 0 1 (fontified t)) . -3889) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (#(">" 0 1 (fontified t)) . -3890) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (#(" " 0 1 (fontified t)) . -3891) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (#("=" 0 1 (fontified t)) . -3892) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (#(" " 0 1 (fontified t)) . -3893) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (#("t" 0 1 (fontified t)) . -3894) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (#("r" 0 1 (fontified t)) . -3895) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#("y" 0 1 (face font-lock-keyword-face fontified t)) . -3896) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (#(" " 0 1 (fontified t)) . -3897) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (#("{" 0 1 (fontified t)) . -3898) (undo-tree-id676 . -1) (undo-tree-id677 . -1) 3899 (4829 . 4837) (t 25818 14754 897394 756000)) nil (25818 14843 437210 340000) 0 nil])
([nil nil ((3949 . 3952) (#("
" 0 1 (fontified t)) . -3949) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (#("
" 0 1 (fontified t)) . -3950) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (#("	" 0 1 (fontified t)) . -3951) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (#("	" 0 1 (fontified t)) . -3952) (undo-tree-id556 . -1) (undo-tree-id557 . -1) 3953 (3952 . 3953) (#("r" 0 1 (fontified t)) . -3952) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (#("e" 0 1 (fontified t)) . -3953) (undo-tree-id560 . -1) (#("t" 0 1 (fontified t)) . -3954) (undo-tree-id561 . -1) (#("v" 0 1 (fontified t)) . -3955) (undo-tree-id562 . -1) (#("a" 0 1 (fontified t)) . -3956) (undo-tree-id563 . -1) 3957 (#("l" 0 1 (fontified t)) . -3957) (undo-tree-id564 . -1) 3958 (3925 . 3928) (3929 . 3933) (apply yas--snippet-revive 3926 3942 #s(yas--snippet nil (#s(yas--field 1 3930 3941 nil nil nil t #s(yas--exit 3942 nil))) #s(yas--exit 3942 nil) 28 nil #s(yas--field 1 3930 3941 nil nil nil t #s(yas--exit 3942 nil)) nil nil)) (3931 . 3941) (#("op" 0 2 (fontified nil)) . 3931) (3930 . 3931) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3930 3941 nil nil nil t #s(yas--exit 3942 nil))) #s(yas--exit 3942 nil) 28 nil #s(yas--field 1 3930 3941 nil nil nil t #s(yas--exit 3942 nil)) nil nil)) (3926 . 3933) (#("map(${1:op})$0" 0 14 (fontified nil)) . 3926) (3926 . 3940) (#("map" 0 3 (fontified nil)) . 3926) (3926 . 3929) (#("map(…)" 0 6 (fontified nil)) . -3926) (3926 . 3932) (#("map" 0 3 (fontified t)) . -3926) (undo-tree-id565 . -3) 3929 (3928 . 3929) (3925 . 3928) (#("?" 0 1 (face rust-question-mark fontified t)) . -3925) (undo-tree-id566 . -1) (#(";" 0 1 (fontified t)) . -3926) (undo-tree-id567 . -1) 3927) nil (25818 14843 436820 245000) 0 nil])
([nil nil ((1695 . 1698) (1674 . 1695) (#("g" 0 1 (face font-lock-string-face fontified t)) . -1674) (undo-tree-id678 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1675) (undo-tree-id679 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1676) (undo-tree-id680 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1677) (undo-tree-id681 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -1678) (undo-tree-id682 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1679) (undo-tree-id683 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -1680) (undo-tree-id684 . -1) 1681 (1673 . 1681) (1663 . 1673) (1658 . 1663) (1655 . 1658) (#("(" 0 1 (fontified t)) . -1655) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (#("c" 0 1 (fontified t)) . -1656) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (#("h" 0 1 (fontified t)) . -1657) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (#("a" 0 1 (fontified t)) . -1658) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (#("n" 0 1 (fontified t)) . -1659) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (#("n" 0 1 (fontified t)) . -1660) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (#("e" 0 1 (fontified t)) . -1661) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (#("l" 0 1 (fontified t)) . -1662) (undo-tree-id700 . -1) (undo-tree-id701 . -1) 1663 (1655 . 1663) (apply yas--snippet-revive 1638 1655 #s(yas--snippet nil nil #s(yas--exit 1655 nil) 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1655 nil) 29 nil nil nil nil)) (1638 . 1655) (#("GettingLogChannel$0" 0 19 (fontified nil)) . 1638) (1638 . 1657) (#("GettingL" 0 8 (fontified nil)) . 1638) (1638 . 1646) (#("GettingLogChannel" 0 17 (fontified nil)) . -1638) (1638 . 1655) (#("GettingL" 0 8 (face font-lock-type-face fontified t)) . -1638) (undo-tree-id702 . -2) (undo-tree-id703 . -8) 1646 (1640 . 1646) (1638 . 1640) (1634 . 1638) (1633 . 1634) (1226 . 1244) (1224 . 1226) (1223 . 1224) (t 25818 14843 457305 900000)) nil (25818 14894 802016 723000) 0 nil])
([nil nil ((3969 . 3970) (3916 . 3919) (apply yas--snippet-revive 3917 3966 #s(yas--snippet nil (#s(yas--field 1 3931 3965 nil nil nil t #s(yas--exit 3966 nil))) #s(yas--exit 3966 nil) 30 nil #s(yas--field 1 3931 3965 nil nil nil t #s(yas--exit 3966 nil)) nil nil)) (apply yas--snippet-revive 3948 3965 #s(yas--snippet nil nil #s(yas--exit 3965 nil) 31 nil nil #s(yas--field 1 3931 3965 nil nil nil t #s(yas--exit 3966 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3965 nil) 31 nil nil #s(yas--field 1 3931 3965 nil nil nil t #s(yas--exit 3966 nil)) nil)) (3948 . 3965) (#("GettingLogChannel$0" 0 19 (fontified nil)) . 3948) (3948 . 3967) (#("GettingLogChannel" 0 17 (fontified nil)) . -3948) (3948 . 3965) (3946 . 3948) (3931 . 3946) (#("LogErr" 0 6 (fontified nil)) . 3931) (3931 . 3937) (#("LogErrorContext" 0 15 (fontified nil)) . -3931) (3931 . 3946) (#("LogErr" 0 6 (face font-lock-type-face fontified t)) . -3931) (undo-tree-id704 . -6) (undo-tree-id705 . -6) 3937 (3932 . 3937) (#("context" 0 7 (fontified nil)) . 3932) (3931 . 3932) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3931 3965 nil nil nil t #s(yas--exit 3966 nil))) #s(yas--exit 3966 nil) 30 nil #s(yas--field 1 3931 3965 nil nil nil t #s(yas--exit 3966 nil)) nil nil)) (3917 . 3939) (#("contextualize(${1:context})$0" 0 29 (fontified nil)) . 3917) (3917 . 3946) (#("contex" 0 6 (fontified nil)) . 3917) (3917 . 3923) (#("contextualize(…) (as Contextualizable)" 0 38 (fontified nil)) . -3917) (3917 . 3955) (#("contex" 0 6 (fontified t)) . -3917) (undo-tree-id706 . -6) 3923 (3916 . 3923) (#("?" 0 1 (face rust-question-mark fontified t)) . -3916) (undo-tree-id707 . -1) (#("." 0 1 (fontified t)) . -3917) (undo-tree-id708 . -1) (#("c" 0 1 (fontified t)) . -3918) (undo-tree-id709 . -1) 3919 (#("o" 0 1 (fontified t)) . -3919) (undo-tree-id710 . -1) (#("n" 0 1 (fontified t)) . -3920) (undo-tree-id711 . -1) (#("t" 0 1 (fontified t)) . -3921) (undo-tree-id712 . -1) (#("e" 0 1 (fontified t)) . -3922) (undo-tree-id713 . -1) (#("x" 0 1 (fontified t)) . -3923) (undo-tree-id714 . -1) 3924 (3917 . 3924) (3950 . 3951) (#("?" 0 1 (face rust-question-mark fontified t)) . -3950) (undo-tree-id715 . -1) (#("." 0 1 (fontified t)) . -3951) (undo-tree-id716 . -1) (#("c" 0 1 (fontified t)) . -3952) (undo-tree-id717 . -1) (#("o" 0 1 (fontified t)) . -3953) (undo-tree-id718 . -1) (#("n" 0 1 (fontified t)) . -3954) (undo-tree-id719 . -1) (#("t" 0 1 (fontified t)) . -3955) (undo-tree-id720 . -1) (#("e" 0 1 (fontified t)) . -3956) (undo-tree-id721 . -1) (#("x" 0 1 (fontified t)) . -3957) (undo-tree-id722 . -1) (#("t" 0 1 (fontified t)) . -3958) (undo-tree-id723 . -1) (#("u" 0 1 (fontified t)) . -3959) (undo-tree-id724 . -1) (#("a" 0 1 (fontified t)) . -3960) (undo-tree-id725 . -1) (#("l" 0 1 (fontified t)) . -3961) (undo-tree-id726 . -1) (#("i" 0 1 (fontified t)) . -3962) (undo-tree-id727 . -1) (#("z" 0 1 (fontified t)) . -3963) (undo-tree-id728 . -1) (#("e" 0 1 (fontified t)) . -3964) (undo-tree-id729 . -1) (#("(" 0 1 (fontified t)) . -3965) (undo-tree-id730 . -1) 3966 (3951 . 3966) (t 25818 14894 823922 891000)) nil (25818 14971 152238 775000) 0 nil])
([nil nil ((3650 . 3660) (#("p" 0 1 (face font-lock-doc-face fontified t)) . -3650) (undo-tree-id731 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -3651) (undo-tree-id732 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -3652) (undo-tree-id733 . -1) 3653 (3634 . 3653) (3633 . 3634) (t 25818 14971 173851 258000)) nil (25818 14995 560914 141000) 0 nil])
([nil nil ((3810 . 3817) (#("Messa" 0 5 (fontified nil)) . 3810) (3810 . 3815) (#("Message" 0 7 (fontified nil)) . -3810) (3810 . 3817) (#("Messa" 0 5 (face font-lock-type-face fontified t)) . -3810) (undo-tree-id734 . -5) (undo-tree-id735 . -5) (undo-tree-id736 . -5) (undo-tree-id737 . -5) 3815 (3805 . 3815) (#("(" 0 1 (fontified t)) . -3805) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (#(")" 0 1 (fontified t)) . -3806) (undo-tree-id741 . -1) 3807 (t 25818 14995 583828 857000)) nil (25818 21458 681436 268000) 0 nil])
([nil nil ((1808 . 1811) (1806 . 1808) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1806) (undo-tree-id836 . -1) 1807 (1806 . 1807) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1806) (undo-tree-id837 . -1) 1807 (1789 . 1807) (1768 . 1789) (1763 . 1768) (1760 . 1763) (apply yas--snippet-revive 1733 1760 #s(yas--snippet nil nil #s(yas--exit 1760 nil) 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1760 nil) 36 nil nil nil nil)) (1733 . 1760) (#("CreatingPurgedMessageThread$0" 0 29 (fontified nil)) . 1733) (1733 . 1762) (#("Crea" 0 4 (fontified nil)) . 1733) (1733 . 1737) (#("CreatingPurgedMessageThread" 0 27 (fontified nil)) . -1733) (1733 . 1760) (#("Crea" 0 4 (face font-lock-type-face fontified t)) . -1733) (undo-tree-id838 . -1) (undo-tree-id839 . -4) 1737 (1733 . 1737) (1259 . 1267) (#("M" 0 1 (face font-lock-type-face fontified t)) . -1259) (undo-tree-id840 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1260) (undo-tree-id841 . -1) 1261 (1254 . 1261) (#("M" 0 1 (face font-lock-type-face fontified t)) . -1254) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1255) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1256) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1257) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1258) (undo-tree-id850 . -1) 1259 (1254 . 1259) (1716 . 1720) (1715 . 1716) (1246 . 1261) (1244 . 1246) (5064 . 5067) (5070 . 5081) (5064 . 5070) (5055 . 5058) (5056 . 5061) (#("await" 0 5 (fontified nil)) . -5056) (5056 . 5061) (5055 . 5056) (#("
" 0 1 (fontified t)) . -5055) (undo-tree-id851 . -1) (#(" " 0 1 (fontified t)) . -5056) (undo-tree-id852 . -1) (#(" " 0 1 (fontified t)) . -5057) (undo-tree-id853 . -1) 5058 (#(" " 0 1 (fontified t)) . -5058) (undo-tree-id854 . -1) (#(" " 0 1 (fontified t)) . -5059) (undo-tree-id855 . -1) (#("." 0 1 (fontified t)) . -5060) (undo-tree-id856 . -1) 5061 (5056 . 5060) (#("		" 0 2 (fontified t)) . -5056) 5058 (5058 . 5058) (5058 . 5059) (5055 . 5058) (#("/" 0 1 (fontified t)) . -5055) (undo-tree-id857 . -1) 5056 (5055 . 5056) (apply yas--snippet-revive 4993 5055 #s(yas--snippet nil (#s(yas--field 1 5014 5017 nil nil nil t #s(yas--field 2 5019 5029 nil nil nil t #s(yas--field 3 5031 5054 nil nil nil t #s(yas--exit 5055 nil)))) #s(yas--field 2 5019 5029 nil nil nil t #s(yas--field 3 5031 5054 nil nil nil t #s(yas--exit 5055 nil))) #s(yas--field 3 5031 5054 nil nil nil t #s(yas--exit 5055 nil))) #s(yas--exit 5055 nil) 32 nil #s(yas--field 3 5031 5054 nil nil nil t #s(yas--exit 5055 nil)) nil nil)) (#("." 0 1 (fontified t)) . -5054) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (#("k" 0 1 (fontified t)) . -5055) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (#("i" 0 1 (fontified t)) . -5056) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (#(")" 0 1 (fontified t)) . -5057) (undo-tree-id864 . -1) (undo-tree-id865 . -1) 5058 (apply yas--snippet-revive 5055 5058 #s(yas--snippet nil (#s(yas--field 1 5057 5057 nil nil nil t #s(yas--exit 5058 nil))) #s(yas--exit 5058 nil) 35 nil #s(yas--field 1 5057 5057 nil nil nil t #s(yas--exit 5058 nil)) #s(yas--field 3 5031 5054 nil nil nil t #s(yas--exit 5055 nil)) nil)) (#("n" 0 1 (fontified t)) . -5057) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (#("d" 0 1 (fontified t)) . -5058) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (#("(" 0 1 (fontified t)) . -5059) (undo-tree-id870 . -1) (undo-tree-id871 . -1) 5060 (#("kind" 0 4 (fontified t)) . 5060) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5057 5057 nil nil nil t #s(yas--exit 5058 nil))) #s(yas--exit 5058 nil) 35 nil #s(yas--field 1 5057 5057 nil nil nil t #s(yas--exit 5058 nil)) #s(yas--field 3 5031 5054 nil nil nil t #s(yas--exit 5055 nil)) nil)) (5055 . 5065) (#("kind(${1:kind})$0" 0 17 (fontified nil)) . 5055) (5055 . 5072) (#("kind(…)" 0 7 (fontified nil)) . -5055) (5055 . 5062) (5054 . 5055) (#(")" 0 1 (fontified t)) . -5054) (undo-tree-id872 . -1) (undo-tree-id873 . -1) 5055 (apply yas--snippet-revive 5054 5055 #s(yas--snippet nil (#s(yas--field 1 5054 5054 nil nil nil t #s(yas--exit 5055 nil))) #s(yas--exit 5055 nil) 34 nil #s(yas--field 1 5054 5054 nil nil nil t #s(yas--exit 5055 nil)) #s(yas--field 3 5031 5054 nil nil nil t #s(yas--exit 5055 nil)) nil)) (#("." 0 1 (fontified t)) . -5054) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (#("k" 0 1 (fontified t)) . -5055) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (#("i" 0 1 (fontified t)) . -5056) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (#("n" 0 1 (fontified t)) . -5057) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (#("d" 0 1 (fontified t)) . -5058) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (#("(" 0 1 (fontified t)) . -5059) (undo-tree-id884 . -1) (undo-tree-id885 . -1) 5060 (#("kind" 0 4 (fontified t)) . 5060) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5054 5054 nil nil nil t #s(yas--exit 5055 nil))) #s(yas--exit 5055 nil) 34 nil #s(yas--field 1 5054 5054 nil nil nil t #s(yas--exit 5055 nil)) #s(yas--field 3 5031 5054 nil nil nil t #s(yas--exit 5055 nil)) nil)) (5055 . 5065) (#("kind(${1:kind})$0" 0 17 (fontified nil)) . 5055) (5055 . 5072) (#("kind(…)" 0 7 (fontified nil)) . -5055) (5055 . 5062) (5054 . 5055) (apply yas--snippet-revive 5037 5054 #s(yas--snippet nil (#s(yas--field 1 5042 5053 nil nil nil t #s(yas--exit 5054 nil))) #s(yas--exit 5054 nil) 33 nil #s(yas--field 1 5042 5053 nil nil nil t #s(yas--exit 5054 nil)) #s(yas--field 3 5031 5054 nil nil nil t #s(yas--exit 5055 nil)) nil)) (5049 . 5053) (#("l" 0 1 (face font-lock-string-face fontified t)) . -5049) (undo-tree-id886 . -1) 5050 (5043 . 5050) (#("name" 0 4 (fontified nil)) . 5043) (5042 . 5043) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5042 5053 nil nil nil t #s(yas--exit 5054 nil))) #s(yas--exit 5054 nil) 33 nil #s(yas--field 1 5042 5053 nil nil nil t #s(yas--exit 5054 nil)) #s(yas--field 3 5031 5054 nil nil nil t #s(yas--exit 5055 nil)) nil)) (5037 . 5047) (#("name(${1:name})$0" 0 17 (fontified nil)) . 5037) (5037 . 5054) (#("name(…)" 0 7 (fontified nil)) . -5037) (5037 . 5044) (5032 . 5037) (#("f" 0 1 (fontified nil)) . 5032) (5031 . 5032) (5020 . 5029) (#("message_id" 0 10 (fontified nil)) . 5020) (5019 . 5020) (5014 . 5017) (#("ctx" 0 3 (fontified nil)) . 5014) (5014 . 5017) (#("ctx" 0 3 (fontified t)) . -5014) (undo-tree-id887 . -3) (undo-tree-id888 . -3) 5017 (5015 . 5017) (#("http" 0 4 (fontified nil)) . 5015) (5014 . 5015) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5014 5017 nil nil nil t #s(yas--field 2 5019 5029 nil nil nil t #s(yas--field 3 5031 5054 nil nil nil t #s(yas--exit 5055 nil)))) #s(yas--field 2 5019 5029 nil nil nil t #s(yas--field 3 5031 5054 nil nil nil t #s(yas--exit 5055 nil))) #s(yas--field 3 5031 5054 nil nil nil t #s(yas--exit 5055 nil))) #s(yas--exit 5055 nil) 32 nil #s(yas--field 3 5031 5054 nil nil nil t #s(yas--exit 5055 nil)) nil nil)) (4993 . 5034) (#("create_public_thread(${1:http}, ${2:message_id}, ${3:f})$0" 0 58 (fontified nil)) . 4993) (4993 . 5051) (#("create_public_thread(…) (alias create_thread)" 0 45 (fontified nil)) . -4993) (4993 . 5038) (4992 . 4993) (4982 . 4992) (#("channel_id" 0 10 (fontified nil)) . -4982) (4982 . 4992) (4981 . 4982) (#("." 0 1 (fontified t)) . -4981) (undo-tree-id889 . -1) (#("c" 0 1 (fontified t)) . -4982) (undo-tree-id890 . -1) (#("\\" 0 1 (fontified t)) . -4983) (undo-tree-id891 . -1) (#("\\" 0 1 (fontified t)) . -4984) (undo-tree-id892 . -1) 4985 (4982 . 4985) (4974 . 4982) (#("m" 0 1 (fontified t)) . -4974) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (#("e" 0 1 (fontified t)) . -4975) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (#("s" 0 1 (fontified t)) . -4976) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (#("s" 0 1 (fontified t)) . -4977) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (#("a" 0 1 (fontified t)) . -4978) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (#("g" 0 1 (fontified t)) . -4979) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (#("e" 0 1 (fontified t)) . -4980) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (#("." 0 1 (fontified t)) . -4981) (undo-tree-id935 . -1) 4982 (4981 . 4982) (#("." 0 1 (fontified t)) . -4981) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (#("\\" 0 1 (fontified t)) . -4982) (undo-tree-id941 . -1) 4983 (4982 . 4983) (t 25818 21458 695006 57000)) nil (25818 21896 96595 725000) 0 nil])
([nil nil ((5197 . 5198) (#("." 0 1 (fontified t)) . -5197) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (#("c" 0 1 (fontified t)) . -5198) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) 5199 (#("o" 0 1 (fontified t)) . -5199) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (#("n" 0 1 (fontified t)) . -5200) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (#("t" 0 1 (fontified t)) . -5201) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (#("e" 0 1 (fontified t)) . -5202) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (#("x" 0 1 (fontified t)) . -5203) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (#("t" 0 1 (fontified t)) . -5204) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (#("u" 0 1 (fontified t)) . -5205) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (#("a" 0 1 (fontified t)) . -5206) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) 5207 (5197 . 5207)) nil (25818 21896 96387 581000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -5197) (undo-tree-id942 . -1) (#("c" 0 1 (fontified t)) . -5198) (undo-tree-id943 . -1) (#("o" 0 1 (fontified t)) . -5199) (undo-tree-id944 . -1) 5200 (#("n" 0 1 (fontified t)) . -5200) (undo-tree-id945 . -1) (#("t" 0 1 (fontified t)) . -5201) (undo-tree-id946 . -1) (#("e" 0 1 (fontified t)) . -5202) (undo-tree-id947 . -1) (#("x" 0 1 (fontified t)) . -5203) (undo-tree-id948 . -1) 5204 (5197 . 5204) (t 25818 21896 104759 632000)) nil (25818 21912 470572 9000) 0 nil])
([nil nil ((5184 . 5188)) nil (25818 21912 470554 721000) 0 nil])
([nil nil ((5214 . 5215) 5227 (5189 . 5190) 5198 (5179 . 5180) 5184 (5094 . 5095) 5099 (5087 . 5092) (5086 . 5087) (#("	" 0 1 (fontified nil)) . 5085) (5085 . 5086) (5085 . 5086) (#("c" 0 1 (fontified t)) . -5219) (undo-tree-id973 . -1) (#("o" 0 1 (fontified t)) . -5220) (undo-tree-id974 . -1) (#("n" 0 1 (fontified t)) . -5221) (undo-tree-id975 . -1) (#("t" 0 1 (fontified t)) . -5222) (undo-tree-id976 . -1) (#("e" 0 1 (fontified t)) . -5223) (undo-tree-id977 . -1) (#("x" 0 1 (fontified t)) . -5224) (undo-tree-id978 . -1) (#("t" 0 1 (fontified t)) . -5225) (undo-tree-id979 . -1) 5226 (5201 . 5204) (apply yas--snippet-revive 5202 5224 #s(yas--snippet nil (#s(yas--field 1 5216 5223 nil nil nil nil #s(yas--exit 5224 nil))) #s(yas--exit 5224 nil) 37 nil #s(yas--field 1 5216 5223 nil nil nil nil #s(yas--exit 5224 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5216 5223 nil nil nil nil #s(yas--exit 5224 nil))) #s(yas--exit 5224 nil) 37 nil #s(yas--field 1 5216 5223 nil nil nil nil #s(yas--exit 5224 nil)) nil nil)) (5202 . 5224) (#("contextualize(${1:context})$0" 0 29 (fontified nil)) . 5202) (5202 . 5231) (#("contextualize(…) (as Contextualizable)" 0 38 (fontified nil)) . -5202) (5202 . 5240) (5201 . 5202) (t 25818 21912 478083 306000)) nil (25818 21986 282213 821000) 0 nil])
([nil nil ((#("	Ok(())
" 0 1 (fontified t) 1 3 (face font-lock-type-face fontified t) 3 7 (fontified t) 7 8 (fontified t)) . 5233) (undo-tree-id953 . 1) (undo-tree-id954 . -7) (undo-tree-id955 . 8) (undo-tree-id956 . -6) (undo-tree-id957 . -6) (undo-tree-id958 . -7) (undo-tree-id959 . -7) (undo-tree-id960 . -7) (undo-tree-id961 . -6) (undo-tree-id962 . -6) (undo-tree-id963 . -6) (undo-tree-id964 . -6) (undo-tree-id965 . -6) (undo-tree-id966 . -6) (undo-tree-id967 . -6) (undo-tree-id968 . -6) (undo-tree-id969 . -6) (undo-tree-id970 . -6) (undo-tree-id971 . -6) (undo-tree-id972 . -8) 5239) nil (25818 21986 282203 930000) 0 nil])
([nil nil ((5130 . 5134) (5115 . 5119) (5095 . 5108) (apply yas--snippet-revive 5247 5274 #s(yas--snippet nil nil #s(yas--exit 5274 nil) 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5274 nil) 38 nil nil nil nil)) (5247 . 5274) (#("CreatingPurgedMessageThread$0" 0 29 (fontified nil)) . 5247) (5247 . 5276) (#("CreatingPurgedMessageThread" 0 27 (fontified nil)) . -5247) (5247 . 5274) (5245 . 5247) (5230 . 5245) (#("LogE" 0 4 (fontified nil)) . 5230) (5230 . 5234) (#("LogErrorContext" 0 15 (fontified nil)) . -5230) (5230 . 5245) (#("LogE" 0 4 (face font-lock-type-face fontified t)) . -5230) (undo-tree-id949 . -3) (undo-tree-id950 . -4) 5234 (5233 . 5234) (#("g" 0 1 (face font-lock-type-face fontified t)) . -5233) (undo-tree-id951 . -1) (undo-tree-id952 . -1) 5234 (5230 . 5234)) nil (25818 21986 282184 987000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -5299) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (5300 . 5301) (5297 . 5300) (t 25818 21986 288039 495000)) nil (25818 22024 177967 329000) 0 nil])
([nil nil ((5296 . 5297) (#("
" 0 1 (fontified t)) . -5297) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (#("	" 0 1 (fontified t)) . -5298) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (#("	" 0 1 (fontified t)) . -5299) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (#("t" 0 1 (fontified t)) . -5300) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (#("h" 0 1 (fontified t)) . -5301) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (#("r" 0 1 (fontified t)) . -5302) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (#("e" 0 1 (fontified t)) . -5303) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (#("a" 0 1 (fontified t)) . -5304) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (#("d" 0 1 (fontified t)) . -5305) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (#("." 0 1 (fontified t)) . -5306) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) 5307 (5300 . 5307) (5297 . 5300)) nil (25818 22024 177953 579000) 0 nil])
([nil nil ((389 . 390) (371 . 389) (#("repl" 0 4 (fontified nil)) . 371) (371 . 375) (#("replicate_messages" 0 18 (fontified nil)) . -371) (371 . 389) (#("repl" 0 4 (fontified t)) . -371) (undo-tree-id1082 . -4) 375 (369 . 375) (355 . 369) (#("msgre" 0 5 (fontified nil)) . 355) (355 . 360) (#("msgreplication" 0 14 (fontified nil)) . -355) (355 . 369) (#("msgre" 0 5 (fontified t)) . -355) (undo-tree-id1083 . -5) 360 (353 . 360) (#(":" 0 1 (fontified t)) . -353) (undo-tree-id1084 . -1) (#(":" 0 1 (fontified t)) . -354) (undo-tree-id1085 . -1) (#("m" 0 1 (fontified t)) . -355) (undo-tree-id1086 . -1) (#("e" 0 1 (fontified t)) . -356) (undo-tree-id1087 . -1) (#("s" 0 1 (fontified t)) . -357) (undo-tree-id1088 . -1) (#("s" 0 1 (fontified t)) . -358) (undo-tree-id1089 . -1) (#("a" 0 1 (fontified t)) . -359) (undo-tree-id1090 . -1) (#("g" 0 1 (fontified t)) . -360) (undo-tree-id1091 . -1) (#("e" 0 1 (fontified t)) . -361) (undo-tree-id1092 . -1) (#("_" 0 1 (fontified t)) . -362) (undo-tree-id1093 . -1) 363 (346 . 363) (#("r" 0 1 (fontified t)) . -346) (undo-tree-id1094 . -1) (#(" " 0 1 (fontified t)) . -347) (undo-tree-id1095 . -1) (#("c" 0 1 (fontified t)) . -348) (undo-tree-id1096 . -1) (#("r" 0 1 (fontified t)) . -349) (undo-tree-id1097 . -1) (#("a" 0 1 (fontified t)) . -350) (undo-tree-id1098 . -1) (#("t" 0 1 (fontified t)) . -351) (undo-tree-id1099 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -352) (undo-tree-id1100 . -1) 353 (344 . 353) (343 . 344) (#("m" 0 1 (fontified t)) . -5302) (undo-tree-id1101 . -1) 5303 (5302 . 5303) (#("r" 0 1 (fontified t)) . -5302) (undo-tree-id1102 . -1) (#("e" 0 1 (fontified t)) . -5303) (undo-tree-id1103 . -1) 5304 (5302 . 5304) (5300 . 5302) (#("		" 0 2 (fontified nil)) . 5299) (undo-tree-id1104 . -2) (undo-tree-id1105 . -2) (5301 . 5302) (#("t" 0 1 (fontified t)) . -5301) (undo-tree-id1106 . -1) (#("h" 0 1 (fontified t)) . -5302) (undo-tree-id1107 . -1) (#("r" 0 1 (fontified t)) . -5303) (undo-tree-id1108 . -1) (#("e" 0 1 (fontified t)) . -5304) (undo-tree-id1109 . -1) (#("a" 0 1 (fontified t)) . -5305) (undo-tree-id1110 . -1) (#("d" 0 1 (fontified t)) . -5306) (undo-tree-id1111 . -1) (#("." 0 1 (fontified t)) . -5307) (undo-tree-id1112 . -1) 5308 (5301 . 5308) (5298 . 5301) (t 25818 22024 184753 26000)) nil (25818 22087 798846 203000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -369) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (#(":" 0 1 (fontified t)) . -370) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (#("r" 0 1 (fontified t)) . -371) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (#("e" 0 1 (fontified t)) . -372) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (#("p" 0 1 (fontified t)) . -373) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (#("l" 0 1 (fontified t)) . -374) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (#("i" 0 1 (fontified t)) . -375) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (#("c" 0 1 (fontified t)) . -376) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (#("a" 0 1 (fontified t)) . -377) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (#("t" 0 1 (fontified t)) . -378) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (#("e" 0 1 (fontified t)) . -379) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (#("_" 0 1 (fontified t)) . -380) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (#("m" 0 1 (fontified t)) . -381) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (#("e" 0 1 (fontified t)) . -382) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (#("s" 0 1 (fontified t)) . -383) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (#("s" 0 1 (fontified t)) . -384) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (#("a" 0 1 (fontified t)) . -385) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (#("g" 0 1 (fontified t)) . -386) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (#("e" 0 1 (fontified t)) . -387) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (#("s" 0 1 (fontified t)) . -388) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) 389 (t 25818 22087 814859 641000)) nil (25818 22095 977858 184000) 0 nil])
([nil nil ((5479 . 5482) (#(" " 0 1 (fontified nil)) . 5478) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (5479 . 5480) (#(")" 0 1 (fontified t)) . -5487) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) 5488 (apply yas--snippet-revive 5479 5488 #s(yas--snippet nil (#s(yas--field 1 5487 5487 nil nil nil t #s(yas--exit 5488 nil))) #s(yas--exit 5488 nil) 41 nil #s(yas--field 1 5487 5487 nil nil nil t #s(yas--exit 5488 nil)) nil nil)) (#("(" 0 1 (fontified t)) . -5487) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) 5488 (#("x" 0 1 (fontified t)) . 5488) (undo-tree-id1165 . -1) (44 . 72) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5487 5487 nil nil nil t #s(yas--exit 5488 nil))) #s(yas--exit 5488 nil) 41 nil #s(yas--field 1 5487 5487 nil nil nil t #s(yas--exit 5488 nil)) nil nil)) (5451 . 5462) (#("identity(${1:x})$0" 0 18 (fontified nil)) . 5451) (5451 . 5469) (#("identit" 0 7 (fontified nil)) . 5451) (5451 . 5458) (#("identity(…) (use std::convert::identity)" 0 40 (fontified nil)) . -5451) (5451 . 5491) (#("identit" 0 7 (fontified t)) . -5451) (undo-tree-id1166 . -7) (undo-tree-id1167 . -7) 5458 (5449 . 5458) (#("," 0 1 (fontified t)) . -5449) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (#("
" 0 1 (fontified t)) . -5450) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (#("	" 0 1 (fontified t)) . -5451) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (#("	" 0 1 (fontified t)) . -5452) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) 5453 (5451 . 5453) (#(" " 0 1 (fontified nil)) . 5450) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (5451 . 5452) (#("c" 0 1 (fontified t)) . -5451) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (#("u" 0 1 (fontified t)) . -5452) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (#("s" 0 1 (fontified t)) . -5453) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (#("t" 0 1 (fontified nil)) . -5454) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (#("o" 0 1 (fontified t)) . -5455) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (#("m" 0 1 (fontified t)) . -5456) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (#("i" 0 1 (fontified t)) . -5457) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (#("z" 0 1 (fontified t)) . -5458) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (#("e" 0 1 (fontified t)) . -5459) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (#("_" 0 1 (fontified t)) . -5460) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (#("b" 0 1 (fontified t)) . -5461) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (#("u" 0 1 (fontified t)) . -5462) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (#("i" 0 1 (fontified t)) . -5463) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (#("l" 0 1 (fontified t)) . -5464) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (#("d" 0 1 (fontified t)) . -5465) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (#("e" 0 1 (fontified t)) . -5466) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (#("r" 0 1 (fontified t)) . -5467) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) 5468 (5442 . 5449) (#("s" 0 1 (fontified t)) . -5442) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (#("g" 0 1 (fontified t)) . -5443) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (#("s" 0 1 (fontified t)) . -5444) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) 5445 (5438 . 5441) (#(" " 0 1 (fontified nil)) . 5437) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (5438 . 5439) (5435 . 5436) (5424 . 5429) (5424 . 5430) (#("thread" 0 6 (fontified nil)) . 5424) (5424 . 5430) (#("thread" 0 6 (fontified t)) . -5424) (undo-tree-id1220 . -6) (undo-tree-id1221 . -6) 5430 (5424 . 5430) (#("t" 0 1 (fontified t)) . -5424) (undo-tree-id1222 . -1) (#("h" 0 1 (fontified t)) . -5425) (undo-tree-id1223 . -1) (#("r" 0 1 (fontified t)) . -5426) (undo-tree-id1224 . -1) 5427 (#("e" 0 1 (fontified t)) . -5427) (undo-tree-id1225 . -1) (#("a" 0 1 (fontified t)) . -5428) (undo-tree-id1226 . -1) (#("d" 0 1 (fontified t)) . -5429) (undo-tree-id1227 . -1) 5430 (5421 . 5424) (#(" " 0 1 (fontified nil)) . 5420) (undo-tree-id1228 . -1) (5421 . 5422) (5409 . 5419) (#("channel" 0 7 (fontified nil)) . 5409) (5409 . 5416) (#("channel_id" 0 10 (fontified nil)) . -5409) (5409 . 5419) (#("channel" 0 7 (fontified t)) . -5409) (undo-tree-id1229 . -7) 5416 (5402 . 5416) (5401 . 5402) (#("t" 0 1 (fontified t)) . -5401) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (#("h" 0 1 (fontified t)) . -5402) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (#("r" 0 1 (fontified t)) . -5403) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (#("e" 0 1 (fontified t)) . -5404) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (#("a" 0 1 (fontified t)) . -5405) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (#("d" 0 1 (fontified t)) . -5406) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (#("." 0 1 (fontified t)) . -5407) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) 5408 (5401 . 5408) (#("m" 0 1 (fontified t)) . -5401) (undo-tree-id1244 . -1) 5402 (5401 . 5402) (#("c" 0 1 (fontified t)) . -5401) (undo-tree-id1245 . -1) (#("h" 0 1 (fontified t)) . -5402) (undo-tree-id1246 . -1) (#("a" 0 1 (fontified t)) . -5403) (undo-tree-id1247 . -1) (#("n" 0 1 (fontified t)) . -5404) (undo-tree-id1248 . -1) (#("n" 0 1 (fontified t)) . -5405) (undo-tree-id1249 . -1) (#("e" 0 1 (fontified t)) . -5406) (undo-tree-id1250 . -1) (#("l" 0 1 (fontified t)) . -5407) (undo-tree-id1251 . -1) 5408 (5402 . 5408) (5401 . 5402) (5398 . 5401) (#(" " 0 1 (fontified nil)) . 5397) (undo-tree-id1252 . -1) (5398 . 5399) (#("c" 0 1 (fontified t)) . -5398) (undo-tree-id1253 . -1) (#("h" 0 1 (fontified t)) . -5399) (undo-tree-id1254 . -1) (#("a" 0 1 (fontified t)) . -5400) (undo-tree-id1255 . -1) (#("n" 0 1 (fontified t)) . -5401) (undo-tree-id1256 . -1) (#("n" 0 1 (fontified t)) . -5402) (undo-tree-id1257 . -1) (#("e" 0 1 (fontified t)) . -5403) (undo-tree-id1258 . -1) (#("l" 0 1 (fontified t)) . -5404) (undo-tree-id1259 . -1) 5405 (5376 . 5377) (5387 . 5387) (5387 . 5395) (#("&webhexec" 0 9 (fontified nil)) . -5387) (5387 . 5396) (5386 . 5387) (apply yas--snippet-revive 5380 5386 #s(yas--snippet nil nil #s(yas--exit 5386 nil) 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5386 nil) 40 nil nil nil nil)) (5380 . 5386) (#("data()$0" 0 8 (fontified nil)) . 5380) (5380 . 5388) (#("data()" 0 6 (fontified nil)) . -5380) (5380 . 5386) (5376 . 5380) (5373 . 5376) (#(" " 0 1 (fontified nil)) . 5372) (undo-tree-id1260 . -1) (5373 . 5374) (#("w" 0 1 (fontified t)) . -5373) (undo-tree-id1261 . -1) (#("h" 0 1 (fontified t)) . -5374) (undo-tree-id1262 . -1) (#("e" 0 1 (fontified t)) . -5375) (undo-tree-id1263 . -1) (#("x" 0 1 (fontified t)) . -5376) (undo-tree-id1264 . -1) (#("e" 0 1 (fontified t)) . -5377) (undo-tree-id1265 . -1) (#("c" 0 1 (fontified t)) . -5378) (undo-tree-id1266 . -1) 5379 (5368 . 5371) (#("ctx" 0 3 (fontified nil)) . 5368) (5368 . 5371) (#("ctx" 0 3 (fontified t)) . -5368) (undo-tree-id1267 . -3) (undo-tree-id1268 . -3) 5371 (5368 . 5371) (apply yas--snippet-revive 5345 5419 #s(yas--snippet nil (#s(yas--field 1 5364 5368 nil nil nil t #s(yas--field 2 5370 5376 nil nil nil nil #s(yas--field 3 5378 5385 nil nil nil nil #s(yas--field 4 5387 5393 nil nil nil nil #s(yas--field 5 5395 5399 nil nil nil nil #s(yas--field 6 5401 5418 nil nil nil nil #s(yas--exit 5419 nil))))))) #s(yas--field 2 5370 5376 nil nil nil nil #s(yas--field 3 5378 5385 nil nil nil nil #s(yas--field 4 5387 5393 nil nil nil nil #s(yas--field 5 5395 5399 nil nil nil nil #s(yas--field 6 5401 5418 nil nil nil nil #s(yas--exit 5419 nil)))))) #s(yas--field 3 5378 5385 nil nil nil nil #s(yas--field 4 5387 5393 nil nil nil nil #s(yas--field 5 5395 5399 nil nil nil nil #s(yas--field 6 5401 5418 nil nil nil nil #s(yas--exit 5419 nil))))) #s(yas--field 4 5387 5393 nil nil nil nil #s(yas--field 5 5395 5399 nil nil nil nil #s(yas--field 6 5401 5418 nil nil nil nil #s(yas--exit 5419 nil)))) #s(yas--field 5 5395 5399 nil nil nil nil #s(yas--field 6 5401 5418 nil nil nil nil #s(yas--exit 5419 nil))) #s(yas--field 6 5401 5418 nil nil nil nil #s(yas--exit 5419 nil))) #s(yas--exit 5419 nil) 39 nil #s(yas--field 1 5364 5368 nil nil nil t #s(yas--field 2 5370 5376 nil nil nil nil #s(yas--field 3 5378 5385 nil nil nil nil #s(yas--field 4 5387 5393 nil nil nil nil #s(yas--field 5 5395 5399 nil nil nil nil #s(yas--field 6 5401 5418 nil nil nil nil #s(yas--exit 5419 nil))))))) nil nil)) (5365 . 5368) (#("http" 0 4 (fontified nil)) . 5365) (5364 . 5365) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5364 5368 nil nil nil t #s(yas--field 2 5370 5376 nil nil nil nil #s(yas--field 3 5378 5385 nil nil nil nil #s(yas--field 4 5387 5393 nil nil nil nil #s(yas--field 5 5395 5399 nil nil nil nil #s(yas--field 6 5401 5418 nil nil nil nil #s(yas--exit 5419 nil))))))) #s(yas--field 2 5370 5376 nil nil nil nil #s(yas--field 3 5378 5385 nil nil nil nil #s(yas--field 4 5387 5393 nil nil nil nil #s(yas--field 5 5395 5399 nil nil nil nil #s(yas--field 6 5401 5418 nil nil nil nil #s(yas--exit 5419 nil)))))) #s(yas--field 3 5378 5385 nil nil nil nil #s(yas--field 4 5387 5393 nil nil nil nil #s(yas--field 5 5395 5399 nil nil nil nil #s(yas--field 6 5401 5418 nil nil nil nil #s(yas--exit 5419 nil))))) #s(yas--field 4 5387 5393 nil nil nil nil #s(yas--field 5 5395 5399 nil nil nil nil #s(yas--field 6 5401 5418 nil nil nil nil #s(yas--exit 5419 nil)))) #s(yas--field 5 5395 5399 nil nil nil nil #s(yas--field 6 5401 5418 nil nil nil nil #s(yas--exit 5419 nil))) #s(yas--field 6 5401 5418 nil nil nil nil #s(yas--exit 5419 nil))) #s(yas--exit 5419 nil) 39 nil #s(yas--field 1 5364 5368 nil nil nil t #s(yas--field 2 5370 5376 nil nil nil nil #s(yas--field 3 5378 5385 nil nil nil nil #s(yas--field 4 5387 5393 nil nil nil nil #s(yas--field 5 5395 5399 nil nil nil nil #s(yas--field 6 5401 5418 nil nil nil nil #s(yas--exit 5419 nil))))))) nil nil)) (5345 . 5419) (#("replicate_messages(${1:http}, ${2:whexec}, ${3:channel}, ${4:thread}, ${5:msgs}, ${6:customize_builder})$0" 0 106 (fontified nil)) . 5345) (5345 . 5451) (#("replicate_messages(…)" 0 21 (fontified nil)) . -5345) (5345 . 5366) (5343 . 5345) (5329 . 5343) (#("msgre" 0 5 (fontified nil)) . 5329) (5329 . 5334) (#("msgreplication" 0 14 (fontified nil)) . -5329) (5329 . 5343) (#("msgre" 0 5 (fontified t)) . -5329) (undo-tree-id1269 . -5) 5334 (5329 . 5334) (t 25818 22095 984872 198000)) nil (25818 22234 105884 844000) 0 nil])
([nil nil ((5490 . 5493) (t 25818 22234 118383 819000)) nil (25818 22248 940330 76000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -5503) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) 5504 (5503 . 5504) (#("." 0 1 (fontified t)) . -5500) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) 5501 (5500 . 5501) (5495 . 5500) (#("await" 0 5 (fontified nil)) . -5495) (5495 . 5500) (5494 . 5495)) nil (25818 22248 940323 912000) 0 nil])
([nil nil ((5500 . 5501) (#("l" 0 1 (fontified t)) . -5142) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) 5143 (5142 . 5143) (t 25818 22248 961732 858000)) nil (25818 22260 711243 573000) 0 nil])
([nil nil ((5482 . 5487) (#("i" 0 1 (fontified t)) . -5482) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (#("d" 0 1 (fontified t)) . -5483) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (#("e" 0 1 (fontified t)) . -5484) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (#("n" 0 1 (fontified t)) . -5485) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (#("t" 0 1 (fontified t)) . -5486) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (#("i" 0 1 (fontified t)) . -5487) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (#("t" 0 1 (fontified t)) . -5488) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (#("y" 0 1 (fontified t)) . -5489) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) 5490 (t 25818 22260 725078 221000)) nil (25818 22271 796588 409000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-constant-face fontified t)) . -5357) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -5358) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -5359) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (#(" " 0 1 (fontified t)) . -5360) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -5361) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -5362) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) 5363 (5357 . 5363) (t 25818 22271 808422 549000)) nil (25818 22285 848465 444000) 0 nil])
([nil nil ((5153 . 5164) (#("R" 0 1 (face font-lock-type-face fontified t)) . -5153) (undo-tree-id1477 . -1) 5154 (5152 . 5154) (5154 . 5155) (5513 . 5514) (5146 . 5146) (5146 . 5154) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -5146) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -5147) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -5148) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (#("v" 0 1 (face font-lock-variable-name-face fontified t)) . -5149) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -5150) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -5151) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (#(":" 0 1 (fontified t)) . -5152) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (#(" " 0 1 (fontified t)) . -5153) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) 5154 (5153 . 5154) (5145 . 5153) (5144 . 5145) (5142 . 5144) (#("." 0 1 (fontified t)) . -5501) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) 5502 (5501 . 5502) (t 25818 22285 855102 685000)) nil (25818 22316 148449 698000) 0 nil])
([nil nil ((5529 . 5535) (#("result" 0 6 (fontified nil)) . 5529) (5529 . 5535) (#("result" 0 6 (fontified t)) . -5529) (undo-tree-id1510 . -6) (undo-tree-id1511 . -6) (undo-tree-id1512 . -6) (undo-tree-id1513 . -6) (undo-tree-id1514 . -6) 5535 (5529 . 5535) (5527 . 5529) (t 25818 22316 161796 768000)) nil (25818 22348 983708 37000) 0 nil])
([nil nil ((5585 . 5595) (#("channel_id" 0 10 (fontified nil)) . -5585) (undo-tree-id1496 . -10) (5585 . 5595) (5578 . 5585) (#("()" 0 2 (fontified nil)) . 5578) (undo-tree-id1497 . -2) (5577 . 5578) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5577 5595 nil nil nil t #s(yas--exit 5596 nil))) #s(yas--exit 5596 nil) 43 nil #s(yas--field 1 5577 5595 nil nil nil t #s(yas--exit 5596 nil)) #s(yas--field 1 5550 5596 nil nil nil t #s(yas--exit 5597 nil)) nil)) (5567 . 5580) (#("InChannel(${1:()})$0" 0 20 (fontified nil)) . 5567) (undo-tree-id1498 . -20) (5567 . 5587) (#("InChan" 0 6 (fontified nil)) . 5567) (undo-tree-id1499 . -6) (5567 . 5573) (#("InChannel(…)" 0 12 (fontified nil)) . -5567) (undo-tree-id1500 . -12) (5567 . 5579) (#("InChan" 0 6 (face font-lock-type-face fontified t)) . -5567) (undo-tree-id1501 . -6) (undo-tree-id1502 . -6) (undo-tree-id1503 . -6) 5573 (5565 . 5573) (5550 . 5565) (#("LogEr" 0 5 (fontified nil)) . 5550) (undo-tree-id1504 . -5) (5550 . 5555) (#("LogErrorContext" 0 15 (fontified nil)) . -5550) (undo-tree-id1505 . -15) (5550 . 5565) (#("LogEr" 0 5 (face font-lock-type-face fontified t)) . -5550) (undo-tree-id1506 . -5) (undo-tree-id1507 . -5) (undo-tree-id1508 . -5) 5555 (5552 . 5555) (5551 . 5552) (#("context" 0 7 (fontified nil)) . 5551) (undo-tree-id1509 . -7) (5550 . 5551) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5550 5596 nil nil nil t #s(yas--exit 5597 nil))) #s(yas--exit 5597 nil) 42 nil #s(yas--field 1 5550 5596 nil nil nil t #s(yas--exit 5597 nil)) nil nil)) (5536 . 5558) (#("contextualize(${1:context})$0" 0 29 (fontified nil)) . 5536) (5536 . 5565) (#("contextualize(…) (as Contextualizable)" 0 38 (fontified nil)) . -5536) (5536 . 5574) (5535 . 5536)) nil (25818 22348 983689 532000) 0 nil])
([nil nil ((apply yas--snippet-revive 5536 5597 #s(yas--snippet nil (#s(yas--field 1 5550 5596 nil nil nil t #s(yas--exit 5597 nil))) #s(yas--exit 5597 nil) 42 nil #s(yas--field 1 5550 5596 nil nil nil t #s(yas--exit 5597 nil)) nil nil)) (apply yas--snippet-revive 5567 5596 #s(yas--snippet nil (#s(yas--field 1 5577 5595 nil nil nil t #s(yas--exit 5596 nil))) #s(yas--exit 5596 nil) 43 nil #s(yas--field 1 5577 5595 nil nil nil t #s(yas--exit 5596 nil)) #s(yas--field 1 5550 5596 nil nil nil t #s(yas--exit 5597 nil)) nil))) nil (25818 22382 655205 190000) 0 nil])
([nil nil ((4447 . 4452) (#("1" 0 1 (fontified t)) . -4447) (undo-tree-id1515 . -1) (#("6" 0 1 (face font-lock-type-face fontified t)) . -4448) (undo-tree-id1516 . -1) (#("," 0 1 (fontified t)) . -4449) (undo-tree-id1517 . -1) 4450 (4447 . 4450) (#("s" 0 1 (fontified t)) . -4447) (undo-tree-id1518 . -1) (#("i" 0 1 (fontified t)) . -4448) (undo-tree-id1519 . -1) (#("z" 0 1 (fontified t)) . -4449) (undo-tree-id1520 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -4450) (undo-tree-id1521 . -1) (#("," 0 1 (fontified t)) . -4451) (undo-tree-id1522 . -1) 4452 (4446 . 4452) (#("s" 0 1 (fontified t)) . -4446) (undo-tree-id1523 . -1) 4447 (4442 . 4447) (#("d" 0 1 (fontified t)) . -4442) (undo-tree-id1524 . -1) (#("n" 0 1 (fontified t)) . -4443) (undo-tree-id1525 . -1) 4444 (4441 . 4444) (4439 . 4441) (t 25818 22348 998490 669000)) nil (25818 22382 655195 54000) 0 nil])
([nil nil ((4449 . 4451) (#("s" 0 1 (fontified t)) . -4449) (undo-tree-id1526 . -1) (#("i" 0 1 (fontified t)) . -4450) (undo-tree-id1527 . -1) (#("z" 0 1 (fontified t)) . -4451) (undo-tree-id1528 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -4452) (undo-tree-id1529 . -1) 4453 (4441 . 4446) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -4441) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -4442) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -4443) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) 4444 (#(" " 0 1 (fontified t)) . -4782) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) 4783 (#("t" 0 1 (fontified t)) . -4783) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (#("o" 0 1 (fontified t)) . -4784) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (#("t" 0 1 (fontified t)) . -4785) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) 4786 (4767 . 4786) (4762 . 4767) (t 25818 22382 668516 76000)) nil (25818 22405 329092 393000) 0 nil])
([nil nil ((4783 . 4795) (#("l" 0 1 (fontified t)) . -4783) (undo-tree-id1547 . -1) (#("e" 0 1 (fontified t)) . -4784) (undo-tree-id1548 . -1) 4785 (4783 . 4785) (4782 . 4783) (t 25818 22405 341865 190000)) nil (25818 22554 450728 180000) 0 nil])
([nil nil ((5152 . 5157) (#("t" 0 1 (fontified t)) . -5152) (undo-tree-id1549 . -1) (#("r" 0 1 (fontified t)) . -5153) (undo-tree-id1550 . -1) (#("u" 0 1 (fontified t)) . -5154) (undo-tree-id1551 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -5155) (undo-tree-id1552 . -1) 5156 (t 25818 22554 465278 610000)) nil (25818 22635 598736 194000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4567) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (#("	" 0 1 (fontified t)) . -4568) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) 4569 (4567 . 4569) (4558 . 4567) (4537 . 4558) (4535 . 4537) (4534 . 4535) (#("
" 0 1 (fontified t)) . -4534) (undo-tree-id1570 . -1) (#("	" 0 1 (fontified t)) . -4535) (undo-tree-id1571 . -1) (#("	" 0 1 (fontified t)) . -4536) (undo-tree-id1572 . -1) 4537 (4534 . 4537) (4531 . 4534) (4525 . 4531) (4504 . 4525) (4502 . 4504) (4497 . 4502) (4476 . 4497) (4474 . 4476) (t 25818 22635 611974 216000)) nil (25818 23097 391038 789000) 0 nil])
([nil nil ((4496 . 4502) (#("User" 0 4 (fontified nil)) . 4496) (4496 . 4500) (#("UserId" 0 6 (fontified nil)) . -4496) (4496 . 4502) (#("User" 0 4 (face font-lock-type-face fontified t)) . -4496) (undo-tree-id1573 . -4) (undo-tree-id1574 . -4) (undo-tree-id1575 . -3) 4500 (4499 . 4500) (#("r" 0 1 (face font-lock-type-face fontified t)) . -4499) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) 4500 (5073 . 5085) (5070 . 5073) (#("			" 0 3 (fontified nil)) . 5069) (undo-tree-id1579 . -3) (5068 . 5073) (t 25818 23097 398677 676000)) nil (25818 23119 903054 84000) 0 nil])
([nil nil ((apply yas--snippet-revive 4285 4298 #s(yas--snippet nil nil #s(yas--exit 4298 nil) 46 nil nil #s(yas--field 1 4277 4298 nil nil nil t #s(yas--exit 4299 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4298 nil) 46 nil nil #s(yas--field 1 4277 4298 nil nil nil t #s(yas--exit 4299 nil)) nil)) (4285 . 4298) (#("empty_parse()$0" 0 15 (fontified nil)) . 4285) (undo-tree-id1580 . -15) (4285 . 4300) (#("empty_parse()" 0 13 (fontified nil)) . -4285) (undo-tree-id1581 . -13) (4285 . 4298) (4278 . 4285) (#("f" 0 1 (fontified nil)) . 4278) (undo-tree-id1582 . -1) (4277 . 4278) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4277 4298 nil nil nil t #s(yas--exit 4299 nil))) #s(yas--exit 4299 nil) 45 nil #s(yas--field 1 4277 4298 nil nil nil t #s(yas--exit 4299 nil)) nil nil)) (4260 . 4279) (#("allowed_mentions(${1:f})$0" 0 26 (fontified nil)) . 4260) (4260 . 4286) (#("allow" 0 5 (fontified nil)) . 4260) (4260 . 4265) (#("allowed_mentions(…)" 0 19 (fontified nil)) . -4260) (4260 . 4279) (#("allow" 0 5 (fontified t)) . -4260) (undo-tree-id1583 . -4) (undo-tree-id1584 . -5) 4265 (4259 . 4265) (apply yas--snippet-revive 5138 5147 #s(yas--snippet nil nil #s(yas--exit 5147 nil) 44 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5147 nil) 44 nil nil nil nil)) (5138 . 5147) (#("mention()$0" 0 11 (fontified nil)) . 5138) (5138 . 5149) (#("mention" 0 7 (fontified nil)) . 5138) (5138 . 5145) (#("mention() (as Mentionable)" 0 26 (fontified nil)) . -5138) (5138 . 5164) (#("mention" 0 7 (fontified t)) . -5138) (undo-tree-id1585 . -7) (undo-tree-id1586 . -7) 5145 (5140 . 5145) (5119 . 5140) (5110 . 5119) (5105 . 5110) (#("	" 0 1 (fontified nil)) . -5109) (undo-tree-id1587 . -1) (5110 . 5111) (5105 . 5110) (5104 . 5105) (#("=" 0 1 (fontified t)) . -5104) (undo-tree-id1588 . -1) (#(" " 0 1 (fontified t)) . -5105) (undo-tree-id1589 . -1) 5106 (5097 . 5106) (5087 . 5097) (t 25818 23119 918675 624000)) nil (25818 23184 940497 450000) 0 nil])
([nil nil ((apply yas--snippet-revive 4260 4299 #s(yas--snippet nil (#s(yas--field 1 4277 4298 nil nil nil t #s(yas--exit 4299 nil))) #s(yas--exit 4299 nil) 45 nil #s(yas--field 1 4277 4298 nil nil nil t #s(yas--exit 4299 nil)) nil nil))) nil (25818 23198 832006 253000) 0 nil])
([nil nil ((5187 . 5195) (t 25818 23184 945334 989000)) nil (25818 23198 831998 957000) 0 nil])
([nil nil ((5213 . 5214) (#("p" 0 1 (face font-lock-type-face fontified t)) . -5213) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) 5214 (5213 . 5214) (#("O" 0 1 (face font-lock-type-face fontified t)) . -5213) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) 5214 (5235 . 5240) (#("	" 0 1 (fontified nil)) . -5239) (undo-tree-id1602 . -1) (5240 . 5241) (5235 . 5240) (5232 . 5235) (5226 . 5232) (5205 . 5226) (5202 . 5205) (#("			" 0 3 (fontified nil)) . 5201) (undo-tree-id1603 . -3) (5200 . 5205) (t 25818 23198 871999 849000)) nil (25818 23218 947493 33000) 0 nil])
([nil nil ((apply yas--snippet-revive 5264 5272 #s(yas--snippet nil (#s(yas--field 1 5264 5271 nil nil nil t #s(yas--exit 5272 nil))) #s(yas--exit 5272 nil) 47 nil #s(yas--field 1 5264 5271 nil nil nil t #s(yas--exit 5272 nil)) nil nil)) (apply yas--snippet-revive 5265 5271 #s(yas--snippet nil (#s(yas--field 1 5270 5270 nil nil nil t #s(yas--exit 5271 nil))) #s(yas--exit 5271 nil) 48 nil #s(yas--field 1 5270 5270 nil nil nil t #s(yas--exit 5271 nil)) #s(yas--field 1 5264 5271 nil nil nil t #s(yas--exit 5272 nil)) nil)) (#("d" 0 1 (fontified t)) . -5270) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (#("a" 0 1 (fontified t)) . -5271) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (#("t" 0 1 (fontified t)) . -5272) (undo-tree-id1622 . -1) (#("a" 0 1 (fontified t)) . -5273) (undo-tree-id1623 . -1) 5274 (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5270 5270 nil nil nil t #s(yas--exit 5271 nil))) #s(yas--exit 5271 nil) 48 nil #s(yas--field 1 5270 5270 nil nil nil t #s(yas--exit 5271 nil)) #s(yas--field 1 5264 5271 nil nil nil t #s(yas--exit 5272 nil)) nil)) (5265 . 5275) (#("link(${1:data})$0" 0 17 (fontified nil)) . 5265) (5265 . 5282) (#("link" 0 4 (fontified nil)) . 5265) (5265 . 5269) (#("link(…) (as Linkable)" 0 21 (fontified nil)) . -5265) (5265 . 5286) (#("link" 0 4 (fontified t)) . -5265) (undo-tree-id1624 . -4) (undo-tree-id1625 . -4) 5269 (5264 . 5269) (#("." 0 1 (fontified t)) . -5264) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (#("l" 0 1 (fontified t)) . -5265) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (#("i" 0 1 (fontified t)) . -5266) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (#("n" 0 1 (fontified t)) . -5267) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (#("k" 0 1 (fontified t)) . -5268) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (#("(" 0 1 (fontified t)) . -5269) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) 5270 (#("data" 0 4 (fontified t)) . 5270) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5264 5271 nil nil nil t #s(yas--exit 5272 nil))) #s(yas--exit 5272 nil) 47 nil #s(yas--field 1 5264 5271 nil nil nil t #s(yas--exit 5272 nil)) nil nil)) (5265 . 5275) (#("link(${1:data})$0" 0 17 (fontified nil)) . 5265) (5265 . 5282) (#("link" 0 4 (fontified nil)) . 5265) (5265 . 5269) (#("link(…) (as Linkable)" 0 21 (fontified nil)) . -5265) (5265 . 5286) (#("link" 0 4 (fontified t)) . -5265) (undo-tree-id1638 . -4) (undo-tree-id1639 . -4) 5269 (5265 . 5269) (5258 . 5265) (5240 . 5258) (t 25818 23218 951997 96000)) nil (25818 23359 730600 63000) 0 nil])
([nil nil ((#("use crate::linkable::Linkable;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 11 (fontified t) 11 19 (face font-lock-constant-face fontified t) 19 21 (fontified t) 21 29 (face font-lock-type-face fontified t) 29 31 (fontified t)) . 196) (undo-tree-id1604 . -28) (undo-tree-id1605 . -30) (undo-tree-id1606 . -28) (undo-tree-id1607 . -28) (undo-tree-id1608 . -28) (undo-tree-id1609 . -28) (undo-tree-id1610 . -28) (undo-tree-id1611 . -28) (undo-tree-id1612 . -28) (undo-tree-id1613 . -28) (undo-tree-id1614 . -28) (undo-tree-id1615 . -31) 224) nil (25818 23359 730373 538000) 0 nil])
([nil nil ((5276 . 5277) (5269 . 5275) (#("." 0 1 (fontified t)) . -5269) (undo-tree-id1640 . -1) 5270 (5269 . 5270) (apply yas--snippet-revive 5234 5269 #s(yas--snippet nil (#s(yas--field 1 5239 5255 nil nil nil t #s(yas--field 2 5257 5268 nil nil nil t #s(yas--exit 5269 nil))) #s(yas--field 2 5257 5268 nil nil nil t #s(yas--exit 5269 nil))) #s(yas--exit 5269 nil) 49 nil #s(yas--field 2 5257 5268 nil nil nil t #s(yas--exit 5269 nil)) nil nil)) (5262 . 5268) (5258 . 5262) (#("guild_id" 0 8 (fontified nil)) . 5258) (5257 . 5258) (apply yas--snippet-revive 5243 5255 #s(yas--snippet nil nil #s(yas--exit 5255 nil) 50 nil nil #s(yas--field 1 5239 5255 nil nil nil t #s(yas--field 2 5257 5268 nil nil nil t #s(yas--exit 5269 nil))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5255 nil) 50 nil nil #s(yas--field 1 5239 5255 nil nil nil t #s(yas--field 2 5257 5268 nil nil nil t #s(yas--exit 5269 nil))) nil)) (5243 . 5255) (#("channel_id()$0" 0 14 (fontified nil)) . 5243) (5243 . 5257) (#("channel_id()" 0 12 (fontified nil)) . -5243) (5243 . 5255) (5240 . 5243) (#("channel_id" 0 10 (fontified nil)) . 5240) (5239 . 5240) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5239 5255 nil nil nil t #s(yas--field 2 5257 5268 nil nil nil t #s(yas--exit 5269 nil))) #s(yas--field 2 5257 5268 nil nil nil t #s(yas--exit 5269 nil))) #s(yas--exit 5269 nil) 49 nil #s(yas--field 2 5257 5268 nil nil nil t #s(yas--exit 5269 nil)) nil nil)) (5234 . 5260) (#("link(${1:channel_id}, ${2:guild_id})$0" 0 38 (fontified nil)) . 5234) (5234 . 5272) (#("link" 0 4 (fontified nil)) . 5234) (5234 . 5238) (#("link(…)" 0 7 (fontified nil)) . -5234) (5234 . 5241) (#("link" 0 4 (fontified t)) . -5234) (undo-tree-id1641 . -4) (undo-tree-id1642 . -4) 5238 (5234 . 5238) (5233 . 5234) (#("." 0 1 (fontified t)) . -5233) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (#("l" 0 1 (fontified t)) . -5234) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (#("i" 0 1 (fontified t)) . -5235) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (#("n" 0 1 (fontified t)) . -5236) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (#("k" 0 1 (fontified t)) . -5237) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (#("(" 0 1 (fontified t)) . -5238) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (#(")" 0 1 (fontified t)) . -5239) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) 5240 (t 25818 23359 735306 914000)) nil (25818 23413 327625 262000) 0 nil])
([nil nil ((5407 . 5412) (#("	" 0 1 (fontified t)) . -5403) 5408 (#("			  " 0 5 (fontified t)) . -5352) (#("			  " 0 5 (fontified t)) . -5288) 5286 (5233 . 5238) (#(" " 0 1 (fontified nil)) . 5232) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (5233 . 5234) (5217 . 5223) (5397 . 5403) (#(" " 0 1 (fontified nil)) . 5396) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (5397 . 5398) (5394 . 5397) (#("," 0 1 (fontified t)) . -5394) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (#("
" 0 1 (fontified t)) . -5395) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#("	" 0 1 (fontified t)) . -5396) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (#("	" 0 1 (fontified t)) . -5397) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (#("	" 0 1 (fontified t)) . -5398) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (#("	" 0 1 (fontified t)) . -5399) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (#("	" 0 1 (fontified t)) . -5400) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (#("	" 0 1 (fontified t)) . -5401) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (#("	" 0 1 (fontified t)) . -5402) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (#("	" 0 1 (fontified t)) . -5403) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (#("	" 0 1 (fontified t)) . -5404) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (#("	" 0 1 (fontified t)) . -5405) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (#(" " 0 1 (fontified t)) . -5406) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (#(" " 0 1 (fontified t)) . -5407) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) 5408 (5396 . 5408) (#(" " 0 1 (fontified nil)) . 5395) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (5396 . 5397) (apply yas--snippet-revive 5383 5394 #s(yas--snippet nil nil #s(yas--exit 5394 nil) 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5394 nil) 52 nil nil nil nil)) (5383 . 5394) (#("timestamp()$0" 0 13 (fontified nil)) . 5383) (5383 . 5396) (#("timestamp()" 0 11 (fontified nil)) . -5383) (5383 . 5394) (5381 . 5383) (#("." 0 1 (fontified t)) . -5381) (undo-tree-id1697 . -1) 5382 (5381 . 5382) (#(")" 0 1 (fontified t)) . -5381) (undo-tree-id1698 . -1) (#("." 0 1 (fontified t)) . -5382) (undo-tree-id1699 . -1) 5383 (5382 . 5383) (apply yas--snippet-revive 5370 5382 #s(yas--snippet nil nil #s(yas--exit 5382 nil) 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5382 nil) 51 nil nil nil nil)) (5370 . 5382) (#("created_at()$0" 0 14 (fontified nil)) . 5370) (5370 . 5384) (#("created_at()" 0 12 (fontified nil)) . -5370) (5370 . 5382) (5351 . 5370) (5338 . 5351) (5282 . 5296) (5270 . 5282) (#(" " 0 1 (fontified nil)) . 5269) (undo-tree-id1700 . -1) (5270 . 5271) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -5270) (undo-tree-id1701 . -1) 5271 (5268 . 5270) (5255 . 5268) (#("t" 0 1 (face font-lock-string-face fontified t)) . -5255) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -5256) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -5257) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -5258) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -5259) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) 5260 (5254 . 5260) (5252 . 5254) (5236 . 5252) (#("{" 0 1 (fontified t)) . -5237) (undo-tree-id1712 . -1) 5238 (5227 . 5238) (5287 . 5308) (5284 . 5287) (#("			" 0 3 (fontified nil)) . 5283) (undo-tree-id1713 . -3) (5282 . 5287) (t 25818 23413 341962 889000)) nil (25818 23587 780004 632000) 0 nil])
([nil nil ((5344 . 5345) (t 25818 23587 801922 861000)) nil (25818 23596 160181 583000) 0 nil])
([nil nil ((5656 . 5657) (#("		" 0 2 (fontified t)) . -5655) 5658 (5657 . 5658) (5650 . 5657) (apply yas--snippet-revive 5646 5650 #s(yas--snippet nil nil nil 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 53 nil nil nil nil)) (5646 . 5650) (#("true" 0 4 (fontified nil)) . 5646) (5646 . 5650) (#("true" 0 4 (fontified nil)) . 5646) (5646 . 5650) (#("true" 0 4 (face font-lock-keyword-face fontified t)) . -5646) (undo-tree-id1714 . -4) (undo-tree-id1715 . -4) 5650 (5646 . 5650) (5640 . 5646) (5634 . 5640) (5629 . 5634) (5608 . 5629) (#("b" 0 1 (fontified t)) . -5608) (undo-tree-id1716 . -1) (#("e" 0 1 (fontified t)) . -5609) (undo-tree-id1717 . -1) (#("f" 0 1 (fontified t)) . -5610) (undo-tree-id1718 . -1) (#("o" 0 1 (fontified t)) . -5611) (undo-tree-id1719 . -1) 5612 (5599 . 5612) (5597 . 5599) (#("b" 0 1 (fontified t)) . -5597) (undo-tree-id1720 . -1) (#("e" 0 1 (fontified t)) . -5598) (undo-tree-id1721 . -1) (#("f" 0 1 (fontified t)) . -5599) (undo-tree-id1722 . -1) (#("o" 0 1 (fontified t)) . -5600) (undo-tree-id1723 . -1) (#("r" 0 1 (fontified t)) . -5601) (undo-tree-id1724 . -1) (#("e" 0 1 (fontified t)) . -5602) (undo-tree-id1725 . -1) 5603 (5597 . 5603) (5589 . 5597) (5587 . 5589) (#("," 0 1 (fontified t)) . -5587) (undo-tree-id1726 . -1) 5588 (5572 . 5588) (#(")" 0 1 (fontified t)) . -5572) (undo-tree-id1727 . -1) 5573 (5569 . 5573) (5552 . 5569) (#("." 0 1 (fontified t)) . -5552) (undo-tree-id1728 . -1) 5553 (5534 . 5553) (5526 . 5534) (5521 . 5526) (5515 . 5521) (5494 . 5515) (#("{" 0 1 (fontified t)) . -5494) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) 5495 (5486 . 5495) (5480 . 5486) (5478 . 5480) (5472 . 5478) (5466 . 5472) (5458 . 5466) (5453 . 5458) (#("	" 0 1 (fontified nil)) . -5457) (undo-tree-id1731 . -1) (5458 . 5459) (5453 . 5458) (5446 . 5453) (t 25818 23596 185254 107000)) nil (25818 23668 32871 55000) 0 nil])
([nil nil ((6004 . 6014) (#(" " 0 1 (face font-lock-string-face fontified t)) . -6004) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (#("L" 0 1 (face font-lock-string-face fontified t)) . -6005) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -6006) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -6007) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) 6008 (t 25818 23668 58569 47000)) nil (25818 23708 191208 692000) 0 nil])
([nil nil ((397 . 398) (389 . 397) (#("Linkable" 0 8 (fontified nil)) . -389) (389 . 397) (387 . 389) (379 . 387) (#("link" 0 4 (fontified nil)) . 379) (379 . 383) (#("linkable" 0 8 (fontified nil)) . -379) (379 . 387) (#("link" 0 4 (fontified t)) . -379) (undo-tree-id1746 . -4) (undo-tree-id1747 . -4) (undo-tree-id1748 . -4) (undo-tree-id1749 . -4) (undo-tree-id1750 . -4) 383 (380 . 383) (#("o" 0 1 (fontified t)) . -380) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) 381 (368 . 381) (1560 . 1568) (1559 . 1560) (#("." 0 1 (fontified t)) . -1559) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (#("l" 0 1 (fontified t)) . -1560) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (#("i" 0 1 (fontified t)) . -1561) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (#("n" 0 1 (fontified t)) . -1562) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (#("k" 0 1 (fontified t)) . -1563) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (#("(" 0 1 (fontified t)) . -1564) (undo-tree-id1763 . -1) (#("(" 0 1 (fontified t)) . -1565) (undo-tree-id1764 . -1) (#(")" 0 1 (fontified t)) . -1566) (undo-tree-id1765 . -1) (#(")" 0 1 (fontified t)) . -1567) (undo-tree-id1766 . -1) 1568 (#("u" 0 1 (fontified t)) . -368) (undo-tree-id1767 . -1) (#("s" 0 1 (fontified t)) . -369) (undo-tree-id1768 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -370) (undo-tree-id1769 . -1) (#(" " 0 1 (fontified t)) . -371) (undo-tree-id1770 . -1) (#("c" 0 1 (face font-lock-constant-face fontified t)) . -372) (undo-tree-id1771 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -373) (undo-tree-id1772 . -1) (#("a" 0 1 (face font-lock-constant-face fontified t)) . -374) (undo-tree-id1773 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -375) (undo-tree-id1774 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -376) (undo-tree-id1775 . -1) (#(":" 0 1 (fontified t)) . -377) (undo-tree-id1776 . -1) (#(":" 0 1 (fontified t)) . -378) (undo-tree-id1777 . -1) 379 (368 . 379) (367 . 368) (t 25818 23708 205225 60000)) nil (25818 24947 181724 214000) 0 nil])
([nil nil ((5621 . 5622) (#("," 0 1 (fontified t)) . -5621) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (#(" " 0 1 (fontified t)) . -5622) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -5623) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -5624) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (#("m" 0 1 (face font-lock-type-face fontified nil)) . -5625) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (#("e" 0 1 (face font-lock-type-face fontified nil)) . -5626) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (#("(" 0 1 (fontified nil)) . -5627) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (#("g" 0 1 (fontified t)) . -5628) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (#("u" 0 1 (fontified t)) . -5629) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (#("i" 0 1 (fontified t)) . -5630) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (#("l" 0 1 (fontified t)) . -5631) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (#("d" 0 1 (fontified t)) . -5632) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (#(")" 0 1 (fontified t)) . -5633) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (#("\\" 0 1 (fontified t)) . -5634) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) 5635 (5634 . 5635) (5591 . 5605) (5346 . 5359) (#("," 0 1 (fontified t)) . -5362) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (#(" " 0 1 (fontified t)) . -5363) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -5364) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -5365) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -5366) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -5367) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (#("(" 0 1 (fontified t)) . -5368) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (#("g" 0 1 (fontified t)) . -5369) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (#("u" 0 1 (fontified t)) . -5370) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (#("i" 0 1 (fontified t)) . -5371) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (#("l" 0 1 (fontified nil)) . -5372) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (#("d" 0 1 (fontified t)) . -5373) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (#(")" 0 1 (fontified t)) . -5374) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) 5375 (5375 . 5376) (5345 . 5346) (t 25818 24947 222572 120000)) nil (25818 24987 284671 681000) 0 nil])
([nil nil ((#("use futures::future::BoxFuture;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 11 (face font-lock-constant-face fontified t) 11 13 (fontified t) 13 19 (face font-lock-constant-face fontified t) 19 21 (fontified t) 21 30 (face font-lock-type-face fontified t) 30 32 (fontified t)) . 399) (undo-tree-id1840 . -27) (undo-tree-id1841 . -31) (undo-tree-id1842 . -27) (undo-tree-id1843 . -27) 426 (t 25818 24987 302581 744000)) nil (25818 24996 383310 901000) 0 nil])
([nil nil ((4838 . 4842) (#("GOL" 0 3 (fontified nil)) . 4838) (undo-tree-id1844 . -3) (4838 . 4841) (#("GOLD" 0 4 (fontified nil)) . -4838) (undo-tree-id1845 . -4) (4838 . 4842) (#("GOL" 0 3 (face font-lock-type-face fontified t)) . -4838) (undo-tree-id1846 . -3) (undo-tree-id1847 . -3) (undo-tree-id1848 . -3) (undo-tree-id1849 . -3) (undo-tree-id1850 . -3) (undo-tree-id1851 . -3) (undo-tree-id1852 . -3) (undo-tree-id1853 . -3) (undo-tree-id1854 . -3) (undo-tree-id1855 . -3) (undo-tree-id1856 . -3) 4841 (4826 . 4841) (#("C" 0 1 (face font-lock-type-face fontified t)) . -4826) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -4827) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -4828) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -4829) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) 4830 (4827 . 4830) (#("colour" 0 6 (fontified nil)) . 4827) (undo-tree-id1869 . -6) (4826 . 4827) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4826 4842 nil nil nil t #s(yas--exit 4843 nil))) #s(yas--exit 4843 nil) 56 nil #s(yas--field 1 4826 4842 nil nil nil t #s(yas--exit 4843 nil)) nil nil)) (4820 . 4833) (#("color(${1:colour})$0" 0 20 (fontified nil)) . 4820) (4820 . 4840) (#("color" 0 5 (fontified nil)) . 4820) (4820 . 4825) (#("color(…)" 0 8 (fontified nil)) . -4820) (4820 . 4828) (#("color" 0 5 (fontified t)) . -4820) (undo-tree-id1870 . -5) 4825 (4819 . 4825) (4814 . 4819) (t 25818 24996 429250 458000)) nil (25818 27787 196741 598000) 0 nil])
([nil nil ((apply yas--snippet-revive 4820 4843 #s(yas--snippet nil (#s(yas--field 1 4826 4842 nil nil nil t #s(yas--exit 4843 nil))) #s(yas--exit 4843 nil) 56 nil #s(yas--field 1 4826 4842 nil nil nil t #s(yas--exit 4843 nil)) nil nil))) nil (25818 28164 246595 962000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -4473) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) 4474 (#("O" 0 1 (face font-lock-type-face fontified t)) . -4470) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -4471) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -4472) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4473) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -4474) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -4475) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (#("<" 0 1 (fontified t)) . -4476) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) 4477 (t 25818 27787 205813 48000)) nil (25818 28164 246590 402000) 0 nil])
([nil nil ((4035 . 4039) (#("Send" 0 4 (fontified nil)) . 4035) (4035 . 4039) (#("Send" 0 4 (face font-lock-type-face fontified t)) . -4035) (undo-tree-id0 . -4) (undo-tree-id1 . -4) 4039 (4032 . 4039) (t 25818 28164 252444 236000)) nil (25826 35311 766642 828000) 0 nil])
([nil nil ((4677 . 4684) (t 25826 35311 777790 787000)) nil (25826 35429 43653 577000) 0 nil])
([nil nil ((#("		if let Some(inlast) = inlast {
				e.field(\"In last\", format!(\"{inlast} messages\"), true);
			}

" 0 2 (fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 13 (face font-lock-type-face fontified t) 13 45 (fontified t) 45 54 (face font-lock-string-face fontified t) 54 56 (fontified t) 56 63 (face rust-builtin-formatting-macro fontified t) 63 64 (fontified t) 64 65 (face font-lock-string-face fontified t) 65 73 (face rust-string-interpolation fontified t) 73 83 (face font-lock-string-face fontified t) 83 86 (fontified t) 86 90 (face font-lock-keyword-face fontified t) 90 99 (fontified t)) . 5016) (undo-tree-id2 . -98) (undo-tree-id3 . -98) (undo-tree-id4 . -98) (undo-tree-id5 . -98) (undo-tree-id6 . -94) (undo-tree-id7 . -94) (undo-tree-id8 . -94) (undo-tree-id9 . -94) (undo-tree-id10 . -98) (undo-tree-id11 . -98) (undo-tree-id12 . -99) 5114 (t 25826 35429 50838 943000)) nil (25826 35469 292633 314000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -5018) 5016 (t 25826 35469 300735 695000)) nil (25826 35471 720214 529000) 0 nil])
([nil nil ((4995 . 5002) (4989 . 4995) (#("inl" 0 3 (fontified nil)) . 4989) (4989 . 4992) (#("inlast" 0 6 (fontified nil)) . -4989) (4989 . 4995) (#("inl" 0 3 (fontified t)) . -4989) (undo-tree-id13 . -2) (undo-tree-id14 . -3) (undo-tree-id15 . -3) (undo-tree-id16 . -3) (undo-tree-id17 . -3) 4992 (4971 . 4992) (4966 . 4971) (5012 . 5013) (#(";" 0 1 (fontified t)) . -5012) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 5013 (t 25826 35471 737396 33000)) nil (25826 35488 220599 874000) 0 nil])
([nil nil ((801 . 802) (#("'" 0 1 (face font-lock-string-face fontified t)) . -801) (undo-tree-id20 . -1) 802 (800 . 802) (781 . 800) (763 . 781) (749 . 754) (#(" " 0 1 (face font-lock-string-face fontified nil)) . 748) (undo-tree-id21 . -1) (749 . 750) (748 . 758) (#(" " 0 1 (face font-lock-string-face fontified t)) . -748) (undo-tree-id22 . -1) (#("S" 0 1 (face font-lock-string-face fontified t)) . -749) (undo-tree-id23 . -1) (#("E" 0 1 (face font-lock-string-face fontified t)) . -750) (undo-tree-id24 . -1) (#("T" 0 1 (face font-lock-string-face fontified t)) . -751) (undo-tree-id25 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -752) (undo-tree-id26 . -1) 753 (748 . 753) (743 . 748) (738 . 743) (723 . 738) (#("S" 0 1 (face font-lock-string-face fontified t)) . -723) (undo-tree-id27 . -1) 724 (717 . 724) (716 . 717) (#("(" 0 1 (face font-lock-string-face fontified t)) . -716) (undo-tree-id28 . -1) 717 (702 . 717) (701 . 702) (690 . 701) (682 . 690) (679 . 682) (#(" " 0 1 (face font-lock-string-face fontified t)) . -679) (undo-tree-id29 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -680) (undo-tree-id30 . -1) 681 (679 . 681) (678 . 679) (667 . 678) (666 . 667) (645 . 666) (#("W" 0 1 (face font-lock-string-face fontified t)) . -645) (undo-tree-id31 . -1) (#("H" 0 1 (face font-lock-string-face fontified t)) . -646) (undo-tree-id32 . -1) (#("E" 0 1 (face font-lock-string-face fontified t)) . -647) (undo-tree-id33 . -1) (#("R" 0 1 (face font-lock-string-face fontified t)) . -648) (undo-tree-id34 . -1) (#("E" 0 1 (face font-lock-string-face fontified t)) . -649) (undo-tree-id35 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -650) (undo-tree-id36 . -1) 651 (645 . 651) (631 . 645) (627 . 631) (626 . 627) (624 . 626) (620 . 624) (#("S" 0 1 (face font-lock-string-face fontified t)) . -620) (undo-tree-id37 . -1) (#("E" 0 1 (face font-lock-string-face fontified t)) . -621) (undo-tree-id38 . -1) (#("L" 0 1 (face font-lock-string-face fontified t)) . -622) (undo-tree-id39 . -1) (#("E" 0 1 (face font-lock-string-face fontified t)) . -623) (undo-tree-id40 . -1) (#("C" 0 1 (face font-lock-string-face fontified t)) . -624) (undo-tree-id41 . -1) (#("T" 0 1 (face font-lock-string-face fontified t)) . -625) (undo-tree-id42 . -1) 626 (615 . 626) (604 . 615) (#(")" 0 1 (fontified t)) . -604) (undo-tree-id43 . -1) 605 (601 . 605) (591 . 601) (590 . 591) (t 25826 35488 240686 265000)) nil (25827 24413 42040 275000) 0 nil])
([nil nil ((802 . 803) (t 25827 24413 57276 264000)) nil (25827 24420 456793 114000) 0 nil])
([nil nil ((588 . 589) (t 25827 24420 473749 29000)) nil (25827 24423 921019 430000) 0 nil])
([nil nil ((4110 . 4116) (4108 . 4110) (#("	" 0 1 (fontified nil)) . -4109) (undo-tree-id44 . -1) (4110 . 4111) (4108 . 4110) (4096 . 4108) (4092 . 4096) (#("		" 0 2 (fontified t)) . -4091) 4094 (4093 . 4094) (4090 . 4093) (#(")" 0 1 (fontified t)) . -4090) (undo-tree-id45 . -1) 4091 (4076 . 4091) (4067 . 4076) (4065 . 4067) (4064 . 4065) (4057 . 4064) (#("LogTyp" 0 6 (fontified nil)) . 4057) (4057 . 4063) (#("LogType" 0 7 (fontified nil)) . -4057) (4057 . 4064) (#("LogTyp" 0 6 (face font-lock-type-face fontified t)) . -4057) (undo-tree-id46 . -6) 4063 (4060 . 4063) (4047 . 4060) (4045 . 4047) (4025 . 4045) (4023 . 4025) (4004 . 4023) (4002 . 4004) (3992 . 4002) (3983 . 3992) (#("a" 0 1 (fontified t)) . -3983) (undo-tree-id47 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -3984) (undo-tree-id48 . -1) (#("y" 0 1 (fontified t)) . -3985) (undo-tree-id49 . -1) (#("n" 0 1 (fontified t)) . -3986) (undo-tree-id50 . -1) (#("c" 0 1 (face font-lock-keyword-face fontified t)) . -3987) (undo-tree-id51 . -1) 3988 (3983 . 3988) (3982 . 3983) (t 25827 24423 926993 100000)) nil (25827 25133 295547 387000) 0 nil])
([nil nil ((4144 . 4145) (4144 . 4145) (4139 . 4144) (#("await" 0 5 (fontified nil)) . -4139) (4139 . 4144) (4138 . 4139) (apply yas--snippet-revive 4133 4138 #s(yas--snippet nil nil #s(yas--exit 4138 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4138 nil) 3 nil nil nil nil)) (4133 . 4138) (#("get()$0" 0 7 (fontified nil)) . 4133) (4133 . 4140) (#("get()" 0 5 (fontified nil)) . -4133) (4133 . 4138) (4131 . 4133) (4110 . 4131) (4108 . 4110) (t 25827 25133 307776 596000)) nil (25827 25265 665131 452000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4243) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("	" 0 1 (fontified t)) . -4244) (undo-tree-id54 . -1) (undo-tree-id55 . -1) 4245 (4243 . 4245) (4242 . 4243) (#("." 0 1 (fontified t)) . -4242) (undo-tree-id56 . -1) 4243 (4242 . 4243) (#(";" 0 1 (fontified t)) . -4242) (undo-tree-id57 . -1) 4243 (4242 . 4243) (#("." 0 1 (fontified t)) . -4242) (undo-tree-id58 . -1) 4243 (4241 . 4243) (4236 . 4241) (#("await" 0 5 (fontified nil)) . -4236) (4236 . 4241) (4235 . 4236) (apply yas--snippet-revive 4220 4233 #s(yas--snippet nil nil #s(yas--exit 4233 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4233 nil) 6 nil nil nil nil)) (4220 . 4233) (#("to_be_bytes()$0" 0 15 (fontified nil)) . 4220) (4220 . 4235) (#("to_" 0 3 (fontified nil)) . 4220) (4220 . 4223) (#("to_be_bytes()" 0 13 (fontified nil)) . -4220) (4220 . 4233) (#("to_" 0 3 (fontified t)) . -4220) (undo-tree-id59 . -3) 4223 (4209 . 4223) (4198 . 4199) (4206 . 4208) (4198 . 4206) (#("log_" 0 4 (fontified nil)) . 4198) (4198 . 4202) (#("log_type" 0 8 (fontified nil)) . -4198) (4198 . 4206) (#("log_" 0 4 (fontified t)) . -4198) (undo-tree-id60 . -4) (undo-tree-id61 . -4) 4202 (4198 . 4202) (apply yas--snippet-revive 4153 4200 #s(yas--snippet nil (#s(yas--field 1 4161 4170 nil nil nil t #s(yas--field 2 4172 4199 nil nil nil t #s(yas--exit 4200 nil))) #s(yas--field 2 4172 4199 nil nil nil t #s(yas--exit 4200 nil))) #s(yas--exit 4200 nil) 4 nil #s(yas--field 2 4172 4199 nil nil nil t #s(yas--exit 4200 nil)) nil nil)) (4196 . 4198) (apply yas--snippet-revive 4183 4196 #s(yas--snippet nil nil #s(yas--exit 4196 nil) 5 nil nil #s(yas--field 2 4172 4199 nil nil nil t #s(yas--exit 4200 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4196 nil) 5 nil nil #s(yas--field 2 4172 4199 nil nil nil t #s(yas--exit 4200 nil)) nil)) (4183 . 4196) (#("to_be_bytes()$0" 0 15 (fontified nil)) . 4183) (4183 . 4198) (#("to_" 0 3 (fontified nil)) . 4183) (4183 . 4186) (#("to_be_bytes()" 0 13 (fontified nil)) . -4183) (4183 . 4196) (#("to_" 0 3 (fontified t)) . -4183) (undo-tree-id62 . -3) (undo-tree-id63 . -3) 4186 (4177 . 4186) (4174 . 4177) (4173 . 4175) (#("params" 0 6 (fontified nil)) . 4173) (4172 . 4173) (4161 . 4170) (#("SET_" 0 4 (fontified nil)) . 4161) (4161 . 4165) (#("SET_LOGCH" 0 9 (fontified nil)) . -4161) (4161 . 4170) (#("SET_" 0 4 (face font-lock-type-face fontified t)) . -4161) (undo-tree-id64 . -4) (undo-tree-id65 . -4) 4165 (4162 . 4165) (#("statement" 0 9 (fontified nil)) . 4162) (4161 . 4162) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4161 4170 nil nil nil t #s(yas--field 2 4172 4199 nil nil nil t #s(yas--exit 4200 nil))) #s(yas--field 2 4172 4199 nil nil nil t #s(yas--exit 4200 nil))) #s(yas--exit 4200 nil) 4 nil #s(yas--field 2 4172 4199 nil nil nil t #s(yas--exit 4200 nil)) nil nil)) (4153 . 4179) (#("execute(${1:statement}, ${2:params})$0" 0 38 (fontified nil)) . 4153) (4153 . 4191) (#("execute(…)" 0 10 (fontified nil)) . -4153) (4153 . 4163) (4151 . 4153) (4148 . 4151) (#("l" 0 1 (fontified t)) . -4148) (undo-tree-id66 . -1) (#("e" 0 1 (fontified t)) . -4149) (undo-tree-id67 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -4150) (undo-tree-id68 . -1) (#(" " 0 1 (fontified t)) . -4151) (undo-tree-id69 . -1) 4152 (4148 . 4152) (4146 . 4148) (t 25827 25265 677236 903000)) nil (25827 25668 103278 310000) 0 nil])
([nil nil ((6800 . 6802) (6799 . 6800) (t 25827 25668 136564 856000)) nil (25827 25789 123216 666000) 0 nil])
([nil nil ((1242 . 1248) (apply yas--snippet-revive 1233 1242 #s(yas--snippet nil nil #s(yas--exit 1242 nil) 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1242 nil) 8 nil nil nil nil)) (1233 . 1242) (#("BotConfig$0" 0 11 (fontified nil)) . 1233) (1233 . 1244) (#("BotC" 0 4 (fontified nil)) . 1233) (1233 . 1237) (#("BotConfig" 0 9 (fontified nil)) . -1233) (1233 . 1242) (#("BotC" 0 4 (face font-lock-type-face fontified t)) . -1233) (undo-tree-id70 . -4) 1237 (1233 . 1237) (1229 . 1233) (1228 . 1229) (1116 . 1117) (#("." 0 1 (fontified t)) . -1116) (undo-tree-id71 . -1) 1117 (1116 . 1117) (1106 . 1116) (1104 . 1106) (#("p" 0 1 (face font-lock-string-face fontified t)) . -1104) (undo-tree-id72 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -1105) (undo-tree-id73 . -1) 1106 (1089 . 1106) (apply yas--snippet-revive 1080 1089 #s(yas--snippet nil nil #s(yas--exit 1089 nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1089 nil) 7 nil nil nil nil)) (1080 . 1089) (#("BotConfig$0" 0 11 (fontified nil)) . 1080) (1080 . 1091) (#("Bot" 0 3 (fontified nil)) . 1080) (1080 . 1083) (#("BotConfig" 0 9 (fontified nil)) . -1080) (1080 . 1089) (#("Bot" 0 3 (face font-lock-type-face fontified t)) . -1080) (undo-tree-id74 . -3) 1083 (1071 . 1083) (1067 . 1071) (899 . 908) (#("u" 0 1 (face font-lock-type-face fontified t)) . -899) (undo-tree-id75 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -900) (undo-tree-id76 . -1) 901 (898 . 901) (896 . 898) (6819 . 6836) (6818 . 6819) (6817 . 6818) (6816 . 6817) (6809 . 6816) (#("comm" 0 4 (fontified nil)) . 6809) (6809 . 6813) (#("command" 0 7 (fontified nil)) . -6809) (6809 . 6816) (#("comm" 0 4 (fontified t)) . -6809) (undo-tree-id77 . -4) 6813 (6801 . 6813) (#("[" 0 1 (fontified t)) . -6801) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("c" 0 1 (fontified t)) . -6802) (undo-tree-id80 . -1) (#("o" 0 1 (fontified t)) . -6803) (undo-tree-id81 . -1) (#("m" 0 1 (fontified t)) . -6804) (undo-tree-id82 . -1) (#("m" 0 1 (fontified t)) . -6805) (undo-tree-id83 . -1) (#("a" 0 1 (fontified t)) . -6806) (undo-tree-id84 . -1) (#("n" 0 1 (fontified t)) . -6807) (undo-tree-id85 . -1) (#("d" 0 1 (fontified t)) . -6808) (undo-tree-id86 . -1) 6809 (6802 . 6809)) nil (25827 25789 123203 121000) 0 nil])
([nil nil ((6918 . 6919)) nil (25827 25789 123146 849000) 0 nil])
([nil nil ((1441 . 1446) (#("value" 0 5 (fontified nil)) . 1441) (1441 . 1446) (#("value" 0 5 (fontified t)) . -1441) (undo-tree-id87 . -5) (undo-tree-id88 . -5) (undo-tree-id89 . -5) (undo-tree-id90 . -5) 1446 (1441 . 1446) (#("s" 0 1 (fontified t)) . -1441) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (#("e" 0 1 (fontified t)) . -1442) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("l" 0 1 (fontified t)) . -1443) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1444) (undo-tree-id97 . -1) 1445 (1417 . 1429) (#("LogEve" 0 6 (fontified nil)) . 1417) (1417 . 1423) (#("LogEventType" 0 12 (fontified nil)) . -1417) (1417 . 1429) (#("LogEve" 0 6 (face font-lock-type-face fontified t)) . -1417) (undo-tree-id98 . -6) 1423 (1417 . 1423) (1396 . 1398) (#("L" 0 1 (face font-lock-type-face fontified t)) . -1396) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1397) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1398) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1399) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("v" 0 1 (face font-lock-type-face fontified t)) . -1400) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1401) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1402) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1403) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1404) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -1405) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1406) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1407) (undo-tree-id121 . -1) 1408 (1378 . 1390) (#("LogEve" 0 6 (fontified nil)) . 1378) (1378 . 1384) (#("LogEventType" 0 12 (fontified nil)) . -1378) (1378 . 1390) (#("LogEve" 0 6 (face font-lock-type-face fontified t)) . -1378) (undo-tree-id122 . -6) 1384 (1379 . 1384) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1379) (undo-tree-id123 . -1) 1380 (1378 . 1380) (#("u" 0 1 (fontified t)) . -1378) (undo-tree-id124 . -1) (#("8" 0 1 (face font-lock-type-face fontified t)) . -1379) (undo-tree-id125 . -1) 1380 (1410 . 1417) (#("s" 0 1 (fontified t)) . -1410) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("e" 0 1 (fontified t)) . -1411) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("l" 0 1 (fontified t)) . -1412) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1413) (undo-tree-id132 . -1) (undo-tree-id133 . -1) 1414 (1405 . 1409) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -1405) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -1406) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("t" 0 1 (face font-lock-function-name-face fontified t)) . -1407) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("o" 0 1 (face font-lock-function-name-face fontified t)) . -1408) (undo-tree-id143 . -1) 1409 (1373 . 1377) (#("I" 0 1 (face font-lock-type-face fontified t)) . -1373) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1374) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1375) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1376) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) 1377 (t 25827 25789 146548 886000)) nil (25827 25846 207491 82000) 0 nil])
([nil nil ((#("impl Into<u8> for LogType {
	fn into(self) -> u8 {
		use LogType::*;
		match self {
			Purge => 0,
			BotConfig => 1,
		}
	}
}" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 17 (face font-lock-keyword-face fontified t) 17 18 (fontified t) 18 25 (face font-lock-type-face fontified t) 25 26 (fontified t) 26 29 (fontified t) 29 31 (face font-lock-keyword-face fontified t) 31 32 (fontified t) 32 36 (face font-lock-function-name-face fontified t) 36 37 (fontified t) 37 41 (face font-lock-keyword-face fontified t) 41 44 (fontified t) 44 45 (fontified t syntax-table (1)) 45 46 (fontified t) 46 48 (face font-lock-type-face fontified t) 48 53 (fontified t) 53 56 (face font-lock-keyword-face fontified t) 56 57 (fontified t) 57 64 (face font-lock-type-face fontified t) 64 71 (fontified t) 71 76 (face font-lock-keyword-face fontified t) 76 77 (fontified t) 77 81 (face font-lock-keyword-face fontified t) 81 84 (fontified t) 84 87 (fontified t) 87 92 (face font-lock-type-face fontified t) 92 94 (fontified t) 94 95 (syntax-table (1) fontified t) 95 99 (fontified t) 99 102 (fontified t) 102 111 (face font-lock-type-face fontified t) 111 113 (fontified t) 113 114 (syntax-table (1) fontified t) 114 118 (fontified t) 118 121 (fontified t) 121 126 (fontified t)) . 1131) (undo-tree-id156 . -125) (undo-tree-id157 . -125) (undo-tree-id158 . -125) (undo-tree-id159 . -83) (undo-tree-id160 . -125) (undo-tree-id161 . -125) (undo-tree-id162 . -125) (undo-tree-id163 . -125) (undo-tree-id164 . -125) (undo-tree-id165 . -125) (undo-tree-id166 . -125) (undo-tree-id167 . -125) (undo-tree-id168 . -125) (undo-tree-id169 . -125) (undo-tree-id170 . -125) (undo-tree-id171 . -126) (t 25827 25846 226561 365000)) nil (25827 25853 314946 657000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t)) . -6772) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("[" 0 1 (fontified nil)) . -6773) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("p" 0 1 (fontified nil)) . -6774) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("o" 0 1 (fontified t)) . -6775) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("i" 0 1 (fontified t)) . -6776) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (#("s" 0 1 (fontified t)) . -6777) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#("e" 0 1 (fontified t)) . -6778) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#(":" 0 1 (fontified t)) . -6779) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#(":" 0 1 (fontified t)) . -6780) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("c" 0 1 (fontified t)) . -6781) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#("o" 0 1 (fontified t)) . -6782) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("m" 0 1 (fontified t)) . -6783) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#("m" 0 1 (fontified t)) . -6784) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (#("a" 0 1 (fontified t)) . -6785) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (#("n" 0 1 (fontified t)) . -6786) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (#("d" 0 1 (fontified t)) . -6787) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("]" 0 1 (face font-lock-preprocessor-face fontified t)) . -6788) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("
" 0 1 (fontified t)) . -6789) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (#("p" 0 1 (fontified t)) . -6790) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) 6791 (#("u" 0 1 (fontified t)) . -6791) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (#("b" 0 1 (face font-lock-keyword-face fontified t)) . -6792) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#(" " 0 1 (fontified t)) . -6793) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (#("a" 0 1 (fontified t)) . -6794) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -6795) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (#("y" 0 1 (fontified t)) . -6796) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("n" 0 1 (fontified t)) . -6797) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (#("c" 0 1 (face font-lock-keyword-face fontified t)) . -6798) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (#(" " 0 1 (fontified t)) . -6799) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (#("f" 0 1 (fontified t)) . -6800) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -6801) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (#(" " 0 1 (fontified t)) . -6802) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (#("l" 0 1 (face font-lock-function-name-face fontified t)) . -6803) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (#("o" 0 1 (face font-lock-function-name-face fontified t)) . -6804) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (#("g" 0 1 (face font-lock-function-name-face fontified t)) . -6805) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("(" 0 1 (fontified t)) . -6806) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (#("
" 0 1 (fontified t)) . -6807) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (#("	" 0 1 (fontified t)) . -6808) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (#("c" 0 1 (fontified nil)) . -6809) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#("t" 0 1 (fontified t)) . -6810) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#("x" 0 1 (fontified t)) . -6811) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) 6812 (#(":" 0 1 (fontified t)) . -6812) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#(" " 0 1 (fontified t)) . -6813) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (#("P" 0 1 (face font-lock-type-face fontified t)) . -6814) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -6815) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -6816) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -6817) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -6818) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -6819) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -6820) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -6821) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -6822) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -6823) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -6824) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -6825) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (#("<" 0 1 (fontified t)) . -6826) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (#("'" 0 1 (fontified t)) . -6827) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (#("_" 0 1 (face font-lock-variable-name-face fontified t)) . -6828) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#(">" 0 1 (fontified t)) . -6829) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (#("," 0 1 (fontified t)) . -6830) (undo-tree-id396 . -1) (#("
" 0 1 (fontified t)) . -6831) (undo-tree-id397 . -1) (#("	" 0 1 (fontified t)) . -6832) (undo-tree-id398 . -1) 6833 (6831 . 6833) (6826 . 6831) (6814 . 6826) (#("Poise" 0 5 (fontified nil)) . 6814) (6814 . 6819) (#("PoiseContext" 0 12 (fontified nil)) . -6814) (6814 . 6826) (#("Poise" 0 5 (face font-lock-type-face fontified t)) . -6814) (undo-tree-id399 . -5) 6819 (6812 . 6819) (6809 . 6812) (6807 . 6809) (6803 . 6807) (#("p" 0 1 (face font-lock-function-name-face fontified t)) . -6803) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (#("u" 0 1 (face font-lock-function-name-face fontified t)) . -6804) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (#("r" 0 1 (face font-lock-function-name-face fontified t)) . -6805) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (#("g" 0 1 (face font-lock-function-name-face fontified t)) . -6806) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -6807) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (#("_" 0 1 (face font-lock-function-name-face fontified t)) . -6808) (undo-tree-id415 . -1) 6809 (6808 . 6809) (t 25827 25853 336563 714000)) nil (25827 25884 241838 906000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1181) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (1182 . 1183) (1180 . 1182) (1178 . 1180) (1171 . 1178) (#("LogT" 0 4 (fontified nil)) . 1171) (1171 . 1175) (#("LogType" 0 7 (fontified nil)) . -1171) (1171 . 1178) (#("LogT" 0 4 (face font-lock-type-face fontified t)) . -1171) (undo-tree-id420 . -4) (undo-tree-id421 . -4) (undo-tree-id422 . -4) (undo-tree-id423 . -4) (undo-tree-id424 . -4) 1175 (1166 . 1175) (194 . 217) (1136 . 1136) (1136 . 1143) (#("FromS" 0 5 (fontified nil)) . 1136) (1136 . 1141) (#("FromStr (use std::str::FromStr)" 0 31 (fontified nil)) . -1136) (1136 . 1167) (#("FromS" 0 5 (face font-lock-type-face fontified t)) . -1136) (undo-tree-id425 . -5) 1141 (1131 . 1141) (1129 . 1131) (t 25827 25884 263242 522000)) nil (25827 25950 393208 659000) 0 nil])
([nil nil ((1565 . 1566) (#("," 0 1 (fontified t)) . -1565) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (#("
" 0 1 (fontified t)) . -1566) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#("	" 0 1 (fontified t)) . -1567) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -1568) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1569) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (#("v" 0 1 (face font-lock-type-face fontified t)) . -1570) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1571) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1572) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1573) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1574) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#("L" 0 1 (face font-lock-type-face fontified t)) . -1575) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1576) (undo-tree-id456 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1577) (undo-tree-id457 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1578) (undo-tree-id458 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -1579) (undo-tree-id459 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1580) (undo-tree-id460 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1581) (undo-tree-id461 . -1) (#("," 0 1 (fontified t)) . -1582) (undo-tree-id462 . -1) 1583 (1568 . 1583) (1566 . 1568) (#("s" 0 1 (fontified t)) . -1206) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (#("e" 0 1 (fontified t)) . -1207) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (#("r" 0 1 (fontified t)) . -1208) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (#(":" 0 1 (fontified t)) . -1209) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (#(":" 0 1 (fontified t)) . -1210) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) 1211 (apply yas--snippet-revive 1182 1245 #s(yas--snippet nil nil #s(yas--exit 1242 nil) 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1242 nil) 9 nil nil nil nil)) (1182 . 1245) (#("fn from_str(s: &str) -> ser::StdResult<Self, Self::Err> {
		$0
	}" 0 22 (fontified nil) 22 23 (syntax-table (1) fontified nil) 23 65 (fontified nil)) . 1182) (1245 . 1246) (1240 . 1242) (#("    " 0 4 (fontified nil)) . 1240) (1182 . 1248) (#("fn from_" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 8 (fontified nil)) . 1182) (undo-tree-id478 . -3) (1185 . 1190) (#("fn from_str(..)" 0 15 (fontified nil)) . -1185) (1185 . 1200) (#("from_" 0 5 (face font-lock-function-name-face fontified t)) . -1185) (undo-tree-id479 . -5) 1190 (1186 . 1190) (#("m" 0 1 (face font-lock-function-name-face fontified t)) . -1186) (undo-tree-id480 . -1) 1187 (1182 . 1187) (1180 . 1182) (t 25827 25950 413278 313000)) nil (25827 26010 69526 696000) 0 nil])
([nil nil ((2222 . 2224) (2201 . 2222) (2199 . 2201) (t 25827 26010 89987 643000)) nil (25827 26023 173645 779000) 0 nil])
([nil nil ((2220 . 2224) (#("S" 0 1 (face font-lock-type-face fontified t)) . -2220) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2221) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2222) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -2223) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2224) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -2225) (undo-tree-id492 . -1) (undo-tree-id493 . -1) 2226 (2216 . 2220) (t 25827 26023 183331 538000)) nil (25827 26102 218176 585000) 0 nil])
([nil nil ((2483 . 2488) (2462 . 2483) (#("'" 0 1 (fontified t)) . -2462) (undo-tree-id481 . -1) 2463 (2454 . 2463) (2449 . 2454) (2446 . 2449) (apply yas--snippet-revive 2429 2446 #s(yas--snippet nil (#s(yas--field 1 2444 2445 nil nil nil t #s(yas--exit 2446 nil))) #s(yas--exit 2446 nil) 10 nil #s(yas--field 1 2444 2445 nil nil nil t #s(yas--exit 2446 nil)) nil nil)) (2444 . 2445) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2444 2445 nil nil nil t #s(yas--exit 2446 nil))) #s(yas--exit 2446 nil) 10 nil #s(yas--field 1 2444 2445 nil nil nil t #s(yas--exit 2446 nil)) nil nil)) (2429 . 2445) (#("InvalidLogType($1)$0" 0 20 (fontified nil)) . 2429) (2429 . 2449) (#("InvalidLogType(…)" 0 17 (fontified nil)) . -2429) (2429 . 2446) (2423 . 2429) (2419 . 2423) (2418 . 2419)) nil (25827 26102 218161 913000) 0 nil])
([nil nil ((95 . 109) (89 . 95) (#("Result" 0 6 (fontified nil)) . -89) (89 . 95) (72 . 89) (71 . 72) (t 25827 26102 230070 290000)) nil (25827 26131 750833 212000) 0 nil])
([nil nil ((1295 . 1296) (1287 . 1295) (#("Log" 0 3 (fontified nil)) . 1287) (1287 . 1290) (#("LogError" 0 8 (fontified nil)) . -1287) (1287 . 1295) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -1287) (undo-tree-id494 . -3) (undo-tree-id495 . -3) (undo-tree-id496 . -3) 1290 (1285 . 1290) (1241 . 1242) (1233 . 1241) (#("Log" 0 3 (fontified nil)) . 1233) (1233 . 1236) (#("LogError" 0 8 (fontified nil)) . -1233) (1233 . 1241) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -1233) (undo-tree-id497 . -3) (undo-tree-id498 . -3) (undo-tree-id499 . -3) (undo-tree-id500 . -3) (undo-tree-id501 . -3) 1236 (1220 . 1236) (1218 . 1220) (1254 . 1261) (#("Log" 0 3 (fontified nil)) . 1254) (1254 . 1257) (#("LogType" 0 7 (fontified nil)) . -1254) (1254 . 1261) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -1254) (undo-tree-id502 . -3) (undo-tree-id503 . -3) 1257 (1254 . 1257) (1253 . 1254) (#("<" 0 1 (fontified t)) . -1253) (undo-tree-id504 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1254) (undo-tree-id505 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1255) (undo-tree-id506 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1256) (undo-tree-id507 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1257) (undo-tree-id508 . -1) (#("," 0 1 (fontified t)) . -1258) (undo-tree-id509 . -1) (#(" " 0 1 (fontified t)) . -1259) (undo-tree-id510 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1260) (undo-tree-id511 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1261) (undo-tree-id512 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1262) (undo-tree-id513 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1263) (undo-tree-id514 . -1) (#(":" 0 1 (fontified t)) . -1264) (undo-tree-id515 . -1) (#(":" 0 1 (fontified t)) . -1265) (undo-tree-id516 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1266) (undo-tree-id517 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1267) (undo-tree-id518 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1268) (undo-tree-id519 . -1) (#(">" 0 1 (fontified t)) . -1269) (undo-tree-id520 . -1) 1270 (t 25827 26131 800100 647000)) nil (25827 26204 932233 790000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1314) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (1315 . 1316) (1311 . 1315) (1305 . 1311) (1231 . 1239) (#("LogError" 0 4 (fontified nil) 4 8 (face font-lock-type-face fontified nil)) . 1231) (undo-tree-id525 . 4) (1231 . 1235) (#("LogError" 0 8 (fontified nil)) . -1231) (1231 . 1239) (#("LogE" 0 4 (face font-lock-type-face fontified t)) . -1231) (undo-tree-id526 . -4) (undo-tree-id527 . -4) 1235 (1231 . 1235) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1228) (undo-tree-id528 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1229) (undo-tree-id529 . -1) 1230 (1232 . 1233) (#(" " 0 1 (fontified t)) . -1232) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (#("L" 0 1 (face font-lock-type-face fontified t)) . -1233) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1234) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1235) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1236) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) 1237 (1301 . 1307) (t 25827 26204 943516 113000)) nil (25827 26235 995468 177000) 0 nil])
([nil nil ((apply yas--snippet-revive 1439 1455 #s(yas--snippet nil nil #s(yas--exit 1455 nil) 15 nil nil #s(yas--field 1 1426 1455 nil nil nil t #s(yas--exit 1456 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1455 nil) 15 nil nil #s(yas--field 1 1426 1455 nil nil nil t #s(yas--exit 1456 nil)) nil)) (1439 . 1455) (#("into_boxed_str()$0" 0 18 (fontified nil)) . 1439) (undo-tree-id545 . -18) (1439 . 1457) (#("into_boxed_str()" 0 16 (fontified nil)) . -1439) (undo-tree-id546 . -16) (1439 . 1455) (1438 . 1439) (apply yas--snippet-revive 1428 1438 #s(yas--snippet nil nil #s(yas--exit 1438 nil) 14 nil nil #s(yas--field 1 1426 1455 nil nil nil t #s(yas--exit 1456 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1438 nil) 14 nil nil #s(yas--field 1 1426 1455 nil nil nil t #s(yas--exit 1456 nil)) nil)) (1428 . 1438) (#("to_owned()$0" 0 12 (fontified nil)) . 1428) (undo-tree-id547 . -12) (1428 . 1440) (#("to_" 0 3 (fontified nil)) . 1428) (undo-tree-id548 . -3) (1428 . 1431) (#("to_owned() (as ToOwned)" 0 23 (fontified nil)) . -1428) (undo-tree-id549 . -23) (1428 . 1451) (#("to_" 0 3 (fontified t)) . -1428) (undo-tree-id550 . -3) (undo-tree-id551 . -3) 1431 (1427 . 1431) (#("." 0 1 (fontified t)) . -1427) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (#("i" 0 1 (fontified t)) . -1428) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -1429) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (#("t" 0 1 (fontified t)) . -1430) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (#("o" 0 1 (fontified t)) . -1431) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) 1432 (1427 . 1432) (#("()" 0 2 (fontified nil)) . 1427) (undo-tree-id567 . -2) (1426 . 1427) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1426 1455 nil nil nil t #s(yas--exit 1456 nil))) #s(yas--exit 1456 nil) 13 nil #s(yas--field 1 1426 1455 nil nil nil t #s(yas--exit 1456 nil)) #s(yas--field 1 1401 1456 nil nil nil t #s(yas--exit 1457 nil)) nil)) (1401 . 1429) (#("LogError::InvalidLogType(${1:()})$0" 0 35 (fontified nil)) . 1401) (undo-tree-id568 . -35) (1401 . 1436) (#("LogE" 0 4 (fontified nil)) . 1401) (undo-tree-id569 . -4) (1401 . 1405) (#("LogError::InvalidLogType(…)" 0 27 (fontified nil)) . -1401) (undo-tree-id570 . -27) (1401 . 1428) (#("LogE" 0 4 (face font-lock-type-face fontified t)) . -1401) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) 1405 (1402 . 1405) (#("()" 0 2 (fontified nil)) . 1402) (undo-tree-id574 . -2) (1401 . 1402) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1401 1456 nil nil nil t #s(yas--exit 1457 nil))) #s(yas--exit 1457 nil) 12 nil #s(yas--field 1 1401 1456 nil nil nil t #s(yas--exit 1457 nil)) nil nil)) (1397 . 1404) (#("Err(${1:()})$0" 0 14 (fontified nil)) . 1397) (1397 . 1411) (#("Err" 0 3 (fontified nil)) . 1397) (1397 . 1400) (#("Err(…)" 0 6 (fontified nil)) . -1397) (1397 . 1403) (#("Err" 0 3 (face font-lock-type-face fontified t)) . -1397) (undo-tree-id575 . -3) 1400 (1398 . 1400) (1392 . 1398) (1388 . 1392) (1387 . 1388) (1386 . 1387) (apply yas--snippet-revive 1368 1386 #s(yas--snippet nil nil #s(yas--exit 1386 nil) 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1386 nil) 11 nil nil nil nil)) (1368 . 1386) (#("LogType::BotConfig$0" 0 20 (fontified nil)) . 1368) (1368 . 1388) (#("LogTyp" 0 6 (fontified nil)) . 1368) (1368 . 1374) (#("LogType::BotConfig" 0 18 (fontified nil)) . -1368) (1368 . 1386) (#("LogTyp" 0 6 (face font-lock-type-face fontified t)) . -1368) (undo-tree-id576 . -6) (undo-tree-id577 . -6) 1374 (1365 . 1374) (1349 . 1365) (1345 . 1349) (1326 . 1345) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1326) (undo-tree-id578 . -1) 1327 (1324 . 1327) (#("?" 0 1 (face rust-question-mark fontified t)) . -1324) (undo-tree-id579 . -1) (#(" " 0 1 (fontified t)) . -1325) (undo-tree-id580 . -1) 1326 (1315 . 1326) (1311 . 1315) (t 25827 26236 23553 797000)) nil (25827 26379 971359 265000) 0 nil])
([nil nil ((apply yas--snippet-revive 1397 1457 #s(yas--snippet nil (#s(yas--field 1 1401 1456 nil nil nil t #s(yas--exit 1457 nil))) #s(yas--exit 1457 nil) 12 nil #s(yas--field 1 1401 1456 nil nil nil t #s(yas--exit 1457 nil)) nil nil)) (apply yas--snippet-revive 1401 1456 #s(yas--snippet nil (#s(yas--field 1 1426 1455 nil nil nil t #s(yas--exit 1456 nil))) #s(yas--exit 1456 nil) 13 nil #s(yas--field 1 1426 1455 nil nil nil t #s(yas--exit 1456 nil)) #s(yas--field 1 1401 1456 nil nil nil t #s(yas--exit 1457 nil)) nil))) nil (25827 26391 256732 810000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1306) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (#("l" 0 1 (fontified t)) . -1307) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1308) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) 1309 (t 25827 26379 987080 143000)) nil (25827 26391 256725 765000) 0 nil])
([nil nil ((1495 . 1496) (1484 . 1495) (#("async" 0 5 (fontified nil)) . 1484) (1484 . 1489) (#("async_trait" 0 11 (fontified nil)) . -1484) (1484 . 1495) (#("async" 0 5 (face font-lock-keyword-face fontified t)) . -1484) (undo-tree-id633 . -5) (undo-tree-id634 . -5) (undo-tree-id635 . -5) (undo-tree-id636 . -5) 1489 (1482 . 1489) (1481 . 1482) (#("	" 0 1 (fontified nil)) . -1515) (undo-tree-id637 . -1) (1516 . 1517) (1514 . 1516) (1512 . 1514) (1505 . 1512) (#("LogT" 0 4 (fontified nil)) . 1505) (1505 . 1509) (#("LogType" 0 7 (fontified nil)) . -1505) (1505 . 1512) (#("LogT" 0 4 (face font-lock-type-face fontified t)) . -1505) (undo-tree-id638 . -4) 1509 (1500 . 1509) (471 . 472) (489 . 491) (490 . 493) (491 . 494) (492 . 494) (#("e" 0 1 (fontified t)) . 492) (494 . 501) (1470 . 1470) (1470 . 1483) (#("Slash" 0 5 (fontified nil)) . 1470) (1470 . 1475) (#("SlashArgument (use poise::SlashArgument)" 0 40 (fontified nil)) . -1470) (1470 . 1510) (#("Slash" 0 5 (face font-lock-type-face fontified t)) . -1470) (undo-tree-id639 . -5) 1475 (1465 . 1475) (t 25827 26391 283763 92000)) nil (25827 26460 662112 858000) 0 nil])
([nil nil ((488 . 489) (477 . 488) (#("async_trait" 0 11 (fontified nil)) . -477) (477 . 488) (475 . 477) (464 . 475) (#("async_" 0 6 (fontified nil)) . 464) (464 . 470) (#("async_trait" 0 11 (fontified nil)) . -464) (464 . 475) (#("async_" 0 6 (face font-lock-constant-face fontified t)) . -464) (undo-tree-id640 . -6) (undo-tree-id641 . -6) (undo-tree-id642 . -6) (undo-tree-id643 . -6) 470 (460 . 470) (459 . 460) (t 25827 26460 687199 595000)) nil (25827 26475 78230 510000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1800) (undo-tree-id675 . -1) (1801 . 1802) (1798 . 1801) (1796 . 1798) (624 . 639) (1767 . 1767) (1767 . 1780) (#("Slash" 0 5 (fontified nil)) . 1767) (1767 . 1772) (#("SlashArgError (use poise::SlashArgError)" 0 40 (fontified nil)) . -1767) (1767 . 1807) (#("Slash" 0 5 (face font-lock-type-face fontified t)) . -1767) (undo-tree-id676 . -5) (undo-tree-id677 . -5) 1772 (1761 . 1772) (apply yas--snippet-revive 1751 1762 #s(yas--snippet nil nil #s(yas--exit 1761 nil) 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1761 nil) 16 nil nil nil nil)) (1751 . 1762) (#("StdResult<$0>" 0 13 (fontified nil)) . 1751) (1751 . 1764) (#("Std" 0 3 (fontified nil)) . 1751) (1751 . 1754) (#("StdResult<…>" 0 12 (fontified nil)) . -1751) (1751 . 1763) (#("Std" 0 3 (face font-lock-type-face fontified t)) . -1751) (undo-tree-id678 . -3) 1754 (1751 . 1754) (#("R" 0 1 (face font-lock-type-face fontified t)) . -1751) (undo-tree-id679 . -1) 1752 (#("e" 0 1 (face font-lock-type-face fontified t)) . -1752) (undo-tree-id680 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1753) (undo-tree-id681 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1754) (undo-tree-id682 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1755) (undo-tree-id683 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1756) (undo-tree-id684 . -1) 1757 (1747 . 1757) (#("		" 0 2 (fontified t)) . -1746) 1749 (1748 . 1749) (1744 . 1748) (#(")" 0 1 (fontified t)) . -1744) (undo-tree-id685 . -1) 1745 (1744 . 1745) (1739 . 1744) (#("Val" 0 3 (fontified nil)) . 1739) (1739 . 1742) (#("Value" 0 5 (fontified nil)) . -1739) (1739 . 1744) (#("Val" 0 3 (face font-lock-type-face fontified t)) . -1739) (undo-tree-id686 . -3) 1742 (1739 . 1742) (1734 . 1739) (#("V" 0 1 (face font-lock-type-face fontified t)) . -1734) (undo-tree-id687 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1735) (undo-tree-id688 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1736) (undo-tree-id689 . -1) 1737 (1736 . 1737) (1726 . 1736) (1723 . 1726) (1718 . 1723) (#("<" 0 1 (fontified t)) . -1661) (undo-tree-id690 . -1) (#("'" 0 1 (fontified t)) . -1662) (undo-tree-id691 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1663) (undo-tree-id692 . -1) (#(">" 0 1 (fontified t)) . -1664) (undo-tree-id693 . -1) 1665 (1661 . 1665) (490 . 574) (1616 . 1616) (1616 . 1634) (#("Applic" 0 6 (fontified nil)) . 1616) (1616 . 1622) (#("ApplicationCommand (use poise::serenity_prelude::interactions::application_command::ApplicationCommand)" 0 103 (fontified nil)) . -1616) (1616 . 1719) (#("Applic" 0 6 (face font-lock-type-face fontified t)) . -1616) (undo-tree-id694 . -6) 1622 (1603 . 1622) (1601 . 1603) (#(" " 0 1 (fontified nil)) . 1600) (undo-tree-id695 . -1) (1601 . 1602) (1578 . 1581) (1596 . 1598) (1589 . 1596) (#("Conte" 0 5 (fontified nil)) . 1589) (1589 . 1594) (#("Context" 0 7 (fontified nil)) . -1589) (1589 . 1596) (#("Conte" 0 5 (face font-lock-type-face fontified t)) . -1589) (undo-tree-id696 . -5) 1594 (1584 . 1594) (1578 . 1584) (1570 . 1578) (#("c" 0 1 (face font-lock-function-name-face fontified t)) . -1570) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) 1571 (#("r" 0 1 (face font-lock-function-name-face fontified t)) . -1571) (undo-tree-id700 . -1) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -1572) (undo-tree-id701 . -1) (#("a" 0 1 (face font-lock-function-name-face fontified t)) . -1573) (undo-tree-id702 . -1) (#("t" 0 1 (face font-lock-function-name-face fontified t)) . -1574) (undo-tree-id703 . -1) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -1575) (undo-tree-id704 . -1) (#("(" 0 1 (fontified t)) . -1576) (undo-tree-id705 . -1) 1577 (1561 . 1577) (#("f" 0 1 (fontified t)) . -1561) (undo-tree-id706 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -1562) (undo-tree-id707 . -1) (#(" " 0 1 (fontified t)) . -1563) (undo-tree-id708 . -1) (#("c" 0 1 (face font-lock-function-name-face fontified t)) . -1564) (undo-tree-id709 . -1) (#("r" 0 1 (face font-lock-function-name-face fontified t)) . -1565) (undo-tree-id710 . -1) 1566 (1561 . 1566) (1559 . 1561) (t 25827 26475 90554 973000)) nil (25827 26779 347119 225000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1856) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (#("i" 0 1 (fontified t)) . -1857) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -1858) (undo-tree-id651 . -1) (undo-tree-id652 . -1) 1859 (1857 . 1859) (1849 . 1857) (#("$" 0 1 (fontified t)) . -1849) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (#("t" 0 1 (fontified t)) . -1850) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (#("a" 0 1 (fontified t)) . -1851) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (#("r" 0 1 (fontified t)) . -1852) (undo-tree-id659 . -1) (undo-tree-id660 . -1) 1853 (1849 . 1853) (639 . 663) (apply yas--snippet-revive 1801 1826 #s(yas--snippet nil nil #s(yas--exit 1825 nil) 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1825 nil) 17 nil nil nil nil)) (1801 . 1826) (#("extract_slash_argument!($0)" 0 27 (fontified nil)) . 1801) (1801 . 1828) (#("extract" 0 7 (fontified nil)) . 1801) (1801 . 1808) (#("extract_slash_argument!(…) (use poise::extract_slash_argument)" 0 62 (fontified nil)) . -1801) (1801 . 1863) (#("extract" 0 7 (fontified t)) . -1801) (undo-tree-id661 . -7) 1808 (1801 . 1808) (#("p" 0 1 (fontified t)) . -1801) (undo-tree-id662 . -1) (#("o" 0 1 (fontified t)) . -1802) (undo-tree-id663 . -1) (#("i" 0 1 (fontified t)) . -1803) (undo-tree-id664 . -1) (#("s" 0 1 (fontified t)) . -1804) (undo-tree-id665 . -1) (#("e" 0 1 (fontified t)) . -1805) (undo-tree-id666 . -1) (#(":" 0 1 (fontified t)) . -1806) (undo-tree-id667 . -1) (#(":" 0 1 (fontified t)) . -1807) (undo-tree-id668 . -1) 1808 (1801 . 1808) (#("e" 0 1 (fontified t)) . -1801) (undo-tree-id669 . -1) (#("x" 0 1 (fontified t)) . -1802) (undo-tree-id670 . -1) (#("t" 0 1 (fontified t)) . -1803) (undo-tree-id671 . -1) (#("r" 0 1 (fontified t)) . -1804) (undo-tree-id672 . -1) (#("a" 0 1 (fontified t)) . -1805) (undo-tree-id673 . -1) (#("c" 0 1 (fontified t)) . -1806) (undo-tree-id674 . -1) 1807 (1801 . 1807) (1798 . 1801)) nil (25827 26779 346662 345000) 0 nil])
([nil nil ((#("use poise::serenity_prelude::interactions::application_command::ApplicationCommand;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-constant-face fontified t) 9 11 (fontified t) 11 27 (face font-lock-constant-face fontified t) 27 29 (fontified t) 29 41 (face font-lock-constant-face fontified t) 41 43 (fontified t) 43 62 (face font-lock-constant-face fontified t) 62 64 (fontified t) 64 82 (face font-lock-type-face fontified t) 82 84 (fontified t)) . 490) (undo-tree-id644 . -83) (undo-tree-id645 . -82) (undo-tree-id646 . -64) 554) nil (25827 26779 346635 339000) 0 nil])
([nil nil ((1743 . 1747) (579 . 624) (1655 . 1655) (1655 . 1698) (#("ApplicationCommandOr" 0 20 (fontified nil)) . 1655) (1655 . 1675) (#("ApplicationCommandOrAutocompleteInteraction (use poise::ApplicationCommandOrAutocompleteInteraction)" 0 100 (fontified nil)) . -1655) (1655 . 1755) (#("ApplicationCommandOr" 0 20 (face font-lock-type-face fontified t)) . -1655) (undo-tree-id711 . -20) 1675 (1670 . 1675) (1655 . 1670) (#("s" 0 1 (fontified t)) . -1655) (undo-tree-id712 . -1) (#("e" 0 1 (fontified t)) . -1656) (undo-tree-id713 . -1) (#("r" 0 1 (fontified t)) . -1657) (undo-tree-id714 . -1) 1658 (#(":" 0 1 (fontified t)) . -1658) (undo-tree-id715 . -1) (#(":" 0 1 (fontified t)) . -1659) (undo-tree-id716 . -1) (#("A" 0 1 (face font-lock-type-face fontified nil)) . -1660) (undo-tree-id717 . -1) (#("p" 0 1 (face font-lock-type-face fontified nil)) . -1661) (undo-tree-id718 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1662) (undo-tree-id719 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1663) (undo-tree-id720 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1664) (undo-tree-id721 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -1665) (undo-tree-id722 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1666) (undo-tree-id723 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1667) (undo-tree-id724 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1668) (undo-tree-id725 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1669) (undo-tree-id726 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1670) (undo-tree-id727 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1671) (undo-tree-id728 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1672) (undo-tree-id729 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -1673) (undo-tree-id730 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -1674) (undo-tree-id731 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1675) (undo-tree-id732 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1676) (undo-tree-id733 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1677) (undo-tree-id734 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1678) (undo-tree-id735 . -1) 1679 (1663 . 1679) (1654 . 1663) (#(" " 0 1 (fontified t)) . -1654) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (#("A" 0 1 (face font-lock-type-face fontified t)) . -1655) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (#("p" 0 1 (face font-lock-type-face fontified nil)) . -1656) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1657) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1658) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1659) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -1660) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1661) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1662) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1663) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1664) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1665) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1666) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1667) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -1668) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -1669) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1670) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1671) (undo-tree-id770 . -1) 1672 (1671 . 1672) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1671) (undo-tree-id771 . -1) 1672 (1671 . 1672) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1671) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1672) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (#("<" 0 1 (fontified t)) . -1673) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (#("'" 0 1 (fontified t)) . -1674) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (#("_" 0 1 (face font-lock-variable-name-face fontified t)) . -1675) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (#(">" 0 1 (fontified t)) . -1676) (undo-tree-id782 . -1) (undo-tree-id783 . -1) 1677 (t 25827 26779 361060 612000)) nil (25827 26806 397378 17000) 0 nil])
([nil nil ((1764 . 1770) (t 25827 26806 417775 193000)) nil (25827 26818 938819 428000) 0 nil])
([nil nil ((1882 . 1885) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -1822) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1823) (undo-tree-id815 . -1) (undo-tree-id816 . -1) 1824 (1822 . 1824) (1824 . 1825) (1880 . 1881) (1817 . 1817) (1817 . 1824) (1867 . 1872) (#("val" 0 3 (fontified nil)) . 1867) (1867 . 1870) (#("value" 0 5 (fontified nil)) . -1867) (1867 . 1872) (#("val" 0 3 (fontified t)) . -1867) (undo-tree-id817 . -3) (undo-tree-id818 . -3) 1870 (1865 . 1870) (1854 . 1865) (#("inter" 0 5 (fontified nil)) . 1854) (1854 . 1859) (#("interaction" 0 11 (fontified nil)) . -1854) (1854 . 1865) (#("inter" 0 5 (fontified t)) . -1854) (undo-tree-id819 . -5) (undo-tree-id820 . -5) 1859 (1849 . 1859) (1848 . 1849) (t 25827 26818 961130 867000)) nil (25827 27112 993571 925000) 0 nil])
([nil nil ((#("#[async_trait]
impl SlashArgument for LogType {
	async fn extract(
		ctx: &ser::Context,
		interaction: ApplicationCommandOrAutocompleteInteraction<'_>,
		value: &ser::json::Value
	) -> StdResult<Self, SlashArgError> {
		let s = extract_slash_argument!(String, ctx, interaction, value);
		
	}
}

" 0 2 (face font-lock-preprocessor-face fontified t) 2 14 (face font-lock-preprocessor-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t) 20 33 (face font-lock-type-face fontified t) 33 34 (fontified t) 34 37 (face font-lock-keyword-face fontified t) 37 38 (fontified t) 38 45 (face font-lock-type-face fontified t) 45 48 (fontified t) 48 49 (fontified t) 49 54 (face font-lock-keyword-face fontified t) 54 55 (fontified t) 55 57 (face font-lock-keyword-face fontified t) 57 58 (fontified t) 58 65 (face font-lock-function-name-face fontified t) 65 67 (fontified t) 67 69 (fontified t) 69 72 (face font-lock-variable-name-face fontified t) 72 74 (fontified t) 74 75 (face rust-ampersand-face fontified t) 75 78 (face font-lock-constant-face fontified t) 78 80 (fontified t) 80 87 (face font-lock-type-face fontified t) 87 89 (fontified t) 89 91 (fontified t) 91 102 (face font-lock-variable-name-face fontified t) 102 104 (fontified t) 104 147 (face font-lock-type-face fontified t) 147 149 (fontified t) 149 150 (face font-lock-variable-name-face fontified t) 150 151 (fontified t) 151 153 (fontified t) 153 155 (fontified t) 155 160 (face font-lock-variable-name-face fontified t) 160 162 (fontified t) 162 163 (face rust-ampersand-face fontified t) 163 166 (face font-lock-constant-face fontified t) 166 168 (fontified t) 168 172 (face font-lock-constant-face fontified t) 172 174 (fontified t) 174 179 (face font-lock-type-face fontified t) 179 180 (fontified t) 180 184 (fontified t) 184 185 (fontified t syntax-table (1)) 185 186 (fontified t) 186 195 (face font-lock-type-face fontified t) 195 196 (fontified t) 196 200 (face font-lock-type-face fontified t) 200 202 (fontified t) 202 215 (face font-lock-type-face fontified t) 215 219 (fontified t) 219 221 (fontified t) 221 224 (face font-lock-keyword-face fontified t) 224 225 (fontified t) 225 226 (face font-lock-variable-name-face fontified t) 226 229 (fontified t) 229 252 (face font-lock-preprocessor-face fontified t) 252 253 (fontified t) 253 259 (face font-lock-type-face fontified t) 259 266 (fontified t) 266 279 (fontified t) 279 284 (fontified t) 284 285 (fontified t) 285 289 (fontified t) 289 290 (fontified t) 290 292 (fontified t) 292 293 (fontified t) 293 294 (fontified t) 294 295 (fontified t) 295 296 (fontified t)) . 1596) (undo-tree-id784 . -295) (undo-tree-id785 . 223) (undo-tree-id786 . -295) (undo-tree-id787 . -295) (undo-tree-id788 . -15) (undo-tree-id789 . -58) (undo-tree-id790 . -295) (undo-tree-id791 . -295) (undo-tree-id792 . -265) (undo-tree-id793 . 70) (undo-tree-id794 . -243) (undo-tree-id795 . -73) (undo-tree-id796 . -11) (undo-tree-id797 . -11) (undo-tree-id798 . -11) (undo-tree-id799 . -11) (undo-tree-id800 . -15) (undo-tree-id801 . -15) (undo-tree-id802 . -15) (undo-tree-id803 . -15) (undo-tree-id804 . -15) (undo-tree-id805 . -15) (undo-tree-id806 . -15) (undo-tree-id807 . -15) (undo-tree-id808 . -295) (undo-tree-id809 . -295) (undo-tree-id810 . -295) (undo-tree-id811 . -295) (undo-tree-id812 . -296) 1891) nil (25827 27112 993544 969000) 0 nil])
([nil nil ((624 . 641) (1058 . 1058) (1058 . 1073) (#("Choice" 0 6 (fontified nil)) . 1058) (1058 . 1064) (#("ChoiceParameter (use poise::ChoiceParameter)" 0 44 (fontified nil)) . -1058) (1058 . 1102) (#("Choice" 0 6 (face font-lock-preprocessor-face fontified t)) . -1058) (undo-tree-id821 . -6) 1064 (1056 . 1064) (t 25827 27113 11673 772000)) nil (25827 27126 478205 448000) 0 nil])
([nil nil ((#("impl Display for LogType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		match self {
			LogType::Purge => write!(f, \"purge\"),
			LogType::BotConfig => write!(f, \"bot_config\"),
		}
    }
}

impl FromStr for LogType {
	type Err = LogError;
	fn from_str(s: &str) -> StdResult<LogType, LogError> {
		match s {
			\"purge\" => Ok(LogType::Purge),
			\"bot_config\" => Ok(LogType::BotConfig),
			_ => Err(LogError::InvalidLogType(s.to_owned().into_boxed_str()))
		}
	}
}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 24 (face font-lock-type-face fontified t) 24 27 (fontified t) 27 31 (fontified t) 31 33 (face font-lock-keyword-face fontified t) 33 34 (fontified t) 34 37 (face font-lock-function-name-face fontified t) 37 38 (fontified t) 38 39 (face rust-ampersand-face fontified t) 39 43 (face font-lock-keyword-face fontified t) 43 45 (fontified t) 45 46 (face font-lock-variable-name-face fontified t) 46 48 (fontified t) 48 49 (face rust-ampersand-face fontified t) 49 52 (face font-lock-keyword-face fontified t) 52 53 (fontified t) 53 56 (face font-lock-constant-face fontified t) 56 58 (fontified t) 58 61 (face font-lock-constant-face fontified t) 61 63 (fontified t) 63 72 (face font-lock-type-face fontified t) 72 73 (fontified t) 73 74 (fontified t) 74 75 (face font-lock-variable-name-face fontified t) 75 76 (fontified t) 76 79 (fontified t) 79 80 (fontified t syntax-table (1)) 80 81 (fontified t) 81 84 (face font-lock-constant-face fontified t) 84 86 (fontified t) 86 89 (face font-lock-constant-face fontified t) 89 91 (fontified t) 91 97 (face font-lock-type-face fontified t) 97 102 (fontified t) 102 107 (face font-lock-keyword-face fontified t) 107 108 (fontified t) 108 112 (face font-lock-keyword-face fontified t) 112 115 (fontified t) 115 118 (fontified t) 118 125 (face font-lock-type-face fontified t) 125 127 (fontified t) 127 132 (face font-lock-type-face fontified t) 132 134 (fontified t) 134 135 (fontified t syntax-table (1)) 135 136 (fontified t) 136 142 (face rust-builtin-formatting-macro fontified t) 142 146 (fontified t) 146 147 (face font-lock-string-face fontified t) 147 152 (face font-lock-string-face fontified t) 152 153 (face font-lock-string-face fontified t) 153 156 (fontified t) 156 159 (fontified t) 159 166 (face font-lock-type-face fontified t) 166 168 (fontified t) 168 177 (face font-lock-type-face fontified t) 177 179 (fontified t) 179 180 (fontified t syntax-table (1)) 180 181 (fontified t) 181 187 (face rust-builtin-formatting-macro fontified t) 187 191 (fontified t) 191 203 (face font-lock-string-face fontified t) 203 205 (fontified t) 205 206 (fontified t) 206 210 (fontified t) 210 216 (fontified t) 216 218 (fontified t) 218 219 (fontified t) 219 223 (face font-lock-keyword-face fontified t) 223 224 (fontified t) 224 231 (face font-lock-type-face fontified t) 231 232 (fontified t) 232 235 (face font-lock-keyword-face fontified t) 235 236 (fontified t) 236 243 (face font-lock-type-face fontified t) 243 246 (fontified t) 246 247 (fontified t) 247 251 (face font-lock-keyword-face fontified t) 251 252 (fontified t) 252 255 (face font-lock-type-face fontified t) 255 258 (fontified t) 258 266 (face font-lock-type-face fontified t) 266 267 (fontified t) 267 268 (fontified t) 268 269 (fontified t) 269 271 (face font-lock-keyword-face fontified t) 271 272 (fontified t) 272 280 (face font-lock-function-name-face fontified t) 280 281 (fontified t) 281 282 (face font-lock-variable-name-face fontified t) 282 284 (fontified t) 284 285 (face rust-ampersand-face fontified t) 285 288 (face font-lock-type-face fontified t) 288 291 (fontified t) 291 292 (fontified t syntax-table (1)) 292 293 (fontified t) 293 302 (face font-lock-type-face fontified t) 302 303 (fontified t) 303 310 (face font-lock-type-face fontified t) 310 312 (fontified t) 312 320 (face font-lock-type-face fontified t) 320 321 (fontified t) 321 322 (fontified t) 322 323 (fontified t) 323 324 (fontified t) 324 326 (fontified t) 326 331 (face font-lock-keyword-face fontified t) 331 332 (fontified t) 332 333 (fontified t) 333 336 (fontified t) 336 339 (fontified t) 339 346 (face font-lock-string-face fontified t) 346 348 (fontified t) 348 349 (fontified t syntax-table (1)) 349 350 (fontified t) 350 352 (face font-lock-type-face fontified t) 352 353 (fontified t) 353 360 (face font-lock-type-face fontified t) 360 362 (fontified t) 362 367 (face font-lock-type-face fontified t) 367 370 (fontified t) 370 373 (fontified t) 373 385 (face font-lock-string-face fontified t) 385 387 (fontified t) 387 388 (fontified t syntax-table (1)) 388 389 (fontified t) 389 391 (face font-lock-type-face fontified t) 391 392 (fontified t) 392 399 (face font-lock-type-face fontified t) 399 401 (fontified t) 401 410 (face font-lock-type-face fontified t) 410 413 (fontified t) 413 419 (fontified t) 419 420 (fontified t syntax-table (1)) 420 421 (fontified t) 421 424 (face font-lock-type-face fontified t) 424 425 (fontified t) 425 433 (face font-lock-type-face fontified t) 433 435 (fontified t) 435 449 (face font-lock-type-face fontified t) 449 452 (fontified t) 452 463 (fontified t) 463 479 (fontified t) 479 480 (fontified t) 480 481 (fontified t) 481 482 (fontified t) 482 485 (fontified t) 485 486 (fontified t) 486 488 (fontified t) 488 489 (fontified t) 489 490 (fontified t) 490 491 (fontified t) 491 492 (fontified t)) . 1138) (undo-tree-id822 . -491) (undo-tree-id823 . -491) (undo-tree-id824 . -491) (undo-tree-id825 . -155) (undo-tree-id826 . -492) (undo-tree-id827 . -492) (undo-tree-id828 . -324) (undo-tree-id829 . -492) (undo-tree-id830 . -492) (undo-tree-id831 . -492) (undo-tree-id832 . -491) (undo-tree-id833 . -27) (undo-tree-id834 . -27) (undo-tree-id835 . -27) (undo-tree-id836 . -27) (undo-tree-id837 . -218) (undo-tree-id838 . -268) (undo-tree-id839 . -324) (undo-tree-id840 . -324) (undo-tree-id841 . -324) (undo-tree-id842 . -324) (undo-tree-id843 . -491) (undo-tree-id844 . -491) (undo-tree-id845 . -491) (undo-tree-id846 . -492) 1629 (t 25827 27126 518366 83000)) nil (25827 27151 51327 210000) 0 nil])
([nil nil ((1161 . 1165) (1143 . 1161) (1141 . 1143) (1113 . 1130) (1111 . 1113)) nil (25827 27151 51277 370000) 0 nil])
([nil nil ((1108 . 1120) (1103 . 1108) (1082 . 1103) (1061 . 1082) (1053 . 1061) (1046 . 1053) (1025 . 1046) (1024 . 1025) (6928 . 6937) (6927 . 6928) (7105 . 7108) (7093 . 7105) (#("e" 0 1 (face font-lock-string-face fontified t)) . -7093) (undo-tree-id847 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -7094) (undo-tree-id848 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -7095) (undo-tree-id849 . -1) (#("v" 0 1 (face font-lock-string-face fontified t)) . -7096) (undo-tree-id850 . -1) 7097 (7086 . 7097) (#("L" 0 1 (face font-lock-string-face fontified t)) . -7086) (undo-tree-id851 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -7087) (undo-tree-id852 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -7088) (undo-tree-id853 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -7089) (undo-tree-id854 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -7090) (undo-tree-id855 . -1) (#("p" 0 1 (face font-lock-string-face fontified t)) . -7091) (undo-tree-id856 . -1) 7092 (7086 . 7092) (#("L" 0 1 (face font-lock-string-face fontified t)) . -7086) (undo-tree-id857 . -1) 7087 (#("o" 0 1 (face font-lock-string-face fontified t)) . -7087) (undo-tree-id858 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -7088) (undo-tree-id859 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -7089) (undo-tree-id860 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -7090) (undo-tree-id861 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -7091) (undo-tree-id862 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -7092) (undo-tree-id863 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -7093) (undo-tree-id864 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -7094) (undo-tree-id865 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -7095) (undo-tree-id866 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -7096) (undo-tree-id867 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -7097) (undo-tree-id868 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -7098) (undo-tree-id869 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -7099) (undo-tree-id870 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -7100) (undo-tree-id871 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -7101) (undo-tree-id872 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -7102) (undo-tree-id873 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -7103) (undo-tree-id874 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -7104) (undo-tree-id875 . -1) (#("." 0 1 (face font-lock-string-face fontified t)) . -7105) (undo-tree-id876 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -7106) (undo-tree-id877 . -1) (#("]" 0 1 (face font-lock-preprocessor-face fontified t)) . -7107) (undo-tree-id878 . -1) 7108 (7104 . 7108) (7096 . 7104) (#(" " 0 1 (face font-lock-string-face fontified t)) . -7096) (undo-tree-id879 . -1) 7097 (7095 . 7097) (#("s" 0 1 (face font-lock-string-face fontified t)) . -7095) (undo-tree-id880 . -1) 7096 (7090 . 7096) (7069 . 7090) (7067 . 7069) (7066 . 7067) (7064 . 7066) (7062 . 7064) (7050 . 7062) (#("Poise" 0 5 (fontified nil)) . 7050) (7050 . 7055) (#("PoiseContext" 0 12 (fontified nil)) . -7050) (7050 . 7062) (#("Poise" 0 5 (face font-lock-type-face fontified t)) . -7050) (undo-tree-id881 . -5) 7055 (7045 . 7055) (7043 . 7045) (7059 . 7061) (399 . 410) (apply yas--snippet-revive 7038 7049 #s(yas--snippet nil nil #s(yas--exit 7048 nil) 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7048 nil) 18 nil nil nil nil)) (7038 . 7049) (#("CmdResult<$0>" 0 13 (fontified nil)) . 7038) (7038 . 7051) (#("Cmd" 0 3 (fontified nil)) . 7038) (7038 . 7041) (#("CmdResult<…> (use crate::errors::CmdResult)" 0 43 (fontified nil)) . -7038) (7038 . 7081) (#("Cmd" 0 3 (face font-lock-type-face fontified t)) . -7038) (undo-tree-id882 . -3) 7041 (7034 . 7041) (#("	" 0 1 (fontified t)) . -7033) 7035 (7034 . 7035) (7032 . 7034) (7028 . 7032) (7015 . 7028) (7014 . 7015) (7004 . 7011) (#("_" 0 1 (face font-lock-string-face fontified t)) . -7004) (undo-tree-id883 . -1) (#("M" 0 1 (face font-lock-string-face fontified t)) . -7005) (undo-tree-id884 . -1) (#("E" 0 1 (face font-lock-string-face fontified t)) . -7006) (undo-tree-id885 . -1) (#("S" 0 1 (face font-lock-string-face fontified t)) . -7007) (undo-tree-id886 . -1) (#("S" 0 1 (face font-lock-string-face fontified t)) . -7008) (undo-tree-id887 . -1) (#("A" 0 1 (face font-lock-string-face fontified t)) . -7009) (undo-tree-id888 . -1) (#("G" 0 1 (face font-lock-string-face fontified t)) . -7010) (undo-tree-id889 . -1) (#("E" 0 1 (face font-lock-string-face fontified t)) . -7011) (undo-tree-id890 . -1) (#("S" 0 1 (face font-lock-string-face fontified t)) . -7012) (undo-tree-id891 . -1) 7013 (6998 . 7016) (#("A" 0 1 (face font-lock-string-face fontified t)) . -6998) (undo-tree-id892 . -1) (#("M" 0 1 (face font-lock-string-face fontified t)) . -6999) (undo-tree-id893 . -1) 7000 (6997 . 7000) (6981 . 6997) (6960 . 6981) (#(" " 0 1 (fontified t)) . -6960) (undo-tree-id894 . -1) 6961 (6960 . 6961) (6939 . 6960) (6933 . 6939) (6926 . 6933) (#("command" 0 7 (fontified nil)) . -6926) (6926 . 6933) (6920 . 6926) (#("o" 0 1 (fontified t)) . -6920) (undo-tree-id895 . -1) 6921 (6918 . 6921) (#("]" 0 1 (fontified t)) . -6918) (undo-tree-id896 . -1) 6919 (6917 . 6919) (#("
" 0 1 (fontified t)) . -6917) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) 6918 (t 25827 27151 71746 162000)) nil (25827 27835 655458 705000) 0 nil])
([nil nil ((7233 . 7234)) nil (25827 27835 655342 751000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4502) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (#("	" 0 1 (fontified t)) . -4503) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (#("t" 0 1 (fontified t)) . -4504) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (#("r" 0 1 (fontified t)) . -4505) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (#("a" 0 1 (fontified t)) . -4506) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (#("n" 0 1 (fontified t)) . -4507) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (#("s" 0 1 (fontified t)) . -4508) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (#("." 0 1 (fontified t)) . -4509) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) 4510 (4504 . 4510) (4502 . 4504) (4406 . 4411) (#("trans" 0 5 (fontified nil)) . 4406) (4406 . 4411) (#("trans" 0 5 (fontified t)) . -4406) (undo-tree-id998 . -5) (undo-tree-id999 . -5) 4411 (4406 . 4411) (#("c" 0 1 (fontified t)) . -4406) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (#("o" 0 1 (fontified t)) . -4407) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (#("n" 0 1 (fontified t)) . -4408) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (#("n" 0 1 (fontified t)) . -4409) (undo-tree-id1006 . -1) 4410 (4402 . 4404) (apply yas--snippet-revive 4389 4402 #s(yas--snippet nil nil #s(yas--exit 4402 nil) 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4402 nil) 19 nil nil nil nil)) (4389 . 4402) (#("transaction()$0" 0 15 (fontified nil)) . 4389) (4389 . 4404) (#("trans" 0 5 (fontified nil)) . 4389) (4389 . 4394) (#("transaction()" 0 13 (fontified nil)) . -4389) (4389 . 4402) (#("trans" 0 5 (fontified t)) . -4389) (undo-tree-id1007 . -5) 4394 (4393 . 4394) (4372 . 4393) (4370 . 4372) (#("." 0 1 (fontified t)) . -4369) (undo-tree-id1008 . -1) 4370 (4369 . 4370) (4541 . 4543) (4526 . 4541) (4521 . 4526) (4519 . 4521) (4500 . 4519) (4498 . 4500) (4479 . 4498) (4477 . 4479) (t 25827 27835 676426 484000)) nil (25827 28780 325082 841000) 0 nil])
([nil nil ((4403 . 4408) (#("await" 0 5 (fontified nil)) . -4403) (4403 . 4408) (4402 . 4403)) nil (25827 28780 324752 883000) 0 nil])
([nil nil ((4530 . 4532) (4525 . 4530) (#("await" 0 5 (fontified nil)) . -4525) (4525 . 4530) (4524 . 4525) (apply yas--snippet-revive 4516 4524 #s(yas--snippet nil nil #s(yas--exit 4524 nil) 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4524 nil) 20 nil nil nil nil)) (4516 . 4524) (#("commit()$0" 0 10 (fontified nil)) . 4516) (4516 . 4526) (#("commit()" 0 8 (fontified nil)) . -4516) (4516 . 4524) (4510 . 4516) (4508 . 4510) (t 25827 28780 334118 128000)) nil (25827 28791 512325 259000) 0 nil])
([nil nil ((4819 . 4825) (4817 . 4819) (4815 . 4817) (4810 . 4815) (#("await" 0 5 (fontified nil)) . -4810) (4810 . 4815) (4809 . 4810) (apply yas--snippet-revive 4801 4809 #s(yas--snippet nil nil #s(yas--exit 4809 nil) 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4809 nil) 25 nil nil nil nil)) (4801 . 4809) (#("commit()$0" 0 10 (fontified nil)) . 4801) (4801 . 4811) (#("commit()" 0 8 (fontified nil)) . -4801) (4801 . 4809) (4795 . 4801) (4793 . 4795) (4791 . 4793) (4786 . 4791) (#("await" 0 5 (fontified nil)) . -4786) (4786 . 4791) (4785 . 4786) (apply yas--snippet-revive 4729 4785 #s(yas--snippet nil (#s(yas--field 1 4737 4746 nil nil nil t #s(yas--field 2 4748 4784 nil nil nil t #s(yas--exit 4785 nil))) #s(yas--field 2 4748 4784 nil nil nil t #s(yas--exit 4785 nil))) #s(yas--exit 4785 nil) 23 nil #s(yas--field 2 4748 4784 nil nil nil t #s(yas--exit 4785 nil)) nil nil)) (4775 . 4783) (#("log_" 0 4 (fontified nil)) . 4775) (4775 . 4779) (#("log_type" 0 8 (fontified nil)) . -4775) (4775 . 4783) (#("log_" 0 4 (fontified t)) . -4775) (undo-tree-id1009 . -4) (undo-tree-id1010 . -4) 4779 (4772 . 4779) (apply yas--snippet-revive 4759 4772 #s(yas--snippet nil nil #s(yas--exit 4772 nil) 24 nil nil #s(yas--field 2 4748 4784 nil nil nil t #s(yas--exit 4785 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4772 nil) 24 nil nil #s(yas--field 2 4748 4784 nil nil nil t #s(yas--exit 4785 nil)) nil)) (4759 . 4772) (#("to_be_bytes()$0" 0 15 (fontified nil)) . 4759) (4759 . 4774) (#("to_" 0 3 (fontified nil)) . 4759) (4759 . 4762) (#("to_be_bytes()" 0 13 (fontified nil)) . -4759) (4759 . 4772) (#("to_" 0 3 (fontified t)) . -4759) (undo-tree-id1011 . -3) (undo-tree-id1012 . -3) 4762 (4750 . 4762) (4749 . 4751) (#("params" 0 6 (fontified nil)) . 4749) (4748 . 4749) (4737 . 4746) (#("DEL_" 0 4 (fontified nil)) . 4737) (4737 . 4741) (#("DEL_LOGCH" 0 9 (fontified nil)) . -4737) (4737 . 4746) (#("DEL_" 0 4 (face font-lock-type-face fontified t)) . -4737) (undo-tree-id1013 . -4) (undo-tree-id1014 . -4) 4741 (4738 . 4741) (#("statement" 0 9 (fontified nil)) . 4738) (4737 . 4738) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4737 4746 nil nil nil t #s(yas--field 2 4748 4784 nil nil nil t #s(yas--exit 4785 nil))) #s(yas--field 2 4748 4784 nil nil nil t #s(yas--exit 4785 nil))) #s(yas--exit 4785 nil) 23 nil #s(yas--field 2 4748 4784 nil nil nil t #s(yas--exit 4785 nil)) nil nil)) (4729 . 4755) (#("execute(${1:statement}, ${2:params})$0" 0 38 (fontified nil)) . 4729) (4729 . 4767) (#("exec" 0 4 (fontified nil)) . 4729) (4729 . 4733) (#("execute(…)" 0 10 (fontified nil)) . -4729) (4729 . 4739) (#("exec" 0 4 (fontified t)) . -4729) (undo-tree-id1015 . -4) 4733 (4723 . 4733) (4721 . 4723) (#("." 0 1 (fontified t)) . -4720) (undo-tree-id1016 . -1) 4721 (4720 . 4721) (4720 . 4721) (#("." 0 1 (fontified t)) . -4720) (undo-tree-id1017 . -1) 4721 (4720 . 4721) (4719 . 4720) (4714 . 4719) (#("await" 0 5 (fontified nil)) . -4714) (4714 . 4719) (4713 . 4714) (apply yas--snippet-revive 4700 4713 #s(yas--snippet nil nil #s(yas--exit 4713 nil) 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4713 nil) 22 nil nil nil nil)) (4700 . 4713) (#("transaction()$0" 0 15 (fontified nil)) . 4700) (4700 . 4715) (#("trans" 0 5 (fontified nil)) . 4700) (4700 . 4705) (#("transaction()" 0 13 (fontified nil)) . -4700) (4700 . 4713) (#("trans" 0 5 (fontified t)) . -4700) (undo-tree-id1018 . -5) 4705 (4704 . 4705) (4683 . 4704) (4681 . 4683) (4679 . 4681) (4674 . 4679) (#("await" 0 5 (fontified nil)) . -4674) (4674 . 4679) (4673 . 4674) (apply yas--snippet-revive 4668 4673 #s(yas--snippet nil nil #s(yas--exit 4673 nil) 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4673 nil) 21 nil nil nil nil)) (4668 . 4673) (#("get()$0" 0 7 (fontified nil)) . 4668) (4668 . 4675) (#("get()" 0 5 (fontified nil)) . -4668) (4668 . 4673) (4667 . 4668) (4661 . 4667) (#("dbc" 0 3 (fontified nil)) . 4661) (4661 . 4664) (#("dbconn" 0 6 (fontified nil)) . -4661) (4661 . 4667) (#("dbc" 0 3 (fontified t)) . -4661) (undo-tree-id1019 . -3) 4664 (4645 . 4664) (4643 . 4645) (#("	" 0 1 (fontified nil)) . -4644) (undo-tree-id1020 . -1) (4645 . 4646) (4643 . 4645) (4640 . 4643) (4635 . 4640) (#("t" 0 1 (face font-lock-type-face fontified t)) . -4635) (undo-tree-id1021 . -1) 4636 (4627 . 4636) (#("		" 0 2 (fontified t)) . -4626) 4629 (4628 . 4629) (4625 . 4628) (#("," 0 1 (fontified t)) . -4625) (undo-tree-id1022 . -1) (#("
" 0 1 (fontified t)) . -4626) (undo-tree-id1023 . -1) (#("	" 0 1 (fontified t)) . -4627) (undo-tree-id1024 . -1) (#("c" 0 1 (fontified t)) . -4628) (undo-tree-id1025 . -1) (#("h" 0 1 (fontified t)) . -4629) (undo-tree-id1026 . -1) 4630 (#("a" 0 1 (fontified t)) . -4630) (undo-tree-id1027 . -1) (#("n" 0 1 (fontified t)) . -4631) (undo-tree-id1028 . -1) (#("n" 0 1 (fontified t)) . -4632) (undo-tree-id1029 . -1) (#("e" 0 1 (fontified t)) . -4633) (undo-tree-id1030 . -1) (#("l" 0 1 (fontified t)) . -4634) (undo-tree-id1031 . -1) (#(":" 0 1 (fontified t)) . -4635) (undo-tree-id1032 . -1) (#(" " 0 1 (fontified t)) . -4636) (undo-tree-id1033 . -1) (#("s" 0 1 (fontified t)) . -4637) (undo-tree-id1034 . -1) (#("e" 0 1 (fontified t)) . -4638) (undo-tree-id1035 . -1) (#("r" 0 1 (fontified t)) . -4639) (undo-tree-id1036 . -1) (#(":" 0 1 (fontified t)) . -4640) (undo-tree-id1037 . -1) (#(":" 0 1 (fontified t)) . -4641) (undo-tree-id1038 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -4642) (undo-tree-id1039 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -4643) (undo-tree-id1040 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -4644) (undo-tree-id1041 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -4645) (undo-tree-id1042 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -4646) (undo-tree-id1043 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -4647) (undo-tree-id1044 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -4648) (undo-tree-id1045 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -4649) (undo-tree-id1046 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -4650) (undo-tree-id1047 . -1) 4651 (4649 . 4651) (4646 . 4649) (4628 . 4646) (4626 . 4628) (4625 . 4626) (4618 . 4625) (#("LogT" 0 4 (fontified nil)) . 4618) (4618 . 4622) (#("LogType" 0 7 (fontified nil)) . -4618) (4618 . 4625) (#("LogT" 0 4 (face font-lock-type-face fontified t)) . -4618) (undo-tree-id1048 . -4) 4622 (4608 . 4622) (4606 . 4608) (t 25827 28791 540516 97000)) nil (25827 29299 351471 778000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -7848) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (7849 . 7850) (7847 . 7849) (7845 . 7847) (7816 . 7826) (7795 . 7816) (7793 . 7795) (7736 . 7743) (#("P" 0 1 (face font-lock-string-face fontified t)) . -7736) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -7737) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) 7738 (#("a" 0 1 (face font-lock-string-face fontified t)) . -7738) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -7739) (undo-tree-id1062 . -1) 7740 (#("c" 0 1 (face font-lock-string-face fontified t)) . -7739) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) 7740 (7504 . 7515) (7493 . 7504) (7472 . 7493) (7451 . 7472) (#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . -7451) (undo-tree-id1066 . -1) (#("/" 0 1 (face font-lock-comment-face fontified t)) . -7452) (undo-tree-id1067 . -1) 7453 (7451 . 7453) (#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . -7451) (undo-tree-id1068 . -1) 7452 (7449 . 7452) (7448 . 7449) (7439 . 7448) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -7439) (undo-tree-id1069 . -1) 7440 (7432 . 7440) (7411 . 7432) (#("." 0 1 (face font-lock-doc-face fontified t)) . -7411) (undo-tree-id1070 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -7412) (undo-tree-id1071 . -1) 7413 (7411 . 7413) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -7411) (undo-tree-id1072 . -1) 7412 (7406 . 7412) (7385 . 7406) (7654 . 7659) (7646 . 7654) (7625 . 7646) (7626 . 7627) (7619 . 7625) (7613 . 7619) (#(" " 0 1 (face font-lock-string-face fontified t)) . -7613) (undo-tree-id1073 . -1) 7614 (7606 . 7614) (#("C" 0 1 (face font-lock-string-face fontified t)) . -7606) (undo-tree-id1074 . -1) 7607 (7606 . 7607) (7605 . 7607) (7589 . 7605) (7587 . 7589) (7586 . 7587) (7579 . 7586) (#("LogT" 0 4 (fontified nil)) . 7579) (7579 . 7583) (#("LogType" 0 7 (fontified nil)) . -7579) (7579 . 7586) (#("LogT" 0 4 (face font-lock-type-face fontified t)) . -7579) (undo-tree-id1075 . -4) 7583 (7577 . 7583) (#(" " 0 1 (fontified t)) . -7577) (undo-tree-id1076 . -1) 7578 (7575 . 7578) (#("e" 0 1 (fontified t)) . -7575) (undo-tree-id1077 . -1) 7576 (7569 . 7576) (7567 . 7569) (7566 . 7567) (t 25827 29299 362015 529000)) nil (25827 33711 804613 800000) 0 nil])
([nil nil ((7699 . 7715) (7688 . 7699) (7410 . 7412) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -7410) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (#("," 0 1 (face font-lock-doc-face fontified t)) . -7411) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -7412) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -7413) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -7414) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -7415) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (#("b" 0 1 (face font-lock-doc-face fontified t)) . -7416) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -7417) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -7418) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -7419) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -7420) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -7421) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -7422) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -7423) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -7424) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -7425) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -7426) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -7427) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -7428) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -7429) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -7430) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) 7431 (#("o" 0 1 (face font-lock-doc-face fontified t)) . -7431) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (#("r" 0 1 (face font-lock-doc-face fontified nil)) . -7432) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -7433) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (#("t" 0 1 (face font-lock-doc-face fontified nil)) . -7434) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (#("h" 0 1 (face font-lock-doc-face fontified nil)) . -7435) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -7436) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -7437) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -7438) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -7439) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -7440) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -7441) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -7442) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -7443) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (#("y" 0 1 (face font-lock-doc-face fontified t)) . -7444) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (#("p" 0 1 (face font-lock-doc-face fontified t)) . -7445) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -7446) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (#("." 0 1 (face font-lock-doc-face fontified t)) . -7447) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (#("
" 0 1 (face font-lock-doc-face fontified t)) . -7448) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (#("/" 0 1 (fontified t)) . -7449) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -7450) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (#("/" 0 1 (face font-lock-doc-face fontified t)) . -7451) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) 7452 (#(" " 0 1 (face font-lock-doc-face fontified t)) . -7452) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (#("I" 0 1 (face font-lock-doc-face fontified t)) . -7453) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -7454) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -7455) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -7456) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -7457) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -7458) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -7459) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -7460) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -7461) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -7462) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -7463) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -7464) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (#("l" 0 1 (face font-lock-doc-face fontified nil)) . -7465) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -7466) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -7467) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -7468) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -7469) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -7470) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (#("p" 0 1 (face font-lock-doc-face fontified t)) . -7471) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -7472) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) 7473 (#("c" 0 1 (face font-lock-doc-face fontified t)) . -7473) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -7474) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -7475) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -7476) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -7477) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -7478) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (#("," 0 1 (face font-lock-doc-face fontified t)) . -7479) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -7480) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -7481) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -7482) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -7483) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -7484) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (#("b" 0 1 (face font-lock-doc-face fontified t)) . -7485) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -7486) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -7487) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -7488) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -7489) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -7490) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -7491) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -7492) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -7493) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) 7494 (#("i" 0 1 (face font-lock-doc-face fontified t)) . -7494) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -7495) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (#("g" 0 1 (face font-lock-doc-face fontified nil)) . -7496) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -7497) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (#("f" 0 1 (face font-lock-doc-face fontified nil)) . -7498) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -7499) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -7500) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -7501) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -7502) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -7503) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -7504) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -7505) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -7506) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -7507) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -7508) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -7509) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -7510) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -7511) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (#("y" 0 1 (face font-lock-doc-face fontified t)) . -7512) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (#("p" 0 1 (face font-lock-doc-face fontified t)) . -7513) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -7514) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) 7515 (7847 . 7849) (t 25827 33711 830806 869000)) nil (25827 33734 887058 911000) 0 nil])
([nil nil ((7501 . 7506) (#("S" 0 1 (face font-lock-string-face fontified t)) . -7501) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (#("E" 0 1 (face font-lock-string-face fontified t)) . -7502) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (#("R" 0 1 (face font-lock-string-face fontified t)) . -7503) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (#("V" 0 1 (face font-lock-string-face fontified t)) . -7504) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (#("E" 0 1 (face font-lock-string-face fontified t)) . -7505) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (#("R" 0 1 (face font-lock-string-face fontified t)) . -7506) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) 7507 (t 25827 33734 907410 973000)) nil (25827 33777 612332 159000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1638) (undo-tree-id1341 . -1) 1639 (#("(" 0 1 (fontified t)) . -1658) (undo-tree-id1342 . -1) (#(")" 0 1 (fontified t)) . -1659) (undo-tree-id1343 . -1) 1660 (1641 . 1660) (1640 . 1641) (#("	" 0 1 (fontified nil)) . 1639) (undo-tree-id1344 . -1) (1640 . 1641) (1638 . 1640) (#("	" 0 1 (fontified nil)) . -7808) (undo-tree-id1345 . -1) (7809 . 7810) (7805 . 7809) (7801 . 7805) (7790 . 7801) (7787 . 7790) (#("	" 0 1 (fontified nil)) . -7789) (undo-tree-id1346 . -1) (7790 . 7791) (7787 . 7790) (7785 . 7787) (7778 . 7785) (#("chann" 0 5 (fontified nil)) . 7778) (7778 . 7783) (#("channel" 0 7 (fontified nil)) . -7778) (7778 . 7785) (#("chann" 0 5 (fontified t)) . -7778) (undo-tree-id1347 . -5) 7783 (7778 . 7783) (#("c" 0 1 (fontified t)) . -7778) (undo-tree-id1348 . -1) 7779 (7772 . 7779) (#("s" 0 1 (fontified t)) . -7772) (undo-tree-id1349 . -1) (#("e" 0 1 (fontified t)) . -7773) (undo-tree-id1350 . -1) (#("t" 0 1 (fontified t)) . -7774) (undo-tree-id1351 . -1) (#("_" 0 1 (fontified t)) . -7775) (undo-tree-id1352 . -1) 7776 (7772 . 7776) (t 25827 33777 637293 125000)) nil (25827 34166 701577 857000) 0 nil])
([nil nil ((2254 . 2257) (#(")" 0 1 (face font-lock-string-face fontified t)) . -2254) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) 2255 (2247 . 2255) (2226 . 2247) (2224 . 2226) (2219 . 2224) (2216 . 2219) (apply yas--snippet-revive 2199 2216 #s(yas--snippet nil nil #s(yas--exit 2216 nil) 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2216 nil) 26 nil nil nil nil)) (2199 . 2216) (#("SettingLogChannel$0" 0 19 (fontified nil)) . 2199) (2199 . 2218) (#("Sett" 0 4 (fontified nil)) . 2199) (2199 . 2203) (#("SettingLogChannel" 0 17 (fontified nil)) . -2199) (2199 . 2216) (#("Sett" 0 4 (face font-lock-type-face fontified t)) . -2199) (undo-tree-id1356 . -4) 2203 (2199 . 2203) (2195 . 2199) (2194 . 2195) (t 25827 34166 729462 552000)) nil (25827 34181 227142 117000) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-string-face fontified t)) . -970) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) 971 (970 . 971) (1686 . 1695) (#("ChannelId" 0 9 (fontified nil)) . 1686) (1686 . 1695) (#("ChannelId" 0 9 (face font-lock-type-face fontified t)) . -1686) (undo-tree-id1369 . -9) (undo-tree-id1370 . -9) 1695 (1679 . 1695) (1678 . 1680) (1657 . 1678) (1681 . 1699) (1660 . 1681) (1658 . 1660) (1657 . 1658) (7951 . 7956) (#("await" 0 5 (fontified nil)) . -7951) (7951 . 7956) (7950 . 7951) (apply yas--snippet-revive 7891 7950 #s(yas--snippet nil (#s(yas--field 1 7901 7911 nil nil nil t #s(yas--field 2 7913 7933 nil nil nil t #s(yas--field 3 7935 7943 nil nil nil nil #s(yas--field 4 7945 7949 nil nil nil t #s(yas--exit 7950 nil))))) #s(yas--field 2 7913 7933 nil nil nil t #s(yas--field 3 7935 7943 nil nil nil nil #s(yas--field 4 7945 7949 nil nil nil t #s(yas--exit 7950 nil)))) #s(yas--field 3 7935 7943 nil nil nil nil #s(yas--field 4 7945 7949 nil nil nil t #s(yas--exit 7950 nil))) #s(yas--field 4 7945 7949 nil nil nil t #s(yas--exit 7950 nil))) #s(yas--exit 7950 nil) 27 nil #s(yas--field 4 7945 7949 nil nil nil t #s(yas--exit 7950 nil)) nil nil)) (7945 . 7949) (#("chid" 0 4 (fontified nil)) . 7945) (7945 . 7949) (#("chid" 0 4 (fontified t)) . -7945) (undo-tree-id1371 . -4) 7949 (7946 . 7949) (#("channel" 0 7 (fontified nil)) . 7946) (7945 . 7946) (apply yas--snippet-revive 7925 7933 #s(yas--snippet nil nil #s(yas--exit 7933 nil) 30 nil nil #s(yas--field 2 7913 7933 nil nil nil t #s(yas--field 3 7935 7943 nil nil nil nil #s(yas--field 4 7945 7949 nil nil nil t #s(yas--exit 7950 nil)))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7933 nil) 30 nil nil #s(yas--field 2 7913 7933 nil nil nil t #s(yas--field 3 7935 7943 nil nil nil nil #s(yas--field 4 7945 7949 nil nil nil t #s(yas--exit 7950 nil)))) nil)) (7925 . 7933) (#("unwrap()$0" 0 10 (fontified nil)) . 7925) (7925 . 7935) (#("unwr" 0 4 (fontified nil)) . 7925) (7925 . 7929) (#("unwrap()" 0 8 (fontified nil)) . -7925) (7925 . 7933) (#("unwr" 0 4 (fontified t)) . -7925) (undo-tree-id1372 . -4) (undo-tree-id1373 . -4) 7929 (7924 . 7929) (apply yas--snippet-revive 7917 7924 #s(yas--snippet nil nil #s(yas--exit 7924 nil) 29 nil nil #s(yas--field 2 7913 7933 nil nil nil t #s(yas--field 3 7935 7943 nil nil nil nil #s(yas--field 4 7945 7949 nil nil nil t #s(yas--exit 7950 nil)))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7924 nil) 29 nil nil #s(yas--field 2 7913 7933 nil nil nil t #s(yas--field 3 7935 7943 nil nil nil nil #s(yas--field 4 7945 7949 nil nil nil t #s(yas--exit 7950 nil)))) nil)) (7917 . 7924) (#("guild()$0" 0 9 (fontified nil)) . 7917) (7917 . 7926) (#("guild()" 0 7 (fontified nil)) . -7917) (7917 . 7924) (7914 . 7917) (#("guild" 0 5 (fontified nil)) . 7914) (7913 . 7914) (apply yas--snippet-revive 7905 7911 #s(yas--snippet nil nil #s(yas--exit 7911 nil) 28 nil nil #s(yas--field 1 7901 7911 nil nil nil t #s(yas--field 2 7913 7933 nil nil nil t #s(yas--field 3 7935 7943 nil nil nil nil #s(yas--field 4 7945 7949 nil nil nil t #s(yas--exit 7950 nil))))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7911 nil) 28 nil nil #s(yas--field 1 7901 7911 nil nil nil t #s(yas--field 2 7913 7933 nil nil nil t #s(yas--field 3 7935 7943 nil nil nil nil #s(yas--field 4 7945 7949 nil nil nil t #s(yas--exit 7950 nil))))) nil)) (7905 . 7911) (#("data()$0" 0 8 (fontified nil)) . 7905) (7905 . 7913) (#("data()" 0 6 (fontified nil)) . -7905) (7905 . 7911) (7902 . 7905) (#("data" 0 4 (fontified nil)) . 7902) (7901 . 7902) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7901 7911 nil nil nil t #s(yas--field 2 7913 7933 nil nil nil t #s(yas--field 3 7935 7943 nil nil nil nil #s(yas--field 4 7945 7949 nil nil nil t #s(yas--exit 7950 nil))))) #s(yas--field 2 7913 7933 nil nil nil t #s(yas--field 3 7935 7943 nil nil nil nil #s(yas--field 4 7945 7949 nil nil nil t #s(yas--exit 7950 nil)))) #s(yas--field 3 7935 7943 nil nil nil nil #s(yas--field 4 7945 7949 nil nil nil t #s(yas--exit 7950 nil))) #s(yas--field 4 7945 7949 nil nil nil t #s(yas--exit 7950 nil))) #s(yas--exit 7950 nil) 27 nil #s(yas--field 4 7945 7949 nil nil nil t #s(yas--exit 7950 nil)) nil nil)) (7891 . 7932) (#("set_logch(${1:data}, ${2:guild}, ${3:log_type}, ${4:channel})$0" 0 63 (fontified nil)) . 7891) (7891 . 7954) (#("set_" 0 4 (fontified nil)) . 7891) (7891 . 7895) (#("set_logch(…)" 0 12 (fontified nil)) . -7891) (7891 . 7903) (#("set_" 0 4 (fontified t)) . -7891) (undo-tree-id1374 . -4) 7895 (7891 . 7895) (7887 . 7891) (t 25827 34184 372740 218000)) nil (25827 35726 179753 351000) 0 nil])
([nil nil ((2475 . 2479) 2510 (2509 . 2510) (2500 . 2509) (#(">" 0 1 (syntax-table (1) fontified t)) . -2500) (undo-tree-id1375 . -1) 2501 (2494 . 2501) (#("a" 0 1 (fontified t)) . -2494) (undo-tree-id1376 . -1) 2495 (2481 . 2495) (#("l" 0 1 (fontified t)) . -2481) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (#("_" 0 1 (fontified t)) . -2482) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) 2483 (2475 . 2483) (2364 . 2370) (#("g" 0 1 (face font-lock-string-face fontified t)) . -2364) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -2365) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -2366) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -2367) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -2368) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) 2369 (2469 . 2474) (2468 . 2469) (apply yas--snippet-revive 2460 2468 #s(yas--snippet nil (#s(yas--field 1 2465 2467 nil nil nil t #s(yas--exit 2468 nil))) #s(yas--exit 2468 nil) 36 nil #s(yas--field 1 2465 2467 nil nil nil t #s(yas--exit 2468 nil)) nil nil)) (2466 . 2467) (#("data" 0 4 (fontified nil)) . 2466) (2465 . 2466) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2465 2467 nil nil nil t #s(yas--exit 2468 nil))) #s(yas--exit 2468 nil) 36 nil #s(yas--field 1 2465 2467 nil nil nil t #s(yas--exit 2468 nil)) nil nil)) (2460 . 2470) (#("link(${1:data})$0" 0 17 (fontified nil)) . 2460) (2460 . 2477) (#("link" 0 4 (fontified nil)) . 2460) (2460 . 2464) (#("link(…) (as Linkable)" 0 21 (fontified nil)) . -2460) (2460 . 2481) (#("link" 0 4 (fontified t)) . -2460) (undo-tree-id1391 . -4) 2464 (2457 . 2464) (2446 . 2457) (2437 . 2441) 2444 (2428 . 2429) (2407 . 2428) (2396 . 2397) (2383 . 2395) (#("t" 0 1 (face font-lock-string-face fontified t)) . -2383) (undo-tree-id1392 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -2384) (undo-tree-id1393 . -1) 2385 (2396 . 2397) (2376 . 2381) (2381 . 2391) (2360 . 2381) (2367 . 2372) (2362 . 2367) (2361 . 2362) (2314 . 2322) (2308 . 2314) (#("t" 0 1 (fontified t)) . -2308) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) 2309 (2307 . 2309) (2302 . 2307) (#(" " 0 1 (fontified t)) . -1895) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) 1896 (2297 . 2303) (#("(" 0 1 (fontified t)) . -2297) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (#("s" 0 1 (fontified t)) . -2298) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (#("e" 0 1 (fontified t)) . -2299) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (#("r" 0 1 (fontified t)) . -2300) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (#(":" 0 1 (fontified t)) . -2301) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (#(":" 0 1 (fontified t)) . -2302) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (#("G" 0 1 (face font-lock-type-face fontified t)) . -2303) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -2304) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -2305) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -2306) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -2307) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -2308) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -2309) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (#("," 0 1 (fontified t)) . -2310) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (#(" " 0 1 (fontified t)) . -2311) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) 2312 (2297 . 2312) (8115 . 8124) (#("(" 0 1 (fontified t)) . -8115) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (#("(" 0 1 (fontified t)) . -8116) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (#(")" 0 1 (fontified t)) . -8117) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) 8118 (8039 . 8043) (8035 . 8039) (#("c" 0 1 (fontified t)) . -8035) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (#("t" 0 1 (fontified t)) . -8036) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) 8037 (#("x" 0 1 (fontified t)) . -8037) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (#("." 0 1 (fontified t)) . -8038) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (#("g" 0 1 (fontified t)) . -8039) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (#("u" 0 1 (fontified t)) . -8040) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (#("i" 0 1 (fontified t)) . -8041) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (#("l" 0 1 (fontified t)) . -8042) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (#("d" 0 1 (fontified t)) . -8043) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (#("_" 0 1 (fontified t)) . -8044) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (#("i" 0 1 (fontified t)) . -8045) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (#("d" 0 1 (fontified t)) . -8046) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (#("(" 0 1 (fontified t)) . -8047) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (#(")" 0 1 (fontified t)) . -8048) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (#("." 0 1 (fontified t)) . -8049) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (#("u" 0 1 (fontified t)) . -8050) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (#("n" 0 1 (fontified t)) . -8051) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (#("w" 0 1 (fontified t)) . -8052) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (#("r" 0 1 (fontified t)) . -8053) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (#("a" 0 1 (fontified t)) . -8054) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (#("p" 0 1 (fontified t)) . -8055) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (#("(" 0 1 (fontified t)) . -8056) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (#(")" 0 1 (fontified t)) . -8057) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) 8058 (7973 . 7974) (apply yas--snippet-revive 7965 7973 #s(yas--snippet nil nil #s(yas--exit 7973 nil) 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7973 nil) 35 nil nil nil nil)) (7965 . 7973) (#("unwrap()$0" 0 10 (fontified nil)) . 7965) (7965 . 7975) (#("unwr" 0 4 (fontified nil)) . 7965) (7965 . 7969) (#("unwrap()" 0 8 (fontified nil)) . -7965) (7965 . 7973) (#("unwr" 0 4 (fontified t)) . -7965) (undo-tree-id1480 . -4) 7969 (7959 . 7969) (#("_" 0 1 (fontified t)) . -7959) (undo-tree-id1481 . -1) (#("i" 0 1 (fontified t)) . -7960) (undo-tree-id1482 . -1) (#("d" 0 1 (fontified t)) . -7961) (undo-tree-id1483 . -1) (#("." 0 1 (fontified nil)) . -7962) (undo-tree-id1484 . -1) (#("u" 0 1 (fontified nil)) . -7963) (undo-tree-id1485 . -1) (#("n" 0 1 (fontified nil)) . -7964) (undo-tree-id1486 . -1) (#("w" 0 1 (fontified t)) . -7965) (undo-tree-id1487 . -1) (#("r" 0 1 (fontified t)) . -7966) (undo-tree-id1488 . -1) 7967 (7956 . 7967) (7935 . 7956) (#(";" 0 1 (fontified t)) . -7935) (undo-tree-id1489 . -1) (#("e" 0 1 (fontified t)) . -7936) (undo-tree-id1490 . -1) (#("t" 0 1 (fontified t)) . -7937) (undo-tree-id1491 . -1) (#(" " 0 1 (fontified t)) . -7938) (undo-tree-id1492 . -1) (#("g" 0 1 (fontified t)) . -7939) (undo-tree-id1493 . -1) 7940 (7935 . 7940) (7933 . 7935) (apply yas--snippet-revive 8072 8101 #s(yas--snippet nil (#s(yas--field 1 8090 8092 nil nil nil nil #s(yas--field 2 8094 8096 nil nil nil nil #s(yas--field 3 8098 8100 nil nil nil nil #s(yas--exit 8101 nil)))) #s(yas--field 2 8094 8096 nil nil nil nil #s(yas--field 3 8098 8100 nil nil nil nil #s(yas--exit 8101 nil))) #s(yas--field 3 8098 8100 nil nil nil nil #s(yas--exit 8101 nil))) #s(yas--exit 8101 nil) 34 nil #s(yas--field 1 8090 8092 nil nil nil nil #s(yas--field 2 8094 8096 nil nil nil nil #s(yas--field 3 8098 8100 nil nil nil nil #s(yas--exit 8101 nil)))) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8090 8092 nil nil nil nil #s(yas--field 2 8094 8096 nil nil nil nil #s(yas--field 3 8098 8100 nil nil nil nil #s(yas--exit 8101 nil)))) #s(yas--field 2 8094 8096 nil nil nil nil #s(yas--field 3 8098 8100 nil nil nil nil #s(yas--exit 8101 nil))) #s(yas--field 3 8098 8100 nil nil nil nil #s(yas--exit 8101 nil))) #s(yas--exit 8101 nil) 34 nil #s(yas--field 1 8090 8092 nil nil nil nil #s(yas--field 2 8094 8096 nil nil nil nil #s(yas--field 3 8098 8100 nil nil nil nil #s(yas--exit 8101 nil)))) nil nil)) (8072 . 8101) (#("SettingLogChannel(${1:()}, ${2:()}, ${3:()})$0" 0 46 (fontified nil)) . 8072) (8072 . 8118) (#("SettingLogChannel(…)" 0 20 (fontified nil)) . -8072) (8072 . 8092) (8070 . 8072) (8055 . 8070) (#("LogErr" 0 6 (fontified nil)) . 8055) (8055 . 8061) (#("LogErrorContext" 0 15 (fontified nil)) . -8055) (8055 . 8070) (#("LogErr" 0 6 (face font-lock-type-face fontified t)) . -8055) (undo-tree-id1494 . -6) 8061 (8058 . 8061) (#("C" 0 1 (face font-lock-type-face fontified t)) . -8058) (undo-tree-id1495 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -8059) (undo-tree-id1496 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -8060) (undo-tree-id1497 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -8061) (undo-tree-id1498 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -8062) (undo-tree-id1499 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -8063) (undo-tree-id1500 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -8064) (undo-tree-id1501 . -1) (#(":" 0 1 (fontified t)) . -8065) (undo-tree-id1502 . -1) (#(":" 0 1 (fontified t)) . -8066) (undo-tree-id1503 . -1) 8067 (8058 . 8067) (#("E" 0 1 (face font-lock-type-face fontified t)) . -8058) (undo-tree-id1504 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -8059) (undo-tree-id1505 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -8060) (undo-tree-id1506 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -8061) (undo-tree-id1507 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -8062) (undo-tree-id1508 . -1) (#(":" 0 1 (fontified t)) . -8063) (undo-tree-id1509 . -1) (#(":" 0 1 (fontified t)) . -8064) (undo-tree-id1510 . -1) 8065 (8063 . 8065) (8055 . 8063) (#("LogE" 0 4 (fontified nil)) . 8055) (8055 . 8059) (#("LogError" 0 8 (fontified nil)) . -8055) (8055 . 8063) (#("LogE" 0 4 (face font-lock-type-face fontified t)) . -8055) (undo-tree-id1511 . -4) 8059 (8055 . 8059) (#("S" 0 1 (face font-lock-type-face fontified t)) . -8055) (undo-tree-id1512 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -8056) (undo-tree-id1513 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -8057) (undo-tree-id1514 . -1) (#("L" 0 1 (face font-lock-type-face fontified t)) . -8058) (undo-tree-id1515 . -1) 8059 (8055 . 8059) (#("c" 0 1 (fontified t)) . -8055) (undo-tree-id1516 . -1) (#("o" 0 1 (fontified t)) . -8056) (undo-tree-id1517 . -1) (#("n" 0 1 (fontified t)) . -8057) (undo-tree-id1518 . -1) (#("t" 0 1 (fontified t)) . -8058) (undo-tree-id1519 . -1) (#("e" 0 1 (fontified t)) . -8059) (undo-tree-id1520 . -1) (#("x" 0 1 (fontified t)) . -8060) (undo-tree-id1521 . -1) (#("t" 0 1 (fontified t)) . -8061) (undo-tree-id1522 . -1) 8062 (apply yas--snippet-revive 8009 8017 #s(yas--snippet nil nil #s(yas--exit 8017 nil) 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8017 nil) 33 nil nil nil nil)) (8009 . 8017) (#("unwrap()$0" 0 10 (fontified nil)) . 8009) (8009 . 8019) (#("unw" 0 3 (fontified nil)) . 8009) (8009 . 8012) (#("unwrap()" 0 8 (fontified nil)) . -8009) (8009 . 8017) (#("unw" 0 3 (fontified t)) . -8009) (undo-tree-id1523 . -3) 8012 (8008 . 8012) (apply yas--snippet-revive 7998 8008 #s(yas--snippet nil nil #s(yas--exit 8008 nil) 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8008 nil) 32 nil nil nil nil)) (7998 . 8008) (#("guild_id()$0" 0 12 (fontified nil)) . 7998) (7998 . 8010) (#("guild" 0 5 (fontified nil)) . 7998) (7998 . 8003) (#("guild_id()" 0 10 (fontified nil)) . -7998) (7998 . 8008) (#("guild" 0 5 (fontified t)) . -7998) (undo-tree-id1524 . -5) 8003 (7997 . 8003) (#("." 0 1 (fontified t)) . -7997) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) 7998 (#("g" 0 1 (fontified t)) . -7998) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) 7999 (#("u" 0 1 (fontified t)) . -7999) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) 8000 (#("i" 0 1 (fontified t)) . -8000) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) 8001 (#("l" 0 1 (fontified nil)) . -8001) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (#("d" 0 1 (fontified t)) . -8002) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (#("(" 0 1 (fontified t)) . -8003) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (#(")" 0 1 (fontified t)) . -8004) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (#("." 0 1 (fontified t)) . -8005) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (#("u" 0 1 (fontified t)) . -8006) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (#("n" 0 1 (fontified t)) . -8007) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (#("w" 0 1 (fontified t)) . -8008) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (#("r" 0 1 (fontified t)) . -8009) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (#("a" 0 1 (fontified t)) . -8010) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (#("p" 0 1 (fontified t)) . -8011) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (#("(" 0 1 (fontified t)) . -8012) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (#(")" 0 1 (fontified t)) . -8013) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (#("." 0 1 (fontified t)) . -8014) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (#("i" 0 1 (fontified t)) . -8015) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (#("d" 0 1 (fontified t)) . -8016) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) 8017 (8015 . 8017) (#("id" 0 2 (fontified nil)) . -8015) (8015 . 8017) (8014 . 8015) (apply yas--snippet-revive 8038 8060 #s(yas--snippet nil (#s(yas--field 1 8052 8059 nil nil nil nil #s(yas--exit 8060 nil))) #s(yas--exit 8060 nil) 31 nil #s(yas--field 1 8052 8059 nil nil nil nil #s(yas--exit 8060 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8052 8059 nil nil nil nil #s(yas--exit 8060 nil))) #s(yas--exit 8060 nil) 31 nil #s(yas--field 1 8052 8059 nil nil nil nil #s(yas--exit 8060 nil)) nil nil)) (8038 . 8060) (#("contextualize(${1:context})$0" 0 29 (fontified nil)) . 8038) (8038 . 8067) (#("contextualize(…) (as Contextualizable)" 0 38 (fontified nil)) . -8038) (8038 . 8076) (8037 . 8038) (t 25827 35726 207744 510000)) nil (25827 35994 796521 822000) 0 nil])
([nil nil ((2701 . 2702) (#("," 0 1 (fontified t)) . -2701) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (#("
" 0 1 (fontified t)) . -2702) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (#("	" 0 1 (fontified t)) . -2703) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (#("	" 0 1 (fontified t)) . -2704) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (#("	" 0 1 (fontified t)) . -2705) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (#("	" 0 1 (fontified t)) . -2706) (undo-tree-id1598 . -1) (#("	" 0 1 (fontified t)) . -2707) (undo-tree-id1599 . -1) (#(" " 0 1 (fontified t)) . -2708) (undo-tree-id1600 . -1) (#(" " 0 1 (fontified t)) . -2709) (undo-tree-id1601 . -1) (#(" " 0 1 (fontified t)) . -2710) (undo-tree-id1602 . -1) 2711 (2702 . 2711) (2701 . 2702) (2680 . 2701) (2674 . 2680) (2665 . 2674) (2644 . 2665) (#("g" 0 1 (face font-lock-string-face fontified t)) . -2644) (undo-tree-id1603 . -1) 2645 (2644 . 2645) (#("g" 0 1 (face font-lock-string-face fontified t)) . -2644) (undo-tree-id1604 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -2645) (undo-tree-id1605 . -1) 2646 (2644 . 2646) (2630 . 2644) (#("l" 0 1 (face font-lock-string-face fontified t)) . -2630) (undo-tree-id1606 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -2631) (undo-tree-id1607 . -1) 2632 (2622 . 2632) (2601 . 2622) (2597 . 2601) (2592 . 2597) (2589 . 2592) (apply yas--snippet-revive 2556 2589 #s(yas--snippet nil (#s(yas--field 1 2573 2578 nil nil nil t #s(yas--field 2 2580 2588 nil nil nil t #s(yas--exit 2589 nil))) #s(yas--field 2 2580 2588 nil nil nil t #s(yas--exit 2589 nil))) #s(yas--exit 2589 nil) 37 nil #s(yas--field 2 2580 2588 nil nil nil t #s(yas--exit 2589 nil)) nil nil)) (2580 . 2588) (501 . 537) (2537 . 2537) (2537 . 2542) (#("guild" 0 5 (fontified nil)) . 2537) (2537 . 2542) (#("guild (use poise::serenity_prelude::guild)" 0 42 (fontified nil)) . -2537) (2537 . 2579) (#("guild" 0 5 (fontified t)) . -2537) (undo-tree-id1608 . -5) (undo-tree-id1609 . -5) 2542 (2537 . 2542) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2573 2578 nil nil nil t #s(yas--field 2 2580 2588 nil nil nil t #s(yas--exit 2589 nil))) #s(yas--field 2 2580 2588 nil nil nil t #s(yas--exit 2589 nil))) #s(yas--exit 2589 nil) 37 nil #s(yas--field 2 2580 2588 nil nil nil t #s(yas--exit 2589 nil)) nil nil)) (2520 . 2540) (#("DisablingLogging($1, $2)$0" 0 26 (fontified nil)) . 2520) (2520 . 2546) (#("DisablingLogging" 0 16 (fontified nil)) . 2520) (2520 . 2536) (#("DisablingLogging(…)" 0 19 (fontified nil)) . -2520) (2520 . 2539) (#("DisablingLogging" 0 16 (face font-lock-type-face fontified t)) . -2520) (undo-tree-id1610 . -16) 2536 (2535 . 2536) (#("g" 0 1 (face font-lock-type-face fontified t)) . -2535) (undo-tree-id1611 . -1) 2536 (2520 . 2536) (#("Disa" 0 4 (fontified nil)) . 2520) (2520 . 2524) (#("DisablingLogging" 0 16 (fontified nil)) . -2520) (2520 . 2536) (#("Disa" 0 4 (face font-lock-type-face fontified t)) . -2520) (undo-tree-id1612 . -4) 2524 (2521 . 2524) (#("s" 0 1 (face font-lock-type-face fontified t)) . -2521) (undo-tree-id1613 . -1) 2522 (2520 . 2522) (2516 . 2520) (t 25827 35994 810170 611000)) nil (25827 36044 907469 420000) 0 nil])
([nil nil ((4865 . 4869) (5178 . 5180) (#(" " 0 1 (fontified t)) . -5178) (undo-tree-id1614 . -1) 5179 (5176 . 5179) (t 25827 36044 936667 474000)) nil (25827 36064 912656 290000) 0 nil])
([nil nil ((8519 . 8521) (8513 . 8517) (#("chid" 0 4 (fontified nil)) . 8513) (8513 . 8517) (#("chid" 0 4 (fontified t)) . -8513) (undo-tree-id1615 . -4) (undo-tree-id1616 . -4) (undo-tree-id1617 . -4) (undo-tree-id1618 . -4) (undo-tree-id1619 . -4) (undo-tree-id1620 . -4) (undo-tree-id1621 . -4) (undo-tree-id1622 . -4) (undo-tree-id1623 . -4) 8517 (8513 . 8517) (#("(" 0 1 (fontified t)) . -8513) (undo-tree-id1624 . -1) (#(")" 0 1 (fontified t)) . -8514) (undo-tree-id1625 . -1) 8515 (8503 . 8511) (#("log_" 0 4 (fontified nil)) . 8503) (8503 . 8507) (#("log_type" 0 8 (fontified nil)) . -8503) (8503 . 8511) (#("log_" 0 4 (fontified t)) . -8503) (undo-tree-id1626 . -4) 8507 (8503 . 8507) (#("(" 0 1 (fontified t)) . -8503) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (#(")" 0 1 (fontified t)) . -8504) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) 8505 (8438 . 8443) (t 25827 36064 949932 980000)) nil (25827 36096 678501 393000) 0 nil])
([nil nil ((8608 . 8614) (8605 . 8608) (8599 . 8601) (8591 . 8598) (8578 . 8591) (#("Internal" 0 8 (fontified nil)) . 8578) (8578 . 8586) (#("InternalError" 0 13 (fontified nil)) . -8578) (8578 . 8591) (#("Internal" 0 8 (face font-lock-type-face fontified t)) . -8578) (undo-tree-id1701 . -8) (undo-tree-id1702 . -8) 8586 (8575 . 8586) (423 . 433) (8557 . 8557) (8557 . 8565) (#("OptEr" 0 5 (fontified nil)) . 8557) (8557 . 8562) (#("OptError (use crate::errors::OptError)" 0 38 (fontified nil)) . -8557) (8557 . 8595) (#("OptEr" 0 5 (face font-lock-type-face fontified t)) . -8557) (undo-tree-id1703 . -5) (undo-tree-id1704 . -5) 8562 (8557 . 8562) (#("W" 0 1 (face font-lock-type-face fontified t)) . -8557) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -8558) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -8559) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -8560) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -8561) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -8562) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -8563) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -8564) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -8565) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -8566) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -8567) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) 8568 (410 . 423) (8544 . 8544) (8544 . 8555) (#("With" 0 4 (fontified nil)) . 8544) (8544 . 8548) (#("WithContext (use crate::errors::WithContext)" 0 44 (fontified nil)) . -8544) (8544 . 8588) (#("With" 0 4 (face font-lock-type-face fontified t)) . -8544) (undo-tree-id1738 . -4) 8548 (8544 . 8548) (#("O" 0 1 (face font-lock-type-face fontified t)) . -8544) (undo-tree-id1739 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -8545) (undo-tree-id1740 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -8546) (undo-tree-id1741 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -8547) (undo-tree-id1742 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -8548) (undo-tree-id1743 . -1) 8549 (8544 . 8549) (#("E" 0 1 (face font-lock-type-face fontified t)) . -8544) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -8545) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -8546) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -8547) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -8548) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) 8549 (8548 . 8549) (8547 . 8548) (8544 . 8547) (#("f" 0 1 (fontified t)) . -8544) (undo-tree-id1764 . -1) 8545 (8519 . 8524) (apply yas--snippet-revive 8520 8541 #s(yas--snippet nil (#s(yas--field 1 8539 8540 nil nil nil nil #s(yas--exit 8541 nil))) #s(yas--exit 8541 nil) 38 nil #s(yas--field 1 8539 8540 nil nil nil nil #s(yas--exit 8541 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8539 8540 nil nil nil nil #s(yas--exit 8541 nil))) #s(yas--exit 8541 nil) 38 nil #s(yas--field 1 8539 8540 nil nil nil nil #s(yas--exit 8541 nil)) nil nil)) (8520 . 8541) (#("map_contextualized(${1:f})$0" 0 28 (fontified nil)) . 8520) (8520 . 8548) (#("map_" 0 4 (fontified nil)) . 8520) (8520 . 8524) (#("map_contextualized(…) (as Contextualizable)" 0 43 (fontified nil)) . -8520) (8520 . 8563) (#("map_" 0 4 (fontified t)) . -8520) (undo-tree-id1765 . -4) 8524 (8521 . 8524) (#("p" 0 1 (fontified t)) . -8521) (undo-tree-id1766 . -1) 8522 (8520 . 8522) (8519 . 8520) (#("?" 0 1 (face rust-question-mark fontified t)) . -8519) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (#("." 0 1 (fontified t)) . -8520) (undo-tree-id1769 . -1) (#("m" 0 1 (fontified t)) . -8521) (undo-tree-id1770 . -1) (#("a" 0 1 (fontified t)) . -8522) (undo-tree-id1771 . -1) (#("p" 0 1 (fontified t)) . -8523) (undo-tree-id1772 . -1) (#("_" 0 1 (fontified t)) . -8524) (undo-tree-id1773 . -1) 8525 (8520 . 8525) (#("
" 0 1 (fontified t)) . -8520) (undo-tree-id1774 . -1) (#("." 0 1 (fontified t)) . -8521) (undo-tree-id1775 . -1) (#("m" 0 1 (fontified t)) . -8522) (undo-tree-id1776 . -1) (#("a" 0 1 (fontified t)) . -8523) (undo-tree-id1777 . -1) (#("p" 0 1 (fontified t)) . -8524) (undo-tree-id1778 . -1) (#("_" 0 1 (fontified t)) . -8525) (undo-tree-id1779 . -1) 8526 (8522 . 8526) (#("				" 0 4 (fontified t)) . -8521) (8525 . 8525) (8525 . 8526) (8520 . 8525) (#(";" 0 1 (fontified t)) . -8520) (undo-tree-id1780 . -1) 8521 (t 25827 36096 703158 663000)) nil (25827 36501 644178 491000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -8604) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (8605 . 8606) (8601 . 8605) (8402 . 8404) (8608 . 8609) (#(">" 0 1 (syntax-table (1) fontified t)) . -8608) (undo-tree-id1690 . -1) 8609 (8608 . 8609) (#("
" 0 1 (fontified t)) . -8599) (undo-tree-id1691 . 1) (undo-tree-id1692 . -1) (#("	" 0 1 (fontified t)) . -8600) (undo-tree-id1693 . -1) (#("	" 0 1 (fontified t)) . -8601) (undo-tree-id1694 . -1) 8602 (#("}" 0 1 (fontified t)) . -8602) (undo-tree-id1695 . -1) 8603 (#(" " 0 1 (fontified t)) . -8402) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (#("{" 0 1 (fontified t)) . -8403) (undo-tree-id1700 . -1) 8404) nil (25827 36501 644018 492000) 0 nil])
([nil nil ((8859 . 8860) (apply yas--snippet-revive 8815 8859 #s(yas--snippet nil (#s(yas--field 1 8826 8858 nil nil nil t #s(yas--exit 8859 nil))) #s(yas--exit 8859 nil) 46 nil #s(yas--field 1 8826 8858 nil nil nil t #s(yas--exit 8859 nil)) nil nil)) (apply yas--snippet-revive 8834 8858 #s(yas--snippet nil (#s(yas--field 1 8838 8857 nil nil nil t #s(yas--exit 8858 nil))) #s(yas--exit 8858 nil) 47 nil #s(yas--field 1 8838 8857 nil nil nil t #s(yas--exit 8858 nil)) #s(yas--field 1 8826 8858 nil nil nil t #s(yas--exit 8859 nil)) nil)) (8854 . 8857) (8846 . 8854) (8839 . 8846) (#("text" 0 4 (fontified nil)) . 8839) (8838 . 8839) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8838 8857 nil nil nil t #s(yas--exit 8858 nil))) #s(yas--exit 8858 nil) 47 nil #s(yas--field 1 8838 8857 nil nil nil t #s(yas--exit 8858 nil)) #s(yas--field 1 8826 8858 nil nil nil t #s(yas--exit 8859 nil)) nil)) (8834 . 8843) (#("say(${1:text})$0" 0 16 (fontified nil)) . 8834) (8834 . 8850) (#("say" 0 3 (fontified nil)) . 8834) (8834 . 8837) (#("say(…)" 0 6 (fontified nil)) . -8834) (8834 . 8840) (#("say" 0 3 (fontified t)) . -8834) (undo-tree-id1633 . -2) (undo-tree-id1634 . -3) 8837 (8827 . 8837) (#("inspector" 0 9 (fontified nil)) . 8827) (8826 . 8827) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8826 8858 nil nil nil t #s(yas--exit 8859 nil))) #s(yas--exit 8859 nil) 46 nil #s(yas--field 1 8826 8858 nil nil nil t #s(yas--exit 8859 nil)) nil nil)) (8815 . 8836) (#("report_err(${1:inspector})$0" 0 28 (fontified nil)) . 8815) (8815 . 8843) (#("report" 0 6 (fontified nil)) . 8815) (8815 . 8821) (#("report_err(…) (as AsyncReportErr)" 0 33 (fontified nil)) . -8815) (8815 . 8848) (#("report" 0 6 (fontified t)) . -8815) (undo-tree-id1635 . -6) 8821 (8814 . 8821) (8809 . 8814) (#("." 0 1 (face font-lock-string-face fontified t)) . -8605) (undo-tree-id1636 . -1) 8606 (apply yas--snippet-revive 8564 8610 #s(yas--snippet nil (#s(yas--field 1 8575 8609 nil nil nil t #s(yas--exit 8610 nil))) #s(yas--exit 8610 nil) 44 nil #s(yas--field 1 8575 8609 nil nil nil t #s(yas--exit 8610 nil)) nil nil)) (8605 . 8606) (8602 . 8607) (8587 . 8595) (apply yas--snippet-revive 8583 8595 #s(yas--snippet nil (#s(yas--field 1 8587 8594 nil nil nil t #s(yas--exit 8595 nil))) #s(yas--exit 8595 nil) 45 nil #s(yas--field 1 8587 8594 nil nil nil t #s(yas--exit 8595 nil)) #s(yas--field 1 8575 8609 nil nil nil t #s(yas--exit 8610 nil)) nil)) (8588 . 8594) (#("E" 0 1 (face font-lock-string-face fontified t)) . -8588) (undo-tree-id1637 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -8589) (undo-tree-id1638 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -8590) (undo-tree-id1639 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -8591) (undo-tree-id1640 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -8592) (undo-tree-id1641 . -1) 8593 (8588 . 8593) (#("text" 0 4 (fontified nil)) . 8588) (8587 . 8588) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8587 8594 nil nil nil t #s(yas--exit 8595 nil))) #s(yas--exit 8595 nil) 45 nil #s(yas--field 1 8587 8594 nil nil nil t #s(yas--exit 8595 nil)) #s(yas--field 1 8575 8609 nil nil nil t #s(yas--exit 8610 nil)) nil)) (8583 . 8592) (#("say(${1:text})$0" 0 16 (fontified nil)) . 8583) (8583 . 8599) (#("say" 0 3 (fontified nil)) . 8583) (8583 . 8586) (#("say(…)" 0 6 (fontified nil)) . -8583) (8583 . 8589) (#("say" 0 3 (fontified t)) . -8583) (undo-tree-id1642 . -3) (undo-tree-id1643 . -3) 8586 (8585 . 8586) (8576 . 8585) (#("inspector" 0 9 (fontified nil)) . 8576) (8575 . 8576) (433 . 449) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8575 8609 nil nil nil t #s(yas--exit 8610 nil))) #s(yas--exit 8610 nil) 44 nil #s(yas--field 1 8575 8609 nil nil nil t #s(yas--exit 8610 nil)) nil nil)) (8548 . 8569) (#("report_err(${1:inspector})$0" 0 28 (fontified nil)) . 8548) (8548 . 8576) (#("rep" 0 3 (fontified nil)) . 8548) (8548 . 8551) (#("report_err(…) (use crate::errors::AsyncReportErr)" 0 49 (fontified nil)) . -8548) (8548 . 8597) (#("rep" 0 3 (fontified t)) . -8548) (undo-tree-id1644 . -3) (undo-tree-id1645 . -3) 8551 (8547 . 8551) (8542 . 8547) (8799 . 8801) (apply yas--snippet-revive 8748 8799 #s(yas--snippet nil (#s(yas--field 1 8767 8798 nil nil nil t #s(yas--exit 8799 nil))) #s(yas--exit 8799 nil) 43 nil #s(yas--field 1 8767 8798 nil nil nil t #s(yas--exit 8799 nil)) nil nil)) (8791 . 8798) (8778 . 8791) (#("Intern" 0 6 (fontified nil)) . 8778) (8778 . 8784) (#("InternalError" 0 13 (fontified nil)) . -8778) (8778 . 8791) (#("Intern" 0 6 (face font-lock-type-face fontified t)) . -8778) (undo-tree-id1646 . -6) (undo-tree-id1647 . -6) 8784 (8775 . 8784) (8767 . 8775) (#("OptE" 0 4 (fontified nil)) . 8767) (8767 . 8771) (#("OptError" 0 8 (fontified nil)) . -8767) (8767 . 8775) (#("OptE" 0 4 (face font-lock-type-face fontified t)) . -8767) (undo-tree-id1648 . -4) (undo-tree-id1649 . -4) 8771 (8768 . 8771) (#("f" 0 1 (fontified nil)) . 8768) (8767 . 8768) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8767 8798 nil nil nil t #s(yas--exit 8799 nil))) #s(yas--exit 8799 nil) 43 nil #s(yas--field 1 8767 8798 nil nil nil t #s(yas--exit 8799 nil)) nil nil)) (8748 . 8769) (#("map_contextualized(${1:f})$0" 0 28 (fontified nil)) . 8748) (8748 . 8776) (#("map" 0 3 (fontified nil)) . 8748) (8748 . 8751) (#("map_contextualized(…) (as Contextualizable)" 0 43 (fontified nil)) . -8748) (8748 . 8791) (#("map" 0 3 (fontified t)) . -8748) (undo-tree-id1650 . -3) 8751 (8747 . 8751) (8742 . 8747) (#("." 0 1 (fontified t)) . -8742) (undo-tree-id1651 . -1) 8743 (8742 . 8743) (apply yas--snippet-revive 8674 8742 #s(yas--snippet nil (#s(yas--field 1 8688 8741 nil nil nil t #s(yas--exit 8742 nil))) #s(yas--exit 8742 nil) 41 nil #s(yas--field 1 8688 8741 nil nil nil t #s(yas--exit 8742 nil)) nil nil)) (apply yas--snippet-revive 8705 8741 #s(yas--snippet nil (#s(yas--field 1 8722 8730 nil nil nil t #s(yas--field 2 8732 8740 nil nil nil t #s(yas--exit 8741 nil))) #s(yas--field 2 8732 8740 nil nil nil t #s(yas--exit 8741 nil))) #s(yas--exit 8741 nil) 42 nil #s(yas--field 2 8732 8740 nil nil nil t #s(yas--exit 8741 nil)) #s(yas--field 1 8688 8741 nil nil nil t #s(yas--exit 8742 nil)) nil)) (8732 . 8740) (#("log" 0 3 (fontified nil)) . 8732) (8732 . 8735) (#("log_type" 0 8 (fontified nil)) . -8732) (8732 . 8740) (#("log" 0 3 (fontified t)) . -8732) (undo-tree-id1652 . -3) (undo-tree-id1653 . -3) 8735 (8733 . 8735) (#("()" 0 2 (fontified nil)) . 8733) (8732 . 8733) (8722 . 8730) (#("guil" 0 4 (fontified nil)) . 8722) (8722 . 8726) (#("guild_id" 0 8 (fontified nil)) . -8722) (8722 . 8730) (#("guil" 0 4 (fontified t)) . -8722) (undo-tree-id1654 . -4) (undo-tree-id1655 . -4) 8726 (8724 . 8726) (#("l" 0 1 (fontified t)) . -8724) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (#("i" 0 1 (fontified t)) . -8725) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (#("d" 0 1 (fontified t)) . -8726) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) 8727 (8723 . 8727) (#("()" 0 2 (fontified nil)) . 8723) (8722 . 8723) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8722 8730 nil nil nil t #s(yas--field 2 8732 8740 nil nil nil t #s(yas--exit 8741 nil))) #s(yas--field 2 8732 8740 nil nil nil t #s(yas--exit 8741 nil))) #s(yas--exit 8741 nil) 42 nil #s(yas--field 2 8732 8740 nil nil nil t #s(yas--exit 8741 nil)) #s(yas--field 1 8688 8741 nil nil nil t #s(yas--exit 8742 nil)) nil)) (8705 . 8729) (#("DisablingLogging(${1:()}, ${2:()})$0" 0 36 (fontified nil)) . 8705) (8705 . 8741) (#("DisablingLogging(…)" 0 19 (fontified nil)) . -8705) (8705 . 8724) (8703 . 8705) (8688 . 8703) (#("LogErr" 0 6 (fontified nil)) . 8688) (8688 . 8694) (#("LogErrorContext" 0 15 (fontified nil)) . -8688) (8688 . 8703) (#("LogErr" 0 6 (face font-lock-type-face fontified t)) . -8688) (undo-tree-id1662 . -6) (undo-tree-id1663 . -6) 8694 (8689 . 8694) (#("context" 0 7 (fontified nil)) . 8689) (8688 . 8689) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8688 8741 nil nil nil t #s(yas--exit 8742 nil))) #s(yas--exit 8742 nil) 41 nil #s(yas--field 1 8688 8741 nil nil nil t #s(yas--exit 8742 nil)) nil nil)) (8674 . 8696) (#("contextualize(${1:context})$0" 0 29 (fontified nil)) . 8674) (8674 . 8703) (#("contex" 0 6 (fontified nil)) . 8674) (8674 . 8680) (#("contextualize(…) (as Contextualizable)" 0 38 (fontified nil)) . -8674) (8674 . 8712) (#("contex" 0 6 (fontified t)) . -8674) (undo-tree-id1664 . -6) 8680 (8673 . 8680) (8668 . 8673) (8663 . 8668) (#("await" 0 5 (fontified nil)) . -8663) (8663 . 8668) (8662 . 8663) (#("e" 0 1 (fontified t)) . -8662) (undo-tree-id1665 . -1) 8663 (8662 . 8663) (apply yas--snippet-revive 8621 8662 #s(yas--snippet nil (#s(yas--field 1 8631 8641 nil nil nil t #s(yas--field 2 8643 8651 nil nil nil t #s(yas--field 3 8653 8661 nil nil nil nil #s(yas--exit 8662 nil)))) #s(yas--field 2 8643 8651 nil nil nil t #s(yas--field 3 8653 8661 nil nil nil nil #s(yas--exit 8662 nil))) #s(yas--field 3 8653 8661 nil nil nil nil #s(yas--exit 8662 nil))) #s(yas--exit 8662 nil) 39 nil #s(yas--field 3 8653 8661 nil nil nil nil #s(yas--exit 8662 nil)) nil nil)) (8643 . 8651) (#("guild_" 0 6 (fontified nil)) . 8643) (8643 . 8649) (#("guild_id" 0 8 (fontified nil)) . -8643) (8643 . 8651) (#("guild_" 0 6 (fontified t)) . -8643) (undo-tree-id1666 . -6) (undo-tree-id1667 . -6) 8649 (8645 . 8649) (#("l" 0 1 (fontified t)) . -8645) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (#("d" 0 1 (fontified t)) . -8646) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (#("_" 0 1 (fontified t)) . -8647) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (#("i" 0 1 (fontified t)) . -8648) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) 8649 (8644 . 8649) (#("guild" 0 5 (fontified nil)) . 8644) (8643 . 8644) (apply yas--snippet-revive 8635 8641 #s(yas--snippet nil nil #s(yas--exit 8641 nil) 40 nil nil #s(yas--field 1 8631 8641 nil nil nil t #s(yas--field 2 8643 8651 nil nil nil t #s(yas--field 3 8653 8661 nil nil nil nil #s(yas--exit 8662 nil)))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8641 nil) 40 nil nil #s(yas--field 1 8631 8641 nil nil nil t #s(yas--field 2 8643 8651 nil nil nil t #s(yas--field 3 8653 8661 nil nil nil nil #s(yas--exit 8662 nil)))) nil)) (8635 . 8641) (#("data()$0" 0 8 (fontified nil)) . 8635) (8635 . 8643) (#("data()" 0 6 (fontified nil)) . -8635) (8635 . 8641) (8632 . 8635) (#("data" 0 4 (fontified nil)) . 8632) (8631 . 8632) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8631 8641 nil nil nil t #s(yas--field 2 8643 8651 nil nil nil t #s(yas--field 3 8653 8661 nil nil nil nil #s(yas--exit 8662 nil)))) #s(yas--field 2 8643 8651 nil nil nil t #s(yas--field 3 8653 8661 nil nil nil nil #s(yas--exit 8662 nil))) #s(yas--field 3 8653 8661 nil nil nil nil #s(yas--exit 8662 nil))) #s(yas--exit 8662 nil) 39 nil #s(yas--field 3 8653 8661 nil nil nil nil #s(yas--exit 8662 nil)) nil nil)) (8621 . 8653) (#("del_logch(${1:data}, ${2:guild}, ${3:log_type})$0" 0 49 (fontified nil)) . 8621) (8621 . 8670) (#("del" 0 3 (fontified nil)) . 8621) (8621 . 8624) (#("del_logch(…)" 0 12 (fontified nil)) . -8621) (8621 . 8633) (#("del" 0 3 (fontified t)) . -8621) (undo-tree-id1676 . -3) 8624 (8621 . 8624) (8617 . 8621) (#("	" 0 1 (fontified nil)) . -8620) (undo-tree-id1677 . -1) (8621 . 8622) (8617 . 8621) (8615 . 8617) (#("
" 0 1 (fontified t)) . -8328) (undo-tree-id1678 . -1) (#("	" 0 1 (fontified t)) . -8329) (undo-tree-id1679 . -1) (#("c" 0 1 (fontified t)) . -8330) (undo-tree-id1680 . -1) (#("t" 0 1 (fontified t)) . -8331) (undo-tree-id1681 . -1) (#("x" 0 1 (fontified t)) . -8332) (undo-tree-id1682 . -1) (#("." 0 1 (fontified t)) . -8333) (undo-tree-id1683 . -1) 8334 (8333 . 8334) (#("." 0 1 (fontified t)) . -8333) (undo-tree-id1684 . -1) 8334 (8330 . 8334) (8328 . 8330)) nil (25827 36501 643372 964000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -8558) (undo-tree-id1781 . -1) 8559 (8558 . 8559) (t 25827 36501 688449 440000)) nil (25827 36539 372841 243000) 0 nil])
([nil nil ((8887 . 8889) (8844 . 8857) (8621 . 8622) (8591 . 8592) (8620 . 8621) (8579 . 8579) (8579 . 8591)) nil (25827 36539 372822 270000) 0 nil])
([nil nil ((8627 . 8628) (#(" " 0 1 (fontified t)) . -8627) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (#(";" 0 1 (fontified t)) . -8628) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) 8629 (8628 . 8629) (8899 . 8900) (8897 . 8898) (8864 . 8869) (8626 . 8627) (8596 . 8597) (#(" " 0 1 (fontified t)) . -8596) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) 8597 (8592 . 8597) (t 25827 36539 424987 701000)) nil (25827 36563 40862 279000) 0 nil])
([nil nil ((8920 . 8925) (#("awa" 0 3 (fontified nil)) . 8920) (8920 . 8923) (#("await" 0 5 (fontified nil)) . -8920) (8920 . 8925) (#("awa" 0 3 (fontified t)) . -8920) (undo-tree-id1797 . -3) (undo-tree-id1798 . -2) (undo-tree-id1799 . -2) (undo-tree-id1800 . -3) (undo-tree-id1801 . -3) (undo-tree-id1802 . -3) (undo-tree-id1803 . -3) 8923 (8919 . 8923) (8914 . 8919) (8636 . 8641) (#("await" 0 5 (fontified nil)) . 8636) (8636 . 8641) (#("await" 0 5 (face font-lock-keyword-face fontified t)) . -8636) (undo-tree-id1804 . -5) 8641 (8635 . 8641) (8630 . 8635) (#("." 0 1 (fontified t)) . -8630) (undo-tree-id1805 . -1) 8631 (8630 . 8631) (t 25827 36563 94907 147000)) nil (25827 36586 595716 14000) 0 nil])
([nil nil ((8994 . 9000) (8993 . 8994) (#("	" 0 1 (fontified nil)) . 8992) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (8991 . 8994) (#("'" 0 1 (fontified t)) . -8991) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) 8992 (8991 . 8992) (t 25827 36586 658194 39000)) nil (25827 36599 769266 71000) 0 nil])
([nil nil ((8607 . 8610) (#("err" 0 3 (fontified nil)) . 8607) (8607 . 8610) (#("err" 0 3 (fontified t)) . -8607) (undo-tree-id1819 . -3) (undo-tree-id1820 . -3) (undo-tree-id1821 . -3) (undo-tree-id1822 . -3) (undo-tree-id1823 . -3) (undo-tree-id1824 . -3) (undo-tree-id1825 . -3) 8610 (8607 . 8610) (#("f" 0 1 (fontified t)) . -8607) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (#("o" 0 1 (fontified t)) . -8608) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -8609) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (#("m" 0 1 (fontified t)) . -8610) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (#("a" 0 1 (fontified t)) . -8611) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (#("t" 0 1 (fontified t)) . -8612) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (#("!" 0 1 (face rust-builtin-formatting-macro fontified nil)) . -8613) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (#("(" 0 1 (fontified nil)) . -8614) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -8615) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -8616) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -8617) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -8618) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -8619) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -8620) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -8621) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (#("{" 0 1 (face rust-string-interpolation fontified t)) . -8622) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (#("e" 0 1 (face rust-string-interpolation fontified t)) . -8623) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (#("}" 0 1 (face rust-string-interpolation fontified t)) . -8624) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -8625) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (#(")" 0 1 (fontified t)) . -8626) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) 8627 (8577 . 8579) (t 25827 36599 801546 736000)) nil (25827 36850 658058 933000) 0 nil])
([nil nil ((8836 . 8839) (#("f" 0 1 (fontified t)) . -8836) (undo-tree-id1885 . -1) (#("o" 0 1 (fontified t)) . -8837) (undo-tree-id1886 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -8838) (undo-tree-id1887 . -1) (#("m" 0 1 (fontified t)) . -8839) (undo-tree-id1888 . -1) (#("a" 0 1 (fontified t)) . -8840) (undo-tree-id1889 . -1) (#("t" 0 1 (fontified t)) . -8841) (undo-tree-id1890 . -1) (#("!" 0 1 (fontified t)) . -8842) (undo-tree-id1891 . -1) (#("(" 0 1 (fontified t)) . -8843) (undo-tree-id1892 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -8844) (undo-tree-id1893 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -8845) (undo-tree-id1894 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -8846) (undo-tree-id1895 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -8847) (undo-tree-id1896 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -8848) (undo-tree-id1897 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -8849) (undo-tree-id1898 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -8850) (undo-tree-id1899 . -1) (#("{" 0 1 (face rust-string-interpolation fontified t)) . -8851) (undo-tree-id1900 . -1) (#("e" 0 1 (face rust-string-interpolation fontified t)) . -8852) (undo-tree-id1901 . -1) (#("}" 0 1 (face rust-string-interpolation fontified t)) . -8853) (undo-tree-id1902 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -8854) (undo-tree-id1903 . -1) 8855 (#(")" 0 1 (fontified t)) . -8855) (undo-tree-id1904 . -1) 8856 (#(";" 0 1 (fontified t)) . -8858) (undo-tree-id1905 . -1) (#(" " 0 1 (fontified t)) . -8859) (undo-tree-id1906 . -1) (#("}" 0 1 (fontified t)) . -8860) (undo-tree-id1907 . -1) 8861 (8824 . 8826) (#("a" 0 1 (fontified t)) . -8826) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (#("s" 0 1 (fontified t)) . -8827) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (#("y" 0 1 (fontified t)) . -8828) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (#("n" 0 1 (fontified t)) . -8829) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (#("c" 0 1 (fontified t)) . -8830) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (#(" " 0 1 (fontified t)) . -8831) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (#("m" 0 1 (fontified t)) . -8832) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (#("o" 0 1 (face font-lock-keyword-face fontified nil)) . -8833) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (#("v" 0 1 (face font-lock-keyword-face fontified nil)) . -8834) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified nil)) . -8835) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (#(" " 0 1 (fontified t)) . -8836) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (#("{" 0 1 (fontified t)) . -8837) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (#(" " 0 1 (fontified t)) . -8838) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (#("d" 0 1 (fontified t)) . -8839) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (#("r" 0 1 (fontified t)) . -8840) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (#("o" 0 1 (fontified t)) . -8841) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (#("p" 0 1 (fontified t)) . -8842) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (#("(" 0 1 (fontified t)) . -8843) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) 8844 (#(")" 0 1 (fontified t)) . -8594) (undo-tree-id1944 . -1) 8595 (#(";" 0 1 (fontified t)) . -8594) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (#("}" 0 1 (fontified t)) . -8595) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) 8596 (#("a" 0 1 (fontified t)) . -8581) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (#("s" 0 1 (fontified t)) . -8582) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (#("y" 0 1 (fontified t)) . -8583) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (#("n" 0 1 (fontified t)) . -8584) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (#("c" 0 1 (fontified t)) . -8585) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (#(" " 0 1 (fontified t)) . -8586) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (#("m" 0 1 (fontified t)) . -8587) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (#("o" 0 1 (fontified t)) . -8588) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (#("v" 0 1 (fontified t)) . -8589) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (#("e" 0 1 (fontified t)) . -8590) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (#(" " 0 1 (fontified t)) . -8591) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (#("{" 0 1 (fontified t)) . -8592) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (#(" " 0 1 (fontified t)) . -8593) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (#("d" 0 1 (fontified t)) . -8594) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (#("r" 0 1 (fontified t)) . -8595) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (#("o" 0 1 (fontified t)) . -8596) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (#("p" 0 1 (fontified t)) . -8597) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (#("(" 0 1 (fontified t)) . -8598) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) 8599 (t 25827 36850 705023 802000)) nil (25827 36949 774909 23000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -8841) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) 8842 (t 25827 36949 814986 870000)) nil (25827 36957 436439 224000) 0 nil])
([nil nil ((8769 . 8776) (#(" " 0 1 (fontified nil)) . 8768) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (8769 . 8770) (8796 . 8801) (8789 . 8796) (#("a" 0 1 (fontified t)) . -8789) (undo-tree-id2059 . -1) (#("n" 0 1 (fontified t)) . -8790) (undo-tree-id2060 . -1) (#("n" 0 1 (fontified t)) . -8791) (undo-tree-id2061 . -1) (#("e" 0 1 (fontified t)) . -8792) (undo-tree-id2062 . -1) (#("l" 0 1 (fontified t)) . -8793) (undo-tree-id2063 . -1) (#("." 0 1 (fontified t)) . -8794) (undo-tree-id2064 . -1) 8795 (8787 . 8795) (#(")" 0 1 (fontified t)) . -8767) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) 8768 (8785 . 8788) (8768 . 8785) (8762 . 8766) (#("o" 0 1 (face font-lock-string-face fontified t)) . -8762) (undo-tree-id2067 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -8763) (undo-tree-id2068 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -8764) (undo-tree-id2069 . -1) 8765 (8745 . 8765) (9070 . 9071) (#(" " 0 1 (face font-lock-string-face fontified t)) . -9070) (undo-tree-id2070 . -1) 9071 (9068 . 9071) (9063 . 9068) (#("_" 0 1 (face font-lock-string-face fontified t)) . -9063) (undo-tree-id2071 . -1) 9064 (9058 . 9064) (#("{" 0 1 (face font-lock-string-face fontified t)) . -9058) (undo-tree-id2072 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -9059) (undo-tree-id2073 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -9060) (undo-tree-id2074 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -9061) (undo-tree-id2075 . -1) (#("_" 0 1 (face font-lock-string-face fontified t)) . -9062) (undo-tree-id2076 . -1) 9063 (9046 . 9063) (#(";" 0 1 (face font-lock-string-face fontified t)) . -9046) (undo-tree-id2077 . -1) (#("p" 0 1 (face font-lock-string-face fontified t)) . -9047) (undo-tree-id2078 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -9048) (undo-tree-id2079 . -1) 9049 (9046 . 9049) (8731 . 8745) (#(" " 0 1 (face font-lock-string-face fontified t)) . -8731) (undo-tree-id2080 . -1) 8732 (8713 . 8732) (#("updated channel for event type!" 0 31 (face font-lock-string-face fontified t)) . 8713) (undo-tree-id2081 . -31) (9036 . 9045) (#("updated channel for " 0 20 (face font-lock-string-face fontified t)) . 9036) (undo-tree-id2082 . -20) (8738 . 8743) (apply yas--snippet-revive 9005 9054 #s(yas--snippet nil (#s(yas--field 1 9009 9053 nil nil nil t #s(yas--exit 9054 nil))) #s(yas--exit 9054 nil) 50 nil #s(yas--field 1 9009 9053 nil nil nil t #s(yas--exit 9054 nil)) nil nil)) (9039 . 9051) (9030 . 9039) (9018 . 9030) (9017 . 9019) (9010 . 9018) (#("text" 0 4 (fontified nil)) . 9010) (9009 . 9010) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 9009 9053 nil nil nil t #s(yas--exit 9054 nil))) #s(yas--exit 9054 nil) 50 nil #s(yas--field 1 9009 9053 nil nil nil t #s(yas--exit 9054 nil)) nil nil)) (9005 . 9014) (#("say(${1:text})$0" 0 16 (fontified nil)) . 9005) (9005 . 9021) (#("say" 0 3 (fontified nil)) . 9005) (9005 . 9008) (#("say(…)" 0 6 (fontified nil)) . -9005) (9005 . 9011) (#("say" 0 3 (fontified t)) . -9005) (undo-tree-id2083 . -3) 9008 (9007 . 9008) (#("w" 0 1 (fontified t)) . -9007) (undo-tree-id2084 . -1) (#("y" 0 1 (fontified t)) . -9008) (undo-tree-id2085 . -1) 9009 (9001 . 9009) (8997 . 9001) (8748 . 8750) (8743 . 8748) (#("await" 0 5 (fontified nil)) . -8743) (8743 . 8748) (8742 . 8743) (#(";" 0 1 (fontified t)) . -8742) (undo-tree-id2086 . -1) 8743 (8742 . 8743) (8734 . 8739) (8713 . 8734) (#("d" 0 1 (face font-lock-string-face fontified t)) . -8713) (undo-tree-id2087 . -1) 8714 (#("e" 0 1 (face font-lock-string-face fontified t)) . -8714) (undo-tree-id2088 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -8715) (undo-tree-id2089 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -8716) (undo-tree-id2090 . -1) 8717 (8700 . 8717) (8699 . 8701) (8691 . 8700) (#("t" 0 1 (fontified t)) . -8691) (undo-tree-id2091 . -1) (#("e" 0 1 (fontified t)) . -8692) (undo-tree-id2092 . -1) (#("x" 0 1 (fontified t)) . -8693) (undo-tree-id2093 . -1) (#("t" 0 1 (fontified t)) . -8694) (undo-tree-id2094 . -1) 8695 (#("A" 0 1 (face font-lock-type-face fontified t)) . -8696) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) 8697 (8696 . 8697) (apply yas--snippet-revive 8687 8696 #s(yas--snippet nil (#s(yas--field 1 8691 8695 nil nil nil nil #s(yas--exit 8696 nil))) #s(yas--exit 8696 nil) 49 nil #s(yas--field 1 8691 8695 nil nil nil nil #s(yas--exit 8696 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8691 8695 nil nil nil nil #s(yas--exit 8696 nil))) #s(yas--exit 8696 nil) 49 nil #s(yas--field 1 8691 8695 nil nil nil nil #s(yas--exit 8696 nil)) nil nil)) (8687 . 8696) (#("say(${1:text})$0" 0 16 (fontified nil)) . 8687) (8687 . 8703) (#("say" 0 3 (fontified nil)) . 8687) (8687 . 8690) (#("say(…)" 0 6 (fontified nil)) . -8687) (8687 . 8693) (#("say" 0 3 (fontified t)) . -8687) (undo-tree-id2097 . -3) 8690 (8683 . 8690) (8679 . 8683) (8398 . 8400) (apply yas--snippet-revive 8391 8398 #s(yas--snippet nil nil #s(yas--exit 8398 nil) 48 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8398 nil) 48 nil nil nil nil)) (8391 . 8398) (#("defer()$0" 0 9 (fontified nil)) . 8391) (8391 . 8400) (#("defer()" 0 7 (fontified nil)) . -8391) (8391 . 8398) (8390 . 8391) (#("." 0 1 (fontified t)) . -8390) (undo-tree-id2098 . -1) (#("d" 0 1 (fontified t)) . -8391) (undo-tree-id2099 . -1) (#("e" 0 1 (fontified t)) . -8392) (undo-tree-id2100 . -1) (#("=" 0 1 (fontified t)) . -8393) (undo-tree-id2101 . -1) 8394 (8393 . 8394) (8387 . 8393) (8385 . 8387) (t 25827 36957 468315 620000)) nil (25827 41856 595454 661000) 0 nil])
([nil nil ((8809 . 8810) (#("
" 0 1 (fontified t)) . -8817) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (#("	" 0 1 (fontified t)) . -8818) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (#("	" 0 1 (fontified t)) . -8819) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (#("	" 0 1 (fontified t)) . -8820) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (#("	" 0 1 (fontified t)) . -8821) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (#("	" 0 1 (fontified t)) . -8822) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) 8823 (8817 . 8823) (t 25827 41856 622037 483000) 8808) nil (25827 41977 783258 798000) 0 nil])
([nil nil ((9142 . 9144) (9137 . 9142) (#("await" 0 5 (fontified nil)) . -9137) (9137 . 9142) (9136 . 9137) (t 25827 41977 794922 1000)) nil (25827 41987 746998 788000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -9142) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (#("m" 0 1 (fontified t)) . -9143) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (#("a" 0 1 (fontified t)) . -9144) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (#("p" 0 1 (fontified t)) . -9145) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) 9146 (9142 . 9146) (t 25827 41987 758218 825000)) nil (25827 41998 876453 329000) 0 nil])
([nil nil ((8399 . 8404) (#("await" 0 5 (fontified nil)) . -8399) (8399 . 8404) (8398 . 8399) (t 25827 41998 901511 387000)) nil (25827 42013 89440 597000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -8398) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) 8399 (8397 . 8399) (#(")" 0 1 (fontified t)) . -8397) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (#("." 0 1 (fontified t)) . -8398) (undo-tree-id2173 . -1) (#("m" 0 1 (fontified t)) . -8399) (undo-tree-id2174 . -1) (#("a" 0 1 (fontified t)) . -8400) (undo-tree-id2175 . -1) (#("p" 0 1 (fontified t)) . -8401) (undo-tree-id2176 . -1) (#("_" 0 1 (fontified t)) . -8402) (undo-tree-id2177 . -1) (#("c" 0 1 (fontified t)) . -8403) (undo-tree-id2178 . -1) 8404 (8398 . 8404) (t 25827 42013 124792 777000)) nil (25827 42033 911829 196000) 0 nil])
([nil nil ((8398 . 8401) (t 25827 42033 944716 932000)) nil (25827 42062 935196 694000) 0 nil])
([nil nil ((8423 . 8425) (#("    " 0 4 (fontified t)) . 8423) 8450 (apply yas--snippet-revive 8428 8450 #s(yas--snippet nil (#s(yas--field 1 8432 8449 nil nil nil t #s(yas--exit 8450 nil))) #s(yas--exit 8450 nil) 51 nil #s(yas--field 1 8432 8449 nil nil nil t #s(yas--exit 8450 nil)) nil nil)) (8444 . 8449) (8439 . 8444) (#("Err" 0 3 (fontified nil)) . 8439) (undo-tree-id2187 . -3) (8439 . 8442) (#("Error" 0 5 (fontified nil)) . -8439) (undo-tree-id2188 . -5) (8439 . 8444) (#("Err" 0 3 (face font-lock-type-face fontified t)) . -8439) (undo-tree-id2189 . -3) (undo-tree-id2190 . -3) (undo-tree-id2191 . -3) 8442 (8438 . 8442) (8433 . 8438) (#("f" 0 1 (fontified nil)) . 8433) (undo-tree-id2192 . -1) (8432 . 8433) (540 . 564) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8432 8449 nil nil nil t #s(yas--exit 8450 nil))) #s(yas--exit 8450 nil) 51 nil #s(yas--field 1 8432 8449 nil nil nil t #s(yas--exit 8450 nil)) nil nil)) (8404 . 8410) (#("map(${1:f})$0" 0 13 (fontified nil)) . 8404) (8404 . 8417) (#("map" 0 3 (fontified nil)) . 8404) (8404 . 8407) (#("map(…) (use futures::FutureExt)" 0 31 (fontified nil)) . -8404) (8404 . 8435) (#("map" 0 3 (fontified t)) . -8404) (undo-tree-id2193 . -3) 8407 (8404 . 8407) (8399 . 8403) (#("		" 0 2 (fontified t)) . -8399) 8401 (8401 . 8401) (8401 . 8402) (8398 . 8401)) nil (25827 42062 935192 598000) 0 nil])
([nil nil ((8448 . 8449) (#("o" 0 1 (fontified t)) . -8448) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) 8449 (8445 . 8449) (#("(" 0 1 (fontified t)) . -8445) (undo-tree-id2185 . -1) (#(")" 0 1 (fontified t)) . -8446) (undo-tree-id2186 . -1) 8447) nil (25827 42062 935179 738000) 0 nil])
([nil nil ((553 . 568) (562 . 563) (8426 . 8426) (8426 . 8433) (#("map_err" 0 7 (fontified nil)) . 8426) (8426 . 8433) (#("map_err (use futures::TryFutureExt)" 0 35 (fontified nil)) . -8426) (8426 . 8461) (#("map_err" 0 7 (fontified t)) . -8426) (undo-tree-id2194 . -7) (undo-tree-id2195 . -5) (undo-tree-id2196 . -6) (undo-tree-id2197 . -7) (undo-tree-id2198 . -7) (undo-tree-id2199 . -7) (undo-tree-id2200 . -7) (undo-tree-id2201 . -7) 8433 (8429 . 8433) (t 25827 42062 961278 255000)) nil (25827 42080 381281 566000) 0 nil])
([nil nil ((8457 . 8461) (#("from" 0 4 (fontified nil)) . 8457) (8457 . 8461) (#("from (as From)" 0 14 (fontified nil)) . -8457) (8457 . 8471) (#("from" 0 4 (fontified t)) . -8457) (undo-tree-id2202 . -4) (undo-tree-id2203 . -4) (undo-tree-id2204 . -4) (undo-tree-id2205 . -4) (undo-tree-id2206 . -4) (undo-tree-id2207 . -4) (undo-tree-id2208 . -4) (undo-tree-id2209 . -4) (undo-tree-id2210 . -4) 8461 (8450 . 8461) (#("I" 0 1 (face font-lock-type-face fontified t)) . -8450) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -8451) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -8452) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -8453) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (#(":" 0 1 (fontified t)) . -8454) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (#(":" 0 1 (fontified t)) . -8455) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (#("<" 0 1 (fontified t)) . -8456) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -8457) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -8458) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -8459) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -8460) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -8461) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (#(">" 0 1 (fontified t)) . -8462) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (#(":" 0 1 (fontified t)) . -8463) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (#(":" 0 1 (fontified t)) . -8464) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (#("i" 0 1 (fontified t)) . -8465) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -8466) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (#("t" 0 1 (fontified t)) . -8467) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (#("o" 0 1 (fontified t)) . -8468) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) 8469 (t 25827 42080 404548 456000)) nil (25827 42088 20552 986000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -8883) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) 8884 (8883 . 8884) (t 25827 42088 44520 849000)) nil (25827 42117 801564 264000) 0 nil])
([nil nil ((#("		.map_err(Error::from)
" 0 2 (fontified t) 2 3 (fontified t) 3 10 (fontified t) 10 11 (fontified t) 11 16 (face font-lock-type-face fontified t) 16 18 (fontified t) 18 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t)) . 8439) (undo-tree-id2262 . 1) (undo-tree-id2263 . -23) (undo-tree-id2264 . -11) (undo-tree-id2265 . -22) (undo-tree-id2266 . -22) (undo-tree-id2267 . -22) (undo-tree-id2268 . -22) (undo-tree-id2269 . -22) (undo-tree-id2270 . -22) (undo-tree-id2271 . -22) (undo-tree-id2272 . -22) (undo-tree-id2273 . -22) (undo-tree-id2274 . -22) (undo-tree-id2275 . -22) (undo-tree-id2276 . -24) 8461) nil (25827 42117 801561 467000) 0 nil])
([nil nil ((8447 . 8450)) nil (25827 42117 801551 667000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8454 . 8455) (#("
" 0 1 (fontified nil)) . -8476) (8452 . 8477) 8449) nil (25827 42117 801550 650000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -8447) (undo-tree-id2256 . -1) (#("	" 0 1 (fontified t)) . -8448) (undo-tree-id2257 . -1) (#("	" 0 1 (fontified t)) . -8449) (undo-tree-id2258 . -1) (#("?" 0 1 (face rust-question-mark fontified t)) . -8450) (undo-tree-id2259 . 1) (undo-tree-id2260 . -1) (#(";" 0 1 (fontified t)) . -8451) (undo-tree-id2261 . -1) 8452) nil (25827 42117 801547 440000) 0 nil])
([nil nil ((8471 . 8473)) nil (25827 42117 801531 847000) 0 nil])
([nil nil ((8471 . 8472) (#("?" 0 1 (face rust-question-mark fontified t)) . -8471) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (#("." 0 1 (fontified t)) . -8472) (undo-tree-id2281 . -1) 8473 (8472 . 8473) (t 25827 42117 811080 201000)) nil (25827 42124 725489 34000) 0 nil])
([nil nil ((8905 . 8909) (#("from" 0 4 (fontified nil)) . 8905) (undo-tree-id2282 . -4) (8905 . 8909) (#("from (as From)" 0 14 (fontified nil)) . -8905) (undo-tree-id2283 . -14) (8905 . 8919) (#("from" 0 4 (fontified t)) . -8905) (undo-tree-id2284 . -4) (undo-tree-id2285 . -4) (undo-tree-id2286 . -4) (undo-tree-id2287 . -4) (undo-tree-id2288 . -4) (undo-tree-id2289 . -4) (undo-tree-id2290 . -4) (undo-tree-id2291 . -4) 8909 (8899 . 8909) (#("op" 0 2 (fontified nil)) . 8899) (undo-tree-id2292 . -2) (8898 . 8899) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8898 8909 nil nil nil t #s(yas--exit 8910 nil))) #s(yas--exit 8910 nil) 52 nil #s(yas--field 1 8898 8909 nil nil nil t #s(yas--exit 8910 nil)) nil nil)) (8890 . 8901) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 8890) (8890 . 8908) (#("map_" 0 4 (fontified nil)) . 8890) (8890 . 8894) (#("map_err(…)" 0 10 (fontified nil)) . -8890) (8890 . 8900) (#("map_" 0 4 (fontified t)) . -8890) (undo-tree-id2293 . -4) 8894 (8889 . 8894) (t 25827 42124 737721 951000)) nil (25827 42136 278882 779000) 0 nil])
([nil nil ((apply yas--snippet-revive 8890 8910 #s(yas--snippet nil (#s(yas--field 1 8898 8909 nil nil nil t #s(yas--exit 8910 nil))) #s(yas--exit 8910 nil) 52 nil #s(yas--field 1 8898 8909 nil nil nil t #s(yas--exit 8910 nil)) nil nil))) nil (25827 42148 32617 469000) 0 nil])
([nil nil ((9252 . 9256) (#("from" 0 4 (fontified nil)) . 9252) (undo-tree-id2294 . -4) (9252 . 9256) (#("from (as From)" 0 14 (fontified nil)) . -9252) (undo-tree-id2295 . -14) (9252 . 9266) (#("from" 0 4 (fontified t)) . -9252) (undo-tree-id2296 . -4) (undo-tree-id2297 . -4) (undo-tree-id2298 . -4) (undo-tree-id2299 . -4) (undo-tree-id2300 . -4) (undo-tree-id2301 . -4) (undo-tree-id2302 . -4) (undo-tree-id2303 . -4) (undo-tree-id2304 . -4) (undo-tree-id2305 . -4) (undo-tree-id2306 . -4) 9256 (9252 . 9256) (9246 . 9252) (#("op" 0 2 (fontified nil)) . 9246) (undo-tree-id2307 . -2) (9245 . 9246) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 9245 9256 nil nil nil t #s(yas--exit 9257 nil))) #s(yas--exit 9257 nil) 53 nil #s(yas--field 1 9245 9256 nil nil nil t #s(yas--exit 9257 nil)) nil nil)) (9237 . 9248) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 9237) (9237 . 9255) (#("map" 0 3 (fontified nil)) . 9237) (9237 . 9240) (#("map_err(…)" 0 10 (fontified nil)) . -9237) (9237 . 9247) (#("map" 0 3 (fontified t)) . -9237) (undo-tree-id2308 . -3) 9240 (9236 . 9240) (t 25827 42136 301013 731000)) nil (25827 42148 32607 511000) 0 nil])
([nil nil ((apply yas--snippet-revive 9237 9257 #s(yas--snippet nil (#s(yas--field 1 9245 9256 nil nil nil t #s(yas--exit 9257 nil))) #s(yas--exit 9257 nil) 53 nil #s(yas--field 1 9245 9256 nil nil nil t #s(yas--exit 9257 nil)) nil nil))) nil (25827 42167 960759 766000) 0 nil])
([nil nil ((9251 . 9256) (9240 . 9245) (8894 . 8899) (8883 . 8888) (t 25827 42148 57638 208000)) nil (25827 52552 421618 196000) 0 nil])
([nil current ((4143 . 4149) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -4143) (undo-tree-id0 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -4144) (undo-tree-id1 . -1) 4145 (#(" " 0 1 (face font-lock-doc-face fontified t)) . -4145) (undo-tree-id2 . -1) 4146 (4142 . 4146) (4121 . 4142) (4120 . 4121) (4112 . 4120) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4112) (undo-tree-id3 . -1) (#("m" 0 1 (face font-lock-doc-face fontified t)) . -4113) (undo-tree-id4 . -1) 4114 (4102 . 4114) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -4102) (undo-tree-id5 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -4103) (undo-tree-id6 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -4104) (undo-tree-id7 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4105) (undo-tree-id8 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -4106) (undo-tree-id9 . -1) (#("p" 0 1 (face font-lock-doc-face fontified t)) . -4107) (undo-tree-id10 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -4108) (undo-tree-id11 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -4109) (undo-tree-id12 . -1) (#("v" 0 1 (face font-lock-doc-face fontified t)) . -4110) (undo-tree-id13 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -4111) (undo-tree-id14 . -1) (#("d" 0 1 (face font-lock-doc-face fontified nil)) . -4112) (undo-tree-id15 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4113) (undo-tree-id16 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -4114) (undo-tree-id17 . -1) 4115 (4099 . 4115) (4094 . 4099) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -4094) (undo-tree-id18 . -1) 4095 (4082 . 4095) (#("	" 0 1 (fontified nil)) . -4123) (undo-tree-id19 . -1) (4124 . 4125) (4122 . 4124) (4112 . 4122) (#("+" 0 1 (fontified t)) . -4112) (undo-tree-id20 . -1) 4113 (4106 . 4113) (4094 . 4106) (4081 . 4082) (4078 . 4081) (#("." 0 1 (fontified t)) . -4078) (undo-tree-id21 . -1) (#("." 0 1 (fontified t)) . -4079) (undo-tree-id22 . -1) 4080 (4078 . 4080) (4077 . 4078) (4087 . 4089) (4078 . 4087) (4076 . 4078) (t 25827 52555 679026 348000)) nil (25827 64016 693539 404000) 0 nil] [nil nil ((8718 . 8723) (#("Error" 0 5 (fontified nil)) . 8718) (8718 . 8723) (#("Error" 0 5 (face font-lock-type-face fontified t)) . -8718) (undo-tree-id2309 . -5) (undo-tree-id2310 . -5) (undo-tree-id2312 . -5) (undo-tree-id2314 . -5) (undo-tree-id2316 . -5) 8723 (8718 . 8723) (#("O" 0 1 (face font-lock-type-face fontified t)) . -8718) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -8719) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -8720) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -8721) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) 8722 (#("r" 0 1 (face font-lock-type-face fontified t)) . -8722) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -8723) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -8724) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (#("r" 0 1 (face font-lock-type-face fontified nil)) . -8725) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (#(":" 0 1 (fontified nil)) . -8726) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (#(":" 0 1 (fontified nil)) . -8727) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (#("<" 0 1 (fontified t)) . -8728) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -8729) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -8730) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -8731) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -8732) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -8733) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -8734) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -8735) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -8736) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -8737) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -8738) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -8739) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -8740) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -8741) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (#(">" 0 1 (fontified t)) . -8742) (undo-tree-id2366 . -1) 8743 (8699 . 8717) (#("map_contex" 0 10 (fontified nil)) . 8699) (8699 . 8709) (#("map_contextualized (as Contextualizable)" 0 40 (fontified nil)) . -8699) (8699 . 8739) (#("map_contex" 0 10 (fontified t)) . -8699) (undo-tree-id2367 . -4) (undo-tree-id2368 . -10) (undo-tree-id2369 . -10) 8709 (8703 . 8709) (#("e" 0 1 (fontified t)) . -8703) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (#("r" 0 1 (fontified t)) . -8704) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (#("r" 0 1 (fontified t)) . -8705) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (#("r" 0 1 (fontified t)) . -8706) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (#("r" 0 1 (fontified t)) . -8707) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) 8708 (8703 . 8708) (#("c" 0 1 (fontified t)) . -8703) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (#("o" 0 1 (fontified t)) . -8704) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (#("n" 0 1 (fontified t)) . -8705) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (#("t" 0 1 (fontified t)) . -8706) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (#("e" 0 1 (fontified t)) . -8707) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (#("x" 0 1 (fontified t)) . -8708) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (#("t" 0 1 (fontified t)) . -8709) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (#("u" 0 1 (fontified t)) . -8710) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (#("a" 0 1 (fontified t)) . -8711) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (#("l" 0 1 (fontified t)) . -8712) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (#("i" 0 1 (fontified t)) . -8713) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (#("z" 0 1 (fontified t)) . -8714) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (#("e" 0 1 (fontified t)) . -8715) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (#("d" 0 1 (fontified t)) . -8716) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) 8717 (t 25827 42168 900 97000)) ((8703 . 8717) (#("errrr" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 8703) (8703 . 8708) (#("contex" 0 6 (fontified nil)) . 8703) (8699 . 8709) (#("map_contextualized (as Contextualizable)" 0 40 (fontified nil)) . 8699) (8699 . 8739) (#("map_contex" 0 10 (fontified nil)) . 8699) (8699 . 8709) (#("map_contextualized" 0 18 (fontified nil)) . 8699) (8718 . 8743) (#("Error" 0 5 (face font-lock-type-face fontified nil)) . 8718) (undo-tree-id2421 . -5) (undo-tree-id2422 . -5) (8718 . 8723) (#("Error" 0 5 (fontified nil)) . 8718) (8718 . 8723) (#("Error" 0 5 (face font-lock-type-face fontified t)) . 8718) (undo-tree-id2423 . -4) (undo-tree-id2424 . -4) (undo-tree-id2425 . -4) (undo-tree-id2426 . -4) (undo-tree-id2427 . -4) (undo-tree-id2428 . -4) (undo-tree-id2429 . -4) (t 25827 52533 735770 812000)) (25827 52533 697055 246000) 0 nil])
nil
nil
