(undo-tree-save-format-version . 1)
"8b2a1e63e1018d3fafd54edc3d2e4f2c7c436cf8"
[nil nil nil nil (25814 34147 944048 581000) 0 nil]
([nil nil ((#("
" 0 1 (fontified t)) . -7601) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 7602 (7600 . 7601) (apply yas--snippet-revive 7588 7600 #s(yas--snippet nil (#s(yas--field 1 7597 7599 nil nil nil t #s(yas--exit 7600 nil))) #s(yas--exit 7600 nil) 35 nil #s(yas--field 1 7597 7599 nil nil nil t #s(yas--exit 7600 nil)) nil nil)) (7598 . 7599) (#("len" 0 3 (fontified nil)) . 7598) (undo-tree-id6 . -3) (7597 . 7598) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7597 7599 nil nil nil t #s(yas--exit 7600 nil))) #s(yas--exit 7600 nil) 35 nil #s(yas--field 1 7597 7599 nil nil nil t #s(yas--exit 7600 nil)) nil nil)) (7588 . 7601) (#("truncate(${1:len})$0" 0 20 (fontified nil)) . 7588) (7588 . 7608) (#("trunc" 0 5 (fontified nil)) . 7588) (7588 . 7593) (#("truncate(…)" 0 11 (fontified nil)) . -7588) (7588 . 7599) (#("trunc" 0 5 (fontified t)) . -7588) (undo-tree-id7 . -5) 7593 (7583 . 7593) (7581 . 7583) (7580 . 7581) (#("	" 0 1 (fontified nil)) . 7579) (undo-tree-id8 . -1) (7578 . 7581) (7597 . 7598) (apply yas--snippet-revive 7583 7597 #s(yas--snippet nil (#s(yas--field 1 7590 7596 nil nil nil nil #s(yas--exit 7597 nil))) #s(yas--exit 7597 nil) 34 nil #s(yas--field 1 7590 7596 nil nil nil nil #s(yas--exit 7597 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7590 7596 nil nil nil nil #s(yas--exit 7597 nil))) #s(yas--exit 7597 nil) 34 nil #s(yas--field 1 7590 7596 nil nil nil nil #s(yas--exit 7597 nil)) nil nil)) (7583 . 7597) (#("embeds(${1:embeds})$0" 0 21 (fontified nil)) . 7583) (7583 . 7604) (#("emb" 0 3 (fontified nil)) . 7583) (7583 . 7586) (#("embeds(…)" 0 9 (fontified nil)) . -7583) (7583 . 7592) (#("emb" 0 3 (fontified t)) . -7583) (undo-tree-id9 . -3) (undo-tree-id10 . -3) 7586 (7583 . 7586) (7581 . 7583) (7580 . 7581) (#("	" 0 1 (fontified nil)) . 7579) (undo-tree-id11 . -1) (7578 . 7581) (7443 . 7444) (#("	" 0 1 (fontified t)) . -7443) (undo-tree-id12 . -1) (#("m" 0 1 (fontified t)) . -7444) (undo-tree-id13 . -1) (#("s" 0 1 (fontified t)) . -7445) (undo-tree-id14 . -1) (#("g" 0 1 (fontified t)) . -7446) (undo-tree-id15 . -1) (#("." 0 1 (fontified t)) . -7447) (undo-tree-id16 . -1) (#("e" 0 1 (fontified t)) . -7448) (undo-tree-id17 . -1) (#("m" 0 1 (fontified t)) . -7449) (undo-tree-id18 . -1) (#("b" 0 1 (fontified t)) . -7450) (undo-tree-id19 . -1) (#("e" 0 1 (fontified t)) . -7451) (undo-tree-id20 . -1) (#("d" 0 1 (fontified t)) . -7452) (undo-tree-id21 . -1) (#("s" 0 1 (fontified t)) . -7453) (undo-tree-id22 . -1) 7454 (7444 . 7454) (7443 . 7444) (#("	" 0 1 (fontified nil)) . 7442) (7442 . 7443) (7442 . 7443) (t 25811 56788 410700 322000)) nil (25814 34147 944040 163000) 0 nil])
([nil nil ((253 . 254) (247 . 253) (#("Resu" 0 4 (fontified nil)) . 247) (247 . 251) (#("Result" 0 6 (fontified nil)) . -247) (247 . 253) (#("Resu" 0 4 (face font-lock-type-face fontified t)) . -247) (undo-tree-id0 . -4) (undo-tree-id1 . -3) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) 251 (247 . 251) (#("C" 0 1 (face font-lock-type-face fontified t)) . -247) (undo-tree-id5 . -1) 248 (247 . 248) (#("a" 0 1 (fontified t)) . -247) (undo-tree-id6 . -1) 248 (247 . 248) (228 . 247) (227 . 228) (t 25814 34147 959436 476000)) nil (25817 14354 429474 212000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1048) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#(" " 0 1 (fontified t)) . -1049) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1050) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1051) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1052) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1053) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1054) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) 1055 (t 25817 14354 444562 547000)) nil (25817 14360 155366 675000) 0 nil])
([nil nil ((432 . 433) (#("}" 0 1 (fontified t)) . -432) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 433 (431 . 433) (410 . 431) (409 . 410) (444 . 446) (#("	" 0 1 (fontified nil)) . -445) (undo-tree-id2 . -1) (446 . 447) (444 . 446) (443 . 444) (440 . 443) (419 . 440) (410 . 419) (#("i" 0 1 (fontified t)) . -410) (undo-tree-id3 . -1) 411 (410 . 411) (409 . 411) (t 25817 14360 171222 609000)) nil (25817 25580 906856 322000) 0 nil])
([nil nil ((529 . 531) (514 . 529) (#("Linka" 0 5 (fontified nil)) . 514) (514 . 519) (#("LinkableMessage" 0 15 (fontified nil)) . -514) (514 . 529) (#("Linka" 0 5 (face font-lock-type-face fontified t)) . -514) (undo-tree-id4 . -5) (undo-tree-id5 . -5) 519 (514 . 519) (#("s" 0 1 (fontified t)) . -514) (undo-tree-id6 . -1) (#("e" 0 1 (fontified t)) . -515) (undo-tree-id7 . -1) (#("r" 0 1 (fontified t)) . -516) (undo-tree-id8 . -1) (#(":" 0 1 (fontified t)) . -517) (undo-tree-id9 . -1) (#(":" 0 1 (fontified t)) . -518) (undo-tree-id10 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -519) (undo-tree-id11 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -520) (undo-tree-id12 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -521) (undo-tree-id13 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -522) (undo-tree-id14 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -523) (undo-tree-id15 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -524) (undo-tree-id16 . -1) 525 (#("e" 0 1 (face font-lock-type-face fontified t)) . -525) (undo-tree-id17 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -526) (undo-tree-id18 . -1) (#("d" 0 1 (face font-lock-type-face fontified nil)) . -527) (undo-tree-id19 . -1) (#("," 0 1 (fontified t)) . -528) (undo-tree-id20 . -1) (#(" " 0 1 (fontified t)) . -529) (undo-tree-id21 . -1) (#("s" 0 1 (fontified t)) . -530) (undo-tree-id22 . -1) (#("e" 0 1 (fontified t)) . -531) (undo-tree-id23 . -1) (#("r" 0 1 (fontified t)) . -532) (undo-tree-id24 . -1) (#(":" 0 1 (fontified t)) . -533) (undo-tree-id25 . -1) (#(":" 0 1 (fontified t)) . -534) (undo-tree-id26 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -535) (undo-tree-id27 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -536) (undo-tree-id28 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -537) (undo-tree-id29 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -538) (undo-tree-id30 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -539) (undo-tree-id31 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -540) (undo-tree-id32 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -541) (undo-tree-id33 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -542) (undo-tree-id34 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -543) (undo-tree-id35 . -1) (#("," 0 1 (fontified t)) . -544) (undo-tree-id36 . -1) (#(" " 0 1 (fontified t)) . -545) (undo-tree-id37 . -1) 546 (#("s" 0 1 (fontified t)) . -546) (undo-tree-id38 . -1) 547 (546 . 547) (544 . 546) (526 . 544) (#("O" 0 1 (face font-lock-type-face fontified t)) . -526) (undo-tree-id39 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -527) (undo-tree-id40 . -1) 528 (520 . 528) (502 . 520) (500 . 502) (499 . 500) (488 . 499) (#("E" 0 1 (face font-lock-type-face fontified t)) . -488) (undo-tree-id41 . -1) 489 (475 . 489) (#("o" 0 1 (face font-lock-type-face fontified t)) . -475) (undo-tree-id42 . -1) 476 (470 . 476) (t 25817 25580 917503 523000)) nil (25817 25720 886227 54000) 0 nil])
([nil nil ((apply yas--snippet-revive 741 776 #s(yas--snippet nil nil #s(yas--exit 776 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 776 nil) 2 nil nil nil nil)) (741 . 776) (#("Self::CreatingWebhookForReplication$0" 0 37 (fontified nil)) . 741) (741 . 778) (#("CreatingWE" 0 10 (fontified nil)) . 741) (741 . 751) (#("Self::CreatingWebhookForReplication" 0 35 (fontified nil)) . -741) (741 . 776) (#("CreatingWE" 0 10 (face font-lock-type-face fontified t)) . -741) (undo-tree-id43 . -10) (undo-tree-id44 . -10) (undo-tree-id45 . -10) (undo-tree-id46 . -10) (undo-tree-id47 . -10) (undo-tree-id48 . -10) (undo-tree-id49 . -10) 751 (741 . 751) (737 . 741) (#("	" 0 1 (fontified nil)) . -740) (undo-tree-id50 . -1) (741 . 742) (737 . 741) (734 . 737) (728 . 734) (#("h" 0 1 (fontified t)) . -728) (undo-tree-id51 . -1) (#(" " 0 1 (fontified t)) . -729) (undo-tree-id52 . -1) 730 (725 . 730) (722 . 725) (#("	" 0 1 (fontified nil)) . -724) (undo-tree-id53 . -1) (725 . 726) (722 . 725) (716 . 722) (711 . 716) (689 . 693) (#(" " 0 1 (fontified t)) . -707) (undo-tree-id54 . -1) 708 (703 . 708) (#(">" 0 1 (syntax-table (1) fontified t)) . -703) (undo-tree-id55 . -1) 704 (703 . 704) (702 . 703) (701 . 702) (699 . 701) (674 . 677) (#("d" 0 1 (face font-lock-function-name-face fontified t)) . -674) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -675) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("s" 0 1 (face font-lock-function-name-face fontified t)) . -676) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("p" 0 1 (face font-lock-function-name-face fontified t)) . -677) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("l" 0 1 (face font-lock-function-name-face fontified t)) . -678) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("a" 0 1 (face font-lock-function-name-face fontified t)) . -679) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("y" 0 1 (face font-lock-function-name-face fontified t)) . -680) (undo-tree-id68 . -1) (undo-tree-id69 . -1) 681 (699 . 703) (#("O" 0 1 (face font-lock-type-face fontified t)) . -699) (undo-tree-id70 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -700) (undo-tree-id71 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -701) (undo-tree-id72 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -702) (undo-tree-id73 . -1) 703 (689 . 703) (671 . 689) (625 . 626) (#("}" 0 1 (fontified t)) . -625) (undo-tree-id74 . -1) 626 (611 . 626) (605 . 611) (603 . 605) (602 . 603) (645 . 647) (#("	" 0 1 (fontified nil)) . -646) (undo-tree-id75 . -1) (647 . 648) (645 . 647) (643 . 645) (620 . 643) (#("Replica" 0 7 (fontified nil)) . 620) (620 . 627) (#("ReplicationErrorContext" 0 23 (fontified nil)) . -620) (620 . 643) (#("Replica" 0 7 (face font-lock-type-face fontified t)) . -620) (undo-tree-id76 . -7) 627 (617 . 627) (#("r" 0 1 (fontified t)) . -617) (undo-tree-id77 . -1) 618 (615 . 618) (223 . 224) (216 . 223) (206 . 216) (#(";" 0 1 (fontified t)) . -206) (undo-tree-id78 . -1) 207 (194 . 207) (193 . 194) (578 . 584) (#("e" 0 1 (face font-lock-type-face fontified t)) . -578) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -579) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -580) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -581) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (#(" " 0 1 (fontified t)) . -582) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("f" 0 1 (fontified t)) . -583) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (#("o" 0 1 (fontified t)) . -584) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -585) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#(" " 0 1 (fontified t)) . -586) (undo-tree-id95 . -1) (undo-tree-id96 . -1) 587 (572 . 587) (570 . 572) (546 . 566) (#("s" 0 1 (fontified t)) . -546) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (#("e" 0 1 (fontified t)) . -547) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("r" 0 1 (fontified t)) . -548) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#(":" 0 1 (fontified t)) . -549) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#(":" 0 1 (fontified t)) . -550) (undo-tree-id105 . -1) (undo-tree-id106 . -1) 551 (535 . 551) (#("M" 0 1 (face font-lock-type-face fontified t)) . -535) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -536) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -537) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -538) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -539) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -540) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -541) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -542) (undo-tree-id121 . -1) (undo-tree-id122 . -1) 543 (#("d" 0 1 (face font-lock-type-face fontified t)) . -543) (undo-tree-id123 . -1) (undo-tree-id124 . -1) 544 (542 . 544) (535 . 542) (514 . 535) (#("L" 0 1 (face font-lock-type-face fontified t)) . -514) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -515) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -516) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("k" 0 1 (face font-lock-type-face fontified t)) . -517) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -518) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -519) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -520) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -521) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -522) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -523) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -524) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -525) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -526) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -527) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -528) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) 529 (t 25817 25720 887541 547000)) nil (25817 26273 629080 688000) 0 nil])
([nil nil ((859 . 866) (850 . 857) (#("s" 0 1 (fontified t)) . -850) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("e" 0 1 (fontified t)) . -851) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("r" 0 1 (fontified t)) . -852) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#(":" 0 1 (fontified t)) . -853) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#(":" 0 1 (fontified t)) . -854) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -855) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -856) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -857) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -858) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -859) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -860) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -861) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -862) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -863) (undo-tree-id80 . -1) (undo-tree-id81 . -1) 864 (apply yas--snippet-revive 838 869 #s(yas--snippet nil (#s(yas--field 1 850 864 nil nil nil t #s(yas--field 2 866 866 nil nil nil nil #s(yas--field 3 868 868 nil nil nil nil #s(yas--exit 869 nil)))) #s(yas--field 2 866 866 nil nil nil nil #s(yas--field 3 868 868 nil nil nil nil #s(yas--exit 869 nil))) #s(yas--field 3 868 868 nil nil nil nil #s(yas--exit 869 nil))) #s(yas--exit 869 nil) 0 nil #s(yas--field 1 850 864 nil nil nil t #s(yas--field 2 866 866 nil nil nil nil #s(yas--field 3 868 868 nil nil nil nil #s(yas--exit 869 nil)))) nil nil)) (850 . 864) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 850 864 nil nil nil t #s(yas--field 2 866 866 nil nil nil nil #s(yas--field 3 868 868 nil nil nil nil #s(yas--exit 869 nil)))) #s(yas--field 2 866 866 nil nil nil nil #s(yas--field 3 868 868 nil nil nil nil #s(yas--exit 869 nil))) #s(yas--field 3 868 868 nil nil nil nil #s(yas--exit 869 nil))) #s(yas--exit 869 nil) 0 nil #s(yas--field 1 850 864 nil nil nil t #s(yas--field 2 866 866 nil nil nil nil #s(yas--field 3 868 868 nil nil nil nil #s(yas--exit 869 nil)))) nil nil)) (838 . 855) (#("SendMessage($1, $2, $3)$0" 0 25 (fontified nil)) . 838) (838 . 863) (#("SendMessage(…)" 0 14 (fontified nil)) . -838) (838 . 852) (833 . 838) (832 . 833) (828 . 832) (819 . 828) (815 . 819) (#("o" 0 1 (face font-lock-string-face fontified t)) . -815) (undo-tree-id82 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -816) (undo-tree-id83 . -1) 817 (805 . 817) (784 . 805) (779 . 784) (#(" " 0 1 (fontified t)) . -779) (undo-tree-id84 . -1) 780 (776 . 780) (t 25817 26273 630913 248000)) nil (25818 10133 842285 834000) 0 nil])
([nil nil ((533 . 534) (#("S" 0 1 (face font-lock-type-face fontified t)) . 533) (535 . 542) (#("nd" 0 2 (face font-lock-type-face fontified t)) . 535) 540 (838 . 839) (#("S" 0 1 (face font-lock-type-face fontified t)) . 838) (840 . 847) (#("nd" 0 2 (face font-lock-type-face fontified t)) . 840) 838) nil (25818 10143 820066 806000) 0 nil])
([nil nil ((639 . 640) (563 . 578) (#("Linka" 0 5 (fontified nil)) . 563) (563 . 568) (#("LinkableMessage" 0 15 (fontified nil)) . -563) (563 . 578) (#("Linka" 0 5 (face font-lock-type-face fontified t)) . -563) (undo-tree-id144 . -5) 568 (563 . 568) (#("s" 0 1 (fontified t)) . -563) (undo-tree-id145 . -1) (#("e" 0 1 (fontified t)) . -564) (undo-tree-id146 . -1) (#("r" 0 1 (fontified t)) . -565) (undo-tree-id147 . -1) (#(":" 0 1 (fontified t)) . -566) (undo-tree-id148 . -1) (#(":" 0 1 (fontified t)) . -567) (undo-tree-id149 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -568) (undo-tree-id150 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -569) (undo-tree-id151 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -570) (undo-tree-id152 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -571) (undo-tree-id153 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -572) (undo-tree-id154 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -573) (undo-tree-id155 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -574) (undo-tree-id156 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -575) (undo-tree-id157 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -576) (undo-tree-id158 . -1) 577 (608 . 616) (606 . 608) (#(" " 0 1 (fontified nil)) . 605) (undo-tree-id159 . -1) (606 . 607) (587 . 590) (581 . 587) (579 . 581) (#(" " 0 1 (fontified nil)) . 578) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (579 . 580) (557 . 558) (556 . 562) (554 . 556) (#("		" 0 2 (fontified nil)) . -610) (undo-tree-id162 . -2) (612 . 613) (608 . 612) (#(")" 0 1 (fontified t)) . -608) (undo-tree-id163 . 1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("
" 0 1 (fontified t)) . -609) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("	" 0 1 (fontified t)) . -610) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("	" 0 1 (fontified t)) . -611) (undo-tree-id170 . -1) 612 (609 . 612) (551 . 554) (549 . 551) (#("(" 0 1 (fontified t)) . -549) (undo-tree-id171 . -1) 550 (593 . 604) (#("C" 0 1 (face font-lock-type-face fontified t)) . -593) (undo-tree-id172 . -1) 594 (593 . 594) (#(":" 0 1 (fontified t)) . -593) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("G" 0 1 (face font-lock-type-face fontified t)) . -594) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -595) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -596) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -597) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -598) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -599) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -600) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#(">" 0 1 (fontified t)) . -601) (undo-tree-id194 . -1) 602) nil (25818 11030 798741 755000) 0 nil] [nil nil ((444 . 445) (423 . 444) (#("s" 0 1 (fontified t)) . -423) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("e" 0 1 (fontified t)) . -424) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("r" 0 1 (fontified t)) . -425) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#(":" 0 1 (fontified t)) . -426) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#(":" 0 1 (fontified t)) . -427) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -428) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -429) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -430) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -431) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -432) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -433) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -434) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -435) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -436) (undo-tree-id52 . -1) (undo-tree-id53 . -1) 437 (887 . 892) (884 . 887) (878 . 883)) ((#("guild" 0 5 (fontified nil)) . 878) (#(" =>" 0 2 (fontified nil) 2 3 (syntax-table (1) fontified nil)) . 884) (#("
				" 0 5 (fontified t)) . 887) (423 . 437) (#("Option<ser::ChannelId" 0 6 (face font-lock-type-face fontified nil) 6 7 (fontified nil) 7 10 (face font-lock-constant-face fontified nil) 10 12 (fontified nil) 12 21 (face font-lock-type-face fontified nil)) . 423) (undo-tree-id143 . -7) (#(">" 0 1 (fontified t)) . 444) (t 25818 10133 860631 552000)) (25818 10143 423507 977000) 0 nil])
([nil nil ((582 . 588) (#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -582) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("h" 0 1 (face font-lock-variable-name-face fontified t)) . -583) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -584) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -585) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -586) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -587) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -588) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("=" 0 1 (fontified t)) . -589) (undo-tree-id209 . -1) 590 (589 . 590) (t 25818 11030 804047 131000)) nil (25818 11044 655206 267000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -590) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("e" 0 1 (fontified t)) . -591) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (#("r" 0 1 (fontified t)) . -592) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#(":" 0 1 (fontified t)) . -593) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#(":" 0 1 (fontified t)) . -594) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("G" 0 1 (face font-lock-type-face fontified t)) . -595) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("u" 0 1 (face font-lock-type-face fontified nil)) . -596) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -597) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -598) (undo-tree-id117 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -599) (undo-tree-id118 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -600) (undo-tree-id119 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -601) (undo-tree-id120 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -602) (undo-tree-id121 . -1) 603 (#("O" 0 1 (face font-lock-type-face fontified t)) . -590) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -591) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -592) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -593) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -594) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -595) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("<" 0 1 (fontified t)) . -596) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) 597 (t 25818 10133 860631 552000)) ((590 . 597) (590 . 603)) (25818 10143 417748 807000) 0 nil])
([nil nil ((apply yas--snippet-revive 1094 1103 #s(yas--snippet nil nil #s(yas--exit 1103 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1103 nil) 2 nil nil nil nil)) (1094 . 1103) (#("mention()$0" 0 11 (fontified nil)) . 1094) (1094 . 1105) (#("ment" 0 4 (fontified nil)) . 1094) (1094 . 1098) (#("mention() (as Mentionable)" 0 26 (fontified nil)) . -1094) (1094 . 1120) (#("ment" 0 4 (fontified t)) . -1094) (undo-tree-id210 . -4) 1098 (1077 . 1098) (#("l" 0 1 (fontified t)) . -1077) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#("i" 0 1 (fontified t)) . -1078) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("n" 0 1 (fontified t)) . -1079) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#("k" 0 1 (fontified t)) . -1080) (undo-tree-id217 . -1) (undo-tree-id218 . -1) 1081 (1066 . 1070) 1077 (1074 . 1077) (1066 . 1074) (1061 . 1066) (1060 . 1061) (apply yas--snippet-revive 1027 1060 #s(yas--snippet nil (#s(yas--field 1 1052 1059 nil nil nil t #s(yas--exit 1060 nil))) #s(yas--exit 1060 nil) 1 nil #s(yas--field 1 1052 1059 nil nil nil t #s(yas--exit 1060 nil)) nil nil)) (1053 . 1059) (#("_" 0 1 (fontified nil)) . 1053) (1052 . 1053) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1052 1059 nil nil nil t #s(yas--exit 1060 nil))) #s(yas--exit 1060 nil) 1 nil #s(yas--field 1 1052 1059 nil nil nil t #s(yas--exit 1060 nil)) nil nil)) (1027 . 1054) (#("linkable_message_to_link(${1:_})$0" 0 34 (fontified nil)) . 1027) (1027 . 1061) (#("link" 0 4 (fontified nil)) . 1027) (1027 . 1031) (#("linkable_message_to_link(…)" 0 27 (fontified nil)) . -1027) (1027 . 1054) (#("link" 0 4 (fontified t)) . -1027) (undo-tree-id219 . -1) (undo-tree-id220 . -4) 1031 (1025 . 1031) (1024 . 1025) (1008 . 1012) 1020 (1017 . 1020) (#("n" 0 1 (fontified t)) . -1017) (undo-tree-id221 . -1) (undo-tree-id222 . -1) 1018 (1015 . 1018) (1008 . 1015) (1003 . 1008) (1002 . 1003) (1001 . 1003) (926 . 930) (#("S" 0 1 (face font-lock-type-face fontified t)) . -926) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -927) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -928) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -929) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("(" 0 1 (fontified t)) . -930) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("t" 0 1 (fontified t)) . -931) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (#("h" 0 1 (fontified t)) . -932) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (#("r" 0 1 (fontified t)) . -933) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("e" 0 1 (fontified t)) . -934) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (#("a" 0 1 (fontified t)) . -935) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#("d" 0 1 (fontified t)) . -936) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#(")" 0 1 (fontified t)) . -937) (undo-tree-id245 . -1) (undo-tree-id246 . -1) 938 (924 . 938) (917 . 918) (#(" " 0 1 (fontified t)) . -917) (undo-tree-id247 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -918) (undo-tree-id248 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -919) (undo-tree-id249 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -920) (undo-tree-id250 . -1) 921 (918 . 921) (#(" " 0 1 (face font-lock-string-face fontified t)) . -995) (undo-tree-id251 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -996) (undo-tree-id252 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -997) (undo-tree-id253 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -998) (undo-tree-id254 . -1) 999 (996 . 999) (987 . 996) (966 . 987) (945 . 966) (941 . 945) (934 . 941) (929 . 934) (#(" " 0 1 (fontified t)) . -929) (undo-tree-id255 . -1) 930 (929 . 930) (926 . 929) (924 . 925) (#("
" 0 1 (fontified t)) . -924) (undo-tree-id256 . -1) (#("	" 0 1 (fontified t)) . -925) (undo-tree-id257 . -1) (#("	" 0 1 (fontified t)) . -926) (undo-tree-id258 . -1) (#("	" 0 1 (fontified t)) . -927) (undo-tree-id259 . -1) 928 (921 . 924) (900 . 921) (#("	" 0 1 (fontified nil)) . -904) (undo-tree-id260 . -1) (905 . 906) (900 . 905) (898 . 900) (#("(" 0 1 (fontified t)) . -898) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#("m" 0 1 (fontified t)) . -899) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("e" 0 1 (fontified t)) . -900) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (#("s" 0 1 (fontified t)) . -901) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (#("s" 0 1 (fontified t)) . -902) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (#("a" 0 1 (fontified t)) . -903) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (#("g" 0 1 (fontified t)) . -904) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (#("e" 0 1 (fontified t)) . -905) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (#("," 0 1 (fontified nil)) . -906) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#(" " 0 1 (fontified nil)) . -907) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (#("c" 0 1 (fontified nil)) . -908) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("h" 0 1 (fontified t)) . -909) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (#("a" 0 1 (fontified t)) . -910) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#("n" 0 1 (fontified t)) . -911) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (#("n" 0 1 (fontified t)) . -912) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (#("e" 0 1 (fontified t)) . -913) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (#("l" 0 1 (fontified t)) . -914) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#("," 0 1 (fontified t)) . -915) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#(" " 0 1 (fontified t)) . -916) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (#(")" 0 1 (fontified t)) . -917) (undo-tree-id318 . -1) 918 (918 . 919) (#("
" 0 1 (fontified t)) . -918) (undo-tree-id319 . -1) 919 (t 25818 11044 660711 467000)) nil (25818 11320 10071 130000) 0 nil])
nil
([nil nil ((881 . 882) (835 . 838) (833 . 835) (828 . 833) (#("," 0 1 (fontified t)) . -1104) (undo-tree-id320 . -1) 1105 (1104 . 1105) (t 25818 11320 23988 839000)) nil (25818 11331 343530 47000) 0 nil])
([nil nil ((#("#[derive(Debug, Clone)]
" 0 23 (face font-lock-preprocessor-face fontified t) 23 24 (fontified t)) . 647) (undo-tree-id321 . -21) (undo-tree-id322 . -23) (undo-tree-id323 . -21) (undo-tree-id324 . -21) (undo-tree-id325 . -21) (undo-tree-id326 . -21) (undo-tree-id327 . -21) (undo-tree-id328 . -21) (undo-tree-id329 . -21) (undo-tree-id330 . -21) (undo-tree-id331 . -21) (undo-tree-id332 . -21) (undo-tree-id333 . -21) (undo-tree-id334 . -21) (undo-tree-id335 . -21) (undo-tree-id336 . -21) (undo-tree-id337 . -24) 668 (t 25818 11331 347319 548000)) nil (25818 11349 960004 191000) 0 nil])
([nil nil ((1039 . 1040) (#("," 0 1 (fontified t)) . -1091) (undo-tree-id338 . -1) 1092 (1091 . 1092) (t 25818 11349 973981 852000)) nil (25818 11369 489884 472000) 0 nil])
([nil nil ((741 . 747) (#("Res" 0 3 (fontified nil)) . 741) (741 . 744) (#("Result" 0 6 (fontified nil)) . -741) (741 . 747) (#("Res" 0 3 (face font-lock-type-face fontified t)) . -741) (undo-tree-id339 . -3) (undo-tree-id340 . -3) 744 (736 . 744) (#("S" 0 1 (face font-lock-type-face fontified t)) . -736) (undo-tree-id341 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -737) (undo-tree-id342 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -738) (undo-tree-id343 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -739) (undo-tree-id344 . -1) 740 (t 25818 11369 503977 220000)) nil (25818 11387 581220 869000) 0 nil])
([nil nil ((1399 . 1404) (1378 . 1399) (1370 . 1378) (1361 . 1370) (1344 . 1361) (1322 . 1327) 1339 (#(")" 0 1 (fontified t)) . -1317) (undo-tree-id345 . -1) 1318 (1339 . 1340) (1337 . 1339) (1330 . 1337) (1323 . 1330) (#("m" 0 1 (fontified t)) . -1323) (undo-tree-id346 . -1) 1324 (1323 . 1324) (1319 . 1323) (1318 . 1319) (apply yas--snippet-revive 1283 1317 #s(yas--snippet nil (#s(yas--field 1 1308 1316 nil nil nil t #s(yas--exit 1317 nil))) #s(yas--exit 1317 nil) 4 nil #s(yas--field 1 1308 1316 nil nil nil t #s(yas--exit 1317 nil)) nil nil)) (1308 . 1309) (1309 . 1315) (#("_" 0 1 (fontified nil)) . 1309) (1308 . 1309) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1308 1316 nil nil nil t #s(yas--exit 1317 nil))) #s(yas--exit 1317 nil) 4 nil #s(yas--field 1 1308 1316 nil nil nil t #s(yas--exit 1317 nil)) nil nil)) (1283 . 1310) (#("linkable_message_to_link(${1:_})$0" 0 34 (fontified nil)) . 1283) (1283 . 1317) (#("linkable_message_" 0 17 (fontified nil)) . 1283) (1283 . 1300) (#("linkable_message_to_link(…)" 0 27 (fontified nil)) . -1283) (1283 . 1310) (#("linkable_message_" 0 17 (fontified t)) . -1283) (undo-tree-id347 . -17) 1300 (1299 . 1300) (1298 . 1299) (1298 . 1299) (1291 . 1298) (1285 . 1291) (#("k" 0 1 (fontified t)) . -1285) (undo-tree-id348 . -1) (#("n" 0 1 (fontified t)) . -1286) (undo-tree-id349 . -1) 1287 (1268 . 1287) (1259 . 1268) (1246 . 1259) (1225 . 1246) (1219 . 1225) (#("p" 0 1 (face font-lock-string-face fontified t)) . -1219) (undo-tree-id350 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1220) (undo-tree-id351 . -1) 1221 (1218 . 1221) (1197 . 1218) (1176 . 1197) (1171 . 1176) (1168 . 1171) (apply yas--snippet-revive 1110 1168 #s(yas--snippet nil (#s(yas--field 1 1136 1136 nil nil nil nil #s(yas--field 2 1144 1144 nil nil nil nil #s(yas--field 3 1152 1166 nil nil nil t #s(yas--exit 1168 nil)))) #s(yas--field 2 1144 1144 nil nil nil nil #s(yas--field 3 1152 1166 nil nil nil t #s(yas--exit 1168 nil))) #s(yas--field 3 1152 1166 nil nil nil t #s(yas--exit 1168 nil))) #s(yas--exit 1168 nil) 3 nil #s(yas--field 3 1152 1166 nil nil nil t #s(yas--exit 1168 nil)) nil nil)) (1152 . 1166) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1136 1136 nil nil nil nil #s(yas--field 2 1144 1144 nil nil nil nil #s(yas--field 3 1152 1166 nil nil nil t #s(yas--exit 1168 nil)))) #s(yas--field 2 1144 1144 nil nil nil nil #s(yas--field 3 1152 1166 nil nil nil t #s(yas--exit 1168 nil))) #s(yas--field 3 1152 1166 nil nil nil t #s(yas--exit 1168 nil))) #s(yas--exit 1168 nil) 3 nil #s(yas--field 3 1152 1166 nil nil nil t #s(yas--exit 1168 nil)) nil nil)) (1110 . 1154) (#("ReplicateMessage { message$1, target$2, thread$3 }$0" 0 52 (fontified nil)) . 1110) (1110 . 1162) (#("Repl" 0 4 (fontified nil)) . 1110) (1110 . 1114) (#("ReplicateMessage {…}" 0 20 (fontified nil)) . -1110) (1110 . 1130) (#("Repl" 0 4 (face font-lock-type-face fontified t)) . -1110) (undo-tree-id352 . -4) 1114 (1104 . 1114) (1100 . 1104) (1099 . 1100) (t 25818 11387 630639 536000)) nil (25818 11481 334995 303000) 0 nil])
([nil nil ((#("let guild_segment = guildid
		.as_ref()
		.map(|g| g as &dyn Display)
		.unwrap_or(&\"@me\" as &dyn Display);
	format!(\"https://discord.com/channels/{}/{}/{}\", guild_segment, channelid, messageid)
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 17 (face font-lock-variable-name-face fontified t) 17 53 (fontified t) 53 55 (face font-lock-keyword-face fontified t) 55 56 (fontified t) 56 57 (face rust-ampersand-face fontified t) 57 60 (face font-lock-keyword-face fontified t) 60 61 (fontified t) 61 68 (face font-lock-type-face fontified t) 68 84 (fontified t) 84 85 (face font-lock-string-face fontified t) 85 88 (face font-lock-string-face fontified t) 88 89 (face font-lock-string-face fontified t) 89 90 (fontified t) 90 92 (face font-lock-keyword-face fontified t) 92 93 (fontified t) 93 94 (face rust-ampersand-face fontified t) 94 97 (face font-lock-keyword-face fontified t) 97 98 (fontified t) 98 105 (face font-lock-type-face fontified t) 105 109 (fontified t) 109 116 (face rust-builtin-formatting-macro fontified t) 116 117 (fontified t) 117 118 (face font-lock-string-face fontified t) 118 123 (face font-lock-string-face fontified t) 123 124 (face font-lock-string-face fontified t) 124 126 (face font-lock-string-face fontified t) 126 147 (face font-lock-string-face fontified t) 147 149 (face rust-string-interpolation fontified t) 149 150 (face font-lock-string-face fontified t) 150 152 (face rust-string-interpolation fontified t) 152 153 (face font-lock-string-face fontified t) 153 155 (face rust-string-interpolation fontified t) 155 156 (face font-lock-string-face fontified t) 156 195 (fontified t)) . 1506) (undo-tree-id359 . -194) (undo-tree-id360 . -194) (undo-tree-id361 . -194) (undo-tree-id362 . -194) (undo-tree-id363 . -108) (undo-tree-id364 . -194) (undo-tree-id365 . -195) 1700 (t 25818 11481 350616 313000)) nil (25818 11702 552412 205000) 0 nil])
([nil nil ((apply yas--snippet-revive 1516 1542 #s(yas--snippet nil (#s(yas--field 1 1521 1531 nil nil nil nil #s(yas--field 2 1533 1541 nil nil nil nil #s(yas--exit 1542 nil))) #s(yas--field 2 1533 1541 nil nil nil nil #s(yas--exit 1542 nil))) #s(yas--exit 1542 nil) 5 nil #s(yas--field 2 1533 1541 nil nil nil nil #s(yas--exit 1542 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1521 1531 nil nil nil nil #s(yas--field 2 1533 1541 nil nil nil nil #s(yas--exit 1542 nil))) #s(yas--field 2 1533 1541 nil nil nil nil #s(yas--exit 1542 nil))) #s(yas--exit 1542 nil) 5 nil #s(yas--field 2 1533 1541 nil nil nil nil #s(yas--exit 1542 nil)) nil nil)) (1516 . 1542) (#("link(${1:channel_id}, ${2:guild_id})$0" 0 38 (fontified nil)) . 1516) (1516 . 1554) (#("link(…)" 0 7 (fontified nil)) . -1516) (1516 . 1523) (1506 . 1516) (1504 . 1506) (#("	" 0 1 (fontified t)) . -1505) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) 1507) nil (25818 11702 551921 483000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 1528) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (t 25818 11702 563890 909000)) nil (25818 11711 670378 301000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 1537) (undo-tree-id366 . -1) (undo-tree-id367 . -1)) nil (25818 11711 670368 21000) 0 nil])
([nil nil ((2132 . 2138) (t 25818 11711 673888 395000)) nil (25818 11757 800691 964000) 0 nil])
([nil nil ((apply yas--snippet-revive 2164 2193 #s(yas--snippet nil nil #s(yas--exit 2193 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2193 nil) 6 nil nil nil nil)) (2164 . 2193) (#("CreatingWebhookForReplication$0" 0 31 (fontified nil)) . 2164) (2164 . 2195) (#("CreatingWebhookForReplication" 0 29 (fontified nil)) . -2164) (2164 . 2193) (2162 . 2164) (2139 . 2162) (#("Repli" 0 5 (fontified nil)) . 2139) (2139 . 2144) (#("ReplicationErrorContext" 0 23 (fontified nil)) . -2139) (2139 . 2162) (#("Repli" 0 5 (face font-lock-type-face fontified t)) . -2139) (undo-tree-id370 . -5) 2144 (2139 . 2144) (#("W" 0 1 (face font-lock-type-face fontified t)) . -2139) (undo-tree-id371 . -1) 2140 (2139 . 2140) (#("C" 0 1 (face font-lock-type-face fontified t)) . -2139) (undo-tree-id372 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2140) (undo-tree-id373 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -2141) (undo-tree-id374 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -2142) (undo-tree-id375 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2143) (undo-tree-id376 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -2144) (undo-tree-id377 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2145) (undo-tree-id378 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -2146) (undo-tree-id379 . -1) (#("W" 0 1 (face font-lock-type-face fontified t)) . -2147) (undo-tree-id380 . -1) 2148 (2139 . 2148) (#("F" 0 1 (face font-lock-type-face fontified t)) . -2139) (undo-tree-id381 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -2140) (undo-tree-id382 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -2141) (undo-tree-id383 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -2142) (undo-tree-id384 . -1) 2143 (2139 . 2143) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -2139) (undo-tree-id385 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -2140) (undo-tree-id386 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -2141) (undo-tree-id387 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -2142) (undo-tree-id388 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -2143) (undo-tree-id389 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -2144) (undo-tree-id390 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -2145) (undo-tree-id391 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -2146) (undo-tree-id392 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -2147) (undo-tree-id393 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -2148) (undo-tree-id394 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -2149) (undo-tree-id395 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -2150) (undo-tree-id396 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -2151) (undo-tree-id397 . -1) 2152 (#("e" 0 1 (face font-lock-string-face fontified t)) . -2152) (undo-tree-id398 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -2153) (undo-tree-id399 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -2154) (undo-tree-id400 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -2155) (undo-tree-id401 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -2156) (undo-tree-id402 . -1) (#("w" 0 1 (face font-lock-string-face fontified nil)) . -2157) (undo-tree-id403 . -1) (#("e" 0 1 (face font-lock-string-face fontified nil)) . -2158) (undo-tree-id404 . -1) (#("b" 0 1 (face font-lock-string-face fontified t)) . -2159) (undo-tree-id405 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -2160) (undo-tree-id406 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -2161) (undo-tree-id407 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -2162) (undo-tree-id408 . -1) (#("k" 0 1 (face font-lock-string-face fontified t)) . -2163) (undo-tree-id409 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -2164) (undo-tree-id410 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -2165) (undo-tree-id411 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -2166) (undo-tree-id412 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -2167) (undo-tree-id413 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -2168) (undo-tree-id414 . -1) 2169 (#("r" 0 1 (face font-lock-string-face fontified t)) . -2169) (undo-tree-id415 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -2170) (undo-tree-id416 . -1) (#("p" 0 1 (face font-lock-string-face fontified t)) . -2171) (undo-tree-id417 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -2172) (undo-tree-id418 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -2173) (undo-tree-id419 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -2174) (undo-tree-id420 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -2175) (undo-tree-id421 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -2176) (undo-tree-id422 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -2177) (undo-tree-id423 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -2178) (undo-tree-id424 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -2179) (undo-tree-id425 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -2180) (undo-tree-id426 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -2181) (undo-tree-id427 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -2182) (undo-tree-id428 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -2183) (undo-tree-id429 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -2184) (undo-tree-id430 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -2185) (undo-tree-id431 . -1) (#("g" 0 1 (face font-lock-string-face fontified nil)) . -2186) (undo-tree-id432 . -1) (#("e" 0 1 (face font-lock-string-face fontified nil)) . -2187) (undo-tree-id433 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -2188) (undo-tree-id434 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -2189) (undo-tree-id435 . -1) 2190) nil (25818 11757 800665 161000) 0 nil])
([nil nil ((#("use std::fmt::Display;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 9 (fontified t) 9 12 (face font-lock-constant-face fontified t) 12 14 (fontified t) 14 21 (face font-lock-type-face fontified t) 21 23 (fontified t)) . 32) (undo-tree-id436 . -22) (undo-tree-id437 . -21) (undo-tree-id438 . -21) (undo-tree-id439 . -21) (undo-tree-id440 . -21) (undo-tree-id441 . -21) (undo-tree-id442 . -21) (undo-tree-id443 . -21) (undo-tree-id444 . -23) 53 (t 25818 11757 807204 706000)) nil (25818 11781 180232 391000) 0 nil])
([nil nil ((282 . 287) (#("Err" 0 3 (fontified nil)) . 282) (282 . 285) (#("Error" 0 5 (fontified nil)) . -282) (282 . 287) (#("Err" 0 3 (face font-lock-type-face fontified t)) . -282) (undo-tree-id445 . -3) (undo-tree-id446 . -3) 285 (280 . 285) (264 . 280) (#("Contex" 0 6 (fontified nil)) . 264) (264 . 270) (#("Contextualizable" 0 16 (fontified nil)) . -264) (264 . 280) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -264) (undo-tree-id447 . -6) (undo-tree-id448 . -6) 270 (268 . 270) (262 . 268) (262 . 263) (255 . 255) (255 . 256) (t 25818 11781 193831 446000)) nil (25818 11795 326807 552000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -214) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -215) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -216) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -217) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -218) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (#("," 0 1 (fontified t)) . -219) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (#(" " 0 1 (fontified t)) . -220) (undo-tree-id468 . -1) (undo-tree-id469 . -1) 221 (t 25818 11795 340474 591000)) nil (25818 11807 259529 515000) 0 nil])
([nil nil ((2896 . 2897) (2890 . 2896) (#("(" 0 1 (fontified t)) . -2890) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (#(")" 0 1 (fontified t)) . -2891) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) 2892 (2049 . 2057) (2028 . 2049) (2026 . 2028) (2838 . 2845) (#("chan" 0 4 (fontified nil)) . 2838) (2838 . 2842) (#("channel" 0 7 (fontified nil)) . -2838) (2838 . 2845) (#("chan" 0 4 (fontified t)) . -2838) (undo-tree-id476 . -4) (undo-tree-id477 . -4) 2842 (2838 . 2842) (#("(" 0 1 (fontified t)) . -2838) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (#(")" 0 1 (fontified t)) . -2839) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (#("r" 0 1 (fontified t)) . -2840) (undo-tree-id482 . -1) (undo-tree-id483 . -1) 2841 (2840 . 2841) (2823 . 2824) (2815 . 2823) (#("guild" 0 5 (fontified nil)) . 2815) (2815 . 2820) (#("guild_id" 0 8 (fontified nil)) . -2815) (2815 . 2823) (#("guild" 0 5 (fontified t)) . -2815) (undo-tree-id484 . -5) (undo-tree-id485 . -5) 2820 (2817 . 2820) (#("l" 0 1 (fontified t)) . -2817) (undo-tree-id486 . -1) (undo-tree-id487 . -1) 2818 (2813 . 2818) (2803 . 2813) (#("channel" 0 7 (fontified nil)) . 2803) (2803 . 2810) (#("channel_id" 0 10 (fontified nil)) . -2803) (2803 . 2813) (#("channel" 0 7 (fontified t)) . -2803) (undo-tree-id488 . -7) (undo-tree-id489 . -7) 2810 (2798 . 2810) (#("(" 0 1 (fontified t)) . -2798) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (#(")" 0 1 (fontified t)) . -2799) (undo-tree-id492 . -1) 2800 (2833 . 2836) (#(" " 0 1 (fontified nil)) . 2832) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (2833 . 2834) (2818 . 2822) (#(" " 0 1 (fontified nil)) . 2817) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (2818 . 2819) (2802 . 2806) (#(" " 0 1 (fontified nil)) . 2801) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (2802 . 2803) (2785 . 2789) (#(" " 0 1 (fontified nil)) . 2784) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (2785 . 2786) (apply yas--snippet-revive 2766 2822 #s(yas--snippet nil (#s(yas--field 1 2794 2796 nil nil nil nil #s(yas--field 2 2806 2808 nil nil nil nil #s(yas--field 3 2818 2820 nil nil nil nil #s(yas--exit 2822 nil)))) #s(yas--field 2 2806 2808 nil nil nil nil #s(yas--field 3 2818 2820 nil nil nil nil #s(yas--exit 2822 nil))) #s(yas--field 3 2818 2820 nil nil nil nil #s(yas--exit 2822 nil))) #s(yas--exit 2822 nil) 8 nil #s(yas--field 1 2794 2796 nil nil nil nil #s(yas--field 2 2806 2808 nil nil nil nil #s(yas--field 3 2818 2820 nil nil nil nil #s(yas--exit 2822 nil)))) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2794 2796 nil nil nil nil #s(yas--field 2 2806 2808 nil nil nil nil #s(yas--field 3 2818 2820 nil nil nil nil #s(yas--exit 2822 nil)))) #s(yas--field 2 2806 2808 nil nil nil nil #s(yas--field 3 2818 2820 nil nil nil nil #s(yas--exit 2822 nil))) #s(yas--field 3 2818 2820 nil nil nil nil #s(yas--exit 2822 nil))) #s(yas--exit 2822 nil) 8 nil #s(yas--field 1 2794 2796 nil nil nil nil #s(yas--field 2 2806 2808 nil nil nil nil #s(yas--field 3 2818 2820 nil nil nil nil #s(yas--exit 2822 nil)))) nil nil)) (2766 . 2822) (#("ReplicateMessage { message: ${1:()}, target: ${2:()}, thread: ${3:()} }$0" 0 73 (fontified nil)) . 2766) (2766 . 2839) (#("ReplicateMessage {…}" 0 20 (fontified nil)) . -2766) (2766 . 2786) (2764 . 2766) (2741 . 2764) (#("Replica" 0 7 (fontified nil)) . 2741) (2741 . 2748) (#("ReplicationErrorContext" 0 23 (fontified nil)) . -2741) (2741 . 2764) (#("Replica" 0 7 (face font-lock-type-face fontified t)) . -2741) (undo-tree-id501 . -7) 2748 (2741 . 2748) (#("c" 0 1 (fontified t)) . -2741) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (#("o" 0 1 (fontified t)) . -2742) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (#("n" 0 1 (fontified t)) . -2743) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (#("t" 0 1 (fontified t)) . -2744) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (#("e" 0 1 (fontified t)) . -2745) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (#("x" 0 1 (fontified t)) . -2746) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (#("t" 0 1 (fontified t)) . -2747) (undo-tree-id514 . -1) 2748 (2722 . 2726) (apply yas--snippet-revive 2723 2745 #s(yas--snippet nil (#s(yas--field 1 2737 2744 nil nil nil nil #s(yas--exit 2745 nil))) #s(yas--exit 2745 nil) 7 nil #s(yas--field 1 2737 2744 nil nil nil nil #s(yas--exit 2745 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2737 2744 nil nil nil nil #s(yas--exit 2745 nil))) #s(yas--exit 2745 nil) 7 nil #s(yas--field 1 2737 2744 nil nil nil nil #s(yas--exit 2745 nil)) nil nil)) (2723 . 2745) (#("contextualize(${1:context})$0" 0 29 (fontified nil)) . 2723) (2723 . 2752) (#("contextualize(…) (as Contextualizable)" 0 38 (fontified nil)) . -2723) (2723 . 2761) (2721 . 2723) (#(")
			.with_contex(|| format!(\"error sending message {id} in channel {channel_id} in guild {guild_id:?}\"))?;" 0 1 (fontified t) 1 2 (fontified t) 2 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 21 (fontified t) 21 28 (face rust-builtin-formatting-macro fontified t) 28 29 (fontified t) 29 49 (face font-lock-string-face fontified t) 49 52 (face font-lock-string-face fontified t) 52 54 (face rust-string-interpolation fontified t) 54 56 (face rust-string-interpolation fontified t) 56 58 (face font-lock-string-face fontified t) 58 68 (face font-lock-string-face fontified t) 68 80 (face rust-string-interpolation fontified t) 80 90 (face font-lock-string-face fontified t) 90 102 (face rust-string-interpolation fontified t) 102 103 (face font-lock-string-face fontified t) 103 105 (fontified t) 105 106 (face rust-question-mark fontified t) 106 107 (fontified t)) . 2721) (undo-tree-id515 . -107) (#("t" 0 1 (fontified t)) . -2738) (undo-tree-id516 . -1) (undo-tree-id517 . -1) 2739 (2698 . 2701) (2699 . 2719) (#("			" 0 3 (fontified t)) . -2698) (2701 . 2701) (2701 . 2702) (2697 . 2701) (t 25818 11807 263788 455000)) nil (25818 12041 102534 85000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -2888) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (#(" " 0 1 (fontified t)) . -2889) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (#("t" 0 1 (fontified t)) . -2890) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (#("h" 0 1 (fontified t)) . -2891) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (#("r" 0 1 (fontified t)) . -2892) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (#("e" 0 1 (fontified t)) . -2893) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (#("a" 0 1 (fontified t)) . -2894) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (#("d" 0 1 (fontified t)) . -2895) (undo-tree-id541 . -1) (undo-tree-id542 . -1) 2896 (t 25818 12041 153462 578000)) nil (25818 12045 472504 366000) 0 nil])
([nil nil ((2895 . 2897) (t 25818 12045 486790 728000)) nil (25818 12053 412638 694000) 0 nil])
([nil nil ((2832 . 2833) (2830 . 2835) (t 25818 12053 580114 452000)) nil (25818 12073 595401 650000) 0 nil])
([nil nil ((2852 . 2854) (#("g" 0 1 (fontified t)) . -2852) (undo-tree-id543 . -1) (#("u" 0 1 (fontified t)) . -2853) (undo-tree-id544 . -1) (#("i" 0 1 (fontified t)) . -2854) (undo-tree-id545 . -1) (#("l" 0 1 (fontified t)) . -2855) (undo-tree-id546 . -1) (#("d" 0 1 (fontified t)) . -2856) (undo-tree-id547 . -1) (#("_" 0 1 (fontified t)) . -2857) (undo-tree-id548 . -1) (#("i" 0 1 (fontified t)) . -2858) (undo-tree-id549 . -1) (#("d" 0 1 (fontified t)) . -2859) (undo-tree-id550 . -1) 2860) nil (25818 12073 595392 655000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . 213) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (t 25818 12073 640091 21000)) nil (25818 12105 798454 999000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . 225) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1)) nil (25818 12105 798445 364000) 0 nil])
([nil nil ((3381 . 3382) (apply yas--snippet-revive 3344 3381 #s(yas--snippet nil (#s(yas--field 1 3361 3380 nil nil nil t #s(yas--exit 3381 nil))) #s(yas--exit 3381 nil) 9 nil #s(yas--field 1 3361 3380 nil nil nil t #s(yas--exit 3381 nil)) nil nil)) (apply yas--snippet-revive 3367 3380 #s(yas--snippet nil nil #s(yas--exit 3380 nil) 10 nil nil #s(yas--field 1 3361 3380 nil nil nil t #s(yas--exit 3381 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3380 nil) 10 nil nil #s(yas--field 1 3361 3380 nil nil nil t #s(yas--exit 3381 nil)) nil)) (3367 . 3380) (#("empty_parse()$0" 0 15 (fontified nil)) . 3367) (undo-tree-id559 . -15) (3367 . 3382) (#("empty_parse()" 0 13 (fontified nil)) . -3367) (undo-tree-id560 . -13) (3367 . 3380) (3362 . 3367) (#("f" 0 1 (fontified nil)) . 3362) (undo-tree-id561 . -1) (3361 . 3362) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3361 3380 nil nil nil t #s(yas--exit 3381 nil))) #s(yas--exit 3381 nil) 9 nil #s(yas--field 1 3361 3380 nil nil nil t #s(yas--exit 3381 nil)) nil nil)) (3344 . 3363) (#("allowed_mentions(${1:f})$0" 0 26 (fontified nil)) . 3344) (3344 . 3370) (#("allowed_mentions(…)" 0 19 (fontified nil)) . -3344) (3344 . 3363) (3342 . 3344) (3341 . 3342) (#("	" 0 1 (fontified nil)) . 3340) (undo-tree-id562 . -1) (3339 . 3342) (t 25818 12105 850054 510000)) nil (25818 12186 221732 655000) 0 nil])
([nil nil ((#("::webhook" 0 2 (fontified t) 2 9 (face font-lock-constant-face fontified t)) . -290) 299 (301 . 311) (337 . 355) (1702 . 1702) (1702 . 1717) (#("WebhookExec" 0 11 (fontified nil)) . 1702) (1702 . 1713) (#("WebhookExecutor (use crate::webhook::WebhookExecutor)" 0 53 (fontified nil)) . -1702) (1702 . 1755) (#("WebhookExec" 0 11 (face font-lock-type-face fontified t)) . -1702) (undo-tree-id563 . -11) 1713 (1702 . 1713) (#("P" 0 1 (face font-lock-type-face fontified t)) . -1702) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1703) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1704) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1705) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1706) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1707) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1708) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (#("n" 0 1 (face font-lock-type-face fontified nil)) . -1709) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (#("t" 0 1 (face font-lock-type-face fontified nil)) . -1710) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1711) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -1712) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1713) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (#("<" 0 1 (fontified t)) . -1714) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (#("'" 0 1 (fontified t)) . -1715) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (#("_" 0 1 (face font-lock-variable-name-face fontified t)) . -1716) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (#(">" 0 1 (fontified t)) . -1717) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) 1718 (t 25818 12186 233302 207000)) nil (25818 12223 640723 641000) 0 nil])
([nil nil ((1736 . 1738) (1715 . 1736) (1713 . 1715) (t 25818 12223 653264 763000)) nil (25818 12310 146719 46000) 0 nil])
([nil nil ((1740 . 1746) (#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -1740) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -1741) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (#("x" 0 1 (face font-lock-variable-name-face fontified t)) . -1742) (undo-tree-id622 . -1) 1743 (t 25818 12310 159850 24000)) nil (25818 12328 542130 997000) 0 nil])
([nil nil ((#("	let whexec = &ctx.data().webhexec;
" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 11 (fontified t face font-lock-variable-name-face) 11 14 (fontified t) 14 15 (fontified t face rust-ampersand-face) 15 35 (fontified t) 35 36 (fontified t)) . 2269) (undo-tree-id612 . -15) (undo-tree-id613 . -35) (undo-tree-id614 . -15) (undo-tree-id615 . -15) 2284) nil (25818 12328 542117 24000) 0 nil])
([nil nil ((1721 . 1726)) nil (25818 12328 542094 223000) 0 nil])
([nil nil ((2159 . 2163) (#("http" 0 4 (fontified nil)) . 2159) (2159 . 2163) (#("http" 0 4 (fontified t)) . -2159) (undo-tree-id623 . -4) (undo-tree-id624 . -4) (undo-tree-id625 . -4) 2163 (2159 . 2163) (#("c" 0 1 (fontified t)) . -2159) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (#("t" 0 1 (fontified t)) . -2160) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (#("x" 0 1 (fontified t)) . -2161) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) 2162 (t 25818 12328 549833 565000)) nil (25818 12334 913388 604000) 0 nil])
([nil nil ((2159 . 2160) (t 25818 12334 919827 927000)) nil (25818 12346 159442 129000) 0 nil])
([nil nil ((#("use crate::PoiseContext;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 11 (fontified t) 11 23 (face font-lock-type-face fontified t) 23 25 (fontified t)) . 202) (undo-tree-id635 . -24) (undo-tree-id636 . -24) (undo-tree-id637 . -23) (undo-tree-id638 . -23) (undo-tree-id639 . -24) (undo-tree-id640 . -24) (undo-tree-id641 . -23) (undo-tree-id642 . -23) (undo-tree-id643 . -23) (undo-tree-id644 . -23) (undo-tree-id645 . -23) (undo-tree-id646 . -23) (undo-tree-id647 . -23) (undo-tree-id648 . -23) (undo-tree-id649 . -23) (undo-tree-id650 . -23) (undo-tree-id651 . -23) (undo-tree-id652 . -23) (undo-tree-id653 . -23) (undo-tree-id654 . -23) (undo-tree-id655 . -23) (undo-tree-id656 . -25) 225 (t 25818 12346 166484 719000)) nil (25818 12389 798110 518000) 0 nil])
([nil nil ((#("use anyhow::Context;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-constant-face fontified t) 10 12 (fontified t) 12 19 (face font-lock-type-face fontified t) 19 21 (fontified t)) . 33) (undo-tree-id657 . -11) (undo-tree-id658 . -20) (undo-tree-id659 . -11) (undo-tree-id660 . -11) (undo-tree-id661 . -11) (undo-tree-id662 . -11) (undo-tree-id663 . -11) (undo-tree-id664 . -11) (undo-tree-id665 . -21) 44 (t 25818 12389 813113 981000)) nil (25818 12395 958033 953000) 0 nil])
([nil current ((509 . 512) (#("e" 0 1 (face font-lock-type-face fontified t)) . 509) 505 (852 . 855) (#("e" 0 1 (face font-lock-type-face fontified t)) . 852) 844 (1086 . 1089) (#("e" 0 1 (face font-lock-type-face fontified t)) . 1086) 1078 (2774 . 2777) (#("e" 0 1 (face font-lock-type-face fontified t)) . 2774) 2766 (t 25818 12396 6442 120000)) nil (25818 21313 918257 360000) 0 nil])
nil
