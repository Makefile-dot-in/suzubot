(undo-tree-save-format-version . 1)
"64e3c836f1770446a321a4e8f59fbe88f7cf514c"
[nil nil nil nil (25827 52084 381250 231000) 0 nil]
([nil nil ((#("	" 0 1 (fontified nil)) . -191) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (192 . 193) (190 . 192) (188 . 190) (168 . 170) 170 (91 . 92) (#("
" 0 1 (fontified t)) . -91) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("	" 0 1 (fontified t)) . -92) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 93 (#(" " 0 1 (fontified nil)) . 85) (undo-tree-id10 . -1) (86 . 87) (#("
" 0 1 (fontified t)) . -84) (undo-tree-id11 . -1) 85 (#("
" 0 1 (fontified t)) . -75) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("	" 0 1 (fontified t)) . -76) (undo-tree-id14 . -1) 77 (84 . 86) (#(" " 0 1 (fontified t)) . -84) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("i" 0 1 (fontified t)) . -85) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("m" 0 1 (fontified t)) . -86) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("p" 0 1 (fontified t)) . -87) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -88) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#(" " 0 1 (fontified t)) . -89) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -90) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -91) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -92) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -93) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -94) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -95) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("(" 0 1 (fontified t)) . -96) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) 97 (#("&" 0 1 (fontified t)) . -97) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("d" 0 1 (fontified t)) . -98) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("y" 0 1 (fontified t)) . -99) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -100) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#(" " 0 1 (fontified t)) . -101) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -102) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -103) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("(" 0 1 (fontified t)) . -104) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#("&" 0 1 (fontified t)) . -105) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (#("m" 0 1 (fontified t)) . -106) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("u" 0 1 (fontified t)) . -107) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -108) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#(" " 0 1 (fontified t)) . -109) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -110) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -111) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -112) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -113) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -114) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -115) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -116) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -117) (undo-tree-id121 . -1) (undo-tree-id122 . -1) 118 (#("m" 0 1 (face font-lock-type-face fontified t)) . -118) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("p" 0 1 (face font-lock-type-face fontified nil)) . -119) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (#("o" 0 1 (face font-lock-type-face fontified nil)) . -120) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -121) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -122) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -123) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -124) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -125) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (#(")" 0 1 (fontified t)) . -126) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (#(" " 0 1 (fontified t)) . -127) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("-" 0 1 (fontified t)) . -128) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -129) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#(" " 0 1 (fontified t)) . -130) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#("&" 0 1 (fontified t)) . -131) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (#("m" 0 1 (fontified t)) . -132) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (#("u" 0 1 (fontified t)) . -133) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -134) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (#(" " 0 1 (fontified t)) . -135) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -136) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -137) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -138) (undo-tree-id163 . -1) (undo-tree-id164 . -1) 139 (#("a" 0 1 (face font-lock-type-face fontified t)) . -139) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -140) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -141) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -142) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -143) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -144) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -145) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -146) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -147) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -148) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -149) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -150) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -151) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#(")" 0 1 (fontified t)) . -152) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (#(" " 0 1 (fontified t)) . -153) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (#("-" 0 1 (fontified t)) . -154) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -155) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (#(" " 0 1 (fontified nil)) . -156) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -157) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -158) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -159) (undo-tree-id205 . -1) (undo-tree-id206 . -1) 160 (243 . 244) (240 . 243) (#("Fut" 0 3 (fontified nil)) . 240) (240 . 243) (#("Fut" 0 3 (face font-lock-type-face fontified t)) . -240) (undo-tree-id207 . -3) 243 (237 . 243) (235 . 237) (219 . 235) (#("Crea" 0 4 (fontified nil)) . 219) (219 . 223) (#("CreateComponents" 0 16 (fontified nil)) . -219) (219 . 235) (#("Crea" 0 4 (face font-lock-type-face fontified t)) . -219) (undo-tree-id208 . -4) 223 (209 . 223) (193 . 209) (#("Crea" 0 4 (fontified nil)) . 193) (193 . 197) (#("CreateComponents" 0 16 (fontified nil)) . -193) (193 . 209) (#("Crea" 0 4 (face font-lock-type-face fontified t)) . -193) (undo-tree-id209 . -4) 197 (180 . 197) (179 . 180) (173 . 179) (#("FnOnce" 0 6 (fontified nil)) . 173) (173 . 179) (#("FnOnce" 0 6 (face font-lock-type-face fontified t)) . -173) (undo-tree-id210 . -6) 179 (173 . 179) (172 . 173) (162 . 163) (#("
" 0 1 (fontified t)) . -162) (undo-tree-id211 . -1) (undo-tree-id212 . -1) 163 (#(" " 0 1 (fontified nil)) . 162) (undo-tree-id213 . -1) (163 . 164) (170 . 172) (168 . 170) (67 . 70) (166 . 167) (#(" " 0 1 (fontified nil)) . 165) (undo-tree-id214 . -1) (166 . 167) (#("," 0 1 (fontified t)) . -157) (undo-tree-id215 . -1) (#("
" 0 1 (fontified t)) . -158) (undo-tree-id216 . -1) (#("	" 0 1 (fontified t)) . -159) (undo-tree-id217 . -1) (#("y" 0 1 (fontified t)) . -160) (undo-tree-id218 . -1) (#("o" 0 1 (fontified t)) . -161) (undo-tree-id219 . -1) (#("u" 0 1 (fontified t)) . -162) (undo-tree-id220 . -1) (#("r" 0 1 (fontified t)) . -163) (undo-tree-id221 . -1) (#("_" 0 1 (fontified t)) . -164) (undo-tree-id222 . -1) (#("m" 0 1 (fontified t)) . -165) (undo-tree-id223 . -1) (#("o" 0 1 (fontified t)) . -166) (undo-tree-id224 . -1) (#("m" 0 1 (fontified t)) . -167) (undo-tree-id225 . -1) 168 (160 . 168) (#("e" 0 1 (fontified t)) . -160) (undo-tree-id226 . -1) 161 (160 . 161) (#("o" 0 1 (fontified t)) . -160) (undo-tree-id227 . -1) 161 (160 . 161) (158 . 160) (154 . 158) (177 . 181) (#("Sen" 0 3 (fontified nil)) . 177) (177 . 180) (#("Send" 0 4 (fontified nil)) . -177) (177 . 181) (#("Sen" 0 3 (face font-lock-type-face fontified t)) . -177) (undo-tree-id228 . -3) 180 (162 . 180) (#("
" 0 1 (fontified t)) . -162) (undo-tree-id229 . -1) (#("	" 0 1 (fontified t)) . -163) (undo-tree-id230 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -164) (undo-tree-id231 . -1) (#(":" 0 1 (fontified t)) . -165) (undo-tree-id232 . -1) (#(" " 0 1 (fontified t)) . -166) (undo-tree-id233 . -1) 167 (164 . 167) (162 . 164) (156 . 162) (#("
" 0 1 (fontified t)) . -156) (undo-tree-id234 . -1) (#("	" 0 1 (fontified t)) . -157) (undo-tree-id235 . -1) (#("w" 0 1 (fontified t)) . -158) (undo-tree-id236 . -1) (#("h" 0 1 (fontified t)) . -159) (undo-tree-id237 . -1) (#("e" 0 1 (fontified t)) . -160) (undo-tree-id238 . -1) (#("r" 0 1 (fontified t)) . -161) (undo-tree-id239 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -162) (undo-tree-id240 . -1) (#(" " 0 1 (fontified t)) . -163) (undo-tree-id241 . -1) 164 (163 . 164) (apply yas--snippet-revive 158 163 #s(yas--snippet nil nil nil 71 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 71 nil nil nil nil)) (158 . 163) (#("where" 0 5 (fontified nil)) . 158) (158 . 163) (#("where" 0 5 (fontified nil)) . 158) (158 . 163) (#("where" 0 5 (face font-lock-keyword-face fontified t)) . -158) (undo-tree-id242 . -5) 163 (158 . 163) (156 . 158) (66 . 71) (148 . 149) (144 . 148) (#("	" 0 1 (fontified t)) . -145) (undo-tree-id243 . -1) 146 (144 . 146) (#(">" 0 1 (syntax-table (1) fontified t)) . -66) (undo-tree-id244 . -1) 67 (#("<" 0 1 (fontified t)) . -66) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -67) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (#(":" 0 1 (fontified t)) . -68) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (#(" " 0 1 (fontified t)) . -69) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -70) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -71) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("(" 0 1 (fontified t)) . -72) (undo-tree-id257 . -1) (undo-tree-id258 . -1) 73 (#("&" 0 1 (fontified t)) . -73) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("m" 0 1 (fontified t)) . -74) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (#("u" 0 1 (fontified t)) . -75) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -76) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#(" " 0 1 (fontified t)) . -77) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -78) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -79) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -80) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -81) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -82) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -83) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -84) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -85) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -86) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -87) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -88) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -89) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -90) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -91) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -92) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -93) (undo-tree-id299 . -1) (undo-tree-id300 . -1) 94 (78 . 94) (#("Create" 0 6 (fontified nil)) . 78) (78 . 84) (#("CreateComponents" 0 16 (fontified nil)) . -78) (78 . 94) (#("Create" 0 6 (face font-lock-type-face fontified t)) . -78) (undo-tree-id301 . -6) 84 (71 . 84) (#("j" 0 1 (face font-lock-type-face fontified t)) . -71) (undo-tree-id302 . -1) 72 (70 . 72) (68 . 70) (66 . 69) (67 . 69) (126 . 142) (#("Cre" 0 3 (fontified nil)) . 126) (126 . 129) (#("CreateComponents" 0 16 (fontified nil)) . -126) (126 . 142) (#("Cre" 0 3 (face font-lock-type-face fontified t)) . -126) (undo-tree-id303 . -3) 129 (117 . 129) (#("O" 0 1 (face font-lock-type-face fontified t)) . -94) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -95) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -96) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -97) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("\\" 0 1 (fontified t)) . -98) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (#("\\" 0 1 (fontified t)) . -99) (undo-tree-id317 . -1) 100 (98 . 100) (121 . 122) (#(" " 0 1 (fontified t)) . -121) (undo-tree-id318 . -1) 122 (120 . 122) (1 . 47) (3 . 5) (56 . 56) (56 . 72) (#("CreateComp" 0 10 (fontified nil)) . 56) (56 . 66) (#("CreateComponents (use poise::serenity_prelude::CreateComponents)" 0 64 (fontified nil)) . -56) (56 . 120) (#("CreateComp" 0 10 (face font-lock-type-face fontified t)) . -56) (undo-tree-id319 . -10) 66 (61 . 66) (56 . 61) (51 . 56) (44 . 51) (39 . 44) (19 . 39) (#("b" 0 1 (fontified t)) . -19) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (#("u" 0 1 (fontified t)) . -20) (undo-tree-id322 . -1) (#("i" 0 1 (fontified t)) . -21) (undo-tree-id323 . -1) (#("l" 0 1 (fontified t)) . -22) (undo-tree-id324 . -1) (#("d" 0 1 (fontified t)) . -23) (undo-tree-id325 . -1) (#("e" 0 1 (fontified t)) . -24) (undo-tree-id326 . -1) (#("r" 0 1 (fontified t)) . -25) (undo-tree-id327 . -1) (#(":" 0 1 (fontified t)) . -26) (undo-tree-id328 . -1) (#(" " 0 1 (fontified t)) . -27) (undo-tree-id329 . -1) 28 (20 . 28) (#("c" 0 1 (fontified t)) . -20) (undo-tree-id330 . -1) (undo-tree-id331 . -1) 21 (19 . 21) (#("a" 0 1 (fontified t)) . -1) (undo-tree-id332 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -2) (undo-tree-id333 . -1) (#("y" 0 1 (fontified t)) . -3) (undo-tree-id334 . -1) (#("n" 0 1 (fontified t)) . -4) (undo-tree-id335 . -1) (#("c" 0 1 (face font-lock-keyword-face fontified t)) . -5) (undo-tree-id336 . -1) (#(" " 0 1 (fontified t)) . -6) (undo-tree-id337 . -1) (#("f" 0 1 (fontified t)) . -7) (undo-tree-id338 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -8) (undo-tree-id339 . -1) (#(" " 0 1 (fontified t)) . -9) (undo-tree-id340 . -1) 10 (1 . 10) (#("u" 0 1 (fontified t)) . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (#("s" 0 1 (fontified t)) . -2) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -3) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (#(" " 0 1 (fontified t)) . -4) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (#("p" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -6) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -7) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -8) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -9) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (#(":" 0 1 (fontified t)) . -10) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (#(":" 0 1 (fontified t)) . -11) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (#("s" 0 1 (fontified t)) . -12) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (#("e" 0 1 (fontified t)) . -13) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (#("r" 0 1 (fontified t)) . -14) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#("e" 0 1 (fontified t)) . -15) (undo-tree-id369 . -1) (undo-tree-id370 . -1) 16 (1 . 16) (1 . 3) (10 . 17) (7 . 10) (#("d" 0 1 (fontified t)) . -7) (undo-tree-id371 . -1) 8 (1 . 8) (t 25827 49865 405012 17000)) nil (25827 52084 381167 773000) 0 nil])
([nil nil ((192 . 193)) nil (25827 52084 380217 300000) 0 nil])
([nil nil ((124 . 126) (47 . 75) (apply yas--snippet-revive 89 97 #s(yas--snippet nil nil #s(yas--exit 96 nil) 72 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 96 nil) 72 nil nil nil nil)) (89 . 97) (#("Result<$0>" 0 10 (fontified nil)) . 89) (89 . 99) (#("Res" 0 3 (fontified nil)) . 89) (89 . 92) (#("Result<…> (use crate::errors::Result)" 0 37 (fontified nil)) . -89) (89 . 126) (#("Res" 0 3 (face font-lock-type-face fontified t)) . -89) (undo-tree-id372 . -3) (undo-tree-id373 . -3) 92 (89 . 92) (85 . 89) (t 25827 52084 387363 156000)) nil (25827 52108 67947 930000) 0 nil])
([nil nil ((234 . 240) (232 . 234) (t 25827 52108 70612 606000)) nil (25827 52113 167297 261000) 0 nil])
([nil nil ((41 . 44) (#("ser" 0 3 (fontified nil)) . 41) (41 . 44) (#("ser" 0 3 (face font-lock-constant-face fontified t)) . -41) (undo-tree-id374 . -3) (undo-tree-id375 . -3) (undo-tree-id376 . -3) (undo-tree-id377 . -3) (undo-tree-id378 . -3) (undo-tree-id379 . -3) (undo-tree-id380 . -3) (undo-tree-id381 . -3) (undo-tree-id382 . -3) 44 (41 . 44) (#("p" 0 1 (face font-lock-constant-face fontified t)) . -41) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -42) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) 43 (#("i" 0 1 (face font-lock-constant-face fontified t)) . -43) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -44) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -45) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (#(":" 0 1 (fontified t)) . -46) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (#(":" 0 1 (fontified t)) . -47) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (#("s" 0 1 (face font-lock-constant-face fontified nil)) . -48) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (#("e" 0 1 (face font-lock-constant-face fontified nil)) . -49) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -50) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -51) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -52) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -53) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -54) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (#("y" 0 1 (face font-lock-constant-face fontified t)) . -55) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (#("_" 0 1 (face font-lock-constant-face fontified t)) . -56) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (#("p" 0 1 (face font-lock-constant-face fontified t)) . -57) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -58) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -59) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (#("l" 0 1 (face font-lock-constant-face fontified t)) . -60) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (#("u" 0 1 (face font-lock-constant-face fontified t)) . -61) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -62) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -63) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) 64 (28 . 36) (12 . 28) (#("sere" 0 4 (fontified nil)) . 12) (12 . 16) (#("serenity_prelude" 0 16 (fontified nil)) . -12) (12 . 28) (#("sere" 0 4 (fontified t)) . -12) (undo-tree-id700 . -4) 16 (1 . 16) (1 . 2) (232 . 234) (t 25827 52113 187261 149000)) nil (25827 52239 271778 699000) 0 nil])
([nil nil ((98 . 99) (#("(" 0 1 (fontified t)) . -98) (undo-tree-id701 . -1) (#("c" 0 1 (fontified t)) . -99) (undo-tree-id702 . -1) (#("r" 0 1 (fontified t)) . -100) (undo-tree-id703 . -1) (#("a" 0 1 (fontified t)) . -101) (undo-tree-id704 . -1) 102 (95 . 102) (256 . 257) (249 . 256) (239 . 249) (t 25827 52239 273481 133000)) nil (25827 52872 520121 485000) 0 nil])
([nil nil ((273 . 275) (#(" " 0 1 (fontified t)) . -273) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (#(" " 0 1 (fontified t)) . -274) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) 275 (#("e" 0 1 (fontified t)) . -275) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) 276 (275 . 276) (272 . 275) 271 (t 25827 52872 524569 453000)) nil (25827 53218 507698 948000) 0 nil])
([nil nil ((280 . 282) (#("<" 0 1 (fontified t)) . -280) (undo-tree-id946 . -1) (#("@" 0 1 (fontified t)) . -281) (undo-tree-id947 . -1) (#(">" 0 1 (fontified t)) . -282) (undo-tree-id948 . -1) 283 (280 . 283) (#("	  " 0 3 (fontified t)) . -280) (undo-tree-id949 . -3) 283 (268 . 269) (255 . 267) (164 . 165) (#("&" 0 1 (face rust-ampersand-face fontified t)) . -164) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (#("d" 0 1 (fontified t)) . -165) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (#("y" 0 1 (face font-lock-keyword-face fontified t)) . -166) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (#("n" 0 1 (fontified t)) . -167) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (#(" " 0 1 (fontified t)) . -168) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -169) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) 170 (t 25827 52935 894344 721000)) nil (25827 53501 861393 259000) 0 nil] [nil nil ((115 . 126) (#("u" 0 1 (face font-lock-type-face fontified t)) . -115) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -116) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -117) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (#("B" 0 1 (face font-lock-type-face fontified t)) . -118) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -119) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -120) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -121) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -122) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -123) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -124) (undo-tree-id779 . -1) (undo-tree-id780 . -1) 125 (#(" " 0 1 (fontified t)) . -125) (undo-tree-id781 . -1) (undo-tree-id782 . -1) 126 (116 . 126) (#("d" 0 1 (face font-lock-type-face fontified t)) . -116) (undo-tree-id783 . -1) (undo-tree-id784 . -1) 117 (110 . 117) (94 . 110) (#("e" 0 1 (fontified t)) . -94) (undo-tree-id785 . -1) (#("u" 0 1 (fontified t)) . -95) (undo-tree-id786 . -1) 96 (93 . 96) (#("
" 0 1 (fontified t)) . -93) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (#("
" 0 1 (fontified t)) . -94) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) 95 (#("pub async fn ask_yn<F, Fut>(sender: F) -> Result<()>
where F: FnOnce(&dyn Fn(&mut CreateComponents) -> &mut CreateComponents) -> Fut,
	  Fut: Future<Output = Result<>> + Send {
	
	Ok(())
}
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 19 (face font-lock-function-name-face fontified t) 19 20 (fontified t) 20 21 (face font-lock-type-face fontified t) 21 23 (fontified t) 23 26 (face font-lock-type-face fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 34 (face font-lock-variable-name-face fontified t) 34 36 (fontified t) 36 37 (face font-lock-type-face fontified t) 37 40 (fontified t) 40 41 (syntax-table (1) fontified t) 41 42 (fontified t) 42 48 (face font-lock-type-face fontified t) 48 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t) 53 58 (face font-lock-keyword-face fontified t) 58 59 (fontified t) 59 60 (face font-lock-variable-name-face fontified t) 60 62 (fontified t) 62 68 (face font-lock-type-face fontified t) 68 69 (fontified t) 69 70 (face rust-ampersand-face fontified t) 70 73 (face font-lock-keyword-face fontified t) 73 74 (fontified t) 74 76 (face font-lock-type-face fontified t) 76 77 (fontified t) 77 78 (face rust-ampersand-face fontified t) 78 81 (face font-lock-keyword-face fontified t) 81 82 (fontified t) 82 98 (face font-lock-type-face fontified t) 98 101 (fontified t) 101 102 (fontified t syntax-table (1)) 102 103 (fontified t) 103 104 (face rust-ampersand-face fontified t) 104 107 (face font-lock-keyword-face fontified t) 107 108 (fontified t) 108 124 (face font-lock-type-face fontified t) 124 127 (fontified t) 127 128 (fontified t syntax-table (1)) 128 129 (fontified t) 129 132 (face font-lock-type-face fontified t) 132 133 (fontified t) 133 134 (fontified t) 134 137 (fontified t) 137 140 (face font-lock-variable-name-face fontified t) 140 142 (fontified t) 142 148 (face font-lock-type-face fontified t) 148 149 (fontified t) 149 155 (face font-lock-type-face fontified t) 155 158 (fontified t) 158 164 (face font-lock-type-face fontified t) 164 167 (fontified t) 167 170 (fontified t) 170 174 (face font-lock-type-face fontified t) 174 175 (fontified t) 175 177 (fontified t) 177 179 (fontified t) 179 180 (fontified t) 180 182 (face font-lock-type-face fontified t) 182 186 (fontified t) 186 187 (fontified t) 187 188 (fontified t) 188 189 (fontified t)) . 95) (undo-tree-id825 . -189) (undo-tree-id826 . -13) (undo-tree-id827 . -13) (undo-tree-id828 . -35) (undo-tree-id829 . -19) (undo-tree-id830 . -35) (undo-tree-id831 . -19) (undo-tree-id832 . 11) (undo-tree-id833 . -189) (undo-tree-id834 . -189) (undo-tree-id835 . -148) (undo-tree-id836 . -189) (undo-tree-id837 . -189) (undo-tree-id838 . -189) (undo-tree-id839 . -189) (undo-tree-id840 . 185) (undo-tree-id841 . -189) (undo-tree-id842 . -189) (#("	  " 0 3 (fontified t)) . -273) (undo-tree-id843 . -3) 276 (261 . 262) (268 . 269) (#("
" 0 1 (fontified t)) . -268) (undo-tree-id844 . -1) (#("	" 0 1 (fontified t)) . -269) (undo-tree-id845 . -1) (#("	" 0 1 (fontified t)) . -270) (undo-tree-id846 . -1) (#("	" 0 1 (fontified t)) . -271) (undo-tree-id847 . -1) (#("	" 0 1 (fontified t)) . -272) (undo-tree-id848 . -1) (#(" " 0 1 (fontified t)) . -273) (undo-tree-id849 . -1) (#(" " 0 1 (fontified t)) . -274) (undo-tree-id850 . -1) 275 (269 . 275) (#(" " 0 1 (fontified nil)) . 268) (undo-tree-id851 . -1) (269 . 270) (t 25827 52935 894344 721000)) ((#("
" 0 1 (fontified nil)) . 269) (268 . 269) (#("				  " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 269) (268 . 275) (#(" " 0 1 (fontified nil)) . 268) (#(">" 0 1 (fontified nil)) . 261) (273 . 276) (93 . 284) (#("peu" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 93) (undo-tree-id852 . -1) (undo-tree-id853 . -3) (undo-tree-id854 . -1) (94 . 96) (#("ub struct Simple" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 9 (face font-lock-keyword-face fontified nil) 9 10 (fontified nil) 10 16 (face font-lock-type-face fontified nil)) . 94) (undo-tree-id855 . -16) (undo-tree-id856 . -16) (undo-tree-id857 . -16) (#("Compoud" 0 5 (face font-lock-type-face fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face fontified nil)) . 110) (undo-tree-id858 . -7) (undo-tree-id859 . -7) (undo-tree-id860 . -5) (116 . 117) (#("ndBuilder " 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (face font-lock-type-face fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (face font-lock-type-face fontified nil) 8 9 (face font-lock-type-face fontified nil) 9 10 (fontified nil)) . 116) (undo-tree-id861 . -10) (undo-tree-id862 . -10) (115 . 126) (#("nentBuilder" 0 11 (face font-lock-type-face fontified t)) . 115) (undo-tree-id863 . -11) (undo-tree-id864 . -10) (undo-tree-id865 . -10)) (25827 53218 498218 630000) 0 nil])
([nil nil ((nil rear-nonsticky nil 288 . 289) (nil fontified nil 282 . 289) (282 . 289) 281) nil (25827 53501 861372 102000) 0 nil])
nil
([nil nil ((322 . 323) (apply yas--snippet-revive 295 322 #s(yas--snippet nil (#s(yas--field 1 313 321 nil nil nil t #s(yas--exit 322 nil))) #s(yas--exit 322 nil) 75 nil #s(yas--field 1 313 321 nil nil nil t #s(yas--exit 322 nil)) nil nil)) (320 . 321) (#("." 0 1 (fontified t)) . -320) (undo-tree-id866 . -1) (undo-tree-id867 . -1) 321 (314 . 321) (#("f" 0 1 (fontified nil)) . 314) (313 . 314) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 313 321 nil nil nil t #s(yas--exit 322 nil))) #s(yas--exit 322 nil) 75 nil #s(yas--field 1 313 321 nil nil nil t #s(yas--exit 322 nil)) nil nil)) (295 . 315) (#("create_action_row(${1:f})$0" 0 27 (fontified nil)) . 295) (295 . 322) (#("create_action_row(…)" 0 20 (fontified nil)) . -295) (295 . 315) (294 . 295) (#("." 0 1 (fontified t)) . -294) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (#("a" 0 1 (fontified t)) . -295) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (#("d" 0 1 (fontified t)) . -296) (undo-tree-id872 . -1) (undo-tree-id873 . -1) 297 (#("d" 0 1 (fontified t)) . -297) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (#("_" 0 1 (fontified t)) . -298) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (#("a" 0 1 (fontified t)) . -299) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (#("c" 0 1 (fontified t)) . -300) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (#("t" 0 1 (fontified t)) . -301) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (#("i" 0 1 (fontified t)) . -302) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (#("o" 0 1 (fontified t)) . -303) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (#("n" 0 1 (fontified t)) . -304) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (#("_" 0 1 (fontified t)) . -305) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (#("r" 0 1 (fontified nil)) . -306) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (#("o" 0 1 (fontified nil)) . -307) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (#("w" 0 1 (fontified t)) . -308) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (#("(" 0 1 (fontified t)) . -309) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (#("|" 0 1 (fontified t)) . -310) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (#("a" 0 1 (fontified t)) . -311) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (#("r" 0 1 (fontified t)) . -312) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (#("|" 0 1 (fontified t)) . -313) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (#(" " 0 1 (fontified t)) . -314) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (#("a" 0 1 (fontified t)) . -315) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (#("r" 0 1 (fontified t)) . -316) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (#(")" 0 1 (fontified t)) . -317) (undo-tree-id914 . -1) 318 (apply yas--snippet-revive 295 318 #s(yas--snippet nil (#s(yas--field 1 310 317 nil nil nil t #s(yas--exit 318 nil))) #s(yas--exit 318 nil) 74 nil #s(yas--field 1 310 317 nil nil nil t #s(yas--exit 318 nil)) nil nil)) (#("." 0 1 (fontified t)) . -317) (undo-tree-id915 . -1) (undo-tree-id916 . -1) 318 (315 . 318) (#("a" 0 1 (fontified t)) . -315) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (#("r" 0 1 (fontified t)) . -316) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (#("." 0 1 (fontified t)) . -317) (undo-tree-id921 . -1) (undo-tree-id922 . -1) 318 (311 . 318) (#("row" 0 3 (fontified nil)) . 311) (310 . 311) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 310 317 nil nil nil t #s(yas--exit 318 nil))) #s(yas--exit 318 nil) 74 nil #s(yas--field 1 310 317 nil nil nil t #s(yas--exit 318 nil)) nil nil)) (295 . 314) (#("add_action_row(${1:row})$0" 0 26 (fontified nil)) . 295) (295 . 321) (#("add_action_row(…)" 0 17 (fontified nil)) . -295) (295 . 312) (286 . 295) (280 . 286) (#("sender" 0 6 (fontified nil)) . 280) (280 . 286) (#("sender" 0 6 (fontified t)) . -280) (undo-tree-id923 . -6) 286 (280 . 286) (#("<" 0 1 (fontified t)) . -280) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (#("@" 0 1 (fontified t)) . -281) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (#("褒" 0 1 (fontified t)) . -282) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (#("め" 0 1 (fontified t)) . -283) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (#("て" 0 1 (fontified t)) . -284) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (#("つ" 0 1 (fontified t)) . -285) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (#("か" 0 1 (fontified t)) . -286) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (#("わ" 0 1 (fontified t)) . -287) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (#("す" 0 1 (rear-nonsticky t fontified t)) . -288) (undo-tree-id944 . -1) (#(">" 0 1 (fontified t)) . -289) (undo-tree-id945 . -1) 290 (289 . 290)) nil (25827 53501 861358 107000) 0 nil])
([nil nil ((164 . 169) (172 . 179) (168 . 172) (164 . 168) (#("f" 0 1 (fontified t)) . -164) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -165) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (#("(" 0 1 (fontified t)) . -166) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (#("&" 0 1 (fontified t)) . -167) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (#("m" 0 1 (fontified t)) . -168) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (#("u" 0 1 (fontified t)) . -169) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -170) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (#(" " 0 1 (fontified t)) . -171) (undo-tree-id988 . -1) (undo-tree-id989 . -1) 172 (#("C" 0 1 (face font-lock-type-face fontified t)) . -172) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -173) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (#("e" 0 1 (face font-lock-type-face fontified nil)) . -174) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (#("a" 0 1 (face font-lock-type-face fontified nil)) . -175) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -176) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -177) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -178) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -179) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -180) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -181) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -182) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -183) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -184) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -185) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -186) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -187) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (#(")" 0 1 (fontified t)) . -188) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (#(" " 0 1 (fontified t)) . -189) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (#("-" 0 1 (fontified t)) . -190) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -191) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (#(" " 0 1 (fontified t)) . -192) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) 193 (#("&" 0 1 (fontified t)) . -193) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (#("m" 0 1 (fontified t)) . -194) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (#("u" 0 1 (fontified t)) . -195) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -196) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (#(" " 0 1 (fontified t)) . -197) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -198) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -199) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -200) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -201) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -202) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -203) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -204) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -205) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -206) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -207) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -208) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -209) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -210) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -211) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -212) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -213) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) 214 (apply yas--snippet-revive 321 342 #s(yas--snippet nil (#s(yas--field 1 335 341 nil nil nil t #s(yas--exit 342 nil))) #s(yas--exit 342 nil) 76 nil #s(yas--field 1 335 341 nil nil nil t #s(yas--exit 342 nil)) nil nil)) (336 . 341) (#("f" 0 1 (fontified nil)) . 336) (335 . 336) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 335 341 nil nil nil t #s(yas--exit 342 nil))) #s(yas--exit 342 nil) 76 nil #s(yas--field 1 335 341 nil nil nil t #s(yas--exit 342 nil)) nil nil)) (321 . 337) (#("create_button(${1:f})$0" 0 23 (fontified nil)) . 321) (321 . 344) (#("create_button(…)" 0 16 (fontified nil)) . -321) (321 . 337) (320 . 321) (#("." 0 1 (fontified t)) . -320) (undo-tree-id1074 . -1) 321 (t 25827 53501 862003 683000)) nil (25827 53606 633776 219000) 0 nil])
([nil nil ((#("	sender(|cc| cc.create_action_row(|ar| ar.create_button(|b| b.)))
" 0 1 (fontified t) 1 16 (fontified t) 16 42 (fontified t) 42 63 (fontified t) 63 65 (fontified t) 65 66 (fontified t)) . 249) (undo-tree-id1140 . -1) (undo-tree-id1141 . -65) (undo-tree-id1142 . -7) (undo-tree-id1143 . -15) 264 (t 25827 53606 648258 884000)) nil (25827 53744 814687 198000) 0 nil])
([nil nil ((87 . 88) (81 . 87) (#("Future" 0 6 (fontified nil)) . -81) (81 . 87) (64 . 81) (63 . 64) (250 . 256) (#("sender" 0 6 (fontified nil)) . 250) (250 . 256) (#("sender" 0 6 (fontified t)) . -250) (undo-tree-id1138 . -6) 256 (252 . 256) (#("n" 0 1 (fontified t)) . -252) (undo-tree-id1139 . -1) 253 (250 . 253) (248 . 250)) nil (25827 53744 814679 11000) 0 nil])
([nil nil ((#("use ser::CreateComponents;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 9 (fontified t) 9 25 (face font-lock-type-face fontified t) 25 27 (fontified t)) . 37) (undo-tree-id1133 . -26) (undo-tree-id1134 . -26) (undo-tree-id1135 . -26) (undo-tree-id1136 . -23) (undo-tree-id1137 . -26) 60) nil (25827 53744 814669 847000) 0 nil])
([nil nil ((#("	   " 0 4 (fontified t)) . -402) 407 (406 . 407) (400 . 406) (#(")" 0 1 (fontified t)) . -400) (undo-tree-id1075 . -1) 401 (400 . 401) (#("." 0 1 (fontified t)) . -400) (undo-tree-id1076 . -1) 401 (400 . 401) (357 . 364) (#("        " 0 5 (fontified t) 5 8 (fontified t)) . 357) 393 (apply yas--snippet-revive 378 393 #s(yas--snippet nil (#s(yas--field 1 388 392 nil nil nil t #s(yas--exit 393 nil))) #s(yas--exit 393 nil) 83 nil #s(yas--field 1 388 392 nil nil nil t #s(yas--exit 393 nil)) nil nil)) (389 . 392) (#("id" 0 2 (fontified nil)) . 389) (388 . 389) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 388 392 nil nil nil t #s(yas--exit 393 nil))) #s(yas--exit 393 nil) 83 nil #s(yas--field 1 388 392 nil nil nil t #s(yas--exit 393 nil)) nil nil)) (378 . 391) (#("custom_id(${1:id})$0" 0 20 (fontified nil)) . 378) (378 . 398) (#("custom_id(…)" 0 12 (fontified nil)) . -378) (378 . 390) (377 . 378) (apply yas--snippet-revive 366 377 #s(yas--snippet nil (#s(yas--field 1 372 376 nil nil nil t #s(yas--exit 377 nil))) #s(yas--exit 377 nil) 82 nil #s(yas--field 1 372 376 nil nil nil t #s(yas--exit 377 nil)) nil nil)) (373 . 376) (#("label" 0 5 (fontified nil)) . 373) (372 . 373) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 372 376 nil nil nil t #s(yas--exit 377 nil))) #s(yas--exit 377 nil) 82 nil #s(yas--field 1 372 376 nil nil nil t #s(yas--exit 377 nil)) nil nil)) (366 . 378) (#("label(${1:label})$0" 0 19 (fontified nil)) . 366) (366 . 385) (#("lab" 0 3 (fontified nil)) . 366) (366 . 369) (#("label(…)" 0 8 (fontified nil)) . -366) (366 . 374) (#("lab" 0 3 (fontified t)) . -366) (undo-tree-id1077 . -3) 369 (366 . 369) (357 . 362) (#("				" 0 4 (fontified t)) . 357) 364 (364 . 364) (364 . 365) (356 . 364) (apply yas--snippet-revive 340 356 #s(yas--snippet nil (#s(yas--field 1 350 355 nil nil nil t #s(yas--exit 356 nil))) #s(yas--exit 356 nil) 81 nil #s(yas--field 1 350 355 nil nil nil t #s(yas--exit 356 nil)) nil nil)) (354 . 355) (351 . 354) (#("id" 0 2 (fontified nil)) . 351) (350 . 351) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 350 355 nil nil nil t #s(yas--exit 356 nil))) #s(yas--exit 356 nil) 81 nil #s(yas--field 1 350 355 nil nil nil t #s(yas--exit 356 nil)) nil nil)) (340 . 353) (#("custom_id(${1:id})$0" 0 20 (fontified nil)) . 340) (340 . 360) (#("custom_id(…)" 0 12 (fontified nil)) . -340) (340 . 352) (339 . 340) (339 . 345) (319 . 325) (#(" " 0 1 (fontified nil)) . 318) (undo-tree-id1078 . -1) (319 . 320) (318 . 319) (332 . 333) (317 . 317) (317 . 318) (292 . 298) (275 . 281) (apply yas--snippet-revive 287 320 #s(yas--snippet nil (#s(yas--field 1 301 319 nil nil nil t #s(yas--exit 320 nil))) #s(yas--exit 320 nil) 79 nil #s(yas--field 1 301 319 nil nil nil t #s(yas--exit 320 nil)) nil nil)) (apply yas--snippet-revive 307 319 #s(yas--snippet nil (#s(yas--field 1 313 318 nil nil nil t #s(yas--exit 319 nil))) #s(yas--exit 319 nil) 80 nil #s(yas--field 1 313 318 nil nil nil t #s(yas--exit 319 nil)) #s(yas--field 1 301 319 nil nil nil t #s(yas--exit 320 nil)) nil)) (313 . 318) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -313) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (#("N" 0 1 (face font-lock-string-face fontified t)) . -314) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -315) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -316) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -317) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -318) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) 319 (314 . 319) (#("label" 0 5 (fontified nil)) . 314) (313 . 314) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 313 318 nil nil nil t #s(yas--exit 319 nil))) #s(yas--exit 319 nil) 80 nil #s(yas--field 1 313 318 nil nil nil t #s(yas--exit 319 nil)) #s(yas--field 1 301 319 nil nil nil t #s(yas--exit 320 nil)) nil)) (307 . 319) (#("label(${1:label})$0" 0 19 (fontified nil)) . 307) (307 . 326) (#("label(…)" 0 8 (fontified nil)) . -307) (307 . 315) (302 . 307) (#("f" 0 1 (fontified nil)) . 302) (301 . 302) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 301 319 nil nil nil t #s(yas--exit 320 nil))) #s(yas--exit 320 nil) 79 nil #s(yas--field 1 301 319 nil nil nil t #s(yas--exit 320 nil)) nil nil)) (287 . 303) (#("create_button(${1:f})$0" 0 23 (fontified nil)) . 287) (287 . 310) (#("create_button(…)" 0 16 (fontified nil)) . -287) (287 . 303) (286 . 287) (#("." 0 1 (fontified t)) . -286) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (#("a" 0 1 (fontified t)) . -287) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (#("d" 0 1 (fontified t)) . -288) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (#("d" 0 1 (fontified t)) . -289) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (#("_" 0 1 (fontified t)) . -290) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (#("b" 0 1 (fontified t)) . -291) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (#("u" 0 1 (fontified t)) . -292) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (#("t" 0 1 (fontified t)) . -293) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (#("t" 0 1 (fontified t)) . -294) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (#("o" 0 1 (fontified t)) . -295) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (#("n" 0 1 (fontified t)) . -296) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (#("(" 0 1 (fontified nil)) . -297) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (#("|" 0 1 (fontified nil)) . -298) (undo-tree-id1115 . -1) (#("b" 0 1 (fontified t)) . -299) (undo-tree-id1116 . -1) (#("|" 0 1 (fontified t)) . -300) (undo-tree-id1117 . -1) (#(")" 0 1 (fontified t)) . -301) (undo-tree-id1118 . -1) 302 (apply yas--snippet-revive 287 302 #s(yas--snippet nil (#s(yas--field 1 298 301 nil nil nil t #s(yas--exit 302 nil))) #s(yas--exit 302 nil) 78 nil #s(yas--field 1 298 301 nil nil nil t #s(yas--exit 302 nil)) nil nil)) (298 . 301) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -298) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (#("y" 0 1 (face font-lock-string-face fontified t)) . -299) (undo-tree-id1121 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -300) (undo-tree-id1122 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -301) (undo-tree-id1123 . -1) 302 (299 . 302) (#("button" 0 6 (fontified nil)) . 299) (298 . 299) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 298 301 nil nil nil t #s(yas--exit 302 nil))) #s(yas--exit 302 nil) 78 nil #s(yas--field 1 298 301 nil nil nil t #s(yas--exit 302 nil)) nil nil)) (287 . 305) (#("add_button(${1:button})$0" 0 25 (fontified nil)) . 287) (287 . 312) (#("add" 0 3 (fontified nil)) . 287) (287 . 290) (#("add_button(…)" 0 13 (fontified nil)) . -287) (287 . 300) (#("add" 0 3 (fontified t)) . -287) (undo-tree-id1124 . -3) 290 (287 . 290) (286 . 287) (#("
" 0 1 (fontified t)) . -286) (undo-tree-id1125 . -1) (#(" " 0 1 (fontified t)) . -287) (undo-tree-id1126 . -1) (#(" " 0 1 (fontified t)) . -288) (undo-tree-id1127 . -1) (#(" " 0 1 (fontified t)) . -289) (undo-tree-id1128 . -1) (#(" " 0 1 (fontified t)) . -290) (undo-tree-id1129 . -1) (#("." 0 1 (fontified t)) . -291) (undo-tree-id1130 . -1) 292 (287 . 288) (#("		" 0 2 (fontified t)) . 287) 292 (292 . 292) (292 . 293) (286 . 292) (apply yas--snippet-revive 277 286 #s(yas--snippet nil nil #s(yas--exit 286 nil) 77 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 286 nil) 77 nil nil nil nil)) (277 . 286) (#("default()$0" 0 11 (fontified nil)) . 277) (277 . 288) (#("def" 0 3 (fontified nil)) . 277) (277 . 280) (#("default() (as Default)" 0 22 (fontified nil)) . -277) (277 . 299) (#("def" 0 3 (fontified t)) . -277) (undo-tree-id1131 . -3) 280 (275 . 280) (260 . 275) (#("Cre" 0 3 (fontified nil)) . 260) (260 . 263) (#("CreateActionRow" 0 15 (fontified nil)) . -260) (260 . 275) (#("Cre" 0 3 (face font-lock-type-face fontified t)) . -260) (undo-tree-id1132 . -3) 263 (255 . 263) (254 . 255)) nil (25827 53744 814628 911000) 0 nil])
([nil nil ((403 . 404) (t 25827 53744 834390 321000)) nil (25827 53752 452517 418000) 0 nil])
([nil nil ((405 . 407) (402 . 405) (#("   " 0 3 (fontified t)) . -368) 399 (#("
" 0 1 (fontified t)) . -408) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (#("	" 0 1 (fontified t)) . -409) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) 410 (405 . 407) (#("
" 0 1 (fontified t)) . -405) (undo-tree-id1151 . -1) (undo-tree-id1152 . 1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (#("	" 0 1 (fontified t)) . -406) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) 407 (405 . 407) (#("   " 0 3 (fontified t)) . -402) (undo-tree-id1167 . -2) (undo-tree-id1168 . -2) (undo-tree-id1169 . -2) (undo-tree-id1170 . -2) (undo-tree-id1171 . -2) 406 (#("	" 0 1 (fontified t)) . -305) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (#("	" 0 1 (fontified t)) . -306) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (#(" " 0 1 (fontified t)) . -307) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (#(" " 0 1 (fontified t)) . -308) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (#(" " 0 1 (fontified t)) . -309) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) 310 (304 . 305) (301 . 303) 302 (301 . 302) (299 . 300) (#("
" 0 1 (fontified t)) . -288) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (#("	" 0 1 (fontified t)) . -289) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (#("	" 0 1 (fontified t)) . -290) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (#(" " 0 1 (fontified t)) . -291) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (#(" " 0 1 (fontified t)) . -292) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (#(" " 0 1 (fontified t)) . -293) (undo-tree-id1192 . -1) 294 (267 . 268) (412 . 413) (259 . 259) (259 . 267) (256 . 259) (401 . 402) (255 . 255) (255 . 256) (t 25827 53752 481027 578000)) nil (25827 53821 378414 721000) 0 nil])
([nil nil ((264 . 266) (262 . 264) (t 25827 53821 380763 439000)) nil (25827 53830 510146 957000) 0 nil])
([nil nil ((#("   " 0 3 (fontified t)) . -333) 337 (t 25827 53830 530728 470000)) nil (25827 53839 42786 188000) 0 nil])
([nil nil ((248 . 258) (#("
" 0 1 (fontified t)) . -413) (undo-tree-id1193 . -1) (#("	" 0 1 (fontified t)) . -414) (undo-tree-id1194 . -1) 415 (413 . 415) (t 25827 53839 180695 434000)) nil (25827 53858 945098 361000) 0 nil])
([nil nil ((423 . 428) (#("await" 0 5 (fontified nil)) . -423) (423 . 428) (422 . 423) (t 25827 53858 947286 689000)) nil (25827 53867 645122 57000) 0 nil])
([nil nil ((142 . 146) (#("bool" 0 4 (fontified nil)) . 142) (142 . 146) (#("bool" 0 4 (face font-lock-type-face fontified t)) . -142) (undo-tree-id1195 . -4) (undo-tree-id1196 . -4) 146 (142 . 146) (#("(" 0 1 (fontified t)) . -142) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (#(")" 0 1 (fontified t)) . -143) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) 144 (431 . 434) (#("msg" 0 3 (fontified nil)) . 431) (431 . 434) (#("msg" 0 3 (fontified t)) . -431) (undo-tree-id1203 . -3) 434 (431 . 434) (429 . 431) (t 25827 53867 660586 814000)) nil (25827 53886 52617 620000) 0 nil])
([nil nil ((172 . 174) (163 . 172) (142 . 163) (141 . 142) (apply yas--snippet-revive 458 502 #s(yas--snippet nil (#s(yas--field 1 486 501 nil nil nil nil #s(yas--exit 502 nil))) #s(yas--exit 502 nil) 85 nil #s(yas--field 1 486 501 nil nil nil nil #s(yas--exit 502 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 486 501 nil nil nil nil #s(yas--exit 502 nil))) #s(yas--exit 502 nil) 85 nil #s(yas--field 1 486 501 nil nil nil nil #s(yas--exit 502 nil)) nil nil)) (458 . 502) (#("await_component_interaction(${1:shard_messenger})$0" 0 51 (fontified nil)) . 458) (458 . 509) (#("await_component_interaction(…)" 0 30 (fontified nil)) . -458) (458 . 488) (455 . 458) (#("a" 0 1 (fontified t)) . -455) (undo-tree-id1308 . -1) (#("p" 0 1 (fontified t)) . -456) (undo-tree-id1309 . -1) (#("." 0 1 (fontified t)) . -457) (undo-tree-id1310 . -1) 458 (454 . 458) (452 . 454) (450 . 451) (#("
" 0 1 (fontified t)) . -451) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (#("	" 0 1 (fontified t)) . -452) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (#("m" 0 1 (fontified t)) . -453) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (#("s" 0 1 (fontified t)) . -454) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (#("g" 0 1 (fontified t)) . -455) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (#("." 0 1 (fontified t)) . -456) (undo-tree-id1326 . -1) 457 (456 . 457) (#("." 0 1 (fontified t)) . -456) (undo-tree-id1327 . -1) (#("a" 0 1 (fontified t)) . -457) (undo-tree-id1328 . -1) (#("w" 0 1 (fontified t)) . -458) (undo-tree-id1329 . -1) (#("a" 0 1 (fontified t)) . -459) (undo-tree-id1330 . -1) 460 (456 . 460) (#("." 0 1 (fontified t)) . -456) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (#("c" 0 1 (fontified t)) . -457) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) 458 (#("o" 0 1 (fontified t)) . -458) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (#("n" 0 1 (fontified t)) . -459) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (#("t" 0 1 (fontified t)) . -460) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (#("e" 0 1 (fontified t)) . -461) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (#("x" 0 1 (fontified t)) . -462) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (#("t" 0 1 (fontified t)) . -463) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (#("u" 0 1 (fontified nil)) . -464) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (#("a" 0 1 (fontified nil)) . -465) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (#("l" 0 1 (fontified t)) . -466) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (#("i" 0 1 (fontified t)) . -467) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (#("z" 0 1 (fontified t)) . -468) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (#("e" 0 1 (fontified t)) . -469) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (#("(" 0 1 (fontified t)) . -470) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (#("c" 0 1 (fontified t)) . -471) (undo-tree-id1376 . -1) (#("o" 0 1 (fontified t)) . -472) (undo-tree-id1377 . -1) (#("n" 0 1 (fontified t)) . -473) (undo-tree-id1378 . -1) (#("t" 0 1 (fontified t)) . -474) (undo-tree-id1379 . -1) (#("e" 0 1 (fontified t)) . -475) (undo-tree-id1380 . -1) (#("x" 0 1 (fontified t)) . -476) (undo-tree-id1381 . -1) (#("t" 0 1 (fontified t)) . -477) (undo-tree-id1382 . -1) (#(")" 0 1 (fontified t)) . -478) (undo-tree-id1383 . -1) 479 (apply yas--snippet-revive 457 479 #s(yas--snippet nil (#s(yas--field 1 471 478 nil nil nil nil #s(yas--exit 479 nil))) #s(yas--exit 479 nil) 84 nil #s(yas--field 1 471 478 nil nil nil nil #s(yas--exit 479 nil)) nil nil)) (#("::errors" 0 2 (fontified t) 2 8 (face font-lock-constant-face fontified t)) . -72) 80 (82 . 91) (87 . 96) (88 . 98) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 471 478 nil nil nil nil #s(yas--exit 479 nil))) #s(yas--exit 479 nil) 84 nil #s(yas--field 1 471 478 nil nil nil nil #s(yas--exit 479 nil)) nil nil)) (437 . 459) (#("contextualize(${1:context})$0" 0 29 (fontified nil)) . 437) (437 . 466) (#("contextualize(…) (use crate::errors::Contextualizable)" 0 54 (fontified nil)) . -437) (437 . 491) (436 . 437) (t 25827 53886 63850 75000)) nil (25827 54292 955393 608000) 0 nil])
([nil nil ((apply yas--snippet-revive 523 531 #s(yas--snippet nil nil #s(yas--exit 531 nil) 86 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 531 nil) 86 nil nil nil nil)) (523 . 531) (#("as_ref()$0" 0 10 (fontified nil)) . 523) (523 . 533) (#("as_ref() (as AsRef)" 0 19 (fontified nil)) . -523) (523 . 542) (519 . 523) (#("s" 0 1 (fontified t)) . -519) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (#("h" 0 1 (fontified t)) . -520) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (#("a" 0 1 (fontified t)) . -521) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (#("r" 0 1 (fontified t)) . -522) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (#("d" 0 1 (fontified t)) . -523) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (#("_" 0 1 (fontified t)) . -524) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (#("m" 0 1 (fontified t)) . -525) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (#("e" 0 1 (fontified t)) . -526) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (#("s" 0 1 (fontified nil)) . -527) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (#("s" 0 1 (fontified nil)) . -528) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (#("e" 0 1 (fontified t)) . -529) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (#("n" 0 1 (fontified t)) . -530) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (#("g" 0 1 (fontified t)) . -531) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (#("e" 0 1 (fontified t)) . -532) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (#("r" 0 1 (fontified t)) . -533) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (#("." 0 1 (fontified t)) . -534) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) 535 (534 . 535)) nil (25827 54292 955270 979000) 0 nil])
([nil nil ((206 . 207) (195 . 202) (#("O" 0 1 (face font-lock-type-face fontified t)) . -188) (undo-tree-id1245 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -189) (undo-tree-id1246 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -190) (undo-tree-id1247 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -191) (undo-tree-id1248 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -192) (undo-tree-id1249 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -193) (undo-tree-id1250 . -1) 194 (188 . 194) (550 . 553) (#(";" 0 1 (fontified t)) . -550) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (#("
" 0 1 (fontified t)) . -551) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (#("	" 0 1 (fontified t)) . -552) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) 553 (#("	" 0 1 (fontified t)) . -553) (undo-tree-id1257 . -1) 554 (504 . 505) (549 . 550) (496 . 496) (496 . 504) (495 . 496) (487 . 495) (532 . 535) (#("." 0 1 (fontified t)) . -532) (undo-tree-id1258 . -1) 533 (532 . 533) (apply yas--snippet-revive 523 531 #s(yas--snippet nil nil #s(yas--exit 531 nil) 87 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 531 nil) 87 nil nil nil nil)) (523 . 531) (#("as_ref()$0" 0 10 (fontified nil)) . 523) (523 . 533) (#("as_ref() (as AsRef)" 0 19 (fontified nil)) . -523) (523 . 542) (522 . 523) (#("." 0 1 (fontified t)) . -522) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (#("a" 0 1 (fontified t)) . -523) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -524) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (#("_" 0 1 (fontified t)) . -525) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (#("r" 0 1 (fontified t)) . -526) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (#("e" 0 1 (fontified t)) . -527) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (#("f" 0 1 (fontified t)) . -528) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (#("(" 0 1 (fontified t)) . -529) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (#(")" 0 1 (fontified t)) . -530) (undo-tree-id1275 . -1) 531) nil (25827 54292 954975 851000) 0 nil])
([nil nil ((680 . 682) (679 . 680) (670 . 673) (671 . 676) (#("await" 0 5 (fontified nil)) . -671) (671 . 676) (669 . 671) (#(")" 0 1 (fontified t)) . -669) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (#("
" 0 1 (fontified t)) . -670) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (#("	" 0 1 (fontified t)) . -671) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (#("	" 0 1 (fontified t)) . -672) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) 673 (670 . 673) (#("." 0 1 (fontified t)) . -670) (undo-tree-id1217 . -1) 671 (670 . 671) (#("
" 0 1 (fontified t)) . -670) (undo-tree-id1218 . -1) (#("." 0 1 (fontified t)) . -671) (undo-tree-id1219 . -1) 672 (#("		" 0 2 (fontified t)) . -671) (673 . 673) (673 . 674) (670 . 673) (apply yas--snippet-revive 651 669 #s(yas--snippet nil (#s(yas--field 1 661 668 nil nil nil t #s(yas--exit 669 nil))) #s(yas--exit 669 nil) 90 nil #s(yas--field 1 661 668 nil nil nil t #s(yas--exit 669 nil)) nil nil)) (662 . 668) (#("secs" 0 4 (fontified nil)) . 662) (661 . 662) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 661 668 nil nil nil t #s(yas--exit 669 nil))) #s(yas--exit 669 nil) 90 nil #s(yas--field 1 661 668 nil nil nil t #s(yas--exit 669 nil)) nil nil)) (651 . 666) (#("from_secs(${1:secs})$0" 0 22 (fontified nil)) . 651) (651 . 673) (#("from_secs(…)" 0 12 (fontified nil)) . -651) (651 . 663) (649 . 651) (#(":" 0 1 (fontified t)) . -649) (undo-tree-id1220 . -1) (#(":" 0 1 (fontified t)) . -650) (undo-tree-id1221 . -1) 651 (85 . 101) (77 . 85) (#("Duration" 0 8 (fontified nil)) . -77) (77 . 85) (75 . 77) (71 . 75) (#("tim" 0 3 (fontified nil)) . 71) (71 . 74) (#("time" 0 4 (fontified nil)) . -71) (71 . 75) (#("tim" 0 3 (fontified t)) . -71) (undo-tree-id1222 . -3) 74 (71 . 74) (#("d" 0 1 (fontified t)) . -71) (undo-tree-id1223 . -1) (#("u" 0 1 (fontified t)) . -72) (undo-tree-id1224 . -1) (#("r" 0 1 (fontified t)) . -73) (undo-tree-id1225 . -1) (#("a" 0 1 (fontified t)) . -74) (undo-tree-id1226 . -1) 75 (62 . 75) (61 . 62) (600 . 601) (598 . 600) (586 . 589) (558 . 561) (apply yas--snippet-revive 584 603 #s(yas--snippet nil (#s(yas--field 1 592 602 nil nil nil t #s(yas--exit 603 nil))) #s(yas--exit 603 nil) 89 nil #s(yas--field 1 592 602 nil nil nil t #s(yas--exit 603 nil)) nil nil)) (600 . 602) (#(":" 0 1 (fontified t)) . -600) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (#(":" 0 1 (fontified t)) . -601) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (#("f" 0 1 (fontified t)) . -602) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (#("r" 0 1 (fontified t)) . -603) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) 604 (#("o" 0 1 (fontified t)) . -604) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (#("m" 0 1 (fontified t)) . -605) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) 606 (600 . 606) (593 . 600) (#("duration" 0 8 (fontified nil)) . 593) (592 . 593) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 592 602 nil nil nil t #s(yas--exit 603 nil))) #s(yas--exit 603 nil) 89 nil #s(yas--field 1 592 602 nil nil nil t #s(yas--exit 603 nil)) nil nil)) (584 . 601) (#("timeout(${1:duration})$0" 0 24 (fontified nil)) . 584) (584 . 608) (#("time" 0 4 (fontified nil)) . 584) (584 . 588) (#("timeout(…)" 0 10 (fontified nil)) . -584) (584 . 594) (#("time" 0 4 (fontified t)) . -584) (undo-tree-id1239 . -4) 588 (583 . 588) (apply yas--snippet-revive 559 583 #s(yas--snippet nil (#s(yas--field 1 569 582 nil nil nil t #s(yas--exit 583 nil))) #s(yas--exit 583 nil) 88 nil #s(yas--field 1 569 582 nil nil nil t #s(yas--exit 583 nil)) nil nil)) (579 . 582) (573 . 579) (#("author" 0 6 (fontified nil)) . -573) (573 . 579) (570 . 573) (#("author_id" 0 9 (fontified nil)) . 570) (569 . 570) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 569 582 nil nil nil t #s(yas--exit 583 nil))) #s(yas--exit 583 nil) 88 nil #s(yas--field 1 569 582 nil nil nil t #s(yas--exit 583 nil)) nil nil)) (559 . 579) (#("author_id(${1:author_id})$0" 0 27 (fontified nil)) . 559) (559 . 586) (#("author_id(…)" 0 12 (fontified nil)) . -559) (559 . 571) (558 . 559) (#("." 0 1 (fontified t)) . -558) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) 559 (558 . 559) (#("." 0 1 (fontified t)) . -558) (undo-tree-id1243 . -1) 559 (558 . 559) (#("." 0 1 (fontified t)) . -558) (undo-tree-id1244 . -1) 559 (558 . 559)) nil (25827 54292 954902 717000) 0 nil])
([nil nil ((197 . 202) (t 25827 54292 972318 454000)) nil (25827 54302 551667 547000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -689) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (#("e" 0 1 (fontified t)) . -690) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -691) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) 692 (#(" " 0 1 (fontified t)) . -692) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -693) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -694) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -695) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (#("v" 0 1 (face font-lock-variable-name-face fontified t)) . -696) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -697) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -698) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (#(" " 0 1 (fontified t)) . -699) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (#("=" 0 1 (fontified t)) . -700) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (#(" " 0 1 (fontified t)) . -701) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (#("i" 0 1 (fontified t)) . -702) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -703) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (#("t" 0 1 (fontified t)) . -704) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (#("e" 0 1 (fontified t)) . -705) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (#("r" 0 1 (fontified t)) . -706) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (#("a" 0 1 (fontified t)) . -707) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (#("c" 0 1 (fontified t)) . -708) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (#("t" 0 1 (fontified t)) . -709) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (#("i" 0 1 (fontified t)) . -710) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (#("o" 0 1 (fontified t)) . -711) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (#("n" 0 1 (fontified t)) . -712) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) 713 (702 . 713) (#("inter" 0 5 (fontified nil)) . 702) (702 . 707) (#("interaction" 0 11 (fontified nil)) . -702) (702 . 713) (#("inter" 0 5 (fontified t)) . -702) (undo-tree-id1494 . -5) 707 (689 . 707) (#("	" 0 1 (fontified t)) . -689) (undo-tree-id1495 . -1) 690 (t 25827 54302 562282 666000)) nil (25827 54564 587929 863000) 0 nil])
([nil nil ((#("	Ok(())
" 0 1 (fontified t) 1 3 (face font-lock-type-face fontified t) 3 7 (fontified t) 7 8 (fontified t)) . 690) (undo-tree-id1421 . -7)) nil (25827 54564 587651 118000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -710) (undo-tree-id1419 . -1) (711 . 712) (708 . 711) (706 . 708) (695 . 706) (#("inter" 0 5 (fontified nil)) . 695) (695 . 700) (#("interaction" 0 11 (fontified nil)) . -695) (695 . 706) (#("inter" 0 5 (fontified t)) . -695) (undo-tree-id1420 . -5) 700 (689 . 700)) nil (25827 54564 587645 22000) 0 nil])
([nil nil ((828 . 841) (#("S" 0 1 (face font-lock-type-face fontified t)) . -828) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -829) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -830) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -831) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (#("(" 0 1 (fontified t)) . -832) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (#("_" 0 1 (fontified t)) . -833) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (#(")" 0 1 (fontified t)) . -834) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (#(" " 0 1 (fontified t)) . -835) (undo-tree-id1398 . -1) (#("=" 0 1 (fontified t)) . -836) (undo-tree-id1399 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -837) (undo-tree-id1400 . -1) (#(" " 0 1 (fontified t)) . -838) (undo-tree-id1401 . -1) 839 (837 . 839) (828 . 837) (#("N" 0 1 (face font-lock-type-face fontified t)) . -828) (undo-tree-id1402 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -829) (undo-tree-id1403 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -830) (undo-tree-id1404 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -831) (undo-tree-id1405 . -1) 832 (828 . 832) (825 . 828) (823 . 825) (#("," 0 1 (fontified t)) . -823) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) 824 (809 . 824) (#(" " 0 1 (fontified t)) . -809) (undo-tree-id1408 . -1) 810 (809 . 810) (808 . 809) (#(" " 0 1 (fontified t)) . -809) (undo-tree-id1409 . -1) 810 (809 . 810) (805 . 806) (796 . 807) (787 . 796) (#("custom" 0 6 (fontified nil)) . 787) (787 . 793) (#("custom_id" 0 9 (fontified nil)) . -787) (787 . 796) (#("custom" 0 6 (fontified t)) . -787) (undo-tree-id1410 . -6) 793 (782 . 793) (773 . 782) (#("*" 0 1 (fontified t)) . -773) (undo-tree-id1411 . -1) (#("m" 0 1 (fontified t)) . -774) (undo-tree-id1412 . -1) 775 (769 . 775) (766 . 769) (759 . 766) (#("y" 0 1 (fontified t)) . -759) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (#("e" 0 1 (fontified t)) . -760) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (#("s" 0 1 (fontified t)) . -761) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) 762 (754 . 762) (738 . 754) (729 . 738) (#("custom_id" 0 9 (fontified nil)) . -729) (729 . 738) (728 . 729) (724 . 728) (#("data" 0 4 (fontified nil)) . -724) (724 . 728) (711 . 724) (708 . 711)) nil (25827 54564 587621 84000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -730) (undo-tree-id1496 . -1) (#("." 0 1 (fontified t)) . -731) (undo-tree-id1497 . -1) (#("d" 0 1 (fontified t)) . -732) (undo-tree-id1498 . -1) (#("a" 0 1 (fontified t)) . -733) (undo-tree-id1499 . -1) (#("t" 0 1 (fontified t)) . -734) (undo-tree-id1500 . -1) (#("a" 0 1 (fontified t)) . -735) (undo-tree-id1501 . -1) (#("." 0 1 (fontified t)) . -736) (undo-tree-id1502 . -1) (#("c" 0 1 (fontified t)) . -737) (undo-tree-id1503 . -1) (#("u" 0 1 (fontified t)) . -738) (undo-tree-id1504 . -1) (#("s" 0 1 (fontified t)) . -739) (undo-tree-id1505 . -1) (#("t" 0 1 (fontified t)) . -740) (undo-tree-id1506 . -1) (#("o" 0 1 (fontified t)) . -741) (undo-tree-id1507 . -1) (#("m" 0 1 (fontified t)) . -742) (undo-tree-id1508 . -1) (#("_" 0 1 (fontified t)) . -743) (undo-tree-id1509 . -1) (#("i" 0 1 (fontified t)) . -744) (undo-tree-id1510 . -1) (#("d" 0 1 (fontified t)) . -745) (undo-tree-id1511 . -1) 746 (apply yas--snippet-revive 704 730 #s(yas--snippet nil (#s(yas--field 1 713 729 nil nil nil t #s(yas--exit 730 nil))) #s(yas--exit 730 nil) 92 nil #s(yas--field 1 713 729 nil nil nil t #s(yas--exit 730 nil)) nil nil)) (720 . 729) (#("custom_id" 0 9 (fontified nil)) . -720) (720 . 729) (713 . 720) (#("x" 0 1 (fontified t)) . -713) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (#("m" 0 1 (fontified t)) . -714) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (#("." 0 1 (fontified t)) . -715) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) 716 (714 . 716) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 713 729 nil nil nil t #s(yas--exit 730 nil))) #s(yas--exit 730 nil) 92 nil #s(yas--field 1 713 729 nil nil nil t #s(yas--exit 730 nil)) nil nil)) (704 . 715) (#("contains(${1:x})$0" 0 18 (fontified nil)) . 704) (704 . 722) (#("contains(…)" 0 11 (fontified nil)) . -704) (704 . 715) (692 . 704) (#("Y" 0 1 (face font-lock-string-face fontified t)) . -692) (undo-tree-id1518 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -693) (undo-tree-id1519 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -694) (undo-tree-id1520 . -1) 695 (692 . 695) (#("y" 0 1 (face font-lock-string-face fontified t)) . -692) (undo-tree-id1521 . -1) 693 (690 . 693) (697 . 706) (#("custom_id" 0 9 (fontified nil)) . -697) (697 . 706) (687 . 697) (#("i" 0 1 (fontified t)) . -687) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (#("|" 0 1 (fontified t)) . -688) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (#(" " 0 1 (fontified t)) . -689) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (#("i" 0 1 (fontified t)) . -690) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (#("." 0 1 (fontified t)) . -691) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (#("d" 0 1 (fontified t)) . -692) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (#("a" 0 1 (fontified t)) . -693) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (#("t" 0 1 (fontified t)) . -694) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (#("a" 0 1 (fontified t)) . -695) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) 696 (#("." 0 1 (fontified t)) . -696) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) 697 (696 . 697) (692 . 696) (#("data" 0 4 (fontified nil)) . -692) (692 . 696) (686 . 692) (#("f" 0 1 (fontified t)) . -686) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (#("u" 0 1 (fontified t)) . -687) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (#("n" 0 1 (fontified t)) . -688) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (#("c" 0 1 (fontified t)) . -689) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (#("t" 0 1 (fontified t)) . -690) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (#("i" 0 1 (fontified t)) . -691) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (#("o" 0 1 (fontified t)) . -692) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (#("n" 0 1 (fontified t)) . -693) (undo-tree-id1556 . -1) 694 (675 . 678) (apply yas--snippet-revive 676 692 #s(yas--snippet nil (#s(yas--field 1 683 691 nil nil nil nil #s(yas--exit 692 nil))) #s(yas--exit 692 nil) 91 nil #s(yas--field 1 683 691 nil nil nil nil #s(yas--exit 692 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 683 691 nil nil nil nil #s(yas--exit 692 nil))) #s(yas--exit 692 nil) 91 nil #s(yas--field 1 683 691 nil nil nil nil #s(yas--exit 692 nil)) nil nil)) (676 . 692) (#("filter(${1:function})$0" 0 23 (fontified nil)) . 676) (676 . 699) (#("fil" 0 3 (fontified nil)) . 676) (676 . 679) (#("filter(…)" 0 9 (fontified nil)) . -676) (676 . 685) (#("fil" 0 3 (fontified t)) . -676) (undo-tree-id1557 . -3) 679 (675 . 679) (t 25827 54564 594641 669000)) nil (25827 54627 970231 120000) 0 nil])
([nil nil ((713 . 714) (t 25827 54627 977740 124000)) nil (25827 54645 565728 256000) 0 nil])
([nil nil ((713 . 714) (t 25827 54645 574341 628000)) nil (25827 54657 189660 307000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 713) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (t 25827 54657 207631 891000)) nil (25827 54690 642210 552000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 713) (undo-tree-id1561 . 1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1)) nil (25827 54690 642204 477000) 0 nil])
([nil nil ((713 . 714) (apply yas--snippet-revive 730 738 #s(yas--snippet nil nil #s(yas--exit 738 nil) 93 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 738 nil) 93 nil nil nil nil)) (730 . 738) (#("as_str()$0" 0 10 (fontified nil)) . 730) (730 . 740) (#("as_" 0 3 (fontified nil)) . 730) (730 . 733) (#("as_str()" 0 8 (fontified nil)) . -730) (730 . 738) (#("as_" 0 3 (fontified t)) . -730) (undo-tree-id1558 . -3) (undo-tree-id1559 . -3) (undo-tree-id1560 . -3) 733 (729 . 733)) nil (25827 54690 642192 136000) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . -151) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (#("p" 0 1 (fontified t)) . -152) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (#("u" 0 1 (fontified t)) . -153) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (#("b" 0 1 (face font-lock-keyword-face fontified t)) . -154) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (#(" " 0 1 (fontified t)) . -155) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (#("a" 0 1 (fontified t)) . -156) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -157) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (#("y" 0 1 (fontified t)) . -158) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#("n" 0 1 (fontified t)) . -159) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (#("c" 0 1 (face font-lock-keyword-face fontified t)) . -160) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (#(" " 0 1 (fontified t)) . -161) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (#("f" 0 1 (fontified t)) . -162) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -163) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (#(" " 0 1 (fontified t)) . -164) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) 165 (152 . 165) (151 . 152) (t 25827 54690 660841 414000)) nil (25827 54744 6233 987000) 0 nil])
nil
