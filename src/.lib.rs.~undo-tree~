(undo-tree-save-format-version . 1)
"2fef738607316d31f2dba925c9d589e646846609"
[nil nil nil nil (25810 47836 560389 293000) 0 nil]
([nil nil ((#("purge" 0 5 (face font-lock-constant-face fontified t)) . 105) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -5) (undo-tree-id15 . -4) 109 (t 25810 47441 868832 748000)) nil (25810 47836 560385 599000) 0 nil])
([nil nil ((105 . 112) (#("webho" 0 5 (fontified nil)) . 105) (105 . 110) (#("webhook" 0 7 (fontified nil)) . -105) (105 . 112) (#("webho" 0 5 (face font-lock-constant-face fontified t)) . -105) (undo-tree-id0 . -5) 110 (105 . 110)) nil (25810 47836 560356 909000) 0 nil])
([nil nil ((435 . 436) (#("l" 0 1 (face font-lock-constant-face fontified t)) . -435) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) 436 (434 . 436) (413 . 434) (t 25810 47836 561956 370000)) nil (25810 49858 669902 16000) 0 nil])
([nil nil ((436 . 437)) nil (25810 49858 669874 659000) 0 nil])
([nil nil ((320 . 325) 324 (t 25810 49858 670976 583000)) nil (25810 52023 354136 480000) 0 nil])
([nil nil ((205 . 207) (#(";" 0 1 (face font-lock-string-face fontified t)) . -205) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) 206 (200 . 206) (#("S" 0 1 (face font-lock-type-face fontified t)) . -200) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -201) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("z" 0 1 (face font-lock-type-face fontified t)) . -202) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -203) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#(";" 0 1 (fontified t)) . -204) (undo-tree-id33 . -1) 205 (190 . 205) (169 . 190) (168 . 170) (t 25810 52023 353859 544000)) nil (25811 30062 409339 953000) 0 nil])
([nil nil ((482 . 486) (482 . 493) (481 . 482) (t 25811 30062 411571 474000)) nil (25812 39681 617690 112000) 0 nil])
([nil nil ((509 . 510) (#("l" 0 1 (face font-lock-constant-face fontified t)) . -509) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) 510 (498 . 510) (t 25812 39681 619954 384000)) nil (25814 35014 581139 767000) 0 nil])
([nil nil ((510 . 511)) nil (25814 35014 581110 414000) 0 nil])
([nil nil ((502 . 510) (#("linka" 0 5 (fontified nil)) . 502) (502 . 507) (#("linkable" 0 8 (fontified nil)) . -502) (502 . 510) (#("linka" 0 5 (face font-lock-constant-face fontified t)) . -502) (undo-tree-id5 . -5) (undo-tree-id6 . -5) (undo-tree-id7 . -5) (undo-tree-id8 . -5) (undo-tree-id9 . -5) (undo-tree-id10 . -5) (undo-tree-id11 . -5) (undo-tree-id12 . -5) (undo-tree-id13 . -5) 507 (502 . 507) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -502) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -503) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("_" 0 1 (face font-lock-constant-face fontified t)) . -504) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -505) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -506) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -507) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("p" 0 1 (face font-lock-constant-face fontified t)) . -508) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 509 (t 25814 35014 591659 619000)) nil (25814 35291 984257 470000) 0 nil])
([nil nil ((22 . 32) (1 . 22) (1 . 2) (t 25814 35291 991447 565000)) nil (25815 57997 208929 417000) 0 nil])
([nil nil ((32 . 42) (#("try_bloc" 0 8 (fontified nil)) . 32) (32 . 40) (#("try_blocks" 0 10 (fontified nil)) . -32) (32 . 42) (#("try_bloc" 0 8 (face font-lock-preprocessor-face fontified t)) . -32) (undo-tree-id0 . -8) (undo-tree-id1 . -6) (undo-tree-id2 . -7) (undo-tree-id3 . -8) (undo-tree-id4 . -8) (undo-tree-id5 . -8) 40 (30 . 40) (t 25815 57997 211814 425000)) nil (25817 10486 511774 219000) 0 nil])
([nil nil ((#("pub type Error = anyhow::Error;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 14 (face font-lock-type-face fontified t) 14 17 (fontified t) 17 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 30 (face font-lock-type-face fontified t) 30 32 (fontified t)) . 366) (undo-tree-id12 . -30) (undo-tree-id13 . -30) (undo-tree-id14 . -31) (undo-tree-id15 . -31) 396 (t 25817 10486 520754 606000)) nil (25818 25979 312644 140000) 0 nil])
([nil nil ((248 . 249) (#(">" 0 1 (syntax-table (1) fontified t)) . -248) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 249 (235 . 250) (232 . 235) (231 . 232) (#("r" 0 1 (face font-lock-type-face fontified t)) . -231) (undo-tree-id6 . -1) 232 (224 . 232) (212 . 224) (211 . 212) (#("E" 0 1 (face font-lock-type-face fontified t)) . -416) (undo-tree-id7 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -417) (undo-tree-id8 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -418) (undo-tree-id9 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -419) (undo-tree-id10 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -420) (undo-tree-id11 . -1) 421) nil (25818 25979 312636 217000) 0 nil])
([nil nil ((464 . 477) (#("Inter" 0 5 (fontified nil)) . 464) (464 . 469) (#("InternalError" 0 13 (fontified nil)) . -464) (464 . 477) (#("Inter" 0 5 (face font-lock-type-face fontified t)) . -464) (undo-tree-id16 . -5) (undo-tree-id17 . -5) (undo-tree-id18 . -5) 469 (464 . 469) (apply yas--snippet-revive 455 465 #s(yas--snippet nil nil #s(yas--exit 464 nil) 54 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 464 nil) 54 nil nil nil nil)) (455 . 465) (#("OptError<$0>" 0 12 (fontified nil)) . 455) (455 . 467) (#("Opt" 0 3 (fontified nil)) . 455) (455 . 458) (#("OptError<…>" 0 11 (fontified nil)) . -455) (455 . 466) (#("Opt" 0 3 (face font-lock-type-face fontified t)) . -455) (undo-tree-id19 . -3) 458 (455 . 458) (t 25818 25979 315961 897000)) nil (25818 25987 528314 41000) 0 nil])
([nil nil ((50 . 65) (#(")" 0 1 (face font-lock-preprocessor-face fontified t)) . -50) (undo-tree-id20 . -1) 51 (42 . 51) (t 25818 25987 539294 827000)) nil (25818 28459 76119 144000) 0 nil])
([nil nil ((513 . 514) (487 . 499) (t 25818 28459 79083 20000)) nil (25818 30234 167784 774000) 0 nil])
([nil nil ((273 . 284) (#("With" 0 4 (fontified nil)) . 273) (273 . 277) (#("WithContext" 0 11 (fontified nil)) . -273) (273 . 284) (#("With" 0 4 (face font-lock-type-face fontified t)) . -273) (undo-tree-id21 . -4) 277 (271 . 277)) nil (25818 30234 167780 551000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -528) (undo-tree-id0 . -1) 529 (528 . 529) (503 . 512) (#("O" 0 1 (face font-lock-type-face fontified t)) . -491) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -492) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -493) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -494) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -495) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -496) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -497) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -498) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("<" 0 1 (fontified t)) . -499) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 500 (t 25818 30234 165643 566000)) nil (25826 34453 760320 755000) 0 nil])
([nil nil ((284 . 291) (503 . 503) (503 . 508) (#("Error" 0 5 (fontified nil)) . 503) (503 . 508) (#("Error (use errors::Error)" 0 25 (fontified nil)) . -503) (503 . 528) (#("Error" 0 5 (face font-lock-type-face fontified t)) . -503) (undo-tree-id28 . -5) (undo-tree-id29 . -5) (undo-tree-id30 . -5) (undo-tree-id31 . -5) (undo-tree-id32 . -5) (undo-tree-id33 . -5) 508 (503 . 508) (apply yas--snippet-revive 491 504 #s(yas--snippet nil nil #s(yas--exit 503 nil) 73 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 503 nil) 73 nil nil nil nil)) (491 . 504) (#("WithContext<$0>" 0 15 (fontified nil)) . 491) (491 . 506) (#("WithC" 0 5 (fontified nil)) . 491) (491 . 496) (#("WithContext<…>" 0 14 (fontified nil)) . -491) (491 . 505) (#("WithC" 0 5 (face font-lock-type-face fontified t)) . -491) (undo-tree-id34 . -5) 496 (490 . 496) (#(" " 0 1 (fontified t)) . -490) (undo-tree-id35 . -1) (#("W" 0 1 (face font-lock-type-face fontified t)) . -491) (undo-tree-id36 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -492) (undo-tree-id37 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -493) (undo-tree-id38 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -494) (undo-tree-id39 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -495) (undo-tree-id40 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -496) (undo-tree-id41 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -497) (undo-tree-id42 . -1) (#("t" 0 1 (face font-lock-type-face fontified nil)) . -498) (undo-tree-id43 . -1) (#("e" 0 1 (face font-lock-type-face fontified nil)) . -499) (undo-tree-id44 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -500) (undo-tree-id45 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -501) (undo-tree-id46 . -1) (#("<" 0 1 (fontified t)) . -502) (undo-tree-id47 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -503) (undo-tree-id48 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -504) (undo-tree-id49 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -505) (undo-tree-id50 . -1) 506 (#("E" 0 1 (face font-lock-type-face fontified t)) . -506) (undo-tree-id51 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -507) (undo-tree-id52 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -508) (undo-tree-id53 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -509) (undo-tree-id54 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -510) (undo-tree-id55 . -1) (#("<" 0 1 (fontified t)) . -511) (undo-tree-id56 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -512) (undo-tree-id57 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -513) (undo-tree-id58 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -514) (undo-tree-id59 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -515) (undo-tree-id60 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -516) (undo-tree-id61 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -517) (undo-tree-id62 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -518) (undo-tree-id63 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -519) (undo-tree-id64 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -520) (undo-tree-id65 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -521) (undo-tree-id66 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -522) (undo-tree-id67 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -523) (undo-tree-id68 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -524) (undo-tree-id69 . -1) (#(">" 0 1 (fontified t)) . -525) (undo-tree-id70 . -1) (#(">" 0 1 (fontified t)) . -526) (undo-tree-id71 . -1) 527 (630 . 639) (629 . 630) (t 25826 34453 763242 833000)) nil (25827 52723 254125 413000) 0 nil])
([nil nil ((623 . 628) (t 25827 52723 258432 96000)) nil (25827 54760 61844 510000) 0 nil])
([nil current ((73 . 84) (#("w" 0 1 (face font-lock-preprocessor-face fontified t)) . -73) (undo-tree-id72 . -1) (#("w" 0 1 (face font-lock-preprocessor-face fontified t)) . -74) (undo-tree-id73 . -1) (#("a" 0 1 (face font-lock-preprocessor-face fontified t)) . -75) (undo-tree-id74 . -1) 76 (65 . 76) (t 25827 54760 70584 715000)) nil (25827 61480 957848 237000) 0 nil])
nil
