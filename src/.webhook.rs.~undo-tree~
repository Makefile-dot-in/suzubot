(undo-tree-save-format-version . 1)
"30c0f652df5722644a35316a1e20eb680e166f66"
[nil nil nil nil (25810 48122 372776 563000) 0 nil]
([nil nil ((61 . 86) (t 25810 47429 955505 999000)) nil (25810 48122 372769 823000) 0 nil])
([nil nil ((1 . 33) (t 25810 48122 371824 895000)) nil (25810 48143 978770 825000) 0 nil])
([nil nil ((#("::sync" 0 2 (fontified t) 2 6 (face font-lock-constant-face fontified t)) . -103) 109 (111 . 118) (117 . 125) (t 25810 48143 978481 326000)) nil (25810 48158 256684 333000) 0 nil])
([nil nil ((#("::sync" 0 2 (fontified t) 2 6 (face font-lock-constant-face fontified t)) . -103) (undo-tree-id0 . -6) 109 (112 . 119) (118 . 126) (#("Mu" 0 2 (face font-lock-type-face fontified t)) . 120) (123 . 125) (124 . 133) (#("x" 0 1 (face font-lock-type-face fontified t)) . -124) (undo-tree-id1 . -1) 125 (t 25810 48158 255141 214000)) nil (25810 48177 934444 388000) 0 nil])
([nil nil ((55 . 71) (47 . 55) (#("Duration" 0 8 (fontified nil)) . -47) (47 . 55) (32 . 47) (t 25810 48177 965131 834000)) nil (25810 48199 597829 709000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -4520) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("c" 0 1 (fontified t)) . -4521) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("o" 0 1 (fontified t)) . -4522) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("n" 0 1 (fontified t)) . -4523) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("t" 0 1 (fontified t)) . -4524) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("e" 0 1 (fontified t)) . -4525) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("x" 0 1 (fontified t)) . -4526) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("t" 0 1 (fontified t)) . -4527) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 4528 (4520 . 4528) (t 25810 48199 598454 843000)) nil (25810 48261 215853 586000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -155) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("	" 0 1 (fontified t)) . -156) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("	" 0 1 (fontified t)) . -157) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("	" 0 1 (fontified t)) . -158) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("	" 0 1 (fontified t)) . -159) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#(" " 0 1 (fontified t)) . -160) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#(" " 0 1 (fontified t)) . -161) (undo-tree-id43 . -1) (#(" " 0 1 (fontified t)) . -162) (undo-tree-id44 . -1) 163 (155 . 163) (t 25810 48261 215091 937000)) nil (25810 48276 408511 54000) 0 nil])
([nil nil ((182 . 183) (#(";" 0 1 (fontified t)) . -182) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("
" 0 1 (fontified t)) . -183) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("u" 0 1 (fontified t)) . -184) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("s" 0 1 (fontified t)) . -185) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -186) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#(" " 0 1 (fontified t)) . -187) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("a" 0 1 (face font-lock-constant-face fontified t)) . -188) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -189) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("y" 0 1 (face font-lock-constant-face fontified t)) . -190) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("h" 0 1 (face font-lock-constant-face fontified t)) . -191) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -192) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("w" 0 1 (face font-lock-constant-face fontified t)) . -193) (undo-tree-id70 . -1) (undo-tree-id71 . -1) 194 (184 . 194) (183 . 184) (t 25810 48276 408417 945000)) nil (25810 48282 963052 408000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -327) (undo-tree-id76 . -1) (328 . 329) (326 . 328) (324 . 326) (#(";" 0 1 (fontified t)) . -324) (undo-tree-id77 . -1) 325 (323 . 325) (318 . 323) (#("Error" 0 5 (fontified nil)) . 318) (318 . 323) (#("Error" 0 5 (face font-lock-type-face fontified t)) . -318) (undo-tree-id78 . -5) (undo-tree-id79 . -5) 323 (310 . 323) (308 . 310) (301 . 308) (#("Web" 0 3 (fontified nil)) . 301) (301 . 304) (#("Webhook" 0 7 (fontified nil)) . -301) (301 . 308) (#("Web" 0 3 (face font-lock-type-face fontified t)) . -301) (undo-tree-id80 . -3) 304 (296 . 304) (#("W" 0 1 (face font-lock-type-face fontified t)) . -296) (undo-tree-id81 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -297) (undo-tree-id82 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -298) (undo-tree-id83 . -1) 299 (296 . 299) (272 . 284) (#("S" 0 1 (face font-lock-type-face fontified t)) . -284) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -285) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -286) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -287) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -288) (undo-tree-id92 . -1) (undo-tree-id93 . -1) 289 (272 . 289) (258 . 272) (#("C" 0 1 (face font-lock-type-face fontified t)) . -258) (undo-tree-id94 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -259) (undo-tree-id95 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -260) (undo-tree-id96 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -261) (undo-tree-id97 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -262) (undo-tree-id98 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -263) (undo-tree-id99 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -264) (undo-tree-id100 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -265) (undo-tree-id101 . -1) 266 (258 . 266) (249 . 258) (245 . 249) (#("Htt" 0 3 (fontified nil)) . 245) (245 . 248) (#("Http" 0 4 (fontified nil)) . -245) (245 . 249) (#("Htt" 0 3 (face font-lock-type-face fontified t)) . -245) (undo-tree-id102 . -3) (undo-tree-id103 . -3) 248 (240 . 248) (239 . 240) (#("<" 0 1 (fontified t)) . -239) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("H" 0 1 (face font-lock-type-face fontified t)) . -240) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -241) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -242) (undo-tree-id110 . -1) (undo-tree-id111 . -1) 243 (239 . 243) (234 . 239) (#("AsRef" 0 5 (fontified nil)) . 234) (234 . 239) (#("AsRef" 0 5 (face font-lock-type-face fontified t)) . -234) (undo-tree-id112 . -5) 239 (228 . 239) (219 . 228) (198 . 219) (#("_" 0 1 (face font-lock-function-name-face fontified t)) . -198) (undo-tree-id113 . -1) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -199) (undo-tree-id114 . -1) (#("f" 0 1 (face font-lock-function-name-face fontified t)) . -200) (undo-tree-id115 . -1) (#("_" 0 1 (face font-lock-function-name-face fontified t)) . -201) (undo-tree-id116 . -1) 202 (192 . 202) (185 . 192) (184 . 186) (t 25810 48282 961748 114000)) nil (25810 48525 849154 619000) 0 nil])
([nil nil ((328 . 333) (#("c" 0 1 (fontified t)) . -328) (undo-tree-id72 . -1) (#("t" 0 1 (fontified t)) . -329) (undo-tree-id73 . -1) (#("x" 0 1 (fontified t)) . -330) (undo-tree-id74 . -1) (#("." 0 1 (fontified t)) . -331) (undo-tree-id75 . -1) 332 (328 . 332) (326 . 328)) nil (25810 48525 849113 997000) 0 nil])
([nil nil ((234 . 239)) nil (25810 48525 849099 90000) 0 nil])
([nil nil ((#("	chid.
" 0 7 (fontified t)) . 332) (undo-tree-id117 . -6) (undo-tree-id118 . 1) (undo-tree-id119 . -5) (undo-tree-id120 . -5) (undo-tree-id121 . -5) (undo-tree-id122 . -5) (undo-tree-id123 . -5) (undo-tree-id124 . -5) (undo-tree-id125 . -5) (undo-tree-id126 . -5) (undo-tree-id127 . -5) (undo-tree-id128 . -7) 337 (t 25810 48525 848296 132000)) nil (25810 48527 27141 755000) 0 nil])
([nil nil ((361 . 367) (#("(" 0 1 (fontified t)) . -361) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("$" 0 1 (fontified t)) . -362) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#("{" 0 1 (fontified t)) . -363) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (#("1" 0 1 (fontified t)) . -364) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#(":" 0 1 (fontified t)) . -365) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (#("h" 0 1 (fontified t)) . -366) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (#("t" 0 1 (fontified t)) . -367) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("t" 0 1 (fontified t)) . -368) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("p" 0 1 (fontified t)) . -369) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#("}" 0 1 (fontified t)) . -370) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#(")" 0 1 (fontified t)) . -371) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (#("$" 0 1 (fontified t)) . -372) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (#("0" 0 1 (fontified t)) . -373) (undo-tree-id153 . -1) (undo-tree-id154 . -1) 374 (353 . 374) (#("webhooks(â€¦)" 0 11 (fontified nil)) . -353) (353 . 364) (336 . 353) (333 . 336) (#("c" 0 1 (fontified t)) . -333) (undo-tree-id155 . -1) (#("t" 0 1 (fontified t)) . -334) (undo-tree-id156 . -1) (#("x" 0 1 (fontified t)) . -335) (undo-tree-id157 . -1) (#("." 0 1 (fontified t)) . -336) (undo-tree-id158 . -1) 337 (333 . 337) (331 . 333) (t 25810 48527 161628 818000)) nil (25810 48555 2085 0) 0 nil])
([nil nil ((440 . 460) (419 . 440) (418 . 420) (410 . 419) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -410) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -411) (undo-tree-id161 . -1) (undo-tree-id162 . -1) 412 (409 . 410) (407 . 409) (394 . 406) (#("with" 0 4 (fontified nil)) . 394) (394 . 398) (#("with_context (as Context)" 0 25 (fontified nil)) . -394) (394 . 419) (#("with" 0 4 (fontified t)) . -394) (undo-tree-id163 . -4) 398 (394 . 398) (#("c" 0 1 (fontified t)) . -394) (undo-tree-id164 . -1) (#("o" 0 1 (fontified t)) . -395) (undo-tree-id165 . -1) (#("n" 0 1 (fontified t)) . -396) (undo-tree-id166 . -1) (#("t" 0 1 (fontified t)) . -397) (undo-tree-id167 . -1) (#("e" 0 1 (fontified t)) . -398) (undo-tree-id168 . -1) (#("x" 0 1 (fontified t)) . -399) (undo-tree-id169 . -1) (#("t" 0 1 (fontified t)) . -400) (undo-tree-id170 . -1) (#("_" 0 1 (fontified t)) . -401) (undo-tree-id171 . -1) 402 (401 . 402) (apply yas--snippet-revive 394 405 #s(yas--snippet nil (#s(yas--field 1 402 404 nil nil nil t #s(yas--exit 405 nil))) #s(yas--exit 405 nil) 0 nil #s(yas--field 1 402 404 nil nil nil t #s(yas--exit 405 nil)) nil nil)) (403 . 404) (#("context" 0 7 (fontified nil)) . 403) (402 . 403) (72 . 93) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 402 404 nil nil nil t #s(yas--exit 405 nil))) #s(yas--exit 405 nil) 0 nil #s(yas--field 1 402 404 nil nil nil t #s(yas--exit 405 nil)) nil nil)) (373 . 389) (#("context(${1:context})$0" 0 23 (fontified nil)) . 373) (373 . 396) (#("conte" 0 5 (fontified nil)) . 373) (373 . 378) (#("context(â€¦) (use anyhow::Context)" 0 32 (fontified nil)) . -373) (373 . 405) (#("conte" 0 5 (fontified t)) . -373) (undo-tree-id172 . -5) 378 (373 . 378) (372 . 373) (367 . 372) (#("await" 0 5 (fontified nil)) . -367) (367 . 372) (366 . 367) (t 25810 48555 474948 169000)) nil (25810 48610 15520 770000) 0 nil])
([nil nil ((210 . 216) (464 . 466) (t 25810 48610 14921 171000)) nil (25810 48619 933786 715000) 0 nil])
([nil nil ((406 . 409) (381 . 382) (#("
" 0 1 (fontified t)) . -381) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . 1) (#("	" 0 1 (fontified t)) . -382) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("	" 0 1 (fontified t)) . -383) (undo-tree-id178 . -1) (undo-tree-id179 . -1) 384 (382 . 384) (#(" " 0 1 (fontified nil)) . 381) (undo-tree-id180 . -1) (undo-tree-id181 . 1) (382 . 383) (539 . 540) (360 . 360) (360 . 381) (#("m" 0 1 (fontified t)) . -360) (undo-tree-id182 . -1) (#("a" 0 1 (fontified t)) . -361) (undo-tree-id183 . -1) (#("t" 0 1 (fontified t)) . -362) (undo-tree-id184 . -1) (#("c" 0 1 (fontified t)) . -363) (undo-tree-id185 . -1) (#("h" 0 1 (face font-lock-keyword-face fontified t)) . -364) (undo-tree-id186 . -1) 365 (460 . 461) (#("." 0 1 (fontified t)) . -460) (undo-tree-id187 . -1) 461 (460 . 461) (#("?" 0 1 (face rust-question-mark fontified t)) . -460) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("
" 0 1 (fontified t)) . -461) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("	" 0 1 (fontified t)) . -462) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("	" 0 1 (fontified t)) . -463) (undo-tree-id194 . -1) (undo-tree-id195 . -1) 464 (360 . 366) (#("l" 0 1 (fontified t)) . -360) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#("e" 0 1 (fontified t)) . -361) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("t" 0 1 (fontified t)) . -362) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#(" " 0 1 (fontified t)) . -363) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -364) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -365) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -366) (undo-tree-id208 . -1) (undo-tree-id209 . -1) 367 (360 . 367) (#("
" 0 1 (fontified t)) . -520) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#("	" 0 1 (fontified t)) . -521) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("	" 0 1 (fontified t)) . -522) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("." 0 1 (fontified t)) . -523) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("m" 0 1 (fontified t)) . -524) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("a" 0 1 (fontified t)) . -525) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("p" 0 1 (fontified t)) . -526) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("(" 0 1 (fontified t)) . -527) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (#("|" 0 1 (fontified t)) . -528) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#("x" 0 1 (fontified t)) . -529) (undo-tree-id236 . -1) (undo-tree-id237 . -1) 530 (#("|" 0 1 (fontified t)) . -530) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#(" " 0 1 (fontified t)) . -531) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (#("f" 0 1 (fontified nil)) . -532) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (#("u" 0 1 (fontified t)) . -533) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (#("t" 0 1 (fontified t)) . -534) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("u" 0 1 (fontified t)) . -535) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#("r" 0 1 (fontified t)) . -536) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (#("e" 0 1 (fontified t)) . -537) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#("s" 0 1 (fontified t)) . -538) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#(":" 0 1 (fontified t)) . -539) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (#(":" 0 1 (fontified t)) . -540) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (#("r" 0 1 (fontified t)) . -541) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#("e" 0 1 (fontified t)) . -542) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#("a" 0 1 (fontified t)) . -543) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (#("d" 0 1 (fontified t)) . -544) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (#("y" 0 1 (fontified t)) . -545) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (#("!" 0 1 (fontified t)) . -546) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (#("(" 0 1 (fontified t)) . -547) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (#("x" 0 1 (fontified t)) . -548) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (#(")" 0 1 (fontified t)) . -549) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#(")" 0 1 (fontified t)) . -550) (undo-tree-id278 . -1) (undo-tree-id279 . -1) 551 (520 . 523) (545 . 546) (apply yas--snippet-revive 521 547 #s(yas--snippet nil (#s(yas--field 1 525 546 nil nil nil t #s(yas--exit 547 nil))) #s(yas--exit 547 nil) 4 nil #s(yas--field 1 525 546 nil nil nil t #s(yas--exit 547 nil)) nil nil)) (525 . 529) (apply yas--snippet-revive 534 542 #s(yas--snippet nil nil #s(yas--exit 541 nil) 5 nil nil #s(yas--field 1 525 546 nil nil nil t #s(yas--exit 547 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 541 nil) 5 nil nil #s(yas--field 1 525 546 nil nil nil t #s(yas--exit 547 nil)) nil)) (534 . 542) (#("ready!($0)" 0 10 (fontified nil)) . 534) (534 . 544) (#("read" 0 4 (fontified nil)) . 534) (534 . 538) (#("ready!(â€¦)" 0 9 (fontified nil)) . -534) (534 . 543) (#("read" 0 4 (fontified t)) . -534) (undo-tree-id280 . -4) (undo-tree-id281 . -4) 538 (529 . 538) (526 . 529) (#("f" 0 1 (fontified nil)) . 526) (525 . 526) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 525 546 nil nil nil t #s(yas--exit 547 nil))) #s(yas--exit 547 nil) 4 nil #s(yas--field 1 525 546 nil nil nil t #s(yas--exit 547 nil)) nil nil)) (521 . 527) (#("map(${1:f})$0" 0 13 (fontified nil)) . 521) (521 . 534) (#("map" 0 3 (fontified nil)) . 521) (521 . 524) (#("map(â€¦)" 0 6 (fontified nil)) . -521) (521 . 527) (#("map" 0 3 (fontified t)) . -521) (undo-tree-id282 . -3) 524 (520 . 524) (#("." 0 1 (fontified t)) . -520) (undo-tree-id283 . -1) (#("a" 0 1 (fontified t)) . -521) (undo-tree-id284 . -1) 522 (520 . 522) (#("
" 0 1 (fontified t)) . -520) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#("." 0 1 (fontified t)) . -521) (undo-tree-id287 . -1) (undo-tree-id288 . -1) 522 (#("		" 0 2 (fontified t)) . -521) (523 . 523) (523 . 524) (520 . 523) (#("." 0 1 (fontified t)) . -520) (undo-tree-id289 . -1) 521 (520 . 521) (470 . 473) (455 . 458) (apply yas--snippet-revive 468 514 #s(yas--snippet nil (#s(yas--field 1 473 513 nil nil nil t #s(yas--exit 514 nil))) #s(yas--exit 514 nil) 2 nil #s(yas--field 1 473 513 nil nil nil t #s(yas--exit 514 nil)) nil nil)) (apply yas--snippet-revive 486 513 #s(yas--snippet nil (#s(yas--field 1 498 512 nil nil nil t #s(yas--exit 513 nil))) #s(yas--exit 513 nil) 3 nil #s(yas--field 1 498 512 nil nil nil t #s(yas--exit 513 nil)) #s(yas--field 1 473 513 nil nil nil t #s(yas--exit 514 nil)) nil)) (502 . 503) (507 . 511) (#("name" 0 4 (fontified nil)) . 507) (507 . 511) (#("name" 0 4 (fontified t)) . -507) (undo-tree-id290 . -4) (undo-tree-id291 . -4) 511 (507 . 511) (499 . 507) (#("f" 0 1 (fontified nil)) . 499) (498 . 499) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 498 512 nil nil nil t #s(yas--exit 513 nil))) #s(yas--exit 513 nil) 3 nil #s(yas--field 1 498 512 nil nil nil t #s(yas--exit 513 nil)) #s(yas--field 1 473 513 nil nil nil t #s(yas--exit 514 nil)) nil)) (486 . 500) (#("is_some_and(${1:f})$0" 0 21 (fontified nil)) . 486) (486 . 507) (#("is_some_and(â€¦)" 0 14 (fontified nil)) . -486) (486 . 500) (485 . 486) (#(" " 0 1 (fontified t)) . -485) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("=" 0 1 (fontified t)) . -486) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (#("=" 0 1 (fontified t)) . -487) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (#(" " 0 1 (fontified t)) . -488) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -489) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -490) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -491) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -492) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (#("(" 0 1 (fontified t)) . -493) (undo-tree-id308 . -1) (undo-tree-id309 . -1) 494 (485 . 494) (#("." 0 1 (fontified t)) . -485) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#("i" 0 1 (fontified t)) . -486) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (#("s" 0 1 (fontified t)) . -487) (undo-tree-id314 . -1) (undo-tree-id315 . -1) 488 (486 . 488) (485 . 486) (#(" " 0 1 (fontified t)) . -485) (undo-tree-id316 . -1) (undo-tree-id317 . -1) 486 (485 . 486) (481 . 485) (#("nam" 0 3 (fontified nil)) . 481) (481 . 484) (#("name" 0 4 (fontified nil)) . -481) (481 . 485) (#("nam" 0 3 (fontified t)) . -481) (undo-tree-id318 . -3) (undo-tree-id319 . -3) 484 (481 . 484) (474 . 481) (#("|" 0 1 (fontified t)) . -474) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (#("w" 0 1 (fontified t)) . -475) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (#("h" 0 1 (fontified t)) . -476) (undo-tree-id324 . -1) (undo-tree-id325 . -1) 477 (475 . 477) (#("w" 0 1 (fontified t)) . -475) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (#("h" 0 1 (fontified t)) . -476) (undo-tree-id328 . -1) (undo-tree-id329 . -1) 477 (474 . 477) (#("predicate" 0 9 (fontified nil)) . 474) (473 . 474) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 473 513 nil nil nil t #s(yas--exit 514 nil))) #s(yas--exit 514 nil) 2 nil #s(yas--field 1 473 513 nil nil nil t #s(yas--exit 514 nil)) nil nil)) (468 . 483) (#("find(${1:predicate})$0" 0 22 (fontified nil)) . 468) (468 . 490) (#("find" 0 4 (fontified nil)) . 468) (468 . 472) (#("find(â€¦) (as Iterator)" 0 21 (fontified nil)) . -468) (468 . 489) (#("find" 0 4 (fontified t)) . -468) (undo-tree-id330 . -4) 472 (467 . 472) (#("l" 0 1 (fontified t)) . -360) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#("e" 0 1 (fontified t)) . -361) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (#("t" 0 1 (fontified t)) . -362) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (#(" " 0 1 (fontified t)) . -363) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (#("w" 0 1 (face font-lock-variable-name-face fontified t)) . -364) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified nil)) . -365) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (#("b" 0 1 (face font-lock-variable-name-face fontified t)) . -366) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("h" 0 1 (face font-lock-variable-name-face fontified t)) . -367) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -368) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -369) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (#("k" 0 1 (face font-lock-variable-name-face fontified t)) . -370) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -371) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (#(" " 0 1 (fontified t)) . -372) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (#("=" 0 1 (fontified t)) . -373) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#(" " 0 1 (fontified t)) . -374) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) 375 (apply yas--snippet-revive 471 482 #s(yas--snippet nil nil #s(yas--exit 482 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 482 nil) 1 nil nil nil nil)) (471 . 482) (#("into_iter()$0" 0 13 (fontified nil)) . 471) (471 . 484) (#("into" 0 4 (fontified nil)) . 471) (471 . 475) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -471) (471 . 500) (#("into" 0 4 (fontified t)) . -471) (undo-tree-id376 . -4) 475 (470 . 475) (#("." 0 1 (fontified t)) . -470) (undo-tree-id377 . -1) (#("o" 0 1 (fontified t)) . -471) (undo-tree-id378 . -1) (#("n" 0 1 (fontified t)) . -472) (undo-tree-id379 . -1) 473 (469 . 473) (#(";" 0 1 (fontified t)) . -469) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (#("
" 0 1 (fontified t)) . -470) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (#("	" 0 1 (fontified t)) . -471) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (#("w" 0 1 (fontified t)) . -472) (undo-tree-id386 . -1) (#("e" 0 1 (fontified t)) . -473) (undo-tree-id387 . -1) (#("b" 0 1 (fontified t)) . -474) (undo-tree-id388 . -1) (#("h" 0 1 (fontified t)) . -475) (undo-tree-id389 . -1) (#("o" 0 1 (fontified t)) . -476) (undo-tree-id390 . -1) (#("o" 0 1 (fontified t)) . -477) (undo-tree-id391 . -1) (#("k" 0 1 (fontified t)) . -478) (undo-tree-id392 . -1) (#("s" 0 1 (fontified t)) . -479) (undo-tree-id393 . -1) 480 (472 . 480) (t 25810 48620 48249 527000)) nil (25810 48875 539188 281000) 0 nil])
([nil nil ((545 . 552) (543 . 545) (t 25810 48875 541455 313000)) nil (25810 48879 953693 614000) 0 nil])
([nil nil ((apply yas--snippet-revive 514 522 #s(yas--snippet nil nil #s(yas--exit 522 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 522 nil) 6 nil nil nil nil)) (514 . 522) (#("as_ref()$0" 0 10 (fontified nil)) . 514) (514 . 524) (#("as_" 0 3 (fontified nil)) . 514) (514 . 517) (#("as_ref()" 0 8 (fontified nil)) . -514) (514 . 522) (#("as_" 0 3 (fontified t)) . -514) (undo-tree-id394 . -3) (undo-tree-id395 . -3) (undo-tree-id396 . -3) 517 (514 . 517) (513 . 514) (t 25810 48879 954786 431000)) nil (25810 48896 259757 382000) 0 nil])
([nil nil ((541 . 545) (t 25810 48896 278111 572000)) nil (25810 48912 490341 243000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -542) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (#("." 0 1 (fontified t)) . -543) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (#("]" 0 1 (fontified t)) . -544) (undo-tree-id405 . -1) (undo-tree-id406 . -1) 545 (#("[" 0 1 (fontified t)) . -542) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) 543 (540 . 542) (#("n" 0 1 (fontified t)) . -540) (undo-tree-id410 . -1) 541 (558 . 559) (#("	" 0 1 (fontified nil)) . 557) (undo-tree-id411 . -1) (558 . 559) (556 . 558) (t 25810 48912 508103 417000)) nil (25810 48932 872374 480000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -581) (undo-tree-id433 . -1) (582 . 583) (579 . 582) (577 . 579) (562 . 577) (#("created_we" 0 10 (fontified nil)) . 562) (562 . 572) (#("created_webhook" 0 15 (fontified nil)) . -562) (562 . 577) (#("created_we" 0 10 (fontified t)) . -562) (undo-tree-id434 . -10) 572 (562 . 572) (#("r" 0 1 (fontified t)) . -562) (undo-tree-id435 . -1) 563 (556 . 563) (t 25810 48932 871426 513000)) nil (25810 49009 802966 190000) 0 nil])
([nil nil ((apply yas--snippet-revive 613 638 #s(yas--snippet nil (#s(yas--field 1 628 631 nil nil nil t #s(yas--field 2 633 637 nil nil nil nil #s(yas--exit 638 nil))) #s(yas--field 2 633 637 nil nil nil nil #s(yas--exit 638 nil))) #s(yas--exit 638 nil) 7 nil #s(yas--field 2 633 637 nil nil nil nil #s(yas--exit 638 nil)) nil nil)) (628 . 631) (#("ctx" 0 3 (fontified nil)) . 628) (628 . 631) (#("ctx" 0 3 (fontified t)) . -628) (undo-tree-id420 . -3) (undo-tree-id421 . -3) 631 (629 . 631) (#("http" 0 4 (fontified nil)) . 629) (628 . 629) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 628 631 nil nil nil t #s(yas--field 2 633 637 nil nil nil nil #s(yas--exit 638 nil))) #s(yas--field 2 633 637 nil nil nil nil #s(yas--exit 638 nil))) #s(yas--exit 638 nil) 7 nil #s(yas--field 2 633 637 nil nil nil nil #s(yas--exit 638 nil)) nil nil)) (613 . 639) (#("create_webhook(${1:http}, ${2:name})$0" 0 38 (fontified nil)) . 613) (613 . 651) (#("crea" 0 4 (fontified nil)) . 613) (613 . 617) (#("create_webhook(â€¦)" 0 17 (fontified nil)) . -613) (613 . 630) (#("crea" 0 4 (fontified t)) . -613) (undo-tree-id422 . -4) 617 (600 . 617) (597 . 600) (587 . 597) (#("x" 0 1 (fontified t)) . -587) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (#(")" 0 1 (fontified t)) . -588) (undo-tree-id425 . -1) (undo-tree-id426 . -1) 589 (#(" " 0 1 (fontified t)) . -589) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (#("=" 0 1 (fontified t)) . -590) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -591) (undo-tree-id431 . -1) (#(" " 0 1 (fontified t)) . -592) (undo-tree-id432 . -1) 593 (582 . 593) (579 . 582)) nil (25810 49009 802959 483000) 0 nil])
([nil nil ((#("	todo!()
" 0 1 (fontified t) 1 6 (face font-lock-preprocessor-face fontified t) 6 8 (fontified t) 8 9 (fontified t)) . 642) (undo-tree-id412 . -8) (undo-tree-id413 . -7) (undo-tree-id414 . -7) (undo-tree-id415 . -7) (undo-tree-id416 . -7) (undo-tree-id417 . -7) (undo-tree-id418 . -7) (undo-tree-id419 . -9) 649) nil (25810 49009 802945 910000) 0 nil])
([nil nil ((599 . 600) (596 . 597) (594 . 596) (641 . 642) (608 . 611)) nil (25810 49009 802930 283000) 0 nil])
([nil nil ((646 . 651) (#("await" 0 5 (fontified nil)) . -646) (646 . 651) (645 . 646) (t 25810 49009 801387 779000)) nil (25810 49051 792698 936000) 0 nil])
([nil nil ((708 . 710) (687 . 708) (666 . 687) (#("F" 0 1 (face font-lock-string-face fontified t)) . -666) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -667) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -668) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -669) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -670) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -671) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -672) (undo-tree-id448 . -1) (undo-tree-id449 . -1) 673 (666 . 673) (#("f" 0 1 (fontified nil)) . 666) (undo-tree-id450 . -1) (665 . 666) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 665 710 nil nil nil t #s(yas--exit 711 nil))) #s(yas--exit 711 nil) 8 nil #s(yas--field 1 665 710 nil nil nil t #s(yas--exit 711 nil)) nil nil)) (652 . 667) (#("with_context(${1:f})$0" 0 22 (fontified nil)) . 652) (652 . 674) (#("with" 0 4 (fontified nil)) . 652) (652 . 656) (#("with_context(â€¦) (as Context)" 0 28 (fontified nil)) . -652) (652 . 680) (#("with" 0 4 (fontified t)) . -652) (undo-tree-id451 . -4) (undo-tree-id452 . -4) 656 (651 . 656)) nil (25810 49051 792692 795000) 0 nil])
([nil nil ((711 . 712) (t 25810 49051 791366 620000) (apply yas--snippet-revive 652 711 #s(yas--snippet nil (#s(yas--field 1 665 710 nil nil nil t #s(yas--exit 711 nil))) #s(yas--exit 711 nil) 8 nil #s(yas--field 1 665 710 nil nil nil t #s(yas--exit 711 nil)) nil nil))) nil (25810 49068 940807 703000) 0 nil])
([nil nil ((721 . 722) (665 . 676) (t 25810 49068 938024 640000)) nil (25810 49082 927479 453000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-type-face fontified t)) . -612) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (#("k" 0 1 (face font-lock-type-face fontified t)) . -613) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (#("(" 0 1 (fontified t)) . -614) (undo-tree-id467 . -1) (undo-tree-id468 . -1) 615 (#("?" 0 1 (face rust-question-mark fontified t)) . -723) (undo-tree-id469 . -1) (#(")" 0 1 (fontified t)) . -724) (undo-tree-id470 . -1) 725 (t 25810 49082 928017 586000)) nil (25810 49090 477144 850000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -399) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) 400 (399 . 400) (t 25810 49090 478013 778000)) nil (25810 49108 138936 927000) 0 nil])
([nil nil ((282 . 289) (t 25810 49108 138004 863000)) nil (25810 49113 556414 969000) 0 nil])
([nil nil ((655 . 659) (t 25810 49113 561335 457000)) nil (25810 49125 728614 729000) 0 nil])
([nil nil ((710 . 713) (#("a" 0 1 (face font-lock-string-face fontified t)) . -710) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -711) (undo-tree-id486 . -1) (undo-tree-id487 . -1) 712 (711 . 712) (#("n" 0 1 (face font-lock-string-face fontified t)) . -711) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -712) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) 713 (t 25810 49125 727995 979000)) nil (25810 49131 877244 638000) 0 nil])
([nil nil ((1606 . 1607) (1588 . 1592) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1588) (undo-tree-id494 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1589) (undo-tree-id495 . -1) 1590 (1585 . 1590) (t 25810 49131 877992 871000)) nil (25810 49235 992436 90000) 0 nil])
([nil nil ((4675 . 4678) (#("]" 0 1 (fontified t)) . -4675) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (#(";" 0 1 (fontified t)) . -4676) (undo-tree-id512 . -1) (undo-tree-id513 . -1) 4677 (4673 . 4677) (4672 . 4673) (#(" " 0 1 (face font-lock-string-face fontified t)) . -4672) (undo-tree-id514 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -4673) (undo-tree-id515 . -1) (#(" " 0 1 (fontified t)) . -4674) (undo-tree-id516 . -1) (#("}" 0 1 (fontified t)) . -4675) (undo-tree-id517 . -1) 4676 (4673 . 4676) (#("}" 0 1 (face font-lock-string-face fontified t)) . -4673) (undo-tree-id518 . -1) 4674 (4661 . 4674) (4640 . 4661) (4626 . 4640) (#("V" 0 1 (face font-lock-type-face fontified t)) . -4626) (undo-tree-id519 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -4627) (undo-tree-id520 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -4628) (undo-tree-id521 . -1) (#(":" 0 1 (fontified t)) . -4629) (undo-tree-id522 . -1) (#(":" 0 1 (fontified t)) . -4630) (undo-tree-id523 . -1) 4631 (4614 . 4631) (4611 . 4614) (t 25810 49235 997940 233000)) nil (25810 49357 578084 767000) 0 nil])
([nil nil ((4617 . 4621) (#("m" 0 1 (fontified t)) . -4617) (undo-tree-id496 . -1) 4618 (4617 . 4618) (#("q" 0 1 (fontified t)) . -4681) (undo-tree-id497 . -1) (#("u" 0 1 (fontified t)) . -4682) (undo-tree-id498 . -1) (#("e" 0 1 (fontified t)) . -4683) (undo-tree-id499 . -1) (#("r" 0 1 (fontified t)) . -4684) (undo-tree-id500 . -1) (#("y" 0 1 (fontified t)) . -4685) (undo-tree-id501 . -1) (#("." 0 1 (fontified t)) . -4686) (undo-tree-id502 . -1) 4687 (4681 . 4687) (4678 . 4681)) nil (25810 49357 578062 556000) 0 nil])
([nil nil ((#("		let mut query = vec![(\"wait\", if wait { \"true\" } else { \"false\" })];
" 0 2 (fontified t) 2 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 15 (face font-lock-variable-name-face fontified t) 15 18 (fontified t) 18 22 (face font-lock-preprocessor-face fontified t) 22 24 (fontified t) 24 30 (face font-lock-string-face fontified t) 30 32 (fontified t) 32 34 (face font-lock-keyword-face fontified t) 34 42 (fontified t) 42 48 (face font-lock-string-face fontified t) 48 51 (fontified t) 51 55 (face font-lock-keyword-face fontified t) 55 58 (fontified t) 58 65 (face font-lock-string-face fontified t) 65 71 (fontified t)) . 4612) (undo-tree-id594 . -70) (undo-tree-id595 . 62) (undo-tree-id596 . -67) (undo-tree-id597 . -67) (undo-tree-id598 . -67) (undo-tree-id599 . -67) (undo-tree-id600 . -67) (undo-tree-id601 . -67) (undo-tree-id602 . -67) (undo-tree-id603 . 62) (undo-tree-id604 . -8) (undo-tree-id605 . -8) (undo-tree-id606 . -8) (undo-tree-id607 . -8) (undo-tree-id608 . -8) (undo-tree-id609 . -8) (undo-tree-id610 . -8) (undo-tree-id611 . -8) (undo-tree-id612 . -8) (undo-tree-id613 . -8) (undo-tree-id614 . -8) (undo-tree-id615 . -8) (undo-tree-id616 . -8) (undo-tree-id617 . -8) (undo-tree-id618 . -8) (undo-tree-id619 . -71) 4620 (t 25810 49357 577878 639000)) nil (25810 49418 176356 840000) 0 nil])
([nil nil ((3989 . 3992)) nil (25810 49418 176340 604000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3994 . 3995) (#("
" 0 1 (fontified nil)) . -4063) (3992 . 4064) 3991) nil (25810 49418 176339 520000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -4101) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (4102 . 4103) (4098 . 4102) (4096 . 4098) (4087 . 4096) (#("thread" 0 6 (fontified nil)) . 4087) (4087 . 4093) (#("thread_id" 0 9 (fontified nil)) . -4087) (4087 . 4096) (#("thread" 0 6 (fontified t)) . -4087) (undo-tree-id532 . -6) 4093 (4078 . 4093) (#("c" 0 1 (fontified t)) . -4078) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (#("h" 0 1 (fontified t)) . -4079) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (#("i" 0 1 (fontified t)) . -4080) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (#("d" 0 1 (fontified t)) . -4081) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (#(")" 0 1 (fontified t)) . -4082) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (#(" " 0 1 (fontified t)) . -4083) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (#("=" 0 1 (fontified t)) . -4084) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (#(" " 0 1 (fontified t)) . -4085) (undo-tree-id547 . -1) (undo-tree-id548 . -1) 4086 (4066 . 4086) (#("match thread_id {
			
		}" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 18 (fontified t) 18 21 (fontified t) 21 22 (fontified t) 22 25 (fontified t)) . 4066) (undo-tree-id549 . -25) (#("S" 0 1 (face font-lock-type-face fontified t)) . -4087) (undo-tree-id550 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -4088) (undo-tree-id551 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -4089) (undo-tree-id552 . -1) 4090 (4087 . 4090) (4083 . 4087) (#("	" 0 1 (fontified nil)) . -4086) (undo-tree-id553 . -1) (4087 . 4088) (4083 . 4087) (4081 . 4083) (4072 . 4081) (#("thread" 0 6 (fontified nil)) . 4072) (4072 . 4078) (#("thread_id" 0 9 (fontified nil)) . -4072) (4072 . 4081) (#("thread" 0 6 (fontified t)) . -4072) (undo-tree-id554 . -6) 4078 (4066 . 4078) (#("q" 0 1 (fontified t)) . -4066) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (#("u" 0 1 (fontified t)) . -4067) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (#("e" 0 1 (fontified t)) . -4068) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (#("r" 0 1 (fontified t)) . -4069) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (#("y" 0 1 (fontified t)) . -4070) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (#("." 0 1 (fontified t)) . -4071) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (#("a" 0 1 (fontified t)) . -4072) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (#("p" 0 1 (fontified t)) . -4073) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (#("p" 0 1 (fontified t)) . -4074) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (#("e" 0 1 (fontified t)) . -4075) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (#("n" 0 1 (fontified t)) . -4076) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (#("d" 0 1 (fontified t)) . -4077) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (#("(" 0 1 (fontified t)) . -4078) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (#("o" 0 1 (fontified t)) . -4079) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (#("t" 0 1 (fontified t)) . -4080) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (#("h" 0 1 (fontified t)) . -4081) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (#("e" 0 1 (fontified t)) . -4082) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (#("r" 0 1 (fontified t)) . -4083) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (#(")" 0 1 (fontified t)) . -4084) (undo-tree-id591 . -1) (undo-tree-id592 . -1) 4085 (apply yas--snippet-revive 4072 4085 #s(yas--snippet nil (#s(yas--field 1 4079 4084 nil nil nil nil #s(yas--exit 4085 nil))) #s(yas--exit 4085 nil) 9 nil #s(yas--field 1 4079 4084 nil nil nil nil #s(yas--exit 4085 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4079 4084 nil nil nil nil #s(yas--exit 4085 nil))) #s(yas--exit 4085 nil) 9 nil #s(yas--field 1 4079 4084 nil nil nil nil #s(yas--exit 4085 nil)) nil nil)) (4072 . 4085) (#("append(${1:other})$0" 0 20 (fontified nil)) . 4072) (4072 . 4092) (#("appe" 0 4 (fontified nil)) . 4072) (4072 . 4076) (#("append(â€¦)" 0 9 (fontified nil)) . -4072) (4072 . 4081) (#("appe" 0 4 (fontified t)) . -4072) (undo-tree-id593 . -4) 4076 (4066 . 4076) (4063 . 4066)) nil (25810 49418 176328 252000) 0 nil])
([nil nil ((4119 . 4120) (apply yas--snippet-revive 4108 4119 #s(yas--snippet nil (#s(yas--field 1 4113 4118 nil nil nil t #s(yas--exit 4119 nil))) #s(yas--exit 4119 nil) 10 nil #s(yas--field 1 4113 4118 nil nil nil t #s(yas--exit 4119 nil)) nil nil)) (4113 . 4118) (#("thrid" 0 5 (fontified nil)) . 4113) (undo-tree-id524 . -5) (4113 . 4118) (#("thrid" 0 5 (fontified t)) . -4113) (undo-tree-id525 . -5) (undo-tree-id526 . -5) (undo-tree-id527 . -5) 4118 (4114 . 4118) (#("value" 0 5 (fontified nil)) . 4114) (undo-tree-id528 . -5) (4113 . 4114) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4113 4118 nil nil nil t #s(yas--exit 4119 nil))) #s(yas--exit 4119 nil) 10 nil #s(yas--field 1 4113 4118 nil nil nil t #s(yas--exit 4119 nil)) nil nil)) (4108 . 4119) (#("push(${1:value})$0" 0 18 (fontified nil)) . 4108) (4108 . 4126) (#("push" 0 4 (fontified nil)) . 4108) (4108 . 4112) (#("push(â€¦)" 0 7 (fontified nil)) . -4108) (4108 . 4115) (#("push" 0 4 (fontified t)) . -4108) (undo-tree-id529 . -4) 4112 (4102 . 4112) (4098 . 4102)) nil (25810 49488 844438 572000) 0 nil])
([nil nil ((#("&[
                (\"wait\", if wait { \"true\" } else { \"false\" }),
                (\"thread_id\", &thread_id.to_string()),
            ]" 0 1 (face rust-ampersand-face fontified t) 1 20 (fontified t) 20 26 (face font-lock-string-face fontified t) 26 28 (fontified t) 28 30 (face font-lock-keyword-face fontified t) 30 38 (fontified t) 38 44 (face font-lock-string-face fontified t) 44 47 (fontified t) 47 51 (face font-lock-keyword-face fontified t) 51 54 (fontified t) 54 61 (face font-lock-string-face fontified t) 61 83 (fontified t) 83 94 (face font-lock-string-face fontified t) 94 96 (fontified t) 96 97 (face rust-ampersand-face fontified t) 97 134 (fontified t)) . 4834) (undo-tree-id662 . -133)) ((4834 . 4968)) (25810 49490 500604 56000) 0 nil])
([nil nil ((4834 . 4839) (#("query" 0 5 (fontified nil)) . 4834) (4834 . 4839) (#("query" 0 5 (fontified nil)) . 4834) (undo-tree-id663 . -5) (4834 . 4839)) ((#("query" 0 5 (fontified nil)) . 4834) (undo-tree-id661 . -5) (4834 . 4839) (#("query" 0 5 (fontified nil)) . 4834) (4834 . 4839) (#("query" 0 5 (fontified t)) . 4834)) (25810 49490 703272 583000) 0 nil])
([nil nil ((4834 . 4835)) ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 4834)) (25810 49490 972103 926000) 0 nil])
([nil nil ((4133 . 4134) (4113 . 4127)) ((#("(\"thread_id\", " 0 1 (fontified nil) 1 12 (face font-lock-string-face fontified nil) 12 14 (fontified nil)) . 4113) (undo-tree-id648 . -13) (undo-tree-id650 . -13) (undo-tree-id652 . -13) (undo-tree-id654 . -13) (undo-tree-id656 . -14) (undo-tree-id658 . -14) (undo-tree-id660 . -14) (#(")" 0 1 (fontified t)) . 4133)) (25810 49491 338061 583000) 0 nil])
([nil nil ((4135 . 4146) (#("to_string()$0" 0 13 (fontified nil)) . 4135) (4135 . 4148) (#("to_str" 0 6 (fontified nil)) . 4135) (4135 . 4141) (#("to_string() (as ToString)" 0 25 (fontified nil)) . 4135) (4135 . 4160) (#("to_str" 0 6 (fontified nil)) . 4135) (4133 . 4141) (#("0" 0 1 (fontified nil)) . 4133) (4132 . 4134)) ((#("." 0 1 (fontified nil)) . 4132) (undo-tree-id644 . -1) (#("0" 0 1 (fontified nil)) . 4133) (4133 . 4134) (#("0" 0 1 (fontified nil)) . 4133) (undo-tree-id645 . -1) (#(".to_str" 0 1 (fontified nil) 1 7 (fontified nil)) . 4134) (undo-tree-id646 . -1) (4135 . 4141) (#("to_string() (as ToString)" 0 25 (fontified nil)) . 4135) (4135 . 4160) (#("to_str" 0 6 (fontified nil)) . 4135) (4135 . 4141) (#("to_string()$0" 0 13 (fontified nil)) . 4135) (4135 . 4148) (#("to_string()" 0 11 (fontified t)) . 4135) (undo-tree-id647 . -11) (t 25810 49477 801150 959000)) (25810 49492 336911 201000) 0 nil])
([nil nil ((4127 . 4128) (t 25810 49477 801150 959000)) nil (25810 49495 911074 669000) 0 nil])
([nil nil ((4008 . 4023) (4072 . 4079) (4048 . 4055) (apply yas--snippet-revive 4024 4030 #s(yas--snippet nil nil #s(yas--exit 4030 nil) 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4030 nil) 12 nil nil nil nil)) (4024 . 4030) (#("into()$0" 0 8 (fontified nil)) . 4024) (4024 . 4032) (#("into" 0 4 (fontified nil)) . 4024) (4024 . 4028) (#("into() (as Into)" 0 16 (fontified nil)) . -4024) (4024 . 4040) (#("into" 0 4 (fontified t)) . -4024) (undo-tree-id664 . -4) 4028 (4023 . 4028) (t 25810 49495 911141 757000)) nil (25810 49540 439923 792000) 0 nil])
([nil nil ((10 . 11) (30 . 44) (t 25810 49540 437785 803000)) nil (25810 49550 870339 249000) 0 nil])
([nil nil ((apply yas--snippet-revive 4177 4183 #s(yas--snippet nil nil #s(yas--exit 4183 nil) 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4183 nil) 13 nil nil nil nil)) (4177 . 4183) (#("into()$0" 0 8 (fontified nil)) . 4177) (4177 . 4185) (#("into" 0 4 (fontified nil)) . 4177) (4177 . 4181) (#("into() (as Into)" 0 16 (fontified nil)) . -4177) (4177 . 4193) (#("into" 0 4 (fontified t)) . -4177) (undo-tree-id665 . -4) (undo-tree-id666 . -4) (undo-tree-id667 . -4) (undo-tree-id668 . -4) (undo-tree-id669 . -4) (undo-tree-id670 . -4) 4181 (4176 . 4181) (t 25810 49550 877780 499000)) nil (25810 49559 1000 889000) 0 nil])
([nil nil ((4048 . 4049) (4029 . 4040) (t 25810 49559 14443 30000)) nil (25810 49568 463457 535000) 0 nil])
([nil nil ((apply yas--snippet-revive 4218 4224 #s(yas--snippet nil nil #s(yas--exit 4224 nil) 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4224 nil) 14 nil nil nil nil)) (4218 . 4224) (#("into()$0" 0 8 (fontified nil)) . 4218) (4218 . 4226) (#("into" 0 4 (fontified nil)) . 4218) (4218 . 4222) (#("into() (as Into)" 0 16 (fontified nil)) . -4218) (4218 . 4234) (#("into" 0 4 (fontified t)) . -4218) (undo-tree-id671 . -4) (undo-tree-id672 . -4) (undo-tree-id673 . -4) (undo-tree-id674 . -4) (undo-tree-id675 . -4) (undo-tree-id676 . -4) 4222 (4216 . 4222) (#(")" 0 1 (fontified t)) . -4216) (undo-tree-id677 . -1) 4217 (t 25810 49568 471104 889000)) nil (25810 49580 787868 6000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 4197) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (t 25810 49580 791098 626000)) nil (25810 49585 304253 842000) 0 nil])
([nil nil ((5218 . 5237) (5197 . 5218) (t 25810 49585 307762 997000)) nil (25810 49651 920055 350000) 0 nil])
([nil nil ((4840 . 4845) (4819 . 4840) (4798 . 4819) (4795 . 4798) (t 25810 49651 924395 785000)) nil (25810 49675 14878 362000) 0 nil])
([nil nil ((308 . 313) (#("id" 0 2 (face font-lock-variable-name-face fontified t)) . 308) (406 . 411) (#("id" 0 2 (fontified t)) . 406) 404 (636 . 641) (#("id" 0 2 (fontified t)) . 636) 634 (t 25810 49675 21050 702000)) nil (25810 51372 729000 254000) 0 nil])
([nil nil ((339 . 340) (315 . 325)) nil (25810 51372 728990 750000) 0 nil])
([nil nil ((510 . 517) (#("," 0 1 (fontified t)) . -512) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (#(" " 0 1 (fontified t)) . -513) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (#("c" 0 1 (fontified t)) . -514) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (#("h" 0 1 (fontified t)) . -515) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (#("a" 0 1 (fontified t)) . -516) (undo-tree-id689 . -1) (#("n" 0 1 (fontified t)) . -517) (undo-tree-id690 . -1) (#("n" 0 1 (fontified t)) . -518) (undo-tree-id691 . -1) (#("e" 0 1 (fontified t)) . -519) (undo-tree-id692 . -1) (#("l" 0 1 (fontified t)) . -520) (undo-tree-id693 . -1) (#("." 0 1 (fontified t)) . -521) (undo-tree-id694 . -1) 522 (516 . 522) (#("i" 0 1 (fontified t)) . -516) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (#("d" 0 1 (fontified t)) . -517) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (#("." 0 1 (fontified t)) . -518) (undo-tree-id699 . -1) (#("i" 0 1 (fontified t)) . -519) (undo-tree-id700 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -520) (undo-tree-id701 . -1) (#("t" 0 1 (fontified t)) . -521) (undo-tree-id702 . -1) (#("o" 0 1 (fontified t)) . -522) (undo-tree-id703 . -1) 523 (512 . 523) (#("c" 0 1 (face rust-string-interpolation fontified t)) . -510) (undo-tree-id704 . -1) (#("h" 0 1 (face rust-string-interpolation fontified t)) . -511) (undo-tree-id705 . -1) (#("i" 0 1 (face rust-string-interpolation fontified t)) . -512) (undo-tree-id706 . -1) (#("d" 0 1 (face rust-string-interpolation fontified t)) . -513) (undo-tree-id707 . -1) 514 (t 25810 51372 737425 446000)) nil (25810 51395 45442 189000) 0 nil])
([nil nil ((510 . 514) (#(" " 0 1 (fontified t)) . -340) (undo-tree-id708 . -1) (#("+" 0 1 (fontified t)) . -341) (undo-tree-id709 . -1) (#(" " 0 1 (fontified t)) . -342) (undo-tree-id710 . -1) 343 (339 . 343) (#(">" 0 1 (fontified t)) . -339) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (#(" " 0 1 (fontified t)) . -340) (undo-tree-id715 . -1) (#("+" 0 1 (fontified t)) . -341) (undo-tree-id716 . -1) (#(" " 0 1 (fontified t)) . -342) (undo-tree-id717 . -1) (#("D" 0 1 (face font-lock-type-face fontified t)) . -343) (undo-tree-id718 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -344) (undo-tree-id719 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -345) (undo-tree-id720 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -346) (undo-tree-id721 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -347) (undo-tree-id722 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -348) (undo-tree-id723 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -349) (undo-tree-id724 . -1) 350 (340 . 350) (#("+" 0 1 (fontified t)) . -340) (undo-tree-id725 . -1) (#(" " 0 1 (fontified t)) . -341) (undo-tree-id726 . -1) 342 (340 . 342) (509 . 511) (#("{" 0 1 (face font-lock-string-face fontified t)) . -509) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -510) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -511) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -512) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -513) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -514) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -515) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -516) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (#("}" 0 1 (face rust-string-interpolation fontified t)) . -517) (undo-tree-id743 . 1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) 518 (t 25810 51395 50750 671000)) nil (25810 51461 624266 498000) 0 nil])
([nil nil ((apply yas--snippet-revive 522 528 #s(yas--snippet nil nil #s(yas--exit 528 nil) 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 528 nil) 17 nil nil nil nil)) (522 . 528) (#("into()$0" 0 8 (fontified nil)) . 522) (522 . 530) (#("into" 0 4 (fontified nil)) . 522) (522 . 526) (#("into() (as Into)" 0 16 (fontified nil)) . -522) (522 . 538) (#("into" 0 4 (fontified t)) . -522) (undo-tree-id746 . -4) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -4) (undo-tree-id750 . -4) (undo-tree-id751 . -4) (undo-tree-id752 . -4) 526 (517 . 526) (512 . 517) (#("c" 0 1 (face rust-string-interpolation fontified t)) . -510) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (#("h" 0 1 (face rust-string-interpolation fontified t)) . -511) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (#("i" 0 1 (face rust-string-interpolation fontified t)) . -512) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (#("d" 0 1 (face rust-string-interpolation fontified t)) . -513) (undo-tree-id759 . -1) 514 (t 25810 51461 627392 915000)) nil (25810 51471 640158 72000) 0 nil])
([nil nil ((apply yas--snippet-revive 782 788 #s(yas--snippet nil nil #s(yas--exit 788 nil) 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 788 nil) 18 nil nil nil nil)) (782 . 788) (#("into()$0" 0 8 (fontified nil)) . 782) (782 . 790) (#("into" 0 4 (fontified nil)) . 782) (782 . 786) (#("into() (as Into)" 0 16 (fontified nil)) . -782) (782 . 798) (#("into" 0 4 (fontified t)) . -782) (undo-tree-id760 . -4) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -4) (undo-tree-id764 . -4) (undo-tree-id765 . -4) (undo-tree-id766 . -4) (undo-tree-id767 . -4) 786 (775 . 786) (772 . 775) (#("c" 0 1 (face rust-string-interpolation fontified t)) . -770) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (#("h" 0 1 (face rust-string-interpolation fontified t)) . -771) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (#("i" 0 1 (face rust-string-interpolation fontified t)) . -772) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (#("d" 0 1 (face rust-string-interpolation fontified t)) . -773) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (#("i" 0 1 (face rust-string-interpolation fontified t)) . -774) (undo-tree-id780 . -1) 775 (774 . 775) (t 25810 51471 647389 213000)) nil (25810 51481 606185 440000) 0 nil])
([nil nil ((424 . 425) (apply yas--snippet-revive 418 424 #s(yas--snippet nil nil #s(yas--exit 424 nil) 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 424 nil) 20 nil nil nil nil)) (418 . 424) (#("into()$0" 0 8 (fontified nil)) . 418) (418 . 426) (#("into" 0 4 (fontified nil)) . 418) (418 . 422) (#("into() (as Into)" 0 16 (fontified nil)) . -418) (418 . 434) (#("into" 0 4 (fontified t)) . -418) (undo-tree-id781 . -4) 422 (417 . 422) (396 . 417) (394 . 396) (apply yas--snippet-revive 671 677 #s(yas--snippet nil nil #s(yas--exit 677 nil) 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 677 nil) 19 nil nil nil nil)) (671 . 677) (#("into()$0" 0 8 (fontified nil)) . 671) (671 . 679) (#("into" 0 4 (fontified nil)) . 671) (671 . 675) (#("into() (as Into)" 0 16 (fontified nil)) . -671) (671 . 687) (#("into" 0 4 (fontified t)) . -671) (undo-tree-id782 . -4) 675 (670 . 675) (t 25810 51481 617385 521000)) nil (25810 51551 986446 16000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -808) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (#(" " 0 1 (fontified t)) . -809) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (#("c" 0 1 (fontified t)) . -810) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (#("h" 0 1 (fontified t)) . -811) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (#("a" 0 1 (fontified t)) . -812) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (#("n" 0 1 (fontified t)) . -813) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (#("n" 0 1 (fontified t)) . -814) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (#("e" 0 1 (fontified t)) . -815) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (#("l" 0 1 (fontified t)) . -816) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (#("." 0 1 (fontified t)) . -817) (undo-tree-id802 . -1) (#("i" 0 1 (fontified t)) . -818) (undo-tree-id803 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -819) (undo-tree-id804 . -1) (#("t" 0 1 (fontified t)) . -820) (undo-tree-id805 . -1) (#("o" 0 1 (fontified t)) . -821) (undo-tree-id806 . -1) (#("(" 0 1 (fontified t)) . -822) (undo-tree-id807 . -1) (#(")" 0 1 (fontified t)) . -823) (undo-tree-id808 . -1) 824 (799 . 806) (541 . 548) (#("," 0 1 (fontified t)) . -543) (undo-tree-id809 . -1) (#(" " 0 1 (fontified t)) . -544) (undo-tree-id810 . -1) (#("c" 0 1 (fontified t)) . -545) (undo-tree-id811 . -1) (#("h" 0 1 (fontified t)) . -546) (undo-tree-id812 . -1) (#("a" 0 1 (fontified t)) . -547) (undo-tree-id813 . -1) (#("n" 0 1 (fontified t)) . -548) (undo-tree-id814 . -1) (#("n" 0 1 (fontified t)) . -549) (undo-tree-id815 . -1) (#("e" 0 1 (fontified t)) . -550) (undo-tree-id816 . -1) (#("l" 0 1 (fontified t)) . -551) (undo-tree-id817 . -1) 552 (#("." 0 1 (fontified t)) . -552) (undo-tree-id818 . -1) (#("i" 0 1 (fontified t)) . -553) (undo-tree-id819 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -554) (undo-tree-id820 . -1) (#("t" 0 1 (fontified t)) . -555) (undo-tree-id821 . -1) (#("o" 0 1 (fontified t)) . -556) (undo-tree-id822 . -1) (#("(" 0 1 (fontified t)) . -557) (undo-tree-id823 . -1) (#(")" 0 1 (fontified t)) . -558) (undo-tree-id824 . -1) 559 (t 25810 51551 987359 284000)) nil (25810 51568 630257 364000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -693) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (#("n" 0 1 (fontified t)) . -694) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (#("t" 0 1 (fontified t)) . -695) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (#("o" 0 1 (fontified t)) . -696) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (#("(" 0 1 (fontified t)) . -697) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (#(")" 0 1 (fontified t)) . -698) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (#("." 0 1 (fontified t)) . -699) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) 700 (t 25810 51568 634019 701000)) nil (25810 51573 335431 193000) 0 nil])
([nil nil ((332 . 342) (317 . 332) (296 . 317) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -296) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -297) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -298) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -299) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -300) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -301) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -302) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -303) (undo-tree-id885 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -304) (undo-tree-id886 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -305) (undo-tree-id887 . -1) (#("w" 0 1 (face font-lock-doc-face fontified t)) . -306) (undo-tree-id888 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -307) (undo-tree-id889 . -1) (#("b" 0 1 (face font-lock-doc-face fontified t)) . -308) (undo-tree-id890 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -309) (undo-tree-id891 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -310) (undo-tree-id892 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -311) (undo-tree-id893 . -1) (#("k" 0 1 (face font-lock-doc-face fontified t)) . -312) (undo-tree-id894 . -1) 313 (303 . 313) (298 . 303) (287 . 298) (266 . 287) (245 . 266) (224 . 245) (221 . 224) (220 . 221) (t 25810 51573 337351 266000)) nil (25810 51605 810320 785000) 0 nil])
([nil nil ((478 . 479) (467 . 468) (#(" " 0 1 (fontified nil)) . 466) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (467 . 468) (430 . 431) (#(" " 0 1 (fontified nil)) . 429) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (430 . 431) (393 . 395) (t 25810 51605 814005 687000)) nil (25810 51618 656608 446000) 0 nil])
([nil nil ((1016 . 1027) (995 . 1016) (993 . 995) (#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . -993) (undo-tree-id900 . -1) (#("w" 0 1 (face font-lock-comment-face fontified t)) . -994) (undo-tree-id901 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -995) (undo-tree-id902 . -1) 996 (991 . 996) (990 . 991) (987 . 990) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -987) (undo-tree-id903 . -1) 988 (985 . 988) (964 . 985) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -964) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -965) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (#("x" 0 1 (face font-lock-doc-face fontified t)) . -966) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -967) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -968) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -969) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -970) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -971) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -972) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -973) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -974) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -975) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -976) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -977) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -978) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -979) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -980) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (#("y" 0 1 (face font-lock-doc-face fontified t)) . -981) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -982) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -983) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -984) (undo-tree-id944 . -1) (undo-tree-id945 . -1) 985 (#(" " 0 1 (face font-lock-doc-face fontified t)) . -985) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -986) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -987) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -988) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -989) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -990) (undo-tree-id956 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -991) (undo-tree-id957 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -992) (undo-tree-id958 . -1) (#("y" 0 1 (face font-lock-doc-face fontified t)) . -993) (undo-tree-id959 . -1) (#("'" 0 1 (face font-lock-doc-face fontified t)) . -994) (undo-tree-id960 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -995) (undo-tree-id961 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -996) (undo-tree-id962 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -997) (undo-tree-id963 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -998) (undo-tree-id964 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -999) (undo-tree-id965 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -1000) (undo-tree-id966 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -1001) (undo-tree-id967 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -1002) (undo-tree-id968 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -1003) (undo-tree-id969 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -1004) (undo-tree-id970 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -1005) (undo-tree-id971 . -1) 1006 (986 . 1006) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -986) (undo-tree-id972 . -1) 987 (979 . 987) (976 . 979) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -976) (undo-tree-id973 . -1) 977 (973 . 977) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -973) (undo-tree-id974 . -1) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -974) (undo-tree-id975 . -1) 975 (954 . 975) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -954) (undo-tree-id976 . -1) 955 (954 . 955) (945 . 954) (938 . 945) (936 . 938) (t 25810 51618 660667 494000)) nil (25810 51682 10001 83000) 0 nil])
([nil nil ((985 . 1002) (964 . 985) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -964) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (#("d" 0 1 (face font-lock-doc-face fontified nil)) . -965) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (#("d" 0 1 (face font-lock-doc-face fontified nil)) . -966) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -967) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -968) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) 969 (#("t" 0 1 (face font-lock-doc-face fontified t)) . -969) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -970) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -971) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -972) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -973) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -974) (undo-tree-id1012 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -975) (undo-tree-id1013 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -976) (undo-tree-id1014 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -977) (undo-tree-id1015 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -978) (undo-tree-id1016 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -979) (undo-tree-id1017 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -980) (undo-tree-id1018 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -981) (undo-tree-id1019 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -982) (undo-tree-id1020 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -983) (undo-tree-id1021 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -984) (undo-tree-id1022 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -985) (undo-tree-id1023 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -986) (undo-tree-id1024 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -987) (undo-tree-id1025 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -988) (undo-tree-id1026 . -1) (#("y" 0 1 (face font-lock-doc-face fontified t)) . -989) (undo-tree-id1027 . -1) 990 (t 25810 51682 17310 74000)) nil (25810 51693 666300 751000) 0 nil])
([nil nil ((1919 . 1920) (1894 . 1904) (t 25810 51693 673972 289000)) nil (25810 51822 896001 841000) 0 nil])
([nil nil ((4500 . 4507) (#("
" 0 1 (fontified t)) . -2071) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (#("	" 0 1 (fontified t)) . -2072) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (#("	" 0 1 (fontified t)) . -2073) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (#("l" 0 1 (fontified t)) . -2074) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified nil)) . -2075) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -2076) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (#(" " 0 1 (fontified t)) . -2077) (undo-tree-id1040 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -2078) (undo-tree-id1041 . -1) (#("h" 0 1 (face font-lock-variable-name-face fontified t)) . -2079) (undo-tree-id1042 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -2080) (undo-tree-id1043 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -2081) (undo-tree-id1044 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -2082) (undo-tree-id1045 . -1) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -2083) (undo-tree-id1046 . -1) (#("_" 0 1 (face font-lock-variable-name-face fontified t)) . -2084) (undo-tree-id1047 . -1) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -2085) (undo-tree-id1048 . -1) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -2086) (undo-tree-id1049 . -1) (#(" " 0 1 (fontified t)) . -2087) (undo-tree-id1050 . -1) (#("=" 0 1 (fontified t)) . -2088) (undo-tree-id1051 . -1) (#(" " 0 1 (fontified t)) . -2089) (undo-tree-id1052 . -1) 2090 (2085 . 2090) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -2085) (undo-tree-id1053 . -1) 2086 (2077 . 2086) (2074 . 2077) (2071 . 2074) (t 25810 51822 897255 901000)) nil (25810 51843 402173 976000) 0 nil])
([nil nil ((4368 . 4374) (4347 . 4368) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -4347) (undo-tree-id1054 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -4348) (undo-tree-id1055 . -1) 4349 (4348 . 4349) (4327 . 4348) (4306 . 4327) (4304 . 4306) (#("		" 0 2 (fontified nil)) . 4303) (undo-tree-id1056 . -2) (undo-tree-id1057 . -1) (undo-tree-id1058 . -2) (4305 . 4306) (t 25810 51843 410581 283000)) nil (25810 51872 684234 276000) 0 nil])
([nil nil ((1781 . 1785) (t 25810 51872 687236 580000)) nil (25810 51904 426365 543000) 0 nil])
([nil nil ((1189 . 1193) (t 25810 51904 430559 807000)) nil (25810 51909 935925 690000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1200) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (#("o" 0 1 (fontified t)) . -1201) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (#("k" 0 1 (fontified t)) . -1202) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (#("e" 0 1 (fontified t)) . -1203) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (#("n" 0 1 (fontified t)) . -1204) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (#(":" 0 1 (fontified t)) . -1205) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (#(" " 0 1 (fontified t)) . -1206) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1207) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1208) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1209) (undo-tree-id1077 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1210) (undo-tree-id1078 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1211) (undo-tree-id1079 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1212) (undo-tree-id1080 . -1) 1213 (t 25810 51909 943891 649000)) nil (25810 52222 388983 40000) 0 nil])
([nil nil ((1040 . 1041) (1028 . 1036) (#("w" 0 1 (face font-lock-doc-face fontified t)) . -1028) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -1029) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) 1030 (t 25810 52222 390464 372000)) nil (25810 52703 617903 513000) 0 nil])
([nil nil ((2852 . 2853) (2831 . 2852) (2826 . 2831) (2823 . 2826) (#("p" 0 1 (face font-lock-comment-face fontified t)) . -2823) (undo-tree-id1087 . -1) 2824 (2823 . 2824) (#("p" 0 1 (face font-lock-comment-face fontified t)) . -2823) (undo-tree-id1088 . -1) (#("a" 0 1 (face font-lock-comment-face fontified t)) . -2824) (undo-tree-id1089 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -2825) (undo-tree-id1090 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -2826) (undo-tree-id1091 . -1) 2827 (2816 . 2827) (#("c" 0 1 (face font-lock-comment-face fontified t)) . -2816) (undo-tree-id1092 . -1) 2817 (2808 . 2817) (2787 . 2808) (2774 . 2787) (2753 . 2774) (2732 . 2753) (2727 . 2732) (t 25810 52703 620297 117000)) nil (25810 52750 486474 101000) 0 nil])
([nil nil ((2894 . 2909) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -2894) (undo-tree-id1093 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -2895) (undo-tree-id1094 . -1) 2896 (2881 . 2896) (2878 . 2881) (2857 . 2878) (#("f" 0 1 (face font-lock-comment-face fontified t)) . -2857) (undo-tree-id1095 . -1) (#("y" 0 1 (face font-lock-comment-face fontified t)) . -2858) (undo-tree-id1096 . -1) (#("c" 0 1 (face font-lock-comment-face fontified t)) . -2859) (undo-tree-id1097 . -1) (#("=" 0 1 (face font-lock-comment-face fontified t)) . -2860) (undo-tree-id1098 . -1) 2861 (2853 . 2861) (t 25810 52750 490279 990000)) nil (25810 52805 248600 955000) 0 nil])
([nil nil ((1836 . 1837) (t 25810 52805 250259 857000)) nil (25811 32222 471257 10000) 0 nil])
([nil nil ((2444 . 2453) (t 25811 32222 487560 655000)) nil (25811 32341 731479 897000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -972) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (973 . 974) (971 . 973) (960 . 971) (937 . 941) (950 . 956) (943 . 950) (937 . 943) (936 . 937) (t 25811 32341 745510 641000)) nil (25811 39724 401145 158000) 0 nil])
([nil nil ((959 . 960) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -959) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -960) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) 961 (976 . 980) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -976) (undo-tree-id1117 . -1) 977 (976 . 977) (977 . 978) (#("W" 0 1 (face font-lock-doc-face fontified t)) . -977) (undo-tree-id1118 . -1) 978 (974 . 992) (958 . 974) (937 . 958) (936 . 937) (1011 . 1013) (1003 . 1011) (#("Resp" 0 4 (fontified nil)) . 1003) (1003 . 1007) (#("Response" 0 8 (fontified nil)) . -1003) (1003 . 1011) (#("Resp" 0 4 (face font-lock-type-face fontified t)) . -1003) (undo-tree-id1119 . -4) 1007 (1001 . 1007) (994 . 1001) (#("reqw" 0 4 (fontified nil)) . 994) (994 . 998) (#("reqwest" 0 7 (fontified nil)) . -994) (994 . 1001) (#("reqw" 0 4 (fontified t)) . -994) (undo-tree-id1120 . -4) 998 (993 . 998) (990 . 993) (983 . 990) (#("q" 0 1 (face font-lock-function-name-face fontified t)) . -983) (undo-tree-id1121 . -1) 984 (976 . 984) (#("j" 0 1 (face font-lock-function-name-face fontified t)) . -976) (undo-tree-id1122 . -1) (#("s" 0 1 (face font-lock-function-name-face fontified t)) . -977) (undo-tree-id1123 . -1) (#("o" 0 1 (face font-lock-function-name-face fontified t)) . -978) (undo-tree-id1124 . -1) (#("n" 0 1 (face font-lock-function-name-face fontified t)) . -979) (undo-tree-id1125 . -1) 980 (976 . 980) (#("j" 0 1 (face font-lock-function-name-face fontified t)) . -976) (undo-tree-id1126 . -1) (#("s" 0 1 (face font-lock-function-name-face fontified t)) . -977) (undo-tree-id1127 . -1) (#("o" 0 1 (face font-lock-function-name-face fontified t)) . -978) (undo-tree-id1128 . -1) (#("n" 0 1 (face font-lock-function-name-face fontified t)) . -979) (undo-tree-id1129 . -1) 980 (976 . 980) (973 . 976) (971 . 973)) nil (25811 39724 401133 896000) 0 nil])
([nil nil ((1112 . 1113) (#(" {
		
	}" 0 6 (fontified t) 6 8 (fontified t)) . 1112) (undo-tree-id1134 . -8) (undo-tree-id1135 . -8) (undo-tree-id1136 . -8) (undo-tree-id1137 . -8) (undo-tree-id1138 . -8) (undo-tree-id1139 . -8) (undo-tree-id1140 . -8) (undo-tree-id1141 . -8) (undo-tree-id1142 . -8) (undo-tree-id1143 . -8) (1049 . 1050) (#(" " 0 1 (fontified t)) . -1049) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (#("{" 0 1 (fontified t)) . -1050) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (#("
" 0 1 (fontified t)) . -1051) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (#("	" 0 1 (fontified t)) . -1052) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (#("}" 0 1 (fontified t)) . -1053) (undo-tree-id1152 . -1) 1054 (#("	" 0 1 (fontified nil)) . -1053) (undo-tree-id1153 . -1) (1054 . 1055) (1051 . 1054) (1045 . 1051) (1032 . 1045) (1030 . 1032) (1094 . 1097) (#("	" 0 1 (fontified nil)) . -1096) (undo-tree-id1154 . -1) (1097 . 1098) (1094 . 1097) (1093 . 1094) (1092 . 1093) (1087 . 1091) (#("Self" 0 4 (fontified nil)) . 1087) (1087 . 1091) (#("Self" 0 4 (face font-lock-type-face fontified t)) . -1087) (undo-tree-id1155 . -4) (undo-tree-id1156 . -4) 1091 (1087 . 1091) (apply yas--snippet-revive 1080 1088 #s(yas--snippet nil nil #s(yas--exit 1087 nil) 76 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1087 nil) 76 nil nil nil nil)) (1080 . 1088) (#("Result<$0>" 0 10 (fontified nil)) . 1080) (1080 . 1090) (#("Resu" 0 4 (fontified nil)) . 1080) (1080 . 1084) (#("Result<â€¦>" 0 9 (fontified nil)) . -1080) (1080 . 1089) (#("Resu" 0 4 (face font-lock-type-face fontified t)) . -1080) (undo-tree-id1157 . -4) 1084 (1075 . 1084) (1070 . 1075) (#("," 0 1 (fontified t)) . -1070) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (#(" " 0 1 (fontified t)) . -1071) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) 1072 (t 25811 39724 412246 629000)) nil (25811 39783 571569 131000) 0 nil])
([nil nil ((1030 . 1035) (#("Sized" 0 5 (fontified nil)) . 1030) (1030 . 1035) (#("Sized (alias ?)" 0 15 (fontified nil)) . -1030) (1030 . 1045) (#("Sized" 0 5 (face font-lock-type-face fontified t)) . -1030) (undo-tree-id1163 . -5) (undo-tree-id1164 . -5) (undo-tree-id1165 . -5) (undo-tree-id1166 . -5) 1035 (1028 . 1035) (t 25811 39783 575634 317000)) nil (25811 39803 941084 319000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1161) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (1162 . 1163) (1160 . 1162) (1151 . 1160) (1129 . 1151) (#("Webh" 0 4 (fontified nil)) . 1129) (1129 . 1133) (#("WebhookExecutionResult" 0 22 (fontified nil)) . -1129) (1129 . 1151) (#("Webh" 0 4 (face font-lock-type-face fontified t)) . -1129) (undo-tree-id1185 . -4) 1133 (1124 . 1133) (#("m" 0 1 (fontified t)) . -1124) (undo-tree-id1186 . -1) 1125 (#("i" 0 1 (fontified t)) . -1125) (undo-tree-id1187 . -1) 1126 (1124 . 1126) (#("p" 0 1 (fontified t)) . -1124) (undo-tree-id1188 . -1) (#("u" 0 1 (fontified t)) . -1125) (undo-tree-id1189 . -1) (#("b" 0 1 (face font-lock-keyword-face fontified t)) . -1126) (undo-tree-id1190 . -1) (#(" " 0 1 (fontified t)) . -1127) (undo-tree-id1191 . -1) 1128 (1124 . 1128) (1122 . 1124) (t 25811 39803 948986 416000)) nil (25811 39894 484003 363000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1257) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) 1258 (1257 . 1258) (apply yas--snippet-revive 1251 1257 #s(yas--snippet nil nil #s(yas--exit 1257 nil) 78 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1257 nil) 78 nil nil nil nil)) (1251 . 1257) (#("json()$0" 0 8 (fontified nil)) . 1251) (1251 . 1259) (#("json" 0 4 (fontified nil)) . 1251) (1251 . 1255) (#("json()" 0 6 (fontified nil)) . -1251) (1251 . 1257) (#("json" 0 4 (fontified t)) . -1251) (undo-tree-id1177 . -4) (undo-tree-id1178 . -4) 1255 (1248 . 1255) (apply yas--snippet-revive 1183 1251 #s(yas--snippet nil nil #s(yas--exit 1248 nil) 77 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1248 nil) 77 nil nil nil nil)) (1183 . 1251) (#("fn from_response(re: reqwest::Response) -> ser::Result<Self> {
		$0
	}" 0 41 (fontified nil) 41 42 (syntax-table (1) fontified nil) 42 70 (fontified nil)) . 1183) (1251 . 1252) (1246 . 1248) (#("    " 0 4 (fontified nil)) . 1246) (1183 . 1254) (#("fn from_re" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 10 (fontified nil)) . 1183) (undo-tree-id1179 . -3) (1186 . 1193) (#("fn from_response(..)" 0 20 (fontified nil)) . -1186) (1186 . 1206) (#("from_re" 0 7 (face font-lock-function-name-face fontified t)) . -1186) (undo-tree-id1180 . -7) 1193 (1183 . 1193) (1181 . 1183) (1172 . 1181) (1162 . 1172) (1160 . 1162)) nil (25811 39894 483991 276000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1257) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) 1258 (1257 . 1258) (#("." 0 1 (fontified t)) . -1257) (undo-tree-id1172 . -1) 1258 (1257 . 1258)) nil (25811 39894 483979 118000) 0 nil])
([nil nil ((1059 . 1065)) nil (25811 39894 483964 466000) 0 nil])
([nil nil ((248 . 249) (#("
" 0 1 (fontified t)) . -248) (undo-tree-id0 . -1) (undo-tree-id1 . 1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("	" 0 1 (fontified t)) . -249) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 250 (248 . 250) (237 . 248) (#("asyn" 0 4 (fontified nil)) . 237) (237 . 241) (#("async_trait" 0 11 (fontified nil)) . -237) (237 . 248) (#("asyn" 0 4 (fontified t)) . -237) (undo-tree-id10 . -4) (undo-tree-id11 . -4) 241 (235 . 241) (224 . 235) (#("async_tr" 0 8 (fontified nil)) . 224) (224 . 232) (#("async_trait" 0 11 (fontified nil)) . -224) (224 . 235) (#("async_tr" 0 8 (face font-lock-constant-face fontified t)) . -224) (undo-tree-id12 . -8) 232 (220 . 232) (219 . 220) (t 25811 39894 492403 391000)) nil (25811 41421 364212 32000) 0 nil])
([nil nil ((1175 . 1189) (1174 . 1175) (1033 . 1040) (1026 . 1033) (1025 . 1026) (t 25811 41421 370435 717000)) nil (25811 41430 643671 719000) 0 nil])
([nil nil ((1249 . 1255) (#("." 0 1 (fontified t)) . -1316) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("j" 0 1 (fontified t)) . -1317) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("s" 0 1 (fontified t)) . -1318) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("o" 0 1 (fontified t)) . -1319) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("n" 0 1 (fontified t)) . -1320) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("(" 0 1 (fontified t)) . -1321) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#(")" 0 1 (fontified t)) . -1322) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 1323 (t 25811 41430 653727 608000)) nil (25811 41447 158138 465000) 0 nil])
([nil nil ((1320 . 1326) (1317 . 1320) (#("
" 0 1 (fontified t)) . -1317) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("	" 0 1 (fontified t)) . -1318) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("	" 0 1 (fontified t)) . -1319) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("r" 0 1 (fontified t)) . -1320) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("e" 0 1 (fontified t)) . -1321) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 1322 (t 25811 41447 163655 525000)) nil (25811 41455 208331 792000) 0 nil])
([nil nil ((1237 . 1245) (t 25811 41455 220287 754000)) nil (25811 41463 51382 355000) 0 nil])
([nil nil ((1280 . 1281) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -1280) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -1281) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) 1282 (t 25811 41463 63588 15000)) nil (25811 41472 619157 806000) 0 nil])
([nil nil ((1281 . 1283) (t 25811 41472 623548 302000)) nil (25811 41475 399956 633000) 0 nil])
([nil nil ((1527 . 1530) (1520 . 1527) (#("Messa" 0 5 (fontified nil)) . 1520) (1520 . 1525) (#("Message" 0 7 (fontified nil)) . -1520) (1520 . 1527) (#("Messa" 0 5 (face font-lock-type-face fontified t)) . -1520) (undo-tree-id72 . -5) (undo-tree-id73 . -4) (undo-tree-id74 . -5) (undo-tree-id75 . -5) (undo-tree-id76 . -5) (undo-tree-id77 . -5) 1525 (1523 . 1525) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1523) (undo-tree-id78 . -1) 1524 (1515 . 1524) (#("M" 0 1 (face font-lock-type-face fontified t)) . -1515) (undo-tree-id79 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1516) (undo-tree-id80 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1517) (undo-tree-id81 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1518) (undo-tree-id82 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1519) (undo-tree-id83 . -1) 1520 (1505 . 1520) (1502 . 1505) (#("	" 0 1 (fontified nil)) . -1504) (undo-tree-id84 . -1) (1505 . 1506) (1502 . 1505) (1495 . 1502) (#("$" 0 1 (fontified t)) . -1495) (undo-tree-id85 . -1) (#("0" 0 1 (fontified t)) . -1496) (undo-tree-id86 . -1) (#(">" 0 1 (fontified t)) . -1497) (undo-tree-id87 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1498) (undo-tree-id88 . -1) 1499 (1498 . 1499) (1488 . 1498) (#("Res" 0 3 (fontified nil)) . 1488) (1488 . 1491) (#("Result<â€¦>" 0 9 (fontified nil)) . -1488) (1488 . 1497) (#("Res" 0 3 (face font-lock-type-face fontified t)) . -1488) (undo-tree-id89 . -3) 1491 (1478 . 1491) (1470 . 1478) (#("Resp" 0 4 (fontified nil)) . 1470) (1470 . 1474) (#("Response" 0 8 (fontified nil)) . -1470) (1470 . 1478) (#("Resp" 0 4 (face font-lock-type-face fontified t)) . -1470) (undo-tree-id90 . -4) 1474 (1457 . 1474) (1455 . 1457) (1434 . 1455) (1433 . 1434) (#("	" 0 1 (fontified nil)) . 1432) (undo-tree-id91 . -1) (1431 . 1434) (1426 . 1431) (1405 . 1426) (1403 . 1405) (#("	" 0 1 (fontified nil)) . -1404) (undo-tree-id92 . -1) (1405 . 1406) (1403 . 1405) (1401 . 1403) (1394 . 1401) (#("Mess" 0 4 (fontified nil)) . 1394) (1394 . 1398) (#("Message" 0 7 (fontified nil)) . -1394) (1394 . 1401) (#("Mess" 0 4 (face font-lock-type-face fontified t)) . -1394) (undo-tree-id93 . -4) 1398 (1389 . 1398) (1384 . 1389) (1362 . 1384) (#("Web" 0 3 (fontified nil)) . 1362) (1362 . 1365) (#("WebhookExecutionResult" 0 22 (fontified nil)) . -1362) (1362 . 1384) (#("Web" 0 3 (face font-lock-type-face fontified t)) . -1362) (undo-tree-id94 . -3) 1365 (1357 . 1365) (1356 . 1357) (1355 . 1356) (1344 . 1355) (#("async_trai" 0 10 (fontified nil)) . 1344) (1344 . 1354) (#("async_trait" 0 11 (fontified nil)) . -1344) (1344 . 1355) (#("async_trai" 0 10 (fontified t)) . -1344) (undo-tree-id95 . -10) 1354 (1342 . 1354) (1341 . 1343) (t 25811 41475 406870 194000)) nil (25811 41597 933007 739000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-variable-name-face fontified t)) . -2587) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -2588) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -2589) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("<" 0 1 (fontified t)) . -2590) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (#("'" 0 1 (fontified t)) . -2591) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -2592) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#("," 0 1 (fontified t)) . -2593) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#(" " 0 1 (fontified t)) . -2594) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("'" 0 1 (fontified t)) . -2595) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (#("b" 0 1 (face font-lock-variable-name-face fontified t)) . -2596) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#(">" 0 1 (fontified t)) . -2597) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#(" " 0 1 (fontified t)) . -2598) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) 2599 (2602 . 2614) (2666 . 2669) (t 25811 41597 946416 337000)) nil (25811 41621 814943 838000) 0 nil])
([nil nil ((2400 . 2403) (#("," 0 1 (fontified t)) . -2669) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) 2670 (t 25811 41621 823004 869000)) nil (25811 41627 31749 61000) 0 nil])
([nil nil ((2676 . 2698) (#("Webh" 0 4 (fontified nil)) . 2676) (2676 . 2680) (#("WebhookExecutionResult" 0 22 (fontified nil)) . -2676) (2676 . 2698) (#("Webh" 0 4 (face font-lock-type-face fontified t)) . -2676) (undo-tree-id214 . -4) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4) 2680 (2673 . 2680) (2669 . 2670) (t 25811 41627 32988 224000)) nil (25811 41635 335355 746000) 0 nil])
([nil nil ((2568 . 2569) (#("(" 0 1 (fontified t)) . -2568) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#(")" 0 1 (fontified t)) . -2569) (undo-tree-id220 . -1) (undo-tree-id221 . -1) 2570 (t 25811 41635 336295 320000)) nil (25811 41641 656388 544000) 0 nil])
([nil nil ((6801 . 6806) (#("await" 0 5 (fontified nil)) . -6801) (6801 . 6806) (6800 . 6801) (apply yas--snippet-revive 6783 6800 #s(yas--snippet nil (#s(yas--field 1 6797 6799 nil nil nil nil #s(yas--exit 6800 nil))) #s(yas--exit 6800 nil) 0 nil #s(yas--field 1 6797 6799 nil nil nil nil #s(yas--exit 6800 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6797 6799 nil nil nil nil #s(yas--exit 6800 nil))) #s(yas--exit 6800 nil) 0 nil #s(yas--field 1 6797 6799 nil nil nil nil #s(yas--exit 6800 nil)) nil nil)) (6783 . 6800) (#("from_response(${1:re})$0" 0 24 (fontified nil)) . 6783) (6783 . 6807) (#("from_response(â€¦) (as WebhookExecutionResult)" 0 44 (fontified nil)) . -6783) (6783 . 6827) (6780 . 6783) (#("r" 0 1 (fontified t)) . -6780) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("e" 0 1 (fontified t)) . -6781) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#("." 0 1 (fontified t)) . -6782) (undo-tree-id226 . -1) (undo-tree-id227 . -1) 6783 (6780 . 6783) (#("(" 0 1 (fontified t)) . -6780) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (#(")" 0 1 (fontified t)) . -6781) (undo-tree-id230 . -1) (undo-tree-id231 . -1) 6782 (t 25811 41641 659608 909000)) nil (25811 41691 345620 437000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-type-face fontified t)) . -6777) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (#("k" 0 1 (face font-lock-type-face fontified t)) . -6778) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("(" 0 1 (fontified t)) . -6779) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) 6780 (#(")" 0 1 (fontified t)) . -6806) (undo-tree-id268 . -1) (undo-tree-id269 . 1) (undo-tree-id270 . -1) 6807 (t 25811 41691 356127 256000)) nil (25811 41698 845930 316000) 0 nil])
([nil nil ((5267 . 5276) (#("R" 0 1 (face font-lock-type-face fontified t)) . -5267) (undo-tree-id271 . -1) (#(":" 0 1 (fontified t)) . -5268) (undo-tree-id272 . -1) (#(":" 0 1 (fontified t)) . -5269) (undo-tree-id273 . -1) 5270 (5267 . 5270) (#("w" 0 1 (fontified t)) . -5267) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (#("a" 0 1 (fontified t)) . -5268) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("i" 0 1 (fontified t)) . -5269) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("t" 0 1 (fontified t)) . -5270) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) 5271 (t 25811 41698 849439 237000)) nil (25811 41755 194828 521000) 0 nil])
([nil nil ((apply yas--snippet-revive 1558 1577 #s(yas--snippet nil (#s(yas--field 1 1566 1576 nil nil nil t #s(yas--exit 1577 nil))) #s(yas--exit 1577 nil) 1 nil #s(yas--field 1 1566 1576 nil nil nil t #s(yas--exit 1577 nil)) nil nil)) (#(")" 0 1 (fontified t)) . -1576) (undo-tree-id286 . -1) (undo-tree-id287 . -1) 1577 (apply yas--snippet-revive 1572 1577 #s(yas--snippet nil (#s(yas--field 1 1576 1576 nil nil nil t #s(yas--exit 1577 nil))) #s(yas--exit 1577 nil) 2 nil #s(yas--field 1 1576 1576 nil nil nil t #s(yas--exit 1577 nil)) #s(yas--field 1 1566 1576 nil nil nil t #s(yas--exit 1577 nil)) nil)) (#("(" 0 1 (fontified t)) . -1576) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) 1577 (#("self" 0 4 (face font-lock-keyword-face fontified t)) . 1577) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1576 1576 nil nil nil t #s(yas--exit 1577 nil))) #s(yas--exit 1577 nil) 2 nil #s(yas--field 1 1576 1576 nil nil nil t #s(yas--exit 1577 nil)) #s(yas--field 1 1566 1576 nil nil nil t #s(yas--exit 1577 nil)) nil)) (1572 . 1582) (#("into(${1:self})$0" 0 17 (fontified nil)) . 1572) (undo-tree-id291 . -17) (1572 . 1589) (#("into(â€¦) (as Into)" 0 17 (fontified nil)) . -1572) (undo-tree-id292 . -17) (1572 . 1589) (1567 . 1572) (#("f" 0 1 (fontified nil)) . 1567) (undo-tree-id293 . -1) (1566 . 1567) (108 . 135) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1566 1576 nil nil nil t #s(yas--exit 1577 nil))) #s(yas--exit 1577 nil) 1 nil #s(yas--field 1 1566 1576 nil nil nil t #s(yas--exit 1577 nil)) nil nil)) (1531 . 1541) (#("map_err(${1:f})$0" 0 17 (fontified nil)) . 1531) (1531 . 1548) (#("map" 0 3 (fontified nil)) . 1531) (1531 . 1534) (#("map_err(â€¦) (use futures::TryFutureExt)" 0 38 (fontified nil)) . -1531) (1531 . 1569) (#("map" 0 3 (fontified t)) . -1531) (undo-tree-id294 . -3) 1534 (1530 . 1534) (t 25811 41755 195953 244000)) nil (25811 41772 533956 367000) 0 nil])
([nil nil ((1557 . 1558) (#("." 0 1 (fontified t)) . -1557) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (#("m" 0 1 (fontified t)) . -1558) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (#("a" 0 1 (fontified t)) . -1559) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("p" 0 1 (fontified t)) . -1560) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (#("_" 0 1 (fontified t)) . -1561) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (#("e" 0 1 (fontified t)) . -1562) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (#("r" 0 1 (fontified t)) . -1563) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (#("r" 0 1 (fontified t)) . -1564) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (#("(" 0 1 (fontified t)) . -1565) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -1566) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1567) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1568) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1569) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#(":" 0 1 (fontified t)) . -1570) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (#(":" 0 1 (fontified t)) . -1571) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (#("i" 0 1 (fontified t)) . -1572) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -1573) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (#("t" 0 1 (fontified t)) . -1574) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (#("o" 0 1 (fontified t)) . -1575) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#(")" 0 1 (fontified t)) . -1576) (undo-tree-id352 . -1) (undo-tree-id353 . -1) 1577 (t 25811 41772 545908 897000)) nil (25811 41868 752255 496000) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -1563) (undo-tree-id354 . -1) (undo-tree-id355 . -1) 1564 (1558 . 1563) (#("await" 0 5 (fontified nil)) . -1558) (1558 . 1563) (1557 . 1558) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1532) (undo-tree-id356 . -1) 1533 (#("k" 0 1 (face font-lock-type-face fontified t)) . -1533) (undo-tree-id357 . -1) (#("(" 0 1 (fontified t)) . -1534) (undo-tree-id358 . -1) 1535 (1532 . 1535) (t 25811 41868 765683 331000)) nil (25811 41881 156871 467000) 0 nil])
([nil nil ((1573 . 1582) (#("op" 0 2 (fontified nil)) . 1573) (undo-tree-id359 . -2) (1572 . 1573) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1572 1582 nil nil nil t #s(yas--exit 1583 nil))) #s(yas--exit 1583 nil) 3 nil #s(yas--field 1 1572 1582 nil nil nil t #s(yas--exit 1583 nil)) nil nil)) (1564 . 1575) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 1564) (1564 . 1582) (#("map" 0 3 (fontified nil)) . 1564) (1564 . 1567) (#("map_err(â€¦)" 0 10 (fontified nil)) . -1564) (1564 . 1574) (#("map" 0 3 (fontified t)) . -1564) (undo-tree-id360 . -3) 1567 (1563 . 1567) (t 25811 41881 158989 921000)) nil (25811 41890 548257 907000) 0 nil])
([nil nil ((apply yas--snippet-revive 1564 1583 #s(yas--snippet nil (#s(yas--field 1 1572 1582 nil nil nil t #s(yas--exit 1583 nil))) #s(yas--exit 1583 nil) 3 nil #s(yas--field 1 1572 1582 nil nil nil t #s(yas--exit 1583 nil)) nil nil))) nil (25811 41909 211614 450000) 0 nil])
([nil nil ((#("        wait: bool,
" 0 8 (fontified t) 8 12 (face font-lock-variable-name-face fontified t) 12 14 (fontified t) 14 18 (face font-lock-type-face fontified t) 18 20 (fontified t)) . 2506) (undo-tree-id361 . -19) (undo-tree-id362 . -19) (undo-tree-id363 . -18) (undo-tree-id364 . -18) (undo-tree-id365 . -18) (undo-tree-id366 . -18) (undo-tree-id367 . -18) (undo-tree-id368 . -18) (undo-tree-id369 . -18) (undo-tree-id370 . -18) (undo-tree-id371 . -18) (undo-tree-id372 . -18) (undo-tree-id373 . -18) (undo-tree-id374 . -18) (undo-tree-id375 . -18) (undo-tree-id376 . -18) (undo-tree-id377 . -18) (undo-tree-id378 . -18) (undo-tree-id379 . -18) (undo-tree-id380 . -20) 2524 (t 25811 41890 562303 290000)) nil (25811 41909 211610 104000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -2702) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -2703) (undo-tree-id384 . -1) (undo-tree-id385 . -1) 2704 (2702 . 2704) (t 25811 41909 222264 480000)) nil (25811 42046 543217 131000) 0 nil])
([nil nil ((6692 . 6695) (6335 . 6338) (t 25811 42046 552008 674000)) nil (25811 56295 758065 813000) 0 nil])
([nil nil ((#("use futures::TryFutureExt;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 11 (face font-lock-constant-face fontified t) 11 13 (fontified t) 13 25 (face font-lock-type-face fontified t) 25 27 (fontified t)) . 108) (undo-tree-id0 . -22) (undo-tree-id1 . -22) (undo-tree-id2 . -22) (undo-tree-id3 . -26) (undo-tree-id4 . -22) (undo-tree-id5 . -22) (undo-tree-id6 . -22) (undo-tree-id7 . -27) 130 (t 25811 56295 771274 673000)) nil (25811 56307 648646 809000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -250) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("s" 0 1 (fontified t)) . -251) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -252) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#(" " 0 1 (fontified t)) . -253) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -254) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -255) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -256) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#(":" 0 1 (fontified t)) . -257) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#(":" 0 1 (fontified t)) . -258) (undo-tree-id63 . -1) 259 (250 . 259) (249 . 250) (t 25811 56307 657932 541000)) nil (25817 14645 311939 394000) 0 nil])
([nil nil ((#("use anyhow::Context;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-constant-face fontified t) 10 12 (fontified t) 12 19 (face font-lock-type-face fontified t) 19 21 (fontified t)) . 87) (undo-tree-id37 . -21) (undo-tree-id38 . -20)) nil (25817 14645 311702 464000) 0 nil])
([nil nil ((254 . 255) (248 . 254) (#("Res" 0 3 (fontified nil)) . 248) (248 . 251) (#("Result" 0 6 (fontified nil)) . -248) (248 . 254) (#("Res" 0 3 (face font-lock-type-face fontified t)) . -248) (undo-tree-id17 . -3) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -3) (undo-tree-id21 . -3) (undo-tree-id22 . -3) (undo-tree-id23 . -3) 251 (245 . 251) (#(":" 0 1 (fontified t)) . -245) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("s" 0 1 (fontified t)) . -246) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 247 (242 . 247) (#("o" 0 1 (fontified t)) . -242) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("r" 0 1 (fontified t)) . -243) (undo-tree-id33 . -1) (undo-tree-id34 . -1) 244 (229 . 244) (#("
" 0 1 (fontified t)) . -86) (undo-tree-id35 . -1) (undo-tree-id36 . -1) 87 (86 . 87)) nil (25817 14645 311694 630000) 0 nil])
([nil nil ((313 . 315) (#("	" 0 1 (fontified nil)) . -314) (undo-tree-id13 . -1) (315 . 316) (313 . 315) (292 . 313) (281 . 292) (#("s" 0 1 (fontified t)) . -281) (undo-tree-id14 . -1) 282 (281 . 282) (280 . 281) (273 . 280) (257 . 273) (#("i" 0 1 (fontified t)) . -257) (undo-tree-id15 . -1) (#("m" 0 1 (fontified t)) . -258) (undo-tree-id16 . -1) 259 (257 . 259) (255 . 257)) nil (25817 14646 148748 883000) 0 nil])
([nil nil ((504 . 516) (501 . 504) (#("F" 0 1 (face font-lock-type-face fontified t)) . -520) (undo-tree-id80 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -521) (undo-tree-id81 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -522) (undo-tree-id82 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -523) (undo-tree-id83 . -1) 524 (520 . 524) (516 . 520) (#("	" 0 1 (fontified nil)) . -519) (undo-tree-id84 . -1) (520 . 521) (516 . 520) (504 . 516) (501 . 504) (#("	" 0 1 (fontified nil)) . -503) (undo-tree-id85 . -1) (504 . 505) (501 . 504) (500 . 501) (499 . 500) (493 . 499) (#("Res" 0 3 (fontified nil)) . 493) (493 . 496) (#("Result" 0 6 (fontified nil)) . -493) (493 . 499) (#("Res" 0 3 (face font-lock-type-face fontified t)) . -493) (undo-tree-id86 . -3) 496 (479 . 496) (470 . 479) (#("Arguments" 0 9 (fontified nil)) . -470) (470 . 479) (462 . 470) (#("m" 0 1 (fontified t)) . -462) (undo-tree-id87 . -1) (#("t" 0 1 (fontified t)) . -463) (undo-tree-id88 . -1) (#(":" 0 1 (fontified t)) . -464) (undo-tree-id89 . -1) (#(" " 0 1 (fontified t)) . -465) (undo-tree-id90 . -1) (#("&" 0 1 (fontified t)) . -466) (undo-tree-id91 . -1) (#("f" 0 1 (fontified t)) . -467) (undo-tree-id92 . -1) (#("m" 0 1 (fontified t)) . -468) (undo-tree-id93 . -1) (#("t" 0 1 (fontified t)) . -469) (undo-tree-id94 . -1) (#(":" 0 1 (fontified t)) . -470) (undo-tree-id95 . -1) (#(":" 0 1 (fontified t)) . -471) (undo-tree-id96 . -1) 472 (454 . 472) (87 . 100) (86 . 87) (439 . 440) (436 . 439) (#("f" 0 1 (face font-lock-function-name-face fontified t)) . -436) (undo-tree-id97 . -1) (#("r" 0 1 (face font-lock-function-name-face fontified t)) . -437) (undo-tree-id98 . -1) (#("o" 0 1 (face font-lock-function-name-face fontified t)) . -438) (undo-tree-id99 . -1) (#("m" 0 1 (face font-lock-function-name-face fontified t)) . -439) (undo-tree-id100 . -1) (#("(" 0 1 (fontified t)) . -440) (undo-tree-id101 . -1) (#("c" 0 1 (fontified t)) . -441) (undo-tree-id102 . -1) (#("t" 0 1 (fontified nil)) . -442) (undo-tree-id103 . -1) (#("x" 0 1 (fontified t)) . -443) (undo-tree-id104 . -1) (#(":" 0 1 (fontified t)) . -444) (undo-tree-id105 . -1) 445 (433 . 445) (#("F" 0 1 (face font-lock-type-face fontified t)) . -433) (undo-tree-id106 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -434) (undo-tree-id107 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -435) (undo-tree-id108 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -436) (undo-tree-id109 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -437) (undo-tree-id110 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -438) (undo-tree-id111 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -439) (undo-tree-id112 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -440) (undo-tree-id113 . -1) (#("G" 0 1 (face font-lock-type-face fontified t)) . -441) (undo-tree-id114 . -1) (#("e" 0 1 (face font-lock-type-face fontified nil)) . -442) (undo-tree-id115 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -443) (undo-tree-id116 . -1) (#("W" 0 1 (face font-lock-type-face fontified t)) . -444) (undo-tree-id117 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -445) (undo-tree-id118 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -446) (undo-tree-id119 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -447) (undo-tree-id120 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -448) (undo-tree-id121 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -449) (undo-tree-id122 . -1) (#("k" 0 1 (face font-lock-type-face fontified t)) . -450) (undo-tree-id123 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -451) (undo-tree-id124 . -1) 452 (433 . 452) (431 . 433) (#("	" 0 1 (fontified nil)) . -432) (undo-tree-id125 . -1) (433 . 434) (431 . 433) (429 . 431) (410 . 429) (#("Webh" 0 4 (fontified nil)) . 410) (410 . 414) (#("WebhookErrorContext" 0 19 (fontified nil)) . -410) (410 . 429) (#("Webh" 0 4 (face font-lock-type-face fontified t)) . -410) (undo-tree-id126 . -4) 414 (411 . 414) (#("E" 0 1 (face font-lock-type-face fontified t)) . -411) (undo-tree-id127 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -412) (undo-tree-id128 . -1) 413 (393 . 413) (391 . 393) (373 . 389) (358 . 373) (351 . 358) (349 . 351) (336 . 349) (#("r" 0 1 (fontified t)) . -336) (undo-tree-id129 . -1) 337 (333 . 337) (332 . 333) (313 . 332) (285 . 289) (#("struct" 0 6 (face font-lock-keyword-face fontified t)) . 285) (undo-tree-id130 . 6) (undo-tree-id131 . -5) (undo-tree-id132 . -6) (undo-tree-id133 . -6)) nil (25817 15371 561040 40000) 0 nil] [nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 290 290 nil nil nil nil #s(yas--exit 297 nil))) #s(yas--exit 297 nil) 23 nil #s(yas--field 1 290 290 nil nil nil nil #s(yas--exit 297 nil)) nil nil)) (285 . 299) (#("enum $1 {
    $0
}" 0 18 (fontified nil)) . 285) (285 . 303) (#("enum" 0 4 (fontified nil)) . 285) (285 . 289) (#("enum" 0 4 (face font-lock-keyword-face fontified t)) . -285) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) 289 (285 . 289) (#("struct" 0 6 (face font-lock-keyword-face fontified t)) . 285) (undo-tree-id9 . 6) (undo-tree-id10 . -5) (undo-tree-id11 . -6) (undo-tree-id12 . -6)) ((285 . 291) (#("enum" 0 4 (face font-lock-keyword-face fontified nil)) . 285) (undo-tree-id64 . -4) (undo-tree-id65 . -4) (undo-tree-id66 . -4) (undo-tree-id67 . -4) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (285 . 289) (#("enum" 0 4 (fontified nil)) . 285) (285 . 289) (#("enum $1 {
    $0
}" 0 18 (fontified nil)) . 285) (285 . 303) (#("enum  {
    
}" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 14 (fontified t)) . 285) (undo-tree-id72 . -5) (undo-tree-id73 . -5) (undo-tree-id74 . 9) (undo-tree-id75 . -5) (undo-tree-id76 . -5) (undo-tree-id77 . -5) (undo-tree-id78 . -5) (undo-tree-id79 . -5) (apply yas--snippet-revive 285 299 #s(yas--snippet nil (#s(yas--field 1 290 290 nil nil nil nil #s(yas--exit 297 nil))) #s(yas--exit 297 nil) 23 nil #s(yas--field 1 290 290 nil nil nil nil #s(yas--exit 297 nil)) nil nil))) (25817 14645 312003 189000) 0 nil])
([nil nil ((508 . 529) (#("Web" 0 3 (fontified nil)) . 508) (508 . 511) (#("WebhookErrorContext::" 0 21 (fontified nil)) . -508) (508 . 529) (#("Web" 0 3 (face font-lock-type-face fontified t)) . -508) (undo-tree-id156 . -3) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (undo-tree-id165 . -3) 511 (508 . 511) (#("S" 0 1 (face font-lock-type-face fontified t)) . -508) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -509) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -510) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -511) (undo-tree-id172 . -1) (undo-tree-id173 . -1) 512 (t 25817 15371 580332 402000)) nil (25817 15387 505971 482000) 0 nil])
([nil nil ((apply yas--snippet-revive 285 299 #s(yas--snippet nil (#s(yas--field 1 290 290 nil nil nil nil #s(yas--exit 297 nil))) #s(yas--exit 297 nil) 23 nil #s(yas--field 1 290 290 nil nil nil nil #s(yas--exit 297 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 290 290 nil nil nil nil #s(yas--exit 297 nil))) #s(yas--exit 297 nil) 23 nil #s(yas--field 1 290 290 nil nil nil nil #s(yas--exit 297 nil)) nil nil))) (25817 14645 311593 307000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -527) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (#(":" 0 1 (fontified t)) . -528) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) 529) nil (25817 15387 505938 681000) 0 nil])
nil
([nil nil ((1 . 7216) (#("use std::{collections::HashMap, borrow::Cow};
use std::time::Duration as StdDuration;
use std::fmt;
use poise::serenity_prelude as ser;
use ser::ExecuteWebhook;
use tokio::{sync::{RwLock, Mutex}, time::Instant};
use async_trait::async_trait;
use crate::errors::Result;

#[derive(Debug, Clone)]
pub enum WebhookErrorContext {
	FailedToGetWebhooks(ser::ChannelId),
	FailedToCreateWebhook(ser::ChannelId),
}

impl Display for WebhookErrorContext {
	fn fmt(&self, f: &fmt::Arguments<'_>) -> fmt::Result {
		use WebhookErrorContext::*;
		match self {
			
		}
	}
}

/// checks whether a channel has a webhook with a particular name; if yes, returns it, if no, creates one and returns it.
pub async fn create_or_return_webhook_for_channel(
	ctx: impl AsRef<ser::Http> + Copy,
	channel: impl Into<ser::ChannelId>,
	name: &str
) -> Result<ser::Webhook, anyhow::Error> {
	let channel = channel.into();
	let created_webhook = channel.webhooks(ctx).await
		.with_context(|| format!(\"failed to get webhooks for channel {channel}\"))?.into_iter()
		.find(|wh| wh.name.as_ref().is_some_and(|n| &*n == name));

	match created_webhook {
		Some(wh) => Ok(wh),
		None => channel.create_webhook(ctx, name).await
			.with_context(|| format!(\"failed to create webhook for channel {channel}\"))
	}
}

/// overcomplicated way of specifying the `wait` parameter
#[async_trait]
pub trait WebhookExecutionResult: Sized {
	fn wait() -> bool;
	async fn from_response(re: reqwest::Response) -> ser::Result<Self>;
}

#[async_trait]
impl WebhookExecutionResult for () {
	fn wait() -> bool { false }
	async fn from_response(_re: reqwest::Response) -> ser::Result<Self> {
		Ok(())
	}
}

#[async_trait]
impl WebhookExecutionResult for ser::Message {
	fn wait() -> bool { true }

	async fn from_response(re: reqwest::Response) -> ser::Result<Self> {
		re.json::<ser::Message>().await.map_err(Into::into)
	}
}

/// webhook executor that handles thread id which serenity won't
/// won't be needed when serenity hits 0.12
pub struct WebhookExecutor {
    client: reqwest::Client,
    routes: RwLock<HashMap<ser::WebhookId, Mutex<Instant>>>,
}

impl WebhookExecutor {
    pub fn new() -> Self {
        Self {
            client: reqwest::Client::builder()
                .user_agent(\"suzu custom webhook thing because the serenity one isn't very good\")
                .build()
                .unwrap(),
            routes: RwLock::new(HashMap::new()),
        }
    }

    async fn file_to_part(file: tokio::fs::File) -> reqwest::multipart::Part {
        match file.metadata().await {
            Ok(m) => reqwest::multipart::Part::stream_with_length(file, m.len()),
            Err(_) => reqwest::multipart::Part::stream(file),
        }
    }

    pub async fn execute<F, R>(
        &self,
        webhook: &ser::Webhook,
        thread_id: Option<impl Into<ser::ChannelId>>,
        builder: F,
    ) -> ser::Result<R>
    where
        F: for<'a, 'b> FnOnce(&'a mut ExecuteWebhook<'b>) -> &'a mut ExecuteWebhook<'b>,
		R: WebhookExecutionResult
    {
        let mut exwhb: ExecuteWebhook = Default::default();
        builder(&mut exwhb);

        let ExecuteWebhook(jsonmap, attachments) = exwhb;
        let mut url = reqwest::Url::parse(\"https://discord.com/api/v10/webhooks\").unwrap();
        url.path_segments_mut()
            .unwrap()
            .push(&webhook.id.to_string())
            .push(&webhook.token.as_ref().ok_or(ser::ModelError::NoTokenSet)?);
        let mut form = reqwest::multipart::Form::new()
            .text(\"payload_json\", ser::json::prelude::to_string(&jsonmap)?);

        for (idx, attachment) in attachments.into_iter().enumerate() {
            let part = match attachment {
				// this api is the worst ever conceived by humanity. like wtf is this. bestie just fucking let
				// me pass in a stream or a fucking Vec<u8> since this shit gets copied anyway
                ser::AttachmentType::Bytes { data, filename } => {
                    reqwest::multipart::Part::bytes(data).file_name(filename)
                }
                ser::AttachmentType::File { file, filename } => {
                    let _ = file.sync_all().await;
                    WebhookExecutor::file_to_part(file.try_clone().await?)
                        .await
                        .file_name(filename)
                }
                ser::AttachmentType::Path(path) => {
                    let mut part =
                        WebhookExecutor::file_to_part(tokio::fs::File::open(path).await?).await;
                    if let Some(filename) = path.file_name() {
                        part = part.file_name(filename.to_string_lossy());
                    }
                    part
                }
                ser::AttachmentType::Image(url) => {
                    let response = self.client.get(url.clone()).send().await?;
                    let mut part = match response.content_length() {
                        Some(len) => reqwest::multipart::Part::stream_with_length(response, len),
                        None => reqwest::multipart::Part::stream(response),
                    };

                    if let Some(filename) = url.path_segments().and_then(Iterator::last) {
                        part = part.file_name(filename.to_owned());
                    }

                    part
                }
                _ => continue,
            };
            form = form.part(format!(\"file[{idx}]\"), part);
        }

		// Cow<str> because we have a mixture of owned and non-owned strings
		let mut query: Vec<(Cow<str>, Cow<str>)> = vec![(\"wait\".into(), if R::wait() { \"true\".into() } else { \"false\".into() })];
		if let Some(thrid) = thread_id {
			query.push((\"thread_id\".into(), thrid.into().0.to_string().into()));
		}

        let mut map_guard = self.routes.read().await;
        let duration_mutex = match map_guard.get(&webhook.id) {
            Some(mutex) => mutex,
            None => {
                drop(map_guard);
                let mut write_guard = self.routes.write().await;
                write_guard.insert(webhook.id, Mutex::new(Instant::now()));
                drop(write_guard);
                map_guard = self.routes.read().await;
                &map_guard[&webhook.id]
            }
        };
        let mut duration_guard = duration_mutex.lock().await;
		// everything has been processed, time to sleep
        tokio::time::sleep_until(*duration_guard).await;
		
        let re = self
            .client
            .post(url)
            .query(&query)
            .multipart(form)
            .send()
            .await?
            .error_for_status()?;
		
        let reset_after = re
            .headers()
            .get(\"X-RateLimit-Reset-After\")
            .ok_or(ser::HttpError::RateLimitUtf8)? // serenity doesn't have a better error
            .to_str()
            .map_err(|_| ser::HttpError::RateLimitUtf8)?
            .parse::<f64>()
            .map_err(|_| ser::HttpError::RateLimitI64F64)?;
		
        let reset_at = Instant::now() + StdDuration::from_secs_f64(reset_after);
        *duration_guard = reset_at;
        R::from_response(re).await
    }
}
" 0 7138 (fontified nil)) . 1) (t 25817 15387 520333 5000)) nil (25817 24400 377170 7000) 0 nil])
([nil nil ((722 . 738) (701 . 722) (680 . 701) (675 . 680) (#(" " 0 1 (fontified t)) . -675) (undo-tree-id240 . -1) 676 (#("t" 0 1 (fontified t)) . -676) (undo-tree-id241 . -1) (#("o" 0 1 (fontified t)) . -677) (undo-tree-id242 . -1) (#("d" 0 1 (fontified t)) . -678) (undo-tree-id243 . -1) (#("o" 0 1 (fontified t)) . -679) (undo-tree-id244 . -1) (#("!" 0 1 (fontified t)) . -680) (undo-tree-id245 . -1) (#("(" 0 1 (fontified t)) . -681) (undo-tree-id246 . -1) (#(")" 0 1 (fontified t)) . -682) (undo-tree-id247 . -1) 683 (630 . 643) (628 . 630) (607 . 628) (586 . 607)) nil (25817 24400 377161 169000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1117) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (#("c" 0 1 (fontified t)) . -1118) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("o" 0 1 (fontified t)) . -1119) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("n" 0 1 (fontified t)) . -1120) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("t" 0 1 (fontified t)) . -1121) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("e" 0 1 (fontified t)) . -1122) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("x" 0 1 (fontified t)) . -1123) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("?" 0 1 (face rust-question-mark fontified t)) . -1124) (undo-tree-id18 . -1) (undo-tree-id19 . 1) (undo-tree-id20 . -1) (#("." 0 1 (fontified t)) . -1125) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("i" 0 1 (fontified t)) . -1126) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -1127) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("t" 0 1 (fontified t)) . -1128) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("o" 0 1 (fontified t)) . -1129) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("_" 0 1 (fontified t)) . -1130) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("i" 0 1 (fontified t)) . -1131) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("t" 0 1 (fontified t)) . -1132) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("e" 0 1 (fontified nil)) . -1133) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("r" 0 1 (fontified t)) . -1134) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("(" 0 1 (fontified t)) . -1135) (undo-tree-id41 . -1) (#(")" 0 1 (fontified t)) . -1136) (undo-tree-id42 . -1) 1137 (1117 . 1124) (#("
" 0 1 (fontified t)) . -1117) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) 1118 (#("	" 0 1 (fontified t)) . -1118) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("	" 0 1 (fontified t)) . -1119) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("." 0 1 (fontified t)) . -1120) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("w" 0 1 (fontified t)) . -1121) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("i" 0 1 (fontified t)) . -1122) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("t" 0 1 (fontified t)) . -1123) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("h" 0 1 (fontified t)) . -1124) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("_" 0 1 (fontified t)) . -1125) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("c" 0 1 (fontified t)) . -1126) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("o" 0 1 (fontified t)) . -1127) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("n" 0 1 (fontified t)) . -1128) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("t" 0 1 (fontified t)) . -1129) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("e" 0 1 (fontified nil)) . -1130) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (#("x" 0 1 (fontified nil)) . -1131) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#("t" 0 1 (fontified t)) . -1132) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (#("(" 0 1 (fontified t)) . -1133) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("W" 0 1 (face font-lock-type-face fontified t)) . -1134) (undo-tree-id94 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1135) (undo-tree-id95 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -1136) (undo-tree-id96 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -1137) (undo-tree-id97 . -1) (#(")" 0 1 (fontified t)) . -1138) (undo-tree-id98 . -1) 1139 (1134 . 1138) (#("|" 0 1 (fontified t)) . -1134) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("|" 0 1 (fontified t)) . -1135) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#(" " 0 1 (fontified t)) . -1136) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("f" 0 1 (fontified t)) . -1137) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (#("o" 0 1 (fontified t)) . -1138) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -1139) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("m" 0 1 (fontified t)) . -1140) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("a" 0 1 (fontified t)) . -1141) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (#("t" 0 1 (fontified t)) . -1142) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("!" 0 1 (fontified t)) . -1143) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("(" 0 1 (fontified t)) . -1144) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -1145) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -1146) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1147) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -1148) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -1149) (undo-tree-id139 . -1) (undo-tree-id140 . -1) 1150 (#("e" 0 1 (face font-lock-string-face fontified t)) . -1150) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -1151) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1152) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#("t" 0 1 (face font-lock-string-face fontified nil)) . -1153) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#("o" 0 1 (face font-lock-string-face fontified nil)) . -1154) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1155) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -1156) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1157) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1158) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1159) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("w" 0 1 (face font-lock-string-face fontified t)) . -1160) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1161) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (#("b" 0 1 (face font-lock-string-face fontified t)) . -1162) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -1163) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1164) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1165) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#("k" 0 1 (face font-lock-string-face fontified t)) . -1166) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -1167) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1168) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -1169) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1170) (undo-tree-id181 . -1) (undo-tree-id182 . -1) 1171 (#("r" 0 1 (face font-lock-string-face fontified t)) . -1171) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1172) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -1173) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -1174) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1175) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1176) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1177) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1178) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -1179) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1180) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (#("{" 0 1 (face font-lock-string-face fontified t)) . -1181) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -1182) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -1183) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1184) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1185) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1186) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1187) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -1188) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("}" 0 1 (face rust-string-interpolation fontified t)) . -1189) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -1190) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (#(")" 0 1 (fontified t)) . -1191) (undo-tree-id223 . -1) (undo-tree-id224 . -1) 1192 (#("," 0 1 (fontified t)) . -1032) (undo-tree-id225 . -1) (#(" " 0 1 (fontified t)) . -1033) (undo-tree-id226 . -1) (#("a" 0 1 (fontified t)) . -1034) (undo-tree-id227 . -1) (#("n" 0 1 (fontified t)) . -1035) (undo-tree-id228 . -1) (#("y" 0 1 (fontified t)) . -1036) (undo-tree-id229 . -1) (#("h" 0 1 (fontified t)) . -1037) (undo-tree-id230 . -1) (#("o" 0 1 (fontified t)) . -1038) (undo-tree-id231 . -1) (#("w" 0 1 (fontified t)) . -1039) (undo-tree-id232 . -1) (#(":" 0 1 (fontified t)) . -1040) (undo-tree-id233 . -1) (#(":" 0 1 (fontified t)) . -1041) (undo-tree-id234 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1042) (undo-tree-id235 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1043) (undo-tree-id236 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1044) (undo-tree-id237 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1045) (undo-tree-id238 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1046) (undo-tree-id239 . -1) 1047) nil (25817 24400 377059 855000) 0 nil])
([nil nil ((147 . 160) (161 . 162) (146 . 146) (146 . 147) (#("
" 0 1 (fontified t)) . -161) (undo-tree-id255 . -1) (#("u" 0 1 (fontified t)) . -162) (undo-tree-id256 . -1) (#("s" 0 1 (fontified t)) . -163) (undo-tree-id257 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -164) (undo-tree-id258 . -1) (#(" " 0 1 (fontified t)) . -165) (undo-tree-id259 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -166) (undo-tree-id260 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -167) (undo-tree-id261 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -168) (undo-tree-id262 . -1) (#(":" 0 1 (fontified t)) . -169) (undo-tree-id263 . -1) (#(":" 0 1 (fontified t)) . -170) (undo-tree-id264 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -171) (undo-tree-id265 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -172) (undo-tree-id266 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -173) (undo-tree-id267 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -174) (undo-tree-id268 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -175) (undo-tree-id269 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -176) (undo-tree-id270 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -177) (undo-tree-id271 . -1) 178 (172 . 178) (162 . 172) (161 . 162) (685 . 695) (#("." 0 1 (fontified t)) . -685) (undo-tree-id272 . -1) (#("m" 0 1 (fontified t)) . -686) (undo-tree-id273 . -1) (#("e" 0 1 (fontified t)) . -687) (undo-tree-id274 . -1) 688 (685 . 688) (667 . 685) (656 . 660) 663 (656 . 663) (651 . 656) (650 . 651) (640 . 648) (1122 . 1136) (1117 . 1122) (t 25817 24400 384101 28000)) nil (25817 24461 602587 549000) 0 nil])
([nil nil ((844 . 858) (840 . 844) (819 . 823) 836 (819 . 836) (814 . 819) (813 . 814) (#("," 0 1 (face font-lock-string-face fontified t)) . -812) (undo-tree-id248 . -1) (#("
" 0 1 (face font-lock-string-face fontified t)) . -813) (undo-tree-id249 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -814) (undo-tree-id250 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -815) (undo-tree-id251 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -816) (undo-tree-id252 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -817) (undo-tree-id253 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -818) (undo-tree-id254 . -1) 819 (814 . 819) (813 . 814) (812 . 813) (803 . 811)) nil (25817 24461 602544 793000) 0 nil])
([nil nil ((293 . 309) (#("Contex" 0 6 (fontified nil)) . 293) (293 . 299) (#("Contextualizable" 0 16 (fontified nil)) . -293) (293 . 309) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -293) (undo-tree-id282 . -6) 299 (291 . 299) (#("
" 0 1 (fontified t)) . -293) (undo-tree-id283 . -1) (#("u" 0 1 (fontified t)) . -294) (undo-tree-id284 . -1) (#("s" 0 1 (fontified t)) . -295) (undo-tree-id285 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -296) (undo-tree-id286 . -1) (#(" " 0 1 (fontified t)) . -297) (undo-tree-id287 . -1) (#("c" 0 1 (face font-lock-constant-face fontified t)) . -298) (undo-tree-id288 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -299) (undo-tree-id289 . -1) (#("a" 0 1 (face font-lock-constant-face fontified t)) . -300) (undo-tree-id290 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -301) (undo-tree-id291 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -302) (undo-tree-id292 . -1) (#(":" 0 1 (fontified t)) . -303) (undo-tree-id293 . -1) (#(":" 0 1 (fontified t)) . -304) (undo-tree-id294 . -1) 305 (294 . 305) (293 . 294) (278 . 285) (284 . 285) (277 . 277) (277 . 278) (1238 . 1255) (1467 . 1471) (1466 . 1482) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -1466) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#("
" 0 1 (fontified t)) . -1467) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) 1468 (#("			.with_context(|| format!(\"failed to create webhook for channel {channel}\"))" 0 20 (fontified t) 20 27 (face rust-builtin-formatting-macro fontified t) 27 28 (fontified t) 28 66 (face font-lock-string-face fontified t) 66 75 (face rust-string-interpolation fontified t) 75 76 (face font-lock-string-face fontified t) 76 78 (fontified t)) . 1468) (undo-tree-id304 . -78) (undo-tree-id305 . -78) (1238 . 1241) (1296 . 1305) (1295 . 1296) (#("(" 0 1 (fontified t)) . -1295) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (#("$" 0 1 (fontified nil)) . -1296) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (#("{" 0 1 (fontified t)) . -1297) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#("1" 0 1 (fontified t)) . -1298) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (#(":" 0 1 (fontified t)) . -1299) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (#("(" 0 1 (fontified t)) . -1300) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (#(")" 0 1 (fontified t)) . -1301) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (#("}" 0 1 (fontified t)) . -1302) (undo-tree-id320 . -1) (undo-tree-id321 . -1) 1303 (#(")" 0 1 (fontified t)) . -1303) (undo-tree-id322 . -1) (#("$" 0 1 (fontified t)) . -1304) (undo-tree-id323 . -1) (#("0" 0 1 (fontified t)) . -1305) (undo-tree-id324 . -1) 1306 (1274 . 1306) (#("FailedToCreateWebhook(â€¦)" 0 24 (fontified nil)) . -1274) (1274 . 1298) (1272 . 1274) (1253 . 1272) (#("Webh" 0 4 (fontified nil)) . 1253) (1253 . 1257) (#("WebhookErrorContext" 0 19 (fontified nil)) . -1253) (1253 . 1272) (#("Webh" 0 4 (face font-lock-type-face fontified t)) . -1253) (undo-tree-id325 . -4) 1257 (1253 . 1257) (#("w" 0 1 (fontified t)) . -1253) (undo-tree-id326 . -1) (#("e" 0 1 (fontified t)) . -1254) (undo-tree-id327 . -1) (#("b" 0 1 (fontified t)) . -1255) (undo-tree-id328 . -1) 1256 (1253 . 1256) (#("W" 0 1 (face font-lock-type-face fontified t)) . -1253) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1254) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -1255) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -1256) (undo-tree-id335 . -1) (undo-tree-id336 . -1) 1257 (t 25817 24461 610779 212000)) nil (25817 24661 625644 98000) 0 nil])
([nil nil ((1522 . 1525) (#("    " 0 4 (fontified t)) . 1522) (1541 . 1547) (1530 . 1534) (1275 . 1279) (1523 . 1533) (1518 . 1522) (#("			" 0 3 (fontified t)) . -1518) 1521 (1521 . 1521) (1521 . 1522) (1517 . 1521) (#("
" 0 1 (fontified t)) . -1586) (undo-tree-id275 . -1) (#("." 0 1 (fontified t)) . -1587) (undo-tree-id276 . -1) (#("f" 0 1 (fontified t)) . -1588) (undo-tree-id277 . -1) (#("i" 0 1 (fontified t)) . -1589) (undo-tree-id278 . -1) (#("n" 0 1 (fontified t)) . -1590) (undo-tree-id279 . -1) (#("d" 0 1 (fontified t)) . -1591) (undo-tree-id280 . -1) 1592 (1588 . 1592) (#("			" 0 3 (fontified t)) . -1587) (1590 . 1590) (1590 . 1591) (1586 . 1590) (1585 . 1586) (apply yas--snippet-revive 1557 1585 #s(yas--snippet nil (#s(yas--field 1 1577 1584 nil nil nil t #s(yas--exit 1585 nil))) #s(yas--exit 1585 nil) 0 nil #s(yas--field 1 1577 1584 nil nil nil t #s(yas--exit 1585 nil)) nil nil)) (1578 . 1584) (#("()" 0 2 (fontified nil)) . 1578) (1577 . 1578) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1577 1584 nil nil nil t #s(yas--exit 1585 nil))) #s(yas--exit 1585 nil) 0 nil #s(yas--field 1 1577 1584 nil nil nil t #s(yas--exit 1585 nil)) nil nil)) (1557 . 1580) (#("FailedToGetWebhooks(${1:()})$0" 0 30 (fontified nil)) . 1557) (1557 . 1587) (#("FailedToGetWebhooks(â€¦)" 0 22 (fontified nil)) . -1557) (1557 . 1579) (1555 . 1557) (1536 . 1555) (#("Webh" 0 4 (fontified nil)) . 1536) (1536 . 1540) (#("WebhookErrorContext" 0 19 (fontified nil)) . -1536) (1536 . 1555) (#("Webh" 0 4 (face font-lock-type-face fontified t)) . -1536) (undo-tree-id281 . -4) 1540 (1536 . 1540) (1268 . 1271) (1259 . 1262)) nil (25817 24661 625529 291000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -142) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (#(" " 0 1 (fontified t)) . -143) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("c" 0 1 (fontified t)) . -144) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (#("h" 0 1 (fontified t)) . -145) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (#("a" 0 1 (fontified t)) . -146) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (#("n" 0 1 (fontified t)) . -147) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (#("n" 0 1 (fontified t)) . -148) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (#("e" 0 1 (fontified t)) . -149) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (#("l" 0 1 (fontified t)) . -150) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) 151 (128 . 135) (130 . 132) (131 . 134) (132 . 137) (#("s" 0 1 (fontified t)) . 132) (134 . 136) (#("r" 0 1 (fontified t)) . -134) 135 (765 . 765) (765 . 772) (#("channel" 0 7 (fontified nil)) . 765) (765 . 772) (#("channel (use poise::serenity_prelude::channel)" 0 46 (fontified nil)) . -765) (765 . 811) (#("channel" 0 7 (fontified t)) . -765) (undo-tree-id427 . -7) (undo-tree-id428 . -7) 772 (768 . 772) (765 . 768) (#("_" 0 1 (fontified t)) . -765) (undo-tree-id429 . -1) (undo-tree-id430 . -1) 766 (t 25817 24661 637463 829000)) nil (25817 24677 418377 598000) 0 nil])
([nil nil ((464 . 467) (#("t" 0 1 (fontified t)) . -464) (undo-tree-id438 . -1) 465 (462 . 465) (t 25817 24677 434130 843000)) nil (25817 24695 952366 936000) 0 nil])
([nil nil ((114 . 116) (#("u" 0 1 (face font-lock-type-face fontified t)) . -114) (undo-tree-id431 . -1) (undo-tree-id432 . -1) 115 (99 . 115) (#("f" 0 1 (fontified t)) . -462) (undo-tree-id433 . -1) (#("m" 0 1 (fontified t)) . -463) (undo-tree-id434 . -1) (#("t" 0 1 (fontified t)) . -464) (undo-tree-id435 . -1) (#(":" 0 1 (fontified t)) . -465) (undo-tree-id436 . -1) (#(":" 0 1 (fontified t)) . -466) (undo-tree-id437 . -1) 467) nil (25817 24695 952354 514000) 0 nil])
([nil nil ((537 . 546) (#("Forma" 0 5 (fontified nil)) . 537) (537 . 542) (#("Formatter" 0 9 (fontified nil)) . -537) (537 . 546) (#("Forma" 0 5 (face font-lock-type-face fontified t)) . -537) (undo-tree-id439 . -5) (undo-tree-id440 . -5) (undo-tree-id441 . -5) (undo-tree-id442 . -5) (undo-tree-id443 . -5) (undo-tree-id444 . -5) (undo-tree-id445 . -5) (undo-tree-id446 . -5) (undo-tree-id447 . -5) (undo-tree-id448 . -5) 542 (537 . 542) (#("f" 0 1 (fontified t)) . -537) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (#("O" 0 1 (fontified t)) . -538) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (#("R" 0 1 (fontified t)) . -539) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (#("M" 0 1 (fontified t)) . -540) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (#("A" 0 1 (fontified t)) . -541) (undo-tree-id461 . -1) (undo-tree-id462 . -1) 542 (537 . 542) (#("f" 0 1 (fontified t)) . -537) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (#("O" 0 1 (fontified t)) . -538) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (#("R" 0 1 (fontified t)) . -539) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (#("M" 0 1 (fontified t)) . -540) (undo-tree-id469 . -1) (undo-tree-id470 . -1) 541 (537 . 541) (#("R" 0 1 (face font-lock-type-face fontified t)) . -537) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -538) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (#("4" 0 1 (face font-lock-type-face fontified t)) . -539) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -540) (undo-tree-id477 . -1) 541 (537 . 541) (#("A" 0 1 (face font-lock-type-face fontified t)) . -537) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -538) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -539) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -540) (undo-tree-id487 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -541) (undo-tree-id488 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -542) (undo-tree-id489 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -543) (undo-tree-id490 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -544) (undo-tree-id491 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -545) (undo-tree-id492 . -1) 546 (t 25817 24695 967464 412000)) nil (25817 24719 815966 261000) 0 nil])
([nil nil ((1393 . 1394) (t 25817 24719 820797 788000)) nil (25817 24827 234300 536000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1394) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) 1395 (1394 . 1395)) nil (25817 24827 234295 952000) 0 nil])
([nil nil ((1395 . 1397) (1405 . 1407) (1396 . 1405) (#("		" 0 2 (fontified t)) . -1395) (1397 . 1397) (1397 . 1398) (1394 . 1397) (t 25817 24827 237461 340000)) nil (25817 24854 865 220000) 0 nil])
([nil nil ((534 . 536) (#(" " 0 1 (fontified t)) . -534) (undo-tree-id497 . -1) 535 (532 . 535) (t 25817 24854 7459 803000)) nil (25817 25257 466068 606000) 0 nil])
([nil nil ((#("FailedTo" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face fontified t)) . 394) (undo-tree-id722 . -8) (404 . 405) (405 . 408) 394 (#("FailedTo" 0 8 (face font-lock-type-face fontified t)) . 621) (631 . 632) (632 . 635) 621 (#("FailedTo" 0 1 (face font-lock-type-face fontified t) 1 8 (face font-lock-type-face fontified t)) . 1637) (1647 . 1648) (1648 . 1651) 1637 (t 25817 25229 800748 271000)) nil (25817 25279 679023 463000) 0 nil] [nil nil ((433 . 435) (#("e" 0 1 (face font-lock-type-face fontified nil)) . 433) (428 . 434) (#("G" 0 1 (face font-lock-type-face fontified nil)) . 428) (428 . 429) (#("FailedToCreate" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face fontified t) 8 9 (face font-lock-type-face fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face fontified t) 12 13 (face font-lock-type-face fontified t) 13 14 (face font-lock-type-face fontified t)) . 428) (undo-tree-id690 . -7) (undo-tree-id692 . -7) (undo-tree-id694 . -7) (undo-tree-id696 . -13) (undo-tree-id698 . -13) (undo-tree-id700 . -3) (397 . 401) (#("FailedTo" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face fontified t)) . 394) (undo-tree-id701 . -8) (undo-tree-id702 . -8) (undo-tree-id703 . -8) (undo-tree-id705 . -8) (undo-tree-id707 . -8) (t 25817 25229 800748 271000)) ((394 . 402) (#("ting" 0 4 (face font-lock-type-face fontified t)) . 397) (428 . 442) (#("G" 0 1 (face font-lock-type-face fontified nil)) . 428) (428 . 429) (#("Create" 0 5 (face font-lock-type-face fontified nil) 5 6 (face font-lock-type-face fontified nil)) . 428) (undo-tree-id709 . -5) (undo-tree-id710 . -5) (undo-tree-id711 . -5) (undo-tree-id712 . -5) (undo-tree-id713 . -5) (undo-tree-id714 . -5) (433 . 434) (#("in" 0 2 (face font-lock-type-face fontified t)) . 433) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1)) (25817 25256 26535 281000) 0 nil])
([nil nil ((#("FailedTo" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face fontified t)) . 428) (441 . 444) (#("e" 0 1 (face font-lock-type-face fontified t)) . 441) 428 (#("FailedTo" 0 8 (face font-lock-type-face fontified t)) . 764) (777 . 780) (#("e" 0 1 (face font-lock-type-face fontified t)) . 777) 764 (#("FailedTo" 0 8 (face font-lock-type-face fontified t)) . 1358) (undo-tree-id721 . -3) (1371 . 1374) (#("e" 0 1 (face font-lock-type-face fontified t)) . 1371) 1358) nil (25817 25279 679016 38000) 0 nil])
nil
([nil current ((#(" " 0 1 (face font-lock-string-face fontified t)) . -805) (undo-tree-id723 . -1) (undo-tree-id724 . -1) 806 (801 . 806) (800 . 801) (#("e" 0 1 (face font-lock-string-face fontified t)) . -800) (undo-tree-id725 . -1) (undo-tree-id726 . -1) 801 (793 . 795) (#(" " 0 1 (fontified t)) . -793) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -794) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -795) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -796) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -797) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -798) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -799) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -800) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -801) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -802) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -803) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -804) (undo-tree-id848 . -1) (undo-tree-id849 . -1) 805 (657 . 661) (#("f" 0 1 (face font-lock-string-face fontified t)) . -654) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -655) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -656) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -657) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -658) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -659) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -660) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -661) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -662) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -663) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) 664 (t 25817 25279 684073 210000)) nil (25817 25299 59642 699000) 0 nil])
nil
