(undo-tree-save-format-version . 1)
"c7a64a8f2b94898db0f92d522ed28ba7ee37c7a1"
[nil nil nil nil (25827 55466 437141 623000) 0 nil]
([nil nil ((#("A" 0 1 (face font-lock-type-face fontified t)) . -293) (undo-tree-id68 . -1) 294 (282 . 294) (273 . 282) (#(" " 0 1 (fontified t)) . -273) (undo-tree-id69 . -1) 274 (266 . 274) (#("		" 0 2 (fontified t)) . -265) 268 (267 . 268) (#("_" 0 1 (fontified t)) . -267) (undo-tree-id70 . -1) 268 (267 . 268) (264 . 267) (242 . 249) (241 . 242) (#(" " 0 1 (fontified nil)) . 240) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (241 . 242) (202 . 203) (#(" " 0 1 (fontified nil)) . 201) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (202 . 203) (178 . 180) (235 . 238) (221 . 235) (#("ShardMesscontent" 0 9 (fontified nil) 9 10 (face font-lock-variable-name-face fontified nil) 10 16 (face font-lock-variable-name-face fontified nil)) . 221) (221 . 230) (#("ShardMessenger" 0 14 (fontified nil)) . -221) (221 . 235) (#("ShardMess" 0 9 (face font-lock-variable-name-face fontified t)) . -221) (undo-tree-id79 . -9) (undo-tree-id80 . -9) 230 (226 . 230) (205 . 226) (204 . 205) (200 . 204) (#("," 0 1 (fontified t)) . -222) (undo-tree-id81 . -1) (#(" " 0 1 (fontified t)) . -223) (undo-tree-id82 . -1) 224 (222 . 224) (214 . 222) (#("ToStrin" 0 7 (fontified nil)) . 214) (214 . 221) (#("ToString" 0 8 (fontified nil)) . -214) (214 . 222) (#("ToStrin" 0 7 (face font-lock-type-face fontified t)) . -214) (undo-tree-id83 . -7) 221 (200 . 221) (198 . 200) (12 . 13) (30 . 32) (31 . 34) (32 . 33) (#("s" 0 1 (fontified t)) . 32) (34 . 44) (#("r" 0 1 (fontified t)) . -34) 35 (172 . 172) (172 . 183) (#("ReplyH" 0 6 (fontified nil)) . 172) (172 . 178) (#("ReplyHandle (use poise::ReplyHandle)" 0 36 (fontified nil)) . -172) (172 . 208) (#("ReplyH" 0 6 (face font-lock-type-face fontified t)) . -172) (undo-tree-id84 . -6) 178 (163 . 178) (#("&" 0 1 (fontified t)) . -163) (undo-tree-id85 . -1) 164 (159 . 164) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -159) (undo-tree-id86 . -1) 160 (158 . 160) (#("c" 0 1 (face font-lock-function-name-face fontified t)) . -158) (undo-tree-id87 . -1) (#("a" 0 1 (face font-lock-function-name-face fontified t)) . -159) (undo-tree-id88 . -1) (#("l" 0 1 (face font-lock-function-name-face fontified t)) . -160) (undo-tree-id89 . -1) (#("l" 0 1 (face font-lock-function-name-face fontified t)) . -161) (undo-tree-id90 . -1) 162 (155 . 162) (#("a" 0 1 (fontified t)) . -155) (undo-tree-id91 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -156) (undo-tree-id92 . -1) (#("y" 0 1 (fontified t)) . -157) (undo-tree-id93 . -1) (#("n" 0 1 (fontified t)) . -158) (undo-tree-id94 . -1) (#("c" 0 1 (face font-lock-keyword-face fontified t)) . -159) (undo-tree-id95 . -1) (#(" " 0 1 (fontified t)) . -160) (undo-tree-id96 . -1) (#("f" 0 1 (fontified t)) . -161) (undo-tree-id97 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -162) (undo-tree-id98 . -1) (#(" " 0 1 (fontified t)) . -163) (undo-tree-id99 . -1) 164 (151 . 164) (t 25827 54744 23977 372000)) nil (25827 55466 825192 187000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -368) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (369 . 370) (367 . 369) (363 . 367) (#(")" 0 1 (fontified t)) . -363) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) 364 (354 . 364) (347 . 354) (#("Mess" 0 4 (fontified nil)) . 347) (347 . 351) (#("Message" 0 7 (fontified nil)) . -347) (347 . 354) (#("Mess" 0 4 (face font-lock-type-face fontified t)) . -347) (undo-tree-id164 . -4) (undo-tree-id165 . -4) 351 (349 . 351) (328 . 349) (307 . 328) (#("B" 0 1 (face font-lock-type-face fontified t)) . -307) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -308) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -309) (undo-tree-id170 . -1) (undo-tree-id171 . -1) 310 (#("<" 0 1 (fontified t)) . -310) (undo-tree-id172 . -1) (undo-tree-id173 . -1) 311 (307 . 311) (#("F" 0 1 (face font-lock-type-face fontified t)) . -307) (undo-tree-id174 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -308) (undo-tree-id175 . -1) 309 (302 . 309) (287 . 302) (#("CreateAc" 0 8 (fontified nil)) . 287) (287 . 295) (#("CreateActionRow" 0 15 (fontified nil)) . -287) (287 . 302) (#("CreateAc" 0 8 (face font-lock-type-face fontified t)) . -287) (undo-tree-id176 . -8) 295 (287 . 295) (283 . 287) (#("e" 0 1 (fontified t)) . -283) (undo-tree-id177 . -1) (#("r" 0 1 (fontified t)) . -284) (undo-tree-id178 . -1) (#(":" 0 1 (fontified t)) . -285) (undo-tree-id179 . -1) (#(":" 0 1 (fontified t)) . -286) (undo-tree-id180 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -287) (undo-tree-id181 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -288) (undo-tree-id182 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -289) (undo-tree-id183 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -290) (undo-tree-id184 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -291) (undo-tree-id185 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -292) (undo-tree-id186 . -1) 293 (292 . 293) (#("e" 0 1 (face font-lock-type-face fontified t)) . -292) (undo-tree-id187 . -1) 293) nil (25827 55527 989382 899000) 0 nil] [nil nil ((#("a" 0 1 (fontified t)) . -233) (undo-tree-id0 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -234) (undo-tree-id1 . -1) (#("y" 0 1 (fontified t)) . -235) (undo-tree-id2 . -1) (#("n" 0 1 (fontified t)) . -236) (undo-tree-id3 . -1) (#("c" 0 1 (face font-lock-keyword-face fontified t)) . -237) (undo-tree-id4 . -1) (#(" " 0 1 (fontified t)) . -238) (undo-tree-id5 . -1) 239 (238 . 239) (233 . 238) (231 . 233) (#("	" 0 1 (fontified nil)) . -232) (undo-tree-id6 . -1) (233 . 234) (231 . 233) (229 . 231) (209 . 210) (1 . 31) (168 . 168) (168 . 179) (#("async_" 0 6 (fontified nil)) . 168) (168 . 174) (#("async_trait (use async_trait::async_trait)" 0 42 (fontified nil)) . -168) (168 . 210) (#("async_" 0 6 (fontified t)) . -168) (undo-tree-id7 . -6) 174 (166 . 174) (179 . 185) (#("d" 0 1 (face font-lock-type-face fontified t)) . -179) (undo-tree-id8 . -1) 180 (177 . 180) (167 . 177) (#("f" 0 1 (fontified t)) . -167) (undo-tree-id9 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -168) (undo-tree-id10 . -1) 169 (167 . 169) (166 . 167) (#("pub fn edit(
	handle: &ReplyHandle,
	ctx: impl AsRef<ser::ShardMessenger>,
	content: impl ToString
) -> impl FnOnce(" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 11 (face font-lock-function-name-face fontified t) 11 13 (fontified t) 13 14 (fontified t) 14 20 (face font-lock-variable-name-face fontified t) 20 22 (fontified t) 22 23 (face rust-ampersand-face fontified t) 23 34 (face font-lock-type-face fontified t) 34 36 (fontified t) 36 37 (fontified t) 37 40 (face font-lock-variable-name-face fontified t) 40 42 (fontified t) 42 46 (face font-lock-keyword-face fontified t) 46 47 (fontified t) 47 52 (face font-lock-type-face fontified t) 52 53 (fontified t) 53 56 (face font-lock-constant-face fontified t) 56 58 (fontified t) 58 72 (face font-lock-type-face fontified t) 72 75 (fontified t) 75 76 (fontified t) 76 83 (face font-lock-variable-name-face fontified t) 83 85 (fontified t) 85 89 (face font-lock-keyword-face fontified t) 89 90 (fontified t) 90 98 (face font-lock-type-face fontified t) 98 99 (fontified t) 99 102 (fontified t) 102 103 (syntax-table (1) fontified t) 103 104 (fontified t) 104 108 (face font-lock-keyword-face fontified t) 108 109 (fontified t) 109 115 (face font-lock-type-face fontified t) 115 116 (fontified t)) . 166) (undo-tree-id11 . -116) (undo-tree-id12 . -35) (undo-tree-id13 . -35) (undo-tree-id14 . -11) (undo-tree-id15 . -35) (undo-tree-id16 . -74) (undo-tree-id17 . -104) (undo-tree-id18 . -91) (undo-tree-id19 . -116) (undo-tree-id20 . -91) (270 . 282) (#("B" 0 1 (face font-lock-type-face fontified t)) . -270) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -271) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -272) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("<" 0 1 (fontified t)) . -273) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 274 (270 . 274) (#(" " 0 1 (fontified t)) . -270) (undo-tree-id33 . -1) 271 (270 . 271) (#("i" 0 1 (fontified t)) . -270) (undo-tree-id34 . -1) (#("m" 0 1 (fontified t)) . -271) (undo-tree-id35 . -1) (#("p" 0 1 (fontified t)) . -272) (undo-tree-id36 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -273) (undo-tree-id37 . -1) (#(" " 0 1 (fontified t)) . -274) (undo-tree-id38 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -275) (undo-tree-id39 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -276) (undo-tree-id40 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -277) (undo-tree-id41 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -278) (undo-tree-id42 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -279) (undo-tree-id43 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -280) (undo-tree-id44 . -1) (#("(" 0 1 (fontified t)) . -281) (undo-tree-id45 . -1) (#("s" 0 1 (fontified t)) . -282) (undo-tree-id46 . -1) 283 (#("e" 0 1 (fontified t)) . -283) (undo-tree-id47 . -1) (#("r" 0 1 (fontified t)) . -284) (undo-tree-id48 . -1) (#(":" 0 1 (fontified t)) . -285) (undo-tree-id49 . -1) (#(":" 0 1 (fontified t)) . -286) (undo-tree-id50 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -287) (undo-tree-id51 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -288) (undo-tree-id52 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -289) (undo-tree-id53 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -290) (undo-tree-id54 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -291) (undo-tree-id55 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -292) (undo-tree-id56 . -1) (#("A" 0 1 (face font-lock-type-face fontified t)) . -293) (undo-tree-id57 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -294) (undo-tree-id58 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -295) (undo-tree-id59 . -1) (#("i" 0 1 (face font-lock-type-face fontified nil)) . -296) (undo-tree-id60 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -297) (undo-tree-id61 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -298) (undo-tree-id62 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -299) (undo-tree-id63 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -300) (undo-tree-id64 . -1) (#("w" 0 1 (face font-lock-type-face fontified t)) . -301) (undo-tree-id65 . -1) (#(")" 0 1 (fontified t)) . -302) (undo-tree-id66 . -1) (#(" " 0 1 (fontified t)) . -303) (undo-tree-id67 . -1) 304 (303 . 304) (293 . 303)) ((#("ActionRow)" 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (face font-lock-type-face fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (face font-lock-type-face fontified nil) 8 9 (face font-lock-type-face fontified nil) 9 10 (fontified nil)) . 293) (#(" " 0 1 (fontified nil)) . 303) (270 . 304) (#(" " 0 1 (fontified nil)) . 270) (270 . 271) (#("Box<" 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (fontified nil)) . 270) (undo-tree-id102 . -4) (270 . 274) (#("impl FnOnce(" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 11 (face font-lock-type-face fontified nil) 11 12 (fontified nil)) . 270) (undo-tree-id103 . -12) (undo-tree-id104 . -12) (166 . 282) (#("
" 0 1 (fontified nil)) . 166) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (#("fn" 0 1 (fontified nil) 1 2 (face font-lock-keyword-face fontified nil)) . 167) (undo-tree-id111 . -2) (167 . 169) (#("pub trait " 0 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 9 (face font-lock-keyword-face fontified nil) 9 10 (fontified nil)) . 167) (undo-tree-id112 . -10) (undo-tree-id113 . -10) (undo-tree-id114 . -10) (undo-tree-id115 . -10) (undo-tree-id116 . -10) (#("Sed" 0 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil)) . 177) (undo-tree-id117 . -3) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (179 . 180) (#("ndable" 0 6 (face font-lock-type-face fontified nil)) . 179) (undo-tree-id122 . -6) (undo-tree-id123 . -6) (undo-tree-id124 . -6) (undo-tree-id125 . -6) (undo-tree-id126 . -6) (#("#[async_" 0 2 (face font-lock-preprocessor-face fontified nil) 2 8 (fontified nil)) . 166) (168 . 174) (#("async_trait (use async_trait::async_trait)" 0 42 (fontified nil)) . 168) (168 . 210) (#("async_" 0 6 (fontified nil)) . 168) (168 . 174) (#("async_trait" 0 11 (face font-lock-preprocessor-face fontified nil)) . 168) (#("use async_trait::async_trait;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 15 (face font-lock-constant-face fontified t) 15 30 (fontified t)) . 1) (#("]" 0 1 (face font-lock-preprocessor-face fontified t)) . 209) (#(" {" 0 2 (fontified nil)) . 229) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (#("
	" 0 1 (fontified nil) 1 2 (fontified nil)) . 231) (undo-tree-id132 . 2) (undo-tree-id133 . 2) (#("}" 0 1 (fontified nil)) . 233) (232 . 233) (#("
	" 0 1 (fontified t) 1 2 (fontified nil)) . 231) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -2) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (#("async" 0 1 (fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (face font-lock-keyword-face fontified nil)) . 233) (#(" " 0 1 (fontified nil)) . 238) (233 . 239)) (25827 55466 437365 526000) 0 nil])
([nil nil ((373 . 375) (#(";" 0 1 (fontified t)) . -373) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("a" 0 1 (fontified t)) . -374) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) 375 (370 . 375) (193 . 196) (177 . 181) (367 . 369)) nil (25827 55527 989158 17000) 0 nil])
([nil nil ((233 . 237)) ((#("pub " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 233) (undo-tree-id100 . -3) (undo-tree-id101 . -3)) (25827 55466 436743 304000) 0 nil])
([nil nil ((134 . 135) (131 . 134) (#("Pin" 0 3 (fontified nil)) . -131) (131 . 134) (117 . 131) (116 . 117) (t 25827 55528 11276 555000)) nil (25827 55542 826043 696000) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 538 547 #s(yas--snippet nil nil #s(yas--exit 547 nil) 98 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 547 nil) 98 nil nil nil nil)) (538 . 547) (#("message()$0" 0 11 (fontified nil)) . 538) (538 . 549) (#("mes" 0 3 (fontified nil)) . 538) (538 . 541) (#("message()" 0 9 (fontified nil)) . -538) (538 . 547) (#("mes" 0 3 (fontified t)) . -538) (undo-tree-id188 . -3) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -3) (undo-tree-id192 . -3) (undo-tree-id193 . -3) (undo-tree-id194 . -3) 541 (531 . 541) (530 . 531) (#("	" 0 1 (fontified t)) . -530) (undo-tree-id195 . -1) (#("c" 0 1 (fontified t)) . -531) (undo-tree-id196 . -1) (#("t" 0 1 (fontified t)) . -532) (undo-tree-id197 . -1) (#("x" 0 1 (fontified t)) . -533) (undo-tree-id198 . -1) 534 (531 . 534) (#("c" 0 1 (fontified t)) . -531) (undo-tree-id199 . -1) (#("o" 0 1 (fontified t)) . -532) (undo-tree-id200 . -1) (#("n" 0 1 (fontified t)) . -533) (undo-tree-id201 . -1) 534 (531 . 534) (534 . 535) (409 . 418) (#("c" 0 1 (fontified t)) . -522) (undo-tree-id202 . -1) 523 (522 . 523) (#("h" 0 1 (fontified t)) . -522) (undo-tree-id203 . -1) (#("a" 0 1 (fontified t)) . -523) (undo-tree-id204 . -1) (#("n" 0 1 (fontified t)) . -524) (undo-tree-id205 . -1) (#("d" 0 1 (fontified t)) . -525) (undo-tree-id206 . -1) (#("l" 0 1 (fontified t)) . -526) (undo-tree-id207 . -1) (#("e" 0 1 (fontified t)) . -527) (undo-tree-id208 . -1) (#("." 0 1 (fontified t)) . -528) (undo-tree-id209 . -1) 529 (522 . 529) (519 . 522) (517 . 519) (512 . 517) (#("await" 0 5 (fontified nil)) . -512) (512 . 517) (511 . 512) (apply yas--snippet-revive 474 510 #s(yas--snippet nil (#s(yas--field 1 485 509 nil nil nil t #s(yas--exit 510 nil))) #s(yas--exit 510 nil) 96 nil #s(yas--field 1 485 509 nil nil nil t #s(yas--exit 510 nil)) nil nil)) (apply yas--snippet-revive 491 509 #s(yas--snippet nil (#s(yas--field 1 506 508 nil nil nil t #s(yas--exit 509 nil))) #s(yas--exit 509 nil) 97 nil #s(yas--field 1 506 508 nil nil nil t #s(yas--exit 509 nil)) #s(yas--field 1 485 509 nil nil nil t #s(yas--exit 510 nil)) nil)) (507 . 508) (#("row" 0 3 (fontified nil)) . 507) (506 . 507) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 506 508 nil nil nil t #s(yas--exit 509 nil))) #s(yas--exit 509 nil) 97 nil #s(yas--field 1 506 508 nil nil nil t #s(yas--exit 509 nil)) #s(yas--field 1 485 509 nil nil nil t #s(yas--exit 510 nil)) nil)) (491 . 510) (#("add_action_row(${1:row})$0" 0 26 (fontified nil)) . 491) (491 . 517) (#("add_action_row(…)" 0 17 (fontified nil)) . -491) (491 . 508) (486 . 491) (#("f" 0 1 (fontified nil)) . 486) (485 . 486) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 485 509 nil nil nil t #s(yas--exit 510 nil))) #s(yas--exit 510 nil) 96 nil #s(yas--field 1 485 509 nil nil nil t #s(yas--exit 510 nil)) nil nil)) (474 . 487) (#("components(${1:f})$0" 0 20 (fontified nil)) . 474) (474 . 494) (#("components(…)" 0 13 (fontified nil)) . -474) (474 . 487) (473 . 474) (298 . 299) (291 . 292) (289 . 290) (#("T" 0 1 (face font-lock-type-face fontified t)) . -289) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) 290 (287 . 289) (apply yas--snippet-revive 453 469 #s(yas--snippet nil (#s(yas--field 1 461 468 nil nil nil nil #s(yas--exit 469 nil))) #s(yas--exit 469 nil) 95 nil #s(yas--field 1 461 468 nil nil nil nil #s(yas--exit 469 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 461 468 nil nil nil nil #s(yas--exit 469 nil))) #s(yas--exit 469 nil) 95 nil #s(yas--field 1 461 468 nil nil nil nil #s(yas--exit 469 nil)) nil nil)) (453 . 469) (#("content(${1:content})$0" 0 23 (fontified nil)) . 453) (453 . 476) (#("content(…)" 0 10 (fontified nil)) . -453) (453 . 463) (448 . 453) (447 . 448) (#("b" 0 1 (fontified t)) . -447) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("u" 0 1 (fontified t)) . -448) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (#("i" 0 1 (fontified t)) . -449) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("l" 0 1 (fontified t)) . -450) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("d" 0 1 (fontified t)) . -451) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("e" 0 1 (fontified t)) . -452) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#("r" 0 1 (fontified t)) . -453) (undo-tree-id226 . -1) (undo-tree-id227 . -1) 454 (267 . 270) (266 . 267) (#("::errors" 0 2 (fontified t) 2 8 (face font-lock-constant-face fontified t)) . -146) 154 (157 . 166) (162 . 171) (163 . 173) (165 . 170) (#("ualizable" 0 9 (face font-lock-type-face fontified t)) . -172) 181 (238 . 238) (238 . 250) (#("Poise" 0 5 (fontified nil)) . 238) (238 . 243) (#("PoiseContext (use crate::PoiseContext)" 0 38 (fontified nil)) . -238) (238 . 276) (#("Poise" 0 5 (face font-lock-type-face fontified t)) . -238) (undo-tree-id228 . -5) 243 (234 . 243) (#("i" 0 1 (fontified t)) . -234) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("m" 0 1 (fontified t)) . -235) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (#("p" 0 1 (fontified t)) . -236) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -237) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (#(" " 0 1 (fontified t)) . -238) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (#("A" 0 1 (face font-lock-type-face fontified t)) . -239) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -240) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -241) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -242) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -243) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) 244 (#("<" 0 1 (fontified t)) . -244) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#("s" 0 1 (fontified t)) . -245) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#("e" 0 1 (fontified t)) . -246) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (#("r" 0 1 (face font-lock-constant-face fontified nil)) . -247) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#(":" 0 1 (fontified nil)) . -248) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (#(":" 0 1 (fontified nil)) . -249) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (#("S" 0 1 (face font-lock-type-face fontified nil)) . -250) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -251) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -252) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -253) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -254) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -255) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -256) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -257) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -258) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -259) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -260) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -261) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -262) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -263) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (#(">" 0 1 (fontified t)) . -264) (undo-tree-id319 . -1) (undo-tree-id320 . -1) 265 (apply yas--snippet-revive 432 450 #s(yas--snippet nil (#s(yas--field 1 437 440 nil nil nil nil #s(yas--field 2 442 449 nil nil nil nil #s(yas--exit 450 nil))) #s(yas--field 2 442 449 nil nil nil nil #s(yas--exit 450 nil))) #s(yas--exit 450 nil) 94 nil #s(yas--field 1 437 440 nil nil nil nil #s(yas--field 2 442 449 nil nil nil nil #s(yas--exit 450 nil))) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 437 440 nil nil nil nil #s(yas--field 2 442 449 nil nil nil nil #s(yas--exit 450 nil))) #s(yas--field 2 442 449 nil nil nil nil #s(yas--exit 450 nil))) #s(yas--exit 450 nil) 94 nil #s(yas--field 1 437 440 nil nil nil nil #s(yas--field 2 442 449 nil nil nil nil #s(yas--exit 450 nil))) nil nil)) (432 . 450) (#("edit(${1:ctx}, ${2:builder})$0" 0 30 (fontified nil)) . 432) (432 . 462) (#("edi" 0 3 (fontified nil)) . 432) (432 . 435) (#("edit(…)" 0 7 (fontified nil)) . -432) (432 . 439) (#("edi" 0 3 (fontified t)) . -432) (undo-tree-id321 . -3) 435 (425 . 435) (422 . 425) (#("	" 0 1 (fontified nil)) . -424) (undo-tree-id322 . -1) (425 . 426) (422 . 425) (421 . 422) (400 . 421) (t 25827 55542 827892 208000)) nil (25827 55783 641188 541000) 0 nil])
([nil nil ((550 . 551) (531 . 534) (t 25827 55783 643720 955000)) nil (25827 55806 661298 707000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -250) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#("'" 0 1 (fontified t)) . -251) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -252) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#(" " 0 1 (fontified t)) . -253) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#("=" 0 1 (fontified t)) . -254) (undo-tree-id348 . -1) (#("=" 0 1 (fontified t)) . -255) (undo-tree-id349 . -1) 256 (254 . 256) (458 . 459) (#("." 0 1 (fontified t)) . -458) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("f" 0 1 (fontified t)) . -459) (undo-tree-id352 . -1) (#("r" 0 1 (fontified t)) . -460) (undo-tree-id353 . -1) (#("a" 0 1 (fontified t)) . -461) (undo-tree-id354 . -1) (#("m" 0 1 (fontified t)) . -462) (undo-tree-id355 . -1) (#("e" 0 1 (fontified t)) . -463) (undo-tree-id356 . -1) 464 (459 . 464) (458 . 459) (t 25827 55806 666973 456000)) nil (25827 55999 203740 220000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 454) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1)) nil (25827 55999 203701 990000) 0 nil])
([nil nil ((550 . 551) (415 . 424) (#(")" 0 1 (fontified t)) . -541) (undo-tree-id357 . -1) 542 (404 . 405) (#("	" 0 1 (fontified t)) . -404) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (#("B" 0 1 (face font-lock-type-face fontified t)) . -405) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -406) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -407) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (#(":" 0 1 (fontified t)) . -408) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#(":" 0 1 (fontified t)) . -409) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (#("p" 0 1 (fontified nil)) . -410) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("i" 0 1 (fontified t)) . -411) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (#("n" 0 1 (fontified t)) . -412) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (#("(" 0 1 (fontified t)) . -413) (undo-tree-id385 . -1) 414 (t 25827 55999 222960 412000)) nil (25827 56060 108824 972000) 0 nil])
([nil nil ((552 . 553) (547 . 552) (#("await" 0 5 (fontified nil)) . -547) (547 . 552) (546 . 547) (t 25827 56060 112744 337000)) nil (25827 56096 372654 538000) 0 nil])
([nil nil ((776 . 778) (769 . 776) (#("Messa" 0 5 (fontified nil)) . 769) (769 . 774) (#("Message" 0 7 (fontified nil)) . -769) (769 . 776) (#("Messa" 0 5 (face font-lock-type-face fontified t)) . -769) (undo-tree-id386 . -5) (undo-tree-id387 . -5) (undo-tree-id388 . -5) (undo-tree-id389 . -5) 774 (757 . 774) (752 . 755) 754 (752 . 754) (#(" " 0 1 (fontified nil)) . -752) (undo-tree-id390 . -1) (751 . 752) (750 . 751) (750 . 751) (740 . 741) (#("s" 0 1 (fontified t)) . -740) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (#("e" 0 1 (fontified t)) . -741) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (#("r" 0 1 (fontified t)) . -742) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (#(":" 0 1 (fontified t)) . -743) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (#(":" 0 1 (fontified t)) . -744) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (#("M" 0 1 (face font-lock-type-face fontified nil)) . -745) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -746) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -747) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -748) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -749) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -750) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -751) (undo-tree-id413 . -1) (undo-tree-id414 . -1) 752 (#("," 0 1 (fontified t)) . -761) (undo-tree-id415 . -1) 762 (#("
" 0 1 (fontified t)) . -762) (undo-tree-id416 . -1) 763 (#(" " 0 1 (fontified nil)) . -763) (762 . 763) (761 . 762) (t 25827 56096 389282 58000)) nil (25827 56249 992011 31000) 0 nil])
([nil nil ((588 . 591) (#(" " 0 1 (fontified t)) . -588) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) 589 (588 . 589) (t 25827 56250 8734 492000)) nil (25827 56266 284961 211000) 0 nil])
([nil nil ((393 . 394) (386 . 393) (#("Mess" 0 4 (fontified nil)) . 386) (386 . 390) (#("Message" 0 7 (fontified nil)) . -386) (386 . 393) (#("Mess" 0 4 (face font-lock-type-face fontified t)) . -386) (undo-tree-id420 . -4) (undo-tree-id421 . -4) (undo-tree-id422 . -4) (undo-tree-id423 . -4) (undo-tree-id424 . -4) 390 (373 . 390) (#("s" 0 1 (fontified t)) . -373) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (#("e" 0 1 (fontified t)) . -374) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (#("r" 0 1 (fontified t)) . -375) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#(":" 0 1 (fontified t)) . -376) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (#(":" 0 1 (fontified t)) . -377) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -378) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -379) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -380) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) 381 (#("s" 0 1 (face font-lock-type-face fontified t)) . -381) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -382) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -383) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -384) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) 385 (t 25827 56266 288676 338000)) nil (25827 56288 769257 998000) 0 nil])
([nil nil ((153 . 154) (148 . 153) (#(":" 0 1 (fontified t)) . -148) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (#(":" 0 1 (fontified t)) . -149) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) 150 (136 . 150) (t 25827 56288 771929 322000)) nil (25827 56299 374878 200000) 0 nil])
([nil nil ((145 . 157) (#("c" 0 1 (fontified t)) . -145) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (#("o" 0 1 (fontified t)) . -146) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (#("w" 0 1 (fontified t)) . -147) (undo-tree-id493 . -1) (undo-tree-id494 . -1) 148 (145 . 148) (143 . 145) (#(":" 0 1 (fontified t)) . -143) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (#(":" 0 1 (fontified t)) . -144) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (#("c" 0 1 (fontified t)) . -145) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (#("o" 0 1 (fontified t)) . -146) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (#("w" 0 1 (fontified t)) . -147) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (#(":" 0 1 (fontified t)) . -148) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (#(":" 0 1 (fontified t)) . -149) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -150) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -151) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (#("w" 0 1 (face font-lock-type-face fontified t)) . -152) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (#(";" 0 1 (fontified t)) . -153) (undo-tree-id515 . -1) 154 (t 25827 56300 211888 427000)) nil (25827 56316 493888 681000) 0 nil])
([nil nil ((316 . 323) (t 25827 56316 495163 533000)) nil (25827 56386 582276 852000) 0 nil])
([nil nil ((323 . 328) (#("," 0 1 (fontified t)) . -323) (undo-tree-id516 . -1) 324 (323 . 324) (#(" " 0 1 (fontified t)) . -323) (undo-tree-id517 . -1) (#("+" 0 1 (fontified t)) . -324) (undo-tree-id518 . -1) (#(" " 0 1 (fontified t)) . -325) (undo-tree-id519 . -1) (#("'" 0 1 (fontified t)) . -326) (undo-tree-id520 . -1) 327 (323 . 327) (#(" " 0 1 (fontified t)) . -323) (undo-tree-id521 . -1) (#("+" 0 1 (fontified t)) . -324) (undo-tree-id522 . -1) (#(" " 0 1 (fontified t)) . -325) (undo-tree-id523 . -1) (#("'" 0 1 (fontified t)) . -326) (undo-tree-id524 . -1) 327 (323 . 327) (t 25827 56386 588246 19000)) nil (25827 56423 549326 569000) 0 nil])
([nil nil ((apply yas--snippet-revive 1032 1040 #s(yas--snippet nil nil #s(yas--exit 1040 nil) 99 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1040 nil) 99 nil nil nil nil)) (1032 . 1040) (#("as_ref()$0" 0 10 (fontified nil)) . 1032) (1032 . 1042) (#("as_ref" 0 6 (fontified nil)) . 1032) (1032 . 1038) (#("as_ref() (as AsRef)" 0 19 (fontified nil)) . -1032) (1032 . 1051) (#("as_ref" 0 6 (fontified t)) . -1032) (undo-tree-id525 . -6) (undo-tree-id526 . -2) (undo-tree-id527 . -3) (undo-tree-id528 . -3) (undo-tree-id529 . -3) (undo-tree-id530 . -4) (undo-tree-id531 . -5) (undo-tree-id532 . -6) (undo-tree-id533 . -6) (undo-tree-id534 . -6) (undo-tree-id535 . -6) 1038 (1031 . 1038) (t 25827 56423 554780 254000)) nil (25827 56436 724628 210000) 0 nil])
([nil nil ((apply yas--snippet-revive 1100 1108 #s(yas--snippet nil nil #s(yas--exit 1108 nil) 100 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1108 nil) 100 nil nil nil nil)) (1100 . 1108) (#("as_ref()$0" 0 10 (fontified nil)) . 1100) (1100 . 1110) (#("as_" 0 3 (fontified nil)) . 1100) (1100 . 1103) (#("as_ref() (as AsRef)" 0 19 (fontified nil)) . -1100) (1100 . 1119) (#("as_" 0 3 (fontified t)) . -1100) (undo-tree-id536 . -3) (undo-tree-id537 . -3) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -3) (undo-tree-id541 . -3) (undo-tree-id542 . -3) (undo-tree-id543 . -3) (undo-tree-id544 . -3) (undo-tree-id545 . -3) (undo-tree-id546 . -3) (undo-tree-id547 . -3) 1103 (1099 . 1103) (t 25827 56436 731399 698000)) nil (25827 56443 717355 877000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1414) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (1415 . 1416) (1413 . 1415) (1403 . 1413) (#(" " 0 1 (fontified t)) . -1403) (undo-tree-id561 . -1) (undo-tree-id562 . -1) 1404 (1402 . 1404) (1400 . 1402) (t 25827 56443 734707 929000)) nil (25827 56559 200465 281000) 0 nil])
([nil nil ((1466 . 1467) (apply yas--snippet-revive 1420 1466 #s(yas--snippet nil (#s(yas--field 1 1427 1434 nil nil nil t #s(yas--field 2 1436 1465 nil nil nil t #s(yas--exit 1466 nil))) #s(yas--field 2 1436 1465 nil nil nil t #s(yas--exit 1466 nil))) #s(yas--exit 1466 nil) 101 nil #s(yas--field 2 1436 1465 nil nil nil t #s(yas--exit 1466 nil)) nil nil)) (1461 . 1465) (1440 . 1461) (1436 . 1440) (#("edit" 0 4 (fontified nil)) . 1436) (undo-tree-id548 . -4) (1436 . 1440) (#("edit" 0 4 (fontified t)) . -1436) (undo-tree-id549 . -4) (undo-tree-id550 . -4) (undo-tree-id551 . -4) 1440 (1437 . 1440) (#("sender" 0 6 (fontified nil)) . 1437) (undo-tree-id552 . -6) (1436 . 1437) (1428 . 1434) (#("ctx" 0 3 (fontified nil)) . 1428) (undo-tree-id553 . -3) (1427 . 1428) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1427 1434 nil nil nil t #s(yas--field 2 1436 1465 nil nil nil t #s(yas--exit 1466 nil))) #s(yas--field 2 1436 1465 nil nil nil t #s(yas--exit 1466 nil))) #s(yas--exit 1466 nil) 101 nil #s(yas--field 2 1436 1465 nil nil nil t #s(yas--exit 1466 nil)) nil nil)) (1420 . 1439) (#("ask_yn(${1:ctx}, ${2:sender})$0" 0 31 (fontified nil)) . 1420) (1420 . 1451) (#("ask_" 0 4 (fontified nil)) . 1420) (1420 . 1424) (#("ask_yn(…)" 0 9 (fontified nil)) . -1420) (1420 . 1429) (#("ask_" 0 4 (fontified t)) . -1420) (undo-tree-id554 . -4) (undo-tree-id555 . -4) (undo-tree-id556 . -1) 1424 (1415 . 1424) (1413 . 1415)) nil (25827 56559 200445 973000) 0 nil])
([nil nil ((1467 . 1468) (t 25827 56559 217626 943000)) nil (25827 56561 272079 96000) 0 nil])
([nil nil ((#("fn test() {
	drop(ask_yn(todo!(), edit(todo!(), todo!(), \"meow\")))
}
" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 7 (face font-lock-function-name-face fontified t) 7 12 (fontified t) 12 18 (fontified t) 18 25 (fontified t) 25 30 (face font-lock-preprocessor-face fontified t) 30 34 (fontified t) 34 39 (fontified t) 39 44 (face font-lock-preprocessor-face fontified t) 44 48 (fontified t) 48 53 (face font-lock-preprocessor-face fontified t) 53 57 (fontified t) 57 63 (face font-lock-string-face fontified t) 63 66 (fontified t) 66 67 (fontified t) 67 68 (fontified t) 68 69 (fontified t)) . 1402) (undo-tree-id563 . -69) (undo-tree-id564 . 3) (undo-tree-id565 . -68) (undo-tree-id566 . -69) (undo-tree-id567 . -69) (undo-tree-id568 . -18) (undo-tree-id569 . 6) (undo-tree-id570 . -29) (undo-tree-id571 . -69) (undo-tree-id572 . -29) (undo-tree-id573 . -29) (undo-tree-id574 . -29) (undo-tree-id575 . -29) (undo-tree-id576 . -29) (undo-tree-id577 . -10) (undo-tree-id578 . -10) (undo-tree-id579 . -10) (undo-tree-id580 . -10) (undo-tree-id581 . -10) (undo-tree-id582 . -67) (undo-tree-id583 . -67) (undo-tree-id584 . -67) (undo-tree-id585 . -67) (undo-tree-id586 . -69) (undo-tree-id587 . -69) (undo-tree-id588 . -69) (undo-tree-id589 . -69) (undo-tree-id590 . -69) 1471 (t 25827 56561 284286 189000)) nil (25827 56581 205616 827000) 0 nil])
([nil nil ((1465 . 1467) (#("!" 0 1 (fontified t)) . -1465) (undo-tree-id591 . -1) 1466 (1465 . 1466) (#("(" 0 1 (fontified t)) . -1465) (undo-tree-id592 . -1) (#(")" 0 1 (fontified t)) . -1466) (undo-tree-id593 . -1) 1467 (#("
" 0 1 (fontified t)) . -1469) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (#("	" 0 1 (fontified t)) . -1470) (undo-tree-id596 . -1) (undo-tree-id597 . -1) 1471 (1469 . 1471) (#("	" 0 1 (fontified nil)) . -1470) (undo-tree-id598 . -1) (1471 . 1472) (1469 . 1471) (1465 . 1469) (1461 . 1465) (1460 . 1461) (1449 . 1460) (#("Repl" 0 4 (fontified nil)) . 1449) (1449 . 1453) (#("ReplyHandle" 0 11 (fontified nil)) . -1449) (1449 . 1460) (#("Repl" 0 4 (face font-lock-type-face fontified t)) . -1449) (undo-tree-id599 . -4) 1453 (1437 . 1453) (#("c" 0 1 (fontified t)) . -1437) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (#("o" 0 1 (fontified t)) . -1438) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (#("n" 0 1 (fontified t)) . -1439) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (#("t" 0 1 (fontified t)) . -1440) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (#("e" 0 1 (fontified t)) . -1441) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (#("n" 0 1 (fontified t)) . -1442) (undo-tree-id610 . -1) (undo-tree-id611 . -1) 1443 (#("t" 0 1 (fontified t)) . -1443) (undo-tree-id612 . -1) (undo-tree-id613 . -1) 1444 (1432 . 1444) (1431 . 1432) (1419 . 1431) (#("PoiseC" 0 6 (fontified nil)) . 1419) (1419 . 1425) (#("PoiseContext" 0 12 (fontified nil)) . -1419) (1419 . 1431) (#("PoiseC" 0 6 (face font-lock-type-face fontified t)) . -1419) (undo-tree-id614 . -6) 1425 (1420 . 1425) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1420) (undo-tree-id615 . -1) 1421 (1409 . 1421) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -1409) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (#("d" 0 1 (face font-lock-function-name-face fontified t)) . -1410) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -1411) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (#("t" 0 1 (face font-lock-function-name-face fontified t)) . -1412) (undo-tree-id622 . -1) (undo-tree-id623 . -1) 1413 (1409 . 1413) (1402 . 1409) (t 25827 56581 207547 977000)) nil (25827 57603 896499 686000) 0 nil])
([nil nil ((1471 . 1472)) nil (25827 57603 896457 388000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1446) (undo-tree-id624 . -1) (undo-tree-id625 . -1) 1447 (#("'" 0 1 (fontified t)) . -1446) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1447) (undo-tree-id636 . -1) (undo-tree-id637 . -1) 1448 (1469 . 1471) (t 25827 57603 914167 75000)) nil (25827 57630 136723 344000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1446) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (#("	" 0 1 (fontified t)) . -1447) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (#("	" 0 1 (fontified t)) . -1448) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (#("	" 0 1 (fontified t)) . -1449) (undo-tree-id653 . -1) (undo-tree-id654 . -1) 1450 (1446 . 1450) (t 25827 57630 144081 588000)) nil (25827 57666 602840 664000) 0 nil])
([nil nil ((apply yas--snippet-revive 1468 1506 #s(yas--snippet nil (#s(yas--field 1 1475 1478 nil nil nil nil #s(yas--field 2 1480 1505 nil nil nil t #s(yas--exit 1506 nil))) #s(yas--field 2 1480 1505 nil nil nil t #s(yas--exit 1506 nil))) #s(yas--exit 1506 nil) 102 nil #s(yas--field 2 1480 1505 nil nil nil t #s(yas--exit 1506 nil)) nil nil)) (apply yas--snippet-revive 1480 1505 #s(yas--snippet nil (#s(yas--field 1 1485 1491 nil nil nil nil #s(yas--field 2 1493 1496 nil nil nil nil #s(yas--field 3 1498 1504 nil nil nil t #s(yas--exit 1505 nil)))) #s(yas--field 2 1493 1496 nil nil nil nil #s(yas--field 3 1498 1504 nil nil nil t #s(yas--exit 1505 nil))) #s(yas--field 3 1498 1504 nil nil nil t #s(yas--exit 1505 nil))) #s(yas--exit 1505 nil) 103 nil #s(yas--field 3 1498 1504 nil nil nil t #s(yas--exit 1505 nil)) #s(yas--field 2 1480 1505 nil nil nil t #s(yas--exit 1506 nil)) nil)) (1499 . 1504) (#("content" 0 7 (fontified nil)) . 1499) (undo-tree-id638 . -7) (1498 . 1499) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1485 1491 nil nil nil nil #s(yas--field 2 1493 1496 nil nil nil nil #s(yas--field 3 1498 1504 nil nil nil t #s(yas--exit 1505 nil)))) #s(yas--field 2 1493 1496 nil nil nil nil #s(yas--field 3 1498 1504 nil nil nil t #s(yas--exit 1505 nil))) #s(yas--field 3 1498 1504 nil nil nil t #s(yas--exit 1505 nil))) #s(yas--exit 1505 nil) 103 nil #s(yas--field 3 1498 1504 nil nil nil t #s(yas--exit 1505 nil)) #s(yas--field 2 1480 1505 nil nil nil t #s(yas--exit 1506 nil)) nil)) (1480 . 1506) (#("edit(${1:handle}, ${2:ctx}, ${3:content})$0" 0 43 (fontified nil)) . 1480) (undo-tree-id639 . -43) (1480 . 1523) (#("edi" 0 3 (fontified nil)) . 1480) (undo-tree-id640 . -3) (1480 . 1483) (#("edit(…)" 0 7 (fontified nil)) . -1480) (undo-tree-id641 . -7) (1480 . 1487) (#("edi" 0 3 (fontified t)) . -1480) (undo-tree-id642 . -3) (undo-tree-id643 . -3) (undo-tree-id644 . -3) 1483 (1481 . 1483) (#("sender" 0 6 (fontified nil)) . 1481) (undo-tree-id645 . -6) (1480 . 1481) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1475 1478 nil nil nil nil #s(yas--field 2 1480 1505 nil nil nil t #s(yas--exit 1506 nil))) #s(yas--field 2 1480 1505 nil nil nil t #s(yas--exit 1506 nil))) #s(yas--exit 1506 nil) 102 nil #s(yas--field 2 1480 1505 nil nil nil t #s(yas--exit 1506 nil)) nil nil)) (1468 . 1487) (#("ask_yn(${1:ctx}, ${2:sender})$0" 0 31 (fontified nil)) . 1468) (1468 . 1499) (#("ask_" 0 4 (fontified nil)) . 1468) (1468 . 1472) (#("ask_yn(…)" 0 9 (fontified nil)) . -1468) (1468 . 1477) (#("ask_" 0 4 (fontified t)) . -1468) (undo-tree-id646 . -4) 1472 (1471 . 1472) (1468 . 1471) (1466 . 1468)) nil (25827 57666 602640 514000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1512) (undo-tree-id655 . 1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (#("	" 0 1 (fontified t)) . -1513) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) 1514 (1511 . 1512) (1468 . 1473) (t 25827 57666 603962 201000)) nil (25827 57678 262619 784000) 0 nil])
([nil current ((#("pub fn test(ctx: PoiseContext<'_>, handle: &ReplyHandle) -> () {
	drop(ask_yn(ctx, edit(handle, ctx, \"meow\")))
}
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 11 (face font-lock-function-name-face fontified t) 11 12 (fontified t) 12 15 (face font-lock-variable-name-face fontified t) 15 17 (fontified t) 17 29 (face font-lock-type-face fontified t) 29 31 (fontified t) 31 32 (face font-lock-variable-name-face fontified t) 32 35 (fontified t) 35 41 (face font-lock-variable-name-face fontified t) 41 43 (fontified t) 43 44 (face rust-ampersand-face fontified t) 44 55 (face font-lock-type-face fontified t) 55 58 (fontified t) 58 59 (syntax-table (1) fontified t) 59 65 (fontified t) 65 71 (fontified t) 71 83 (fontified t) 83 101 (fontified t) 101 107 (face font-lock-string-face fontified t) 107 108 (fontified t) 108 110 (fontified t) 110 111 (fontified t) 111 112 (fontified t) 112 113 (fontified t)) . 1402) (undo-tree-id667 . -113) (undo-tree-id668 . 3) (undo-tree-id669 . -112) (undo-tree-id670 . -113) (undo-tree-id671 . -44) (undo-tree-id672 . -71) (undo-tree-id673 . 42) (undo-tree-id674 . -109) (undo-tree-id675 . -109) (undo-tree-id676 . -109) (undo-tree-id677 . -109) (undo-tree-id678 . -113) (undo-tree-id679 . -113) (undo-tree-id680 . -113) (undo-tree-id681 . -113) (undo-tree-id682 . -113) (undo-tree-id683 . -113) (undo-tree-id684 . -113) (undo-tree-id685 . -113) (undo-tree-id686 . -113) (undo-tree-id687 . -113) (undo-tree-id688 . -113) (undo-tree-id689 . -113) (undo-tree-id690 . -113) (undo-tree-id691 . -113) (undo-tree-id692 . -113) (undo-tree-id693 . -113) (undo-tree-id694 . -113) (undo-tree-id695 . -113) (undo-tree-id696 . -113) (undo-tree-id697 . -113) (undo-tree-id698 . -113) (undo-tree-id699 . -113) (undo-tree-id700 . -113) (undo-tree-id701 . -113) (undo-tree-id702 . -113) (t 25827 57678 277257 179000)) nil (25827 57699 315802 515000) 0 nil])
nil
