(undo-tree-save-format-version . 1)
"bc716e4ad50f960d1e5538bcaa485f9b1f70bb1e"
[nil nil nil nil (25812 39830 743182 215000) 0 nil]
([nil nil ((#("	" 0 1 (fontified nil)) . -22) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (23 . 24) (21 . 23) (14 . 21) (6 . 14) (1 . 6) (t 25812 39655 16643 219000)) nil (25812 39830 743177 826000) 0 nil])
([nil nil ((23 . 24)) nil (25812 39830 743131 753000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -40) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (41 . 42) (39 . 41) (27 . 39) (25 . 27) (21 . 23) (t 25812 39830 746498 300000)) nil (25812 39927 474430 583000) 0 nil])
([nil nil ((28 . 36) (12 . 28) (#("sere" 0 4 (fontified nil)) . 12) (12 . 16) (#("serenity_prelude" 0 16 (fontified nil)) . -12) (12 . 28) (#("sere" 0 4 (fontified t)) . -12) (undo-tree-id4 . -4) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) 16 (1 . 16) (1 . 3) (#(" " 0 1 (fontified t)) . -56) (undo-tree-id10 . -1) 57 (51 . 57) (#("s" 0 1 (face font-lock-type-face fontified t)) . -51) (undo-tree-id11 . -1) 52 (41 . 52) (39 . 41)) nil (25812 39927 474414 661000) 0 nil])
([nil nil ((78 . 85) (#("E" 0 1 (face font-lock-type-face fontified t)) . -88) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -89) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -90) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -91) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -92) (undo-tree-id33 . -1) 93 (110 . 111) (99 . 110) (#("Permi" 0 5 (fontified nil)) . 99) (99 . 104) (#("Permissions" 0 11 (fontified nil)) . -99) (99 . 110) (#("Permi" 0 5 (face font-lock-type-face fontified t)) . -99) (undo-tree-id34 . -5) 104 (93 . 104) (t 25812 39927 479753 178000)) nil (25812 39996 797789 950000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -57) (undo-tree-id56 . -1) (58 . 59) (56 . 58) (55 . 56) (54 . 55) (114 . 118) (56 . 60) (38 . 42) (49 . 50) (43 . 49) (#("W" 0 1 (face font-lock-type-face fontified t)) . -43) (undo-tree-id57 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -44) (undo-tree-id58 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -45) (undo-tree-id59 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -46) (undo-tree-id60 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -47) (undo-tree-id61 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -48) (undo-tree-id62 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -49) (undo-tree-id63 . -1) 50 (38 . 50) (37 . 39) (86 . 88) (84 . 86) (79 . 84) (#("Err" 0 3 (fontified nil)) . 79) (79 . 82) (#("Error" 0 5 (fontified nil)) . -79) (79 . 84) (#("Err" 0 3 (face font-lock-type-face fontified t)) . -79) (undo-tree-id64 . -3) 82 (79 . 82) (#("E" 0 1 (face font-lock-type-face fontified t)) . -79) (undo-tree-id65 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -80) (undo-tree-id66 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -81) (undo-tree-id67 . -1) 82 (81 . 82) (60 . 81) (t 25812 39996 803030 738000)) nil (25812 40779 593447 442000) 0 nil])
([nil nil ((56 . 58)) nil (25812 40779 593365 927000) 0 nil])
([nil nil ((79 . 92) (#("L" 0 1 (face font-lock-type-face fontified t)) . -79) (undo-tree-id46 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -80) (undo-tree-id47 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -81) (undo-tree-id48 . -1) 82 (79 . 82) (#("E" 0 1 (face font-lock-type-face fontified t)) . -79) (undo-tree-id49 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -80) (undo-tree-id50 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -81) (undo-tree-id51 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -82) (undo-tree-id52 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -83) (undo-tree-id53 . -1) 84 (75 . 84) (67 . 75) (65 . 67) (58 . 65) (#("c" 0 1 (fontified t)) . -58) (undo-tree-id54 . -1) (#("r" 0 1 (fontified t)) . -59) (undo-tree-id55 . -1) 60 (58 . 60)) nil (25812 40779 593348 656000) 0 nil])
([nil nil ((232 . 233) (219 . 232) (#("InternalE" 0 9 (fontified nil)) . 219) (219 . 228) (#("InternalError" 0 13 (fontified nil)) . -219) (219 . 232) (#("InternalE" 0 9 (face font-lock-type-face fontified t)) . -219) (undo-tree-id35 . -9) (undo-tree-id36 . -9) (undo-tree-id37 . -9) (undo-tree-id38 . -9) (undo-tree-id39 . -9) 228 (219 . 228) (#("E" 0 1 (face font-lock-type-face fontified t)) . -219) (undo-tree-id40 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -220) (undo-tree-id41 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -221) (undo-tree-id42 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -222) (undo-tree-id43 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -223) (undo-tree-id44 . -1) (#(")" 0 1 (fontified t)) . -224) (undo-tree-id45 . -1) 225 (210 . 225) (208 . 210) (207 . 208)) nil (25812 40779 593275 226000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -229) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("w" 0 1 (fontified t)) . -230) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 231 (231 . 233) (229 . 231) (83 . 84) (#("r" 0 1 (face font-lock-type-face fontified t)) . -83) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -84) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -85) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -86) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -87) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -88) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -89) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -90) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 91 (t 25812 40779 599082 835000)) nil (25813 26049 168581 478000) 0 nil])
([nil nil ((231 . 232)) nil (25813 26049 168472 553000) 0 nil])
([nil nil ((#("`" 0 1 (fontified t)) . -76) (undo-tree-id51 . -1) 77 (76 . 77) (54 . 57) (t 25813 26049 179540 883000)) nil (25813 26426 50923 133000) 0 nil])
([nil nil ((87 . 90)) nil (25813 26426 50907 806000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -64) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -65) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -66) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -67) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -68) (undo-tree-id64 . -1) 69 (87 . 94) (t 25813 26426 59377 112000)) nil (25813 26589 398355 882000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . -54) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -55) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#(">" 0 1 (fontified t)) . -56) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) 57 (#("
" 0 1 (fontified t)) . -95) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("
" 0 1 (fontified t)) . -96) (undo-tree-id84 . -1) (#("p" 0 1 (fontified t)) . -97) (undo-tree-id85 . -1) (#("u" 0 1 (fontified t)) . -98) (undo-tree-id86 . -1) (#("b" 0 1 (face font-lock-keyword-face fontified t)) . -99) (undo-tree-id87 . -1) 100 (97 . 100) (96 . 97) (96 . 97) (t 25813 26589 399308 72000)) nil (25814 24317 281206 803000) 0 nil])
([nil nil ((85 . 86) (#("t" 0 1 (face font-lock-type-face fontified t)) . -85) (undo-tree-id65 . -1) (#("<" 0 1 (fontified t)) . -86) (undo-tree-id66 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -87) (undo-tree-id67 . -1) (#(">" 0 1 (fontified t)) . -88) (undo-tree-id68 . -1) 89) nil (25814 24317 281151 552000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -112) (undo-tree-id90 . -1) (113 . 114) (111 . 113) (91 . 111) (90 . 92) (t 25814 24317 282563 585000)) nil (25814 24445 538520 945000) 0 nil])
([nil nil ((145 . 154) (#("i" 0 1 (fontified t)) . -145) (undo-tree-id88 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -146) (undo-tree-id89 . -1) 147 (145 . 147) (113 . 116) (140 . 142) (136 . 140) (117 . 136) (102 . 106) (111 . 113)) nil (25814 24445 538510 808000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -188) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (189 . 190) (187 . 189) (184 . 187) (163 . 184) (159 . 163) (158 . 159) (#("
" 0 1 (fontified t)) . -158) (undo-tree-id95 . -1) (#("t" 0 1 (fontified t)) . -159) (undo-tree-id96 . -1) (#("r" 0 1 (fontified t)) . -160) (undo-tree-id97 . -1) (#("a" 0 1 (fontified t)) . -161) (undo-tree-id98 . -1) (#("i" 0 1 (fontified t)) . -162) (undo-tree-id99 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -163) (undo-tree-id100 . -1) (#(" " 0 1 (fontified t)) . -164) (undo-tree-id101 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -165) (undo-tree-id102 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -166) (undo-tree-id103 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -167) (undo-tree-id104 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -168) (undo-tree-id105 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -169) (undo-tree-id106 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -170) (undo-tree-id107 . -1) 171 (159 . 171) (158 . 160) (90 . 91) (t 25814 24445 545837 235000)) nil (25814 24583 662594 600000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -228) (undo-tree-id108 . -1) (undo-tree-id109 . -1) 229 (213 . 229) (#("t" 0 1 (fontified t)) . -213) (undo-tree-id110 . -1) (undo-tree-id111 . -1) 214 (210 . 214) (219 . 220) (206 . 219) (205 . 206) (189 . 205) (187 . 189) (t 25814 24583 669083 67000)) nil (25814 24795 987690 387000) 0 nil])
([nil nil ((118 . 134) (#("Contex" 0 6 (fontified nil)) . 118) (118 . 124) (#("Contextualizable" 0 16 (fontified nil)) . -118) (118 . 134) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -118) (undo-tree-id112 . -6) 124 (116 . 124) (272 . 273) (263 . 272) (247 . 263) (#("Context" 0 7 (fontified nil)) . 247) (247 . 254) (#("Contextualizable" 0 16 (fontified nil)) . -247) (247 . 263) (#("Context" 0 7 (face font-lock-type-face fontified t)) . -247) (undo-tree-id113 . -7) 254 (242 . 254) (240 . 242) (t 25814 24795 995580 692000)) nil (25814 24825 99403 235000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -324) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (325 . 326) (323 . 325) (321 . 323) (319 . 320) (apply yas--snippet-revive 307 320 #s(yas--snippet nil nil #s(yas--exit 319 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 319 nil) 0 nil nil nil nil)) (307 . 320) (#("WithContext<$0>" 0 15 (fontified nil)) . 307) (307 . 322) (#("WithCon" 0 7 (fontified nil)) . 307) (307 . 314) (#("WithContext<…>" 0 14 (fontified nil)) . -307) (307 . 321) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -307) (undo-tree-id125 . -7) (undo-tree-id126 . -7) (undo-tree-id127 . -7) 314 (307 . 314) (#("C" 0 1 (face font-lock-type-face fontified t)) . -307) (undo-tree-id128 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -308) (undo-tree-id129 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -309) (undo-tree-id130 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -310) (undo-tree-id131 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -311) (undo-tree-id132 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -312) (undo-tree-id133 . -1) 313 (302 . 313) (286 . 302) (#("Contex" 0 6 (fontified nil)) . 286) (286 . 292) (#("Contextualizable" 0 16 (fontified nil)) . -286) (286 . 302) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -286) (undo-tree-id134 . -6) 292 (286 . 292) (#("W" 0 1 (face font-lock-type-face fontified t)) . -286) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -287) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -288) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -289) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -290) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -291) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -292) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -293) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -294) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -295) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -296) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (#("<" 0 1 (fontified t)) . -297) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (#("E" 0 1 (face font-lock-type-face fontified nil)) . -298) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#(">" 0 1 (fontified nil)) . -299) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#(" " 0 1 (fontified nil)) . -300) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (#("f" 0 1 (fontified nil)) . -301) (undo-tree-id165 . -1) (#("o" 0 1 (fontified t)) . -302) (undo-tree-id166 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -303) (undo-tree-id167 . -1) (#(" " 0 1 (fontified t)) . -304) (undo-tree-id168 . -1) 305 (301 . 305) (300 . 301) (#("A" 0 1 (face font-lock-type-face fontified t)) . -300) (undo-tree-id169 . -1) 301 (300 . 301) (298 . 300) (#("$" 0 1 (fontified t)) . -298) (undo-tree-id170 . -1) (#("0" 0 1 (fontified t)) . -299) (undo-tree-id171 . -1) (#(">" 0 1 (fontified t)) . -300) (undo-tree-id172 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -301) (undo-tree-id173 . -1) 302 (301 . 302) (286 . 301) (#("WithC" 0 5 (fontified nil)) . 286) (286 . 291) (#("WithContext<…>" 0 14 (fontified nil)) . -286) (286 . 300) (#("WithC" 0 5 (face font-lock-type-face fontified t)) . -286) (undo-tree-id174 . -5) 291 (284 . 291) (268 . 284) (#("Contex" 0 6 (fontified nil)) . 268) (268 . 274) (#("Contextualizable" 0 16 (fontified nil)) . -268) (268 . 284) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -268) (undo-tree-id175 . -6) 274 (268 . 274) (264 . 268) (#(" " 0 1 (fontified t)) . -264) (undo-tree-id176 . -1) 265 (260 . 265) (259 . 260) (#("
" 0 1 (fontified t)) . -259) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("i" 0 1 (fontified t)) . -260) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (#("m" 0 1 (fontified t)) . -261) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("p" 0 1 (fontified t)) . -262) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -263) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#(" " 0 1 (fontified t)) . -264) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -265) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -266) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -267) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -268) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -269) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) 270 (#("x" 0 1 (face font-lock-type-face fontified t)) . -270) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -271) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -272) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -273) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -274) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -275) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("z" 0 1 (face font-lock-type-face fontified t)) . -276) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -277) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -278) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -279) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -280) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#(" " 0 1 (fontified t)) . -281) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (#("f" 0 1 (fontified t)) . -282) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (#("o" 0 1 (fontified t)) . -283) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -284) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#(" " 0 1 (fontified t)) . -285) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (#("W" 0 1 (face font-lock-type-face fontified t)) . -286) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -287) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -288) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -289) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -290) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) 291 (t 25814 24825 105554 981000)) nil (25814 25122 697428 367000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -324) (undo-tree-id114 . -1) (#("f" 0 1 (fontified t)) . -325) (undo-tree-id115 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -326) (undo-tree-id116 . -1) 327 (325 . 327) (323 . 325) (#("
" 0 1 (fontified t)) . -323) (undo-tree-id117 . -1) (#("
" 0 1 (fontified t)) . -324) (undo-tree-id118 . -1) (#("	" 0 1 (fontified t)) . -325) (undo-tree-id119 . -1) 326 (325 . 326) (#("	" 0 1 (fontified nil)) . 324) (undo-tree-id120 . -1) (323 . 326)) nil (25814 25122 697061 402000) 0 nil])
([nil nil ((342 . 346) (#("s" 0 1 (fontified t)) . -378) (undo-tree-id273 . -1) 379 (378 . 379) (apply yas--snippet-revive 325 381 #s(yas--snippet nil nil #s(yas--exit 378 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 378 nil) 1 nil nil nil nil)) (325 . 381) (#("fn contextualize(self, context: Context) -> Self {
		$0
	}" 0 42 (fontified nil) 42 43 (syntax-table (1) fontified nil) 43 58 (fontified nil)) . 325) (381 . 382) (376 . 378) (#("    " 0 4 (fontified nil)) . 376) (325 . 384) (#("fn con" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 6 (fontified nil)) . 325) (undo-tree-id274 . -3) (undo-tree-id275 . -3) (328 . 331) (#("fn contextualize(..)" 0 20 (fontified nil)) . -328) (328 . 348) (#("con" 0 3 (face font-lock-function-name-face fontified t)) . -328) (undo-tree-id276 . -3) (undo-tree-id277 . -3) 331 (325 . 331) (324 . 325) (t 25814 25122 725617 45000)) nil (25814 25140 257633 959000) 0 nil])
([nil nil ((413 . 417) (410 . 413) (409 . 410) (#("
" 0 1 (fontified t)) . -409) (undo-tree-id278 . -1) (#("	" 0 1 (fontified t)) . -410) (undo-tree-id279 . -1) (#("	" 0 1 (fontified t)) . -411) (undo-tree-id280 . -1) (#("	" 0 1 (fontified t)) . -412) (undo-tree-id281 . -1) 413 (409 . 413) (apply yas--snippet-revive 396 409 #s(yas--snippet nil (#s(yas--field 1 401 408 nil nil nil t #s(yas--exit 409 nil))) #s(yas--exit 409 nil) 2 nil #s(yas--field 1 401 408 nil nil nil t #s(yas--exit 409 nil)) nil nil)) (402 . 408) (#("value" 0 5 (fontified nil)) . 402) (401 . 402) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 401 408 nil nil nil t #s(yas--exit 409 nil))) #s(yas--exit 409 nil) 2 nil #s(yas--field 1 401 408 nil nil nil t #s(yas--exit 409 nil)) nil nil)) (396 . 407) (#("push(${1:value})$0" 0 18 (fontified nil)) . 396) (396 . 414) (#("push" 0 4 (fontified nil)) . 396) (396 . 400) (#("push(…)" 0 7 (fontified nil)) . -396) (396 . 403) (#("push" 0 4 (fontified t)) . -396) (undo-tree-id282 . -4) 400 (395 . 400) (387 . 395) (#("contexts" 0 8 (fontified nil)) . -387) (387 . 395) (382 . 387) (#("c" 0 1 (fontified t)) . -382) (undo-tree-id283 . -1) (undo-tree-id284 . -1) 383 (#("o" 0 1 (fontified t)) . -383) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#("n" 0 1 (fontified t)) . -384) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("t" 0 1 (fontified t)) . -385) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (#("e" 0 1 (fontified t)) . -386) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#("x" 0 1 (fontified t)) . -387) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (#("t" 0 1 (fontified t)) . -388) (undo-tree-id295 . -1) 389 (382 . 389) (t 25814 25140 258985 909000)) nil (25814 25155 667520 226000) 0 nil])
([nil nil ((491 . 505) (#("E" 0 1 (face font-lock-type-face fontified t)) . -491) (undo-tree-id296 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -492) (undo-tree-id297 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -493) (undo-tree-id298 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -494) (undo-tree-id299 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -495) (undo-tree-id300 . -1) (#("," 0 1 (fontified t)) . -496) (undo-tree-id301 . -1) (#(" " 0 1 (fontified t)) . -497) (undo-tree-id302 . -1) 498 (492 . 498) (491 . 492) (482 . 491) (481 . 482) (t 25814 25155 665682 518000)) nil (25814 25960 711395 18000) 0 nil])
([nil nil ((427 . 447) (424 . 427) (423 . 424) (t 25814 25960 716218 208000)) nil (25814 25981 340607 454000) 0 nil])
([nil nil ((#("," 0 1 (face font-lock-preprocessor-face fontified t)) . -438) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (#(" " 0 1 (face font-lock-preprocessor-face fontified t)) . -439) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("C" 0 1 (face font-lock-preprocessor-face fontified t)) . -440) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (#("l" 0 1 (face font-lock-preprocessor-face fontified t)) . -441) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("o" 0 1 (face font-lock-preprocessor-face fontified t)) . -442) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (#("n" 0 1 (face font-lock-preprocessor-face fontified t)) . -443) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#("e" 0 1 (face font-lock-preprocessor-face fontified t)) . -444) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) 445 (t 25814 25981 349549 775000)) nil (25814 25996 523002 102000) 0 nil])
([nil nil ((#("," 0 1 (face font-lock-preprocessor-face fontified t)) . -513) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (#(" " 0 1 (face font-lock-preprocessor-face fontified t)) . -514) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (#("C" 0 1 (face font-lock-preprocessor-face fontified t)) . -515) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (#("l" 0 1 (face font-lock-preprocessor-face fontified t)) . -516) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (#("o" 0 1 (face font-lock-preprocessor-face fontified t)) . -517) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#("n" 0 1 (face font-lock-preprocessor-face fontified t)) . -518) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (#("e" 0 1 (face font-lock-preprocessor-face fontified t)) . -519) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) 520 (t 25814 25996 522881 544000)) nil (25814 26002 684555 912000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -489) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (490 . 491) (488 . 490) (486 . 488) (484 . 485) (apply yas--snippet-revive 472 485 #s(yas--snippet nil nil #s(yas--exit 484 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 484 nil) 3 nil nil nil nil)) (472 . 485) (#("WithContext<$0>" 0 15 (fontified nil)) . 472) (472 . 487) (#("WithCon" 0 7 (fontified nil)) . 472) (472 . 479) (#("WithContext<…>" 0 14 (fontified nil)) . -472) (472 . 486) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -472) (undo-tree-id534 . -7) (undo-tree-id535 . -7) (undo-tree-id536 . -7) 479 (467 . 479) (451 . 467) (#("Context" 0 7 (fontified nil)) . 451) (451 . 458) (#("Contextualizable" 0 16 (fontified nil)) . -451) (451 . 467) (#("Context" 0 7 (face font-lock-type-face fontified t)) . -451) (undo-tree-id537 . -7) 458 (449 . 458) (433 . 449) (#("Contextu" 0 8 (fontified nil)) . 433) (433 . 441) (#("Contextualizable" 0 16 (fontified nil)) . -433) (433 . 449) (#("Contextu" 0 8 (face font-lock-type-face fontified t)) . -433) (undo-tree-id538 . -8) 441 (431 . 441) (#(">" 0 1 (fontified t)) . -431) (undo-tree-id539 . -1) 432 (424 . 432) (422 . 424) (t 25814 26002 686214 180000)) nil (25814 26221 664076 675000) 0 nil])
([nil nil ((574 . 581) (#("conte" 0 5 (fontified nil)) . 574) (574 . 579) (#("context" 0 7 (fontified nil)) . -574) (574 . 581) (#("conte" 0 5 (fontified t)) . -574) (undo-tree-id394 . -5) (undo-tree-id395 . -5) (undo-tree-id396 . -5) (undo-tree-id397 . -5) 579 (574 . 579) (#("C" 0 1 (face font-lock-type-face fontified t)) . -574) (undo-tree-id398 . -1) 575 (574 . 575) (#("s" 0 1 (fontified t)) . -574) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (#("e" 0 1 (fontified t)) . -575) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (#("l" 0 1 (fontified t)) . -576) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -577) (undo-tree-id405 . -1) (undo-tree-id406 . -1) 578 (591 . 595) (#("self" 0 4 (fontified nil)) . 591) (591 . 595) (#("self" 0 4 (face font-lock-keyword-face fontified t)) . -591) (undo-tree-id407 . -4) (undo-tree-id408 . -4) 595 (591 . 595) (#("s" 0 1 (fontified t)) . -591) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (#("e" 0 1 (fontified t)) . -592) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (#("l" 0 1 (fontified t)) . -593) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -594) (undo-tree-id415 . -1) (undo-tree-id416 . -1) 595 (591 . 595) (#(" " 0 1 (fontified t)) . -591) (undo-tree-id417 . -1) (undo-tree-id418 . -1) 592 (591 . 592) (584 . 591) (580 . 584) (569 . 580) (559 . 569) (555 . 559) (#("	" 0 1 (fontified nil)) . -558) (undo-tree-id419 . -1) (559 . 560) (555 . 559) (553 . 555) (542 . 553) (#("WithCon" 0 7 (fontified nil)) . 542) (542 . 549) (#("WithContext" 0 11 (fontified nil)) . -542) (542 . 553) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -542) (undo-tree-id420 . -7) 549 (542 . 549) (#("Self {
		}" 0 4 (face font-lock-type-face fontified t) 4 7 (fontified t) 7 10 (fontified t)) . 542) (undo-tree-id421 . -10) (#("	" 0 1 (fontified nil)) . -551) (undo-tree-id422 . -1) (552 . 553) (548 . 552) (542 . 548) (#("use Self::*;
		match self {
			SerenityError(e) =>
		}" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-type-face fontified t) 8 12 (fontified t) 12 13 (fontified t) 13 15 (fontified t) 15 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 25 (face font-lock-keyword-face fontified t) 25 28 (fontified t) 28 31 (fontified t) 31 44 (face font-lock-type-face fontified t) 44 49 (fontified t) 49 50 (syntax-table (1) fontified t) 50 51 (fontified t) 51 54 (fontified t)) . 542) (undo-tree-id423 . -54) (#(" " 0 1 (fontified t)) . -592) (undo-tree-id424 . -1) 593 (589 . 593) (587 . 588) (#("S" 0 1 (face font-lock-type-face fontified t)) . -573) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -574) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -575) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -576) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (#(":" 0 1 (fontified t)) . -577) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (#(":" 0 1 (fontified t)) . -578) (undo-tree-id435 . -1) (undo-tree-id436 . -1) 579 (apply yas--snippet-revive 573 594 #s(yas--snippet nil (#s(yas--field 1 593 593 nil nil nil nil #s(yas--exit 594 nil))) #s(yas--exit 594 nil) 5 nil #s(yas--field 1 593 593 nil nil nil nil #s(yas--exit 594 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 593 593 nil nil nil nil #s(yas--exit 594 nil))) #s(yas--exit 594 nil) 5 nil #s(yas--field 1 593 593 nil nil nil nil #s(yas--exit 594 nil)) nil nil)) (573 . 594) (#("Self::SerenityError($1)$0" 0 25 (fontified nil)) . 573) (573 . 598) (#("Seren" 0 5 (fontified nil)) . 573) (573 . 578) (#("Self::SerenityError(…)" 0 22 (fontified nil)) . -573) (573 . 595) (#("Seren" 0 5 (face font-lock-type-face fontified t)) . -573) (undo-tree-id437 . -5) 578 (573 . 578) (542 . 554) (539 . 542) (#("S" 0 1 (face font-lock-type-face fontified t)) . -558) (undo-tree-id438 . -1) 559 (#("e" 0 1 (face font-lock-type-face fontified t)) . -559) (undo-tree-id439 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -560) (undo-tree-id440 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -561) (undo-tree-id441 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -562) (undo-tree-id442 . -1) 563 (558 . 563) (554 . 558) (#("	" 0 1 (fontified nil)) . -557) (undo-tree-id443 . -1) (558 . 559) (554 . 558) (542 . 554) (apply yas--snippet-revive 489 545 #s(yas--snippet nil nil #s(yas--exit 542 nil) 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 542 nil) 4 nil nil nil nil)) (489 . 545) (#("fn contextualize(self, context: Context) -> Self {
		$0
	}" 0 42 (fontified nil) 42 43 (syntax-table (1) fontified nil) 43 58 (fontified nil)) . 489) (545 . 546) (540 . 542) (#("    " 0 4 (fontified nil)) . 540) (489 . 548) (#("fn contex" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 9 (fontified nil)) . 489) (undo-tree-id444 . -3) (492 . 498) (#("fn contextualize(..)" 0 20 (fontified nil)) . -492) (492 . 512) (#("contex" 0 6 (face font-lock-function-name-face fontified t)) . -492) (undo-tree-id445 . -6) 498 (491 . 498) (489 . 491) (487 . 489) (#("	" 0 1 (fontified nil)) . -488) (undo-tree-id446 . -1) (489 . 490) (487 . 489) (485 . 487) (472 . 485) (#("Inter" 0 5 (fontified nil)) . 472) (472 . 477) (#("InternalError" 0 13 (fontified nil)) . -472) (472 . 485) (#("Inter" 0 5 (face font-lock-type-face fontified t)) . -472) (undo-tree-id447 . -5) 477 (472 . 477) (#("W" 0 1 (face font-lock-type-face fontified t)) . -472) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -473) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) 474 (#("t" 0 1 (face font-lock-type-face fontified t)) . -474) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -475) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -476) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -477) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -478) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -479) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -480) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -481) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -482) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (#("<" 0 1 (fontified t)) . -483) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -484) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (#(">" 0 1 (fontified t)) . -485) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (#(" " 0 1 (fontified t)) . -486) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (#("{" 0 1 (fontified t)) . -487) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (#("
" 0 1 (fontified t)) . -488) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (#("	" 0 1 (fontified t)) . -489) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (#("f" 0 1 (fontified t)) . -490) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -491) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (#(" " 0 1 (fontified t)) . -492) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (#("
" 0 1 (fontified t)) . -493) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (#("}" 0 1 (fontified t)) . -494) (undo-tree-id528 . -1) 495 (#("c" 0 1 (face font-lock-function-name-face fontified t)) . -493) (undo-tree-id529 . -1) 494 (493 . 494) (490 . 493) (488 . 490)) nil (25814 26221 664044 814000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . -429) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) 430 (#("E" 0 1 (face font-lock-type-face fontified t)) . -430) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (#(":" 0 1 (fontified t)) . -431) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (#(" " 0 1 (fontified t)) . -432) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -433) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -434) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -435) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -436) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -437) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -438) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -439) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -440) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -441) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -442) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -443) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (#("z" 0 1 (face font-lock-type-face fontified t)) . -444) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -445) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -446) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -447) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -448) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (#(">" 0 1 (fontified t)) . -449) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (#(" " 0 1 (fontified t)) . -450) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) 451 (t 25814 26221 666169 279000)) nil (25814 26279 899633 867000) 0 nil])
([nil nil ((350 . 353) (#(" " 0 1 (fontified t)) . -350) (undo-tree-id727 . -1) 351 (339 . 351) (337 . 339) (207 . 219) (205 . 207) (t 25814 26279 902818 519000)) nil (25814 26564 582729 682000) 0 nil])
([nil nil ((#("	type Output = 
" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 12 (face font-lock-type-face fontified t) 12 15 (fontified t) 15 16 (fontified t)) . 338) (undo-tree-id706 . 1) (undo-tree-id707 . -15) (undo-tree-id708 . -14) (undo-tree-id709 . -15) (undo-tree-id710 . -15) (undo-tree-id711 . -15) (undo-tree-id712 . -15) (undo-tree-id713 . -15) (undo-tree-id714 . -15) (undo-tree-id715 . -14) (undo-tree-id716 . -14) (undo-tree-id717 . -14) (undo-tree-id718 . -14) (undo-tree-id719 . -14) (undo-tree-id720 . -14) (undo-tree-id721 . -14) (undo-tree-id722 . -14) (undo-tree-id723 . -14) (undo-tree-id724 . -14) (undo-tree-id725 . -14) (undo-tree-id726 . -16) 352) nil (25814 26564 582727 65000) 0 nil])
([nil nil ((#("	type Output;
" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 14 (fontified t)) . 206) (undo-tree-id697 . -13) (undo-tree-id698 . -12) (undo-tree-id699 . 1) (undo-tree-id700 . -12) (undo-tree-id701 . -12) (undo-tree-id702 . -12) (undo-tree-id703 . -12) (undo-tree-id704 . -12) (undo-tree-id705 . -14) 218) nil (25814 26564 582711 655000) 0 nil])
([nil nil ((265 . 271) (#("S" 0 1 (face font-lock-type-face fontified t)) . -265) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -266) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -267) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -268) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (#(":" 0 1 (fontified nil)) . -269) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (#(":" 0 1 (fontified nil)) . -270) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -271) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -272) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -273) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -274) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -275) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -276) (undo-tree-id635 . -1) (undo-tree-id636 . -1) 277 (268 . 277) (#("F" 0 1 (face font-lock-type-face fontified t)) . -268) (undo-tree-id637 . -1) (#(":" 0 1 (fontified t)) . -269) (undo-tree-id638 . -1) (#(":" 0 1 (fontified t)) . -270) (undo-tree-id639 . -1) 271 (265 . 271) (#("O" 0 1 (face font-lock-type-face fontified t)) . -265) (undo-tree-id640 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -266) (undo-tree-id641 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -267) (undo-tree-id642 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -268) (undo-tree-id643 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -269) (undo-tree-id644 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -270) (undo-tree-id645 . -1) 271 (265 . 271) (#("S" 0 1 (face font-lock-type-face fontified t)) . -265) (undo-tree-id646 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -266) (undo-tree-id647 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -267) (undo-tree-id648 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -268) (undo-tree-id649 . -1) 269 (353 . 358) (#("W" 0 1 (face font-lock-type-face fontified t)) . -353) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -354) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -355) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -356) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -357) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -358) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -359) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -360) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -361) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -362) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -363) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (#("<" 0 1 (fontified t)) . -364) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (#(">" 0 1 (fontified t)) . -365) (undo-tree-id686 . -1) (undo-tree-id687 . -1) 366 (apply yas--snippet-revive 353 366 #s(yas--snippet nil nil #s(yas--exit 365 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 365 nil) 6 nil nil nil nil)) (353 . 366) (#("WithContext<$0>" 0 15 (fontified nil)) . 353) (353 . 368) (#("WithCon" 0 7 (fontified nil)) . 353) (353 . 360) (#("WithContext<…>" 0 14 (fontified nil)) . -353) (353 . 367) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -353) (undo-tree-id688 . -7) 360 (339 . 360) (337 . 339) (218 . 219) (#(" " 0 1 (fontified t)) . -218) (undo-tree-id689 . -1) (#("=" 0 1 (fontified t)) . -219) (undo-tree-id690 . -1) (#(" " 0 1 (fontified t)) . -220) (undo-tree-id691 . -1) 221 (207 . 221) (205 . 207) (#("W" 0 1 (face font-lock-type-face fontified t)) . -251) (undo-tree-id692 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -252) (undo-tree-id693 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -253) (undo-tree-id694 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -254) (undo-tree-id695 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -255) (undo-tree-id696 . -1) 256 (251 . 256)) nil (25814 26564 582690 653000) 0 nil])
([nil nil ((265 . 271) (t 25814 26564 586043 586000)) nil (25814 26574 267740 657000) 0 nil])
([nil nil ((541 . 542) (536 . 540) (apply yas--snippet-revive 524 537 #s(yas--snippet nil nil #s(yas--exit 536 nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 536 nil) 7 nil nil nil nil)) (524 . 537) (#("WithContext<$0>" 0 15 (fontified nil)) . 524) (524 . 539) (#("WithCon" 0 7 (fontified nil)) . 524) (524 . 531) (#("WithContext<…>" 0 14 (fontified nil)) . -524) (524 . 538) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -524) (undo-tree-id728 . -7) (undo-tree-id729 . -7) (undo-tree-id730 . -7) 531 (510 . 531) (508 . 510) (t 25814 26574 269372 701000)) nil (25814 26594 36465 668000) 0 nil])
([nil nil ((595 . 600) (588 . 595) (#("W" 0 1 (face font-lock-type-face fontified t)) . -588) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -589) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -590) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -591) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -592) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -593) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -594) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -595) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -596) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -597) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -598) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (#("<" 0 1 (fontified t)) . -599) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (#(">" 0 1 (fontified t)) . -600) (undo-tree-id767 . -1) (undo-tree-id768 . -1) 601 (#("O" 0 1 (face font-lock-type-face fontified t)) . -600) (undo-tree-id769 . -1) (undo-tree-id770 . -1) 601 (600 . 601) (apply yas--snippet-revive 588 601 #s(yas--snippet nil nil #s(yas--exit 600 nil) 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 600 nil) 8 nil nil nil nil)) (588 . 601) (#("WithContext<$0>" 0 15 (fontified nil)) . 588) (588 . 603) (#("WithCon" 0 7 (fontified nil)) . 588) (588 . 595) (#("WithContext<…>" 0 14 (fontified nil)) . -588) (588 . 602) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -588) (undo-tree-id771 . -7) 595 (588 . 595) (#("S" 0 1 (face font-lock-type-face fontified t)) . -588) (undo-tree-id772 . -1) (undo-tree-id773 . -1) 589 (#("e" 0 1 (face font-lock-type-face fontified t)) . -589) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -590) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -591) (undo-tree-id778 . -1) 592 (t 25814 26594 46030 665000)) nil (25814 26648 405686 663000) 0 nil])
([nil nil ((420 . 428) (t 25814 26648 412672 828000)) nil (25814 26658 245502 570000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -714) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (715 . 716) (713 . 715) (701 . 713) (685 . 701) (#("Context" 0 7 (fontified nil)) . 685) (685 . 692) (#("Contextualizable" 0 16 (fontified nil)) . -685) (685 . 701) (#("Context" 0 7 (face font-lock-type-face fontified t)) . -685) (undo-tree-id795 . -7) 692 (680 . 692) (678 . 680) (t 25814 26658 252668 308000)) nil (25814 26715 375582 279000) 0 nil])
([nil nil ((746 . 747) (#("," 0 1 (fontified t)) . -746) (undo-tree-id779 . -1) (undo-tree-id780 . -1) 747 (#("	" 0 1 (fontified nil)) . -826) (undo-tree-id781 . -1) (827 . 828) (823 . 827) (821 . 823) (#("
" 0 1 (fontified t)) . -821) (undo-tree-id782 . -1) (#("	" 0 1 (fontified t)) . -822) (undo-tree-id783 . -1) (#("	" 0 1 (fontified t)) . -823) (undo-tree-id784 . -1) (#("	" 0 1 (fontified t)) . -824) (undo-tree-id785 . -1) 825 (821 . 825) (810 . 821) (#("WithC" 0 5 (fontified nil)) . 810) (810 . 815) (#("WithContext" 0 11 (fontified nil)) . -810) (810 . 821) (#("WithC" 0 5 (face font-lock-type-face fontified t)) . -810) (undo-tree-id786 . -5) 815 (810 . 815) (apply yas--snippet-revive 749 813 #s(yas--snippet nil nil #s(yas--exit 810 nil) 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 810 nil) 10 nil nil nil nil)) (749 . 813) (#("fn contextualize(self, context: Context) -> Self::Output {
		$0
	}" 0 42 (fontified nil) 42 43 (syntax-table (1) fontified nil) 43 66 (fontified nil)) . 749) (813 . 814) (808 . 810) (#("    " 0 4 (fontified nil)) . 808) (749 . 816) (#("fn contextu" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 11 (fontified nil)) . 749) (undo-tree-id787 . -3) (752 . 760) (#("fn contextualize(..)" 0 20 (fontified nil)) . -752) (752 . 772) (#("contextu" 0 8 (face font-lock-function-name-face fontified t)) . -752) (undo-tree-id788 . -8) 760 (757 . 760) (749 . 757) (747 . 749) (746 . 747) (741 . 745) (apply yas--snippet-revive 729 742 #s(yas--snippet nil nil #s(yas--exit 741 nil) 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 741 nil) 9 nil nil nil nil)) (729 . 742) (#("WithContext<$0>" 0 15 (fontified nil)) . 729) (729 . 744) (#("WithCon" 0 7 (fontified nil)) . 729) (729 . 736) (#("WithContext<…>" 0 14 (fontified nil)) . -729) (729 . 743) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -729) (undo-tree-id789 . -7) 736 (716 . 736) (#("p" 0 1 (fontified t)) . -716) (undo-tree-id790 . -1) 717 (715 . 717) (713 . 715)) nil (25814 26715 375569 880000) 0 nil])
([nil nil ((233 . 237) (apply yas--snippet-revive 221 234 #s(yas--snippet nil nil #s(yas--exit 233 nil) 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 233 nil) 11 nil nil nil nil)) (221 . 234) (#("WithContext<$0>" 0 15 (fontified nil)) . 221) (221 . 236) (#("WithCon" 0 7 (fontified nil)) . 221) (221 . 228) (#("WithContext<…>" 0 14 (fontified nil)) . -221) (221 . 235) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -221) (undo-tree-id796 . -7) (undo-tree-id797 . -7) 228 (218 . 228) (t 25814 26715 379308 251000)) nil (25814 26735 17778 612000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -301) (undo-tree-id807 . -1) (302 . 303) (299 . 302) (297 . 299) (#(";" 0 1 (fontified t)) . -297) (undo-tree-id808 . -1) (undo-tree-id809 . -1) 298 (t 25814 26735 19298 885000)) nil (25814 26798 480142 20000) 0 nil])
([nil nil ((205 . 210) (#("Sized" 0 5 (fontified nil)) . 205) (205 . 210) (#("Sized (alias ?)" 0 15 (fontified nil)) . -205) (205 . 220) (#("Sized" 0 5 (face font-lock-type-face fontified t)) . -205) (undo-tree-id803 . -5) 210 (205 . 210) (#("?" 0 1 (face rust-question-mark fontified t)) . -205) (undo-tree-id804 . -1) 206 (204 . 206) (#("?" 0 1 (face rust-question-mark fontified t)) . -204) (undo-tree-id805 . -1) (#(" " 0 1 (fontified t)) . -205) (undo-tree-id806 . -1) 206 (203 . 206)) nil (25814 26798 480133 267000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -325) (undo-tree-id799 . -1) (326 . 327) (322 . 326) (320 . 322) (309 . 320) (#("WithCon" 0 7 (fontified nil)) . 309) (309 . 316) (#("WithContext" 0 11 (fontified nil)) . -309) (309 . 320) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -309) (undo-tree-id800 . -7) 316 (309 . 316) (#("C" 0 1 (face font-lock-type-face fontified t)) . -309) (undo-tree-id801 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -310) (undo-tree-id802 . -1) 311 (309 . 311) (306 . 309)) nil (25814 26798 480113 680000) 0 nil])
([nil nil ((354 . 365) (350 . 354) (341 . 350) (#("s" 0 1 (fontified t)) . -341) (undo-tree-id798 . -1) 342 (326 . 342) (322 . 326)) nil (25814 26798 480093 714000) 0 nil])
([nil nil ((#("type Output = WithContext<Self>;
	fn contextualize(self, context: Context) -> Self::Output {
		WithContext {
		}
	}" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 11 (face font-lock-type-face fontified t) 11 14 (fontified t) 14 25 (face font-lock-type-face fontified t) 25 26 (fontified t) 26 30 (face font-lock-type-face fontified t) 30 33 (fontified t) 33 34 (fontified t) 34 36 (face font-lock-keyword-face fontified t) 36 37 (fontified t) 37 50 (face font-lock-function-name-face fontified t) 50 51 (fontified t) 51 55 (face font-lock-keyword-face fontified t) 55 57 (fontified t) 57 64 (face font-lock-variable-name-face fontified t) 64 66 (fontified t) 66 73 (face font-lock-type-face fontified t) 73 76 (fontified t) 76 77 (fontified t syntax-table (1)) 77 78 (fontified t) 78 82 (face font-lock-type-face fontified t) 82 84 (fontified t) 84 90 (face font-lock-type-face fontified t) 90 91 (fontified t) 91 92 (fontified t) 92 93 (fontified t) 93 95 (fontified t) 95 106 (face font-lock-type-face fontified t) 106 109 (fontified t) 109 112 (fontified t) 112 113 (fontified t) 113 115 (fontified t)) . 809) (undo-tree-id879 . -114) (undo-tree-id880 . -114) (undo-tree-id881 . -114) (undo-tree-id882 . -114) (t 25814 26798 482601 381000)) nil (25814 26813 560520 60000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -807) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (#("	" 0 1 (fontified t)) . -808) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (#("
" 0 1 (fontified t)) . -809) (undo-tree-id877 . 1) (undo-tree-id878 . -1) 810) nil (25814 26813 560516 308000) 0 nil])
([nil nil ((#("	type Output = WithContext<Self>;
	fn contextualize(self, context: Context) -> Self::Output {
		WithContext {
			contexts: vec![context],
			error: self
		}
	}" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 12 (face font-lock-type-face fontified t) 12 15 (fontified t) 15 26 (face font-lock-type-face fontified t) 26 27 (fontified t) 27 31 (face font-lock-type-face fontified t) 31 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 37 (face font-lock-keyword-face fontified t) 37 38 (fontified t) 38 51 (face font-lock-function-name-face fontified t) 51 52 (fontified t) 52 56 (face font-lock-keyword-face fontified t) 56 58 (fontified t) 58 65 (face font-lock-variable-name-face fontified t) 65 67 (fontified t) 67 74 (face font-lock-type-face fontified t) 74 77 (fontified t) 77 78 (fontified t syntax-table (1)) 78 79 (fontified t) 79 83 (face font-lock-type-face fontified t) 83 85 (fontified t) 85 91 (face font-lock-type-face fontified t) 91 92 (fontified t) 92 94 (fontified t) 94 96 (fontified t) 96 107 (face font-lock-type-face fontified t) 107 110 (fontified t) 110 113 (fontified t) 113 121 (face font-lock-variable-name-face fontified t) 121 123 (fontified t) 123 127 (face font-lock-preprocessor-face fontified t) 127 128 (fontified t) 128 135 (fontified t) 135 138 (fontified t) 138 141 (fontified t) 141 146 (face font-lock-variable-name-face fontified t) 146 148 (fontified t) 148 152 (face font-lock-keyword-face fontified t) 152 153 (fontified t) 153 156 (fontified t) 156 157 (fontified t) 157 159 (fontified t)) . 611) (undo-tree-id855 . -158) (undo-tree-id856 . -158) (undo-tree-id857 . -158) (undo-tree-id858 . -96) (undo-tree-id859 . -1) (undo-tree-id860 . -159)) nil (25814 26813 560502 545000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -610) (undo-tree-id810 . 1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) 611 (609 . 610) (#("{" 0 1 (fontified t)) . -609) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (#("
" 0 1 (fontified t)) . -610) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) 611) nil (25814 26813 560493 32000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -611) (undo-tree-id883 . -1) 612 (t 25814 26813 562593 932000)) nil (25814 26820 194611 588000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -706) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (707 . 708) (705 . 707) (689 . 705) (673 . 689) (#("Contex" 0 6 (fontified nil)) . 673) (673 . 679) (#("Contextualizable" 0 16 (fontified nil)) . -673) (673 . 689) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -673) (undo-tree-id891 . -6) 679 (671 . 679) (655 . 671) (#("Contex" 0 6 (fontified nil)) . 655) (655 . 661) (#("Contextualizable" 0 16 (fontified nil)) . -655) (655 . 671) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -655) (undo-tree-id892 . -6) 661 (651 . 661) (#(" " 0 1 (fontified t)) . -651) (undo-tree-id893 . -1) (undo-tree-id894 . -1) 652 (647 . 652) (646 . 647) (t 25814 26820 195923 976000)) nil (25814 26847 268538 457000) 0 nil])
([nil nil ((705 . 708) (655 . 656) (#("T" 0 1 (face font-lock-variable-name-face fontified t)) . -655) (undo-tree-id884 . -1) 656 (653 . 655) (652 . 653) (#("
" 0 1 (fontified t)) . -705) (undo-tree-id885 . -1) (#("	" 0 1 (fontified t)) . -706) (undo-tree-id886 . -1) 707 (705 . 707)) nil (25814 26847 268525 926000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 845 852 nil nil nil nil #s(yas--exit 853 nil))) #s(yas--exit 853 nil) 14 nil #s(yas--field 1 845 852 nil nil nil nil #s(yas--exit 853 nil)) #s(yas--field 1 825 853 nil nil nil t #s(yas--exit 854 nil)) nil)) (831 . 853) (#("contextualize(${1:context})$0" 0 29 (fontified nil)) . 831) (undo-tree-id895 . -29) (831 . 860) (#("contextualize(…) (as Contextualizable)" 0 38 (fontified nil)) . -831) (undo-tree-id896 . -38) (831 . 869) (826 . 831) (#("op" 0 2 (fontified nil)) . 826) (undo-tree-id897 . -2) (825 . 826) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 825 853 nil nil nil t #s(yas--exit 854 nil))) #s(yas--exit 854 nil) 13 nil #s(yas--field 1 825 853 nil nil nil t #s(yas--exit 854 nil)) nil nil)) (817 . 828) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 817) (817 . 835) (#("map" 0 3 (fontified nil)) . 817) (817 . 820) (#("map_err(…)" 0 10 (fontified nil)) . -817) (817 . 827) (#("map" 0 3 (fontified t)) . -817) (undo-tree-id898 . -3) 820 (817 . 820) (812 . 817) (apply yas--snippet-revive 751 815 #s(yas--snippet nil nil #s(yas--exit 812 nil) 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 812 nil) 12 nil nil nil nil)) (751 . 815) (#("fn contextualize(self, context: Context) -> Self::Output {
		$0
	}" 0 42 (fontified nil) 42 43 (syntax-table (1) fontified nil) 43 66 (fontified nil)) . 751) (815 . 816) (810 . 812) (#("    " 0 4 (fontified nil)) . 810) (751 . 818) (#("fn contex" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 9 (fontified nil)) . 751) (undo-tree-id899 . -3) (754 . 760) (#("fn contextualize(..)" 0 20 (fontified nil)) . -754) (754 . 774) (#("contex" 0 6 (face font-lock-function-name-face fontified t)) . -754) (undo-tree-id900 . -6) 760 (751 . 760) (750 . 751) (#("	" 0 1 (fontified nil)) . 749) (undo-tree-id901 . -1) (748 . 751) (746 . 748) (740 . 746) (#("Output (as Contextualizable)" 0 28 (fontified nil)) . -740) (740 . 768) (734 . 740) (713 . 734) (711 . 713) (t 25814 26847 269243 797000)) nil (25814 26920 804014 62000) 0 nil])
([nil nil ((apply yas--snippet-revive 831 853 #s(yas--snippet nil (#s(yas--field 1 845 852 nil nil nil nil #s(yas--exit 853 nil))) #s(yas--exit 853 nil) 14 nil #s(yas--field 1 845 852 nil nil nil nil #s(yas--exit 853 nil)) #s(yas--field 1 825 853 nil nil nil t #s(yas--exit 854 nil)) nil))) nil (25814 26920 803994 836000) 0 nil])
([nil nil ((apply yas--snippet-revive 817 854 #s(yas--snippet nil (#s(yas--field 1 825 853 nil nil nil t #s(yas--exit 854 nil))) #s(yas--exit 854 nil) 13 nil #s(yas--field 1 825 853 nil nil nil t #s(yas--exit 854 nil)) nil nil))) nil (25814 26954 543685 720000) 0 nil])
([nil nil ((292 . 309) (#("WithCon" 0 7 (fontified nil)) . 292) (292 . 299) (#("WithContext<Self>" 0 17 (fontified nil)) . -292) (292 . 309) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -292) (undo-tree-id902 . -7) (undo-tree-id903 . -6) (undo-tree-id904 . -7) (undo-tree-id905 . -7) 299 (292 . 299) (#("S" 0 1 (face font-lock-type-face fontified t)) . -292) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -293) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -294) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -295) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (#(":" 0 1 (fontified t)) . -296) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (#(":" 0 1 (fontified t)) . -297) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -298) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -299) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -300) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -301) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -302) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -303) (undo-tree-id944 . -1) (undo-tree-id945 . -1) 304 (t 25814 26920 805873 117000)) nil (25814 26954 543664 897000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -225) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (#("=" 0 1 (fontified t)) . -226) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (#(" " 0 1 (fontified t)) . -227) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (#("W" 0 1 (face font-lock-type-face fontified t)) . -228) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -229) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -230) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -231) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -232) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -233) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -234) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -235) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -236) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -237) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -238) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (#("<" 0 1 (fontified t)) . -239) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -240) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (#("e" 0 1 (face font-lock-type-face fontified nil)) . -241) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -242) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -243) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (#(">" 0 1 (fontified t)) . -244) (undo-tree-id987 . -1) 245 (t 25814 26954 549189 26000)) nil (25814 27986 993971 936000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -359) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (#("
" 0 1 (fontified t)) . -360) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (#("t" 0 1 (fontified t)) . -361) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (#("r" 0 1 (fontified t)) . -362) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (#("a" 0 1 (fontified t)) . -363) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (#("i" 0 1 (fontified t)) . -364) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -365) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (#(" " 0 1 (fontified t)) . -366) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) 367 (#("D" 0 1 (face font-lock-type-face fontified t)) . -367) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -368) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -369) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -370) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -371) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -372) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -373) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (#("C" 0 1 (face font-lock-type-face fontified nil)) . -374) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -375) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -376) (undo-tree-id1025 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -377) (undo-tree-id1026 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -378) (undo-tree-id1027 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -379) (undo-tree-id1028 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -380) (undo-tree-id1029 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -381) (undo-tree-id1030 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -382) (undo-tree-id1031 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -383) (undo-tree-id1032 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -384) (undo-tree-id1033 . -1) (#("z" 0 1 (face font-lock-type-face fontified t)) . -385) (undo-tree-id1034 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -386) (undo-tree-id1035 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -387) (undo-tree-id1036 . -1) 388 (382 . 388) (361 . 382) (359 . 361) (t 25814 27987 12 373000)) nil (25814 28013 25544 514000) 0 nil])
([nil nil ((#("	WithContext {
			contexts: vec![context],
			error: self
		}
" 0 1 (fontified t) 1 12 (face font-lock-type-face fontified t) 12 15 (fontified t) 15 18 (fontified t) 18 26 (face font-lock-variable-name-face fontified t) 26 28 (fontified t) 28 32 (face font-lock-preprocessor-face fontified t) 32 43 (fontified t) 43 46 (fontified t) 46 51 (face font-lock-variable-name-face fontified t) 51 53 (fontified t) 53 57 (face font-lock-keyword-face fontified t) 57 58 (fontified t) 58 61 (fontified t) 61 62 (fontified t)) . 293) (undo-tree-id1072 . -61) (undo-tree-id1073 . -61) (undo-tree-id1074 . -61) (undo-tree-id1075 . -61) 354 (t 25814 28013 40016 580000)) nil (25814 28025 275175 48000) 0 nil])
([nil nil ((289 . 290) (#(" " 0 1 (fontified t)) . -289) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (#("{" 0 1 (fontified t)) . -290) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (#("
" 0 1 (fontified t)) . -291) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (#("	" 0 1 (fontified t)) . -292) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (#("	" 0 1 (fontified t)) . -293) (undo-tree-id1069 . 1) (undo-tree-id1070 . -1) (#("}" 0 1 (fontified t)) . -294) (undo-tree-id1071 . -1) 295) nil (25814 28025 275166 721000) 0 nil])
([nil nil ((272 . 276) (#("W" 0 1 (face font-lock-type-face fontified t)) . -272) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -273) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -274) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -275) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -276) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -277) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -278) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -279) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -280) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -281) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -282) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (#("<" 0 1 (fontified t)) . -283) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -284) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -285) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -286) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -287) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (#(">" 0 1 (fontified t)) . -288) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) 289 (t 25814 28025 286685 35000)) nil (25814 28047 553129 799000) 0 nil])
([nil nil ((276 . 284) (t 25814 28047 563354 651000)) nil (25814 28051 786657 865000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -515) (undo-tree-id1185 . -1) (516 . 517) (514 . 516) (506 . 514) (490 . 506) (#("Contex" 0 6 (fontified nil)) . 490) (490 . 496) (#("Contextualizable" 0 16 (fontified nil)) . -490) (490 . 506) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -490) (undo-tree-id1186 . -6) 496 (485 . 496) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -485) (undo-tree-id1187 . -1) (#("<" 0 1 (fontified t)) . -486) (undo-tree-id1188 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -487) (undo-tree-id1189 . -1) (#(">" 0 1 (fontified t)) . -488) (undo-tree-id1190 . -1) 489 (482 . 489) (481 . 483) (t 25814 28051 796688 501000)) nil (25814 28111 370659 756000) 0 nil])
([nil nil ((#("impl Contextualizable for InternalError {}
impl Contextualizable for Error {}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 21 (face font-lock-type-face fontified t) 21 22 (fontified t) 22 25 (face font-lock-keyword-face fontified t) 25 26 (fontified t) 26 39 (face font-lock-type-face fontified t) 39 41 (fontified t) 41 42 (fontified t) 42 43 (fontified t) 43 47 (face font-lock-keyword-face fontified t) 47 48 (fontified t) 48 64 (face font-lock-type-face fontified t) 64 65 (fontified t) 65 68 (face font-lock-keyword-face fontified t) 68 69 (fontified t) 69 74 (face font-lock-type-face fontified t) 74 76 (fontified t) 76 78 (fontified t)) . 518) (undo-tree-id1177 . -77) (undo-tree-id1178 . -77) (undo-tree-id1179 . -77) (undo-tree-id1180 . -40) (undo-tree-id1181 . -77) (undo-tree-id1182 . -43) (undo-tree-id1183 . -77) (undo-tree-id1184 . -78) 595) nil (25814 28111 370652 736000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -663) (undo-tree-id1160 . -2) (undo-tree-id1161 . -2) (undo-tree-id1162 . -2) (undo-tree-id1163 . -2) (undo-tree-id1164 . -2) (665 . 666) (660 . 665) (652 . 660) (648 . 652) (645 . 648) (628 . 645) (624 . 628) (622 . 624) (611 . 622) (#("WithCon" 0 7 (fontified nil)) . 611) (611 . 618) (#("WithContext" 0 11 (fontified nil)) . -611) (611 . 622) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -611) (undo-tree-id1165 . -7) (undo-tree-id1166 . -7) (undo-tree-id1167 . -7) 618 (611 . 618) (#("s" 0 1 (fontified t)) . -611) (undo-tree-id1168 . -1) (#("e" 0 1 (fontified t)) . -612) (undo-tree-id1169 . -1) (#("l" 0 1 (fontified t)) . -613) (undo-tree-id1170 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -614) (undo-tree-id1171 . -1) (#("." 0 1 (fontified t)) . -615) (undo-tree-id1172 . -1) 616 (611 . 616) (apply yas--snippet-revive 550 614 #s(yas--snippet nil nil #s(yas--exit 611 nil) 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 611 nil) 16 nil nil nil nil)) (550 . 614) (#("fn contextualize(self, context: Context) -> Self::Output {
		$0
	}" 0 42 (fontified nil) 42 43 (syntax-table (1) fontified nil) 43 66 (fontified nil)) . 550) (614 . 615) (609 . 611) (#("    " 0 4 (fontified nil)) . 609) (550 . 617) (#("fn contex" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 9 (fontified nil)) . 550) (undo-tree-id1173 . -3) (553 . 559) (#("fn contextualize(..)" 0 20 (fontified nil)) . -553) (553 . 573) (#("contex" 0 6 (face font-lock-function-name-face fontified t)) . -553) (undo-tree-id1174 . -6) 559 (550 . 559) (548 . 550) (547 . 548) (542 . 546) (apply yas--snippet-revive 530 543 #s(yas--snippet nil nil #s(yas--exit 542 nil) 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 542 nil) 15 nil nil nil nil)) (530 . 543) (#("WithContext<$0>" 0 15 (fontified nil)) . 530) (530 . 545) (#("WithCon" 0 7 (fontified nil)) . 530) (530 . 537) (#("WithContext<…>" 0 14 (fontified nil)) . -530) (530 . 544) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -530) (undo-tree-id1175 . -7) 537 (530 . 537) (#("C" 0 1 (face font-lock-type-face fontified t)) . -530) (undo-tree-id1176 . -1) 531 (516 . 531) (514 . 516)) nil (25814 28111 370639 358000) 0 nil])
([nil nil ((659 . 663) (#("self" 0 4 (fontified nil)) . 659) (659 . 663) (#("self" 0 4 (face font-lock-keyword-face fontified t)) . -659) (undo-tree-id1191 . -4) (undo-tree-id1192 . -4) (undo-tree-id1193 . -4) (undo-tree-id1194 . -4) (undo-tree-id1195 . -4) (undo-tree-id1196 . -4) 663 (659 . 663) (#("E" 0 1 (face font-lock-type-face fontified t)) . -659) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) 660 (t 25814 28111 380027 734000)) nil (25814 28123 432418 47000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -514) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (515 . 516) (513 . 515) (503 . 513) (482 . 503) (481 . 482) (t 25814 28123 443361 966000)) nil (25814 28156 219736 408000) 0 nil])
([nil nil ((523 . 546) (#("Defaul" 0 6 (fontified nil)) . 523) (523 . 529) (#("DefaultContextualizable" 0 23 (fontified nil)) . -523) (523 . 546) (#("Defaul" 0 6 (face font-lock-type-face fontified t)) . -523) (undo-tree-id1202 . -6) (undo-tree-id1203 . -6) 529 (521 . 529) (#("
" 0 1 (fontified t)) . -513) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (#("	" 0 1 (fontified t)) . -514) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (#("
" 0 1 (fontified t)) . -515) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) 516 (513 . 515)) nil (25814 28156 219728 601000) 0 nil])
([nil nil ((699 . 700) (696 . 699) (t 25814 28156 230030 594000)) nil (25814 28167 128653 715000) 0 nil])
([nil nil ((814 . 827) (791 . 814) (#("Defa" 0 4 (fontified nil)) . 791) (791 . 795) (#("DefaultContextualizable" 0 23 (fontified nil)) . -791) (791 . 814) (#("Defa" 0 4 (face font-lock-type-face fontified t)) . -791) (undo-tree-id1217 . -4) 795 (786 . 795) (785 . 786) (782 . 785) (#(";" 0 1 (fontified t)) . -782) (undo-tree-id1218 . -1) 783 (782 . 783) (769 . 782) (#("Intern" 0 6 (fontified nil)) . 769) (769 . 775) (#("InternalError" 0 13 (fontified nil)) . -769) (769 . 782) (#("Intern" 0 6 (face font-lock-type-face fontified t)) . -769) (undo-tree-id1219 . -6) 775 (769 . 775) (#("D" 0 1 (face font-lock-type-face fontified t)) . -769) (undo-tree-id1220 . -1) 770 (764 . 770) (741 . 764) (#("Defaul" 0 6 (fontified nil)) . 741) (741 . 747) (#("DefaultContextualizable" 0 23 (fontified nil)) . -741) (741 . 764) (#("Defaul" 0 6 (face font-lock-type-face fontified t)) . -741) (undo-tree-id1221 . -6) 747 (736 . 747) (735 . 737) (t 25814 28167 140031 100000)) nil (25814 28197 85552 581000) 0 nil])
([nil nil ((488 . 491) (#("
" 0 1 (fontified t)) . -514) (undo-tree-id1222 . -1) 515 (514 . 515) (t 25814 28197 96698 791000) 488) nil (25814 28308 422833 272000) 0 nil])
([nil nil ((526 . 530) (t 25814 28308 433365 37000)) nil (25814 28313 584725 237000) 0 nil])
([nil nil ((526 . 527) (#("!" 0 1 (fontified t)) . 526) (t 25814 28313 596698 204000)) nil (25814 28346 356933 304000) 0 nil])
([nil nil ((#("~" 0 1 (fontified t)) . 526) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (t 25814 28346 370030 206000)) nil (25814 28352 599118 921000) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-type-face fontified t)) . 526) (t 25814 28352 600029 899000)) nil (25814 28356 117903 15000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 526)) nil (25814 28356 117901 559000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 526)) nil (25814 28356 117897 132000) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-type-face fontified t)) . 488) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (t 25814 28356 126696 386000)) nil (25814 28358 57010 2000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 488) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1)) nil (25814 28358 57007 163000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 488) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1)) nil (25814 28358 56999 992000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -521) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (#(" " 0 1 (fontified t)) . -522) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (#("D" 0 1 (face font-lock-type-face fontified t)) . -523) (undo-tree-id1241 . -1) (undo-tree-id1242 . 1) (undo-tree-id1243 . 1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -524) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) 525 (#("f" 0 1 (face font-lock-type-face fontified t)) . -525) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -526) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -527) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -528) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -529) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -530) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -531) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -532) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -533) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -534) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -535) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -536) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -537) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -538) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -539) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -540) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (#("z" 0 1 (face font-lock-type-face fontified t)) . -541) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -542) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -543) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -544) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -545) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) 546 (t 25814 28358 60029 618000)) nil (25814 28539 283368 138000) 0 nil])
([nil nil ((523 . 546) (#("Defau" 0 5 (fontified nil)) . 523) (523 . 528) (#("DefaultContextualizable" 0 23 (fontified nil)) . -523) (523 . 546) (#("Defau" 0 5 (face font-lock-type-face fontified t)) . -523) (undo-tree-id1320 . -5) 528 (522 . 528) (#("D" 0 1 (face font-lock-type-face fontified t)) . -522) (undo-tree-id1321 . -1) 523 (521 . 523) (t 25814 28539 293347 376000)) nil (25814 29785 806322 572000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1228 1235 nil nil nil nil #s(yas--exit 1236 nil))) #s(yas--exit 1236 nil) 19 nil #s(yas--field 1 1228 1235 nil nil nil nil #s(yas--exit 1236 nil)) #s(yas--field 1 1208 1236 nil nil nil t #s(yas--exit 1237 nil)) nil)) (1214 . 1236) (#("contextualize(${1:context})$0" 0 29 (fontified nil)) . 1214) (undo-tree-id1322 . -29) (1214 . 1243) (#("contextualize(…) (as Contextualizable)" 0 38 (fontified nil)) . -1214) (undo-tree-id1323 . -38) (1214 . 1252) (1209 . 1214) (#("e" 0 1 (fontified t)) . -1209) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (#("|" 0 1 (fontified t)) . -1210) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (#(" " 0 1 (fontified t)) . -1211) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) 1212 (1209 . 1212) (#("f" 0 1 (fontified nil)) . 1209) (undo-tree-id1333 . -1) (1208 . 1209) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1208 1236 nil nil nil t #s(yas--exit 1237 nil))) #s(yas--exit 1237 nil) 18 nil #s(yas--field 1 1208 1236 nil nil nil t #s(yas--exit 1237 nil)) nil nil)) (1204 . 1210) (#("map(${1:f})$0" 0 13 (fontified nil)) . 1204) (1204 . 1217) (#("map" 0 3 (fontified nil)) . 1204) (1204 . 1207) (#("map(…)" 0 6 (fontified nil)) . -1204) (1204 . 1210) (#("map" 0 3 (fontified t)) . -1204) (undo-tree-id1334 . -3) 1207 (1199 . 1207) (apply yas--snippet-revive 1138 1202 #s(yas--snippet nil nil #s(yas--exit 1199 nil) 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1199 nil) 17 nil nil nil nil)) (1138 . 1202) (#("fn contextualize(self, context: Context) -> Self::Output {
		$0
	}" 0 42 (fontified nil) 42 43 (syntax-table (1) fontified nil) 43 66 (fontified nil)) . 1138) (1202 . 1203) (1197 . 1199) (#("    " 0 4 (fontified nil)) . 1197) (1138 . 1205) (#("fn contex" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 9 (fontified nil)) . 1138) (undo-tree-id1335 . -3) (1141 . 1147) (#("fn contextualize(..)" 0 20 (fontified nil)) . -1141) (1141 . 1161) (#("contex" 0 6 (face font-lock-function-name-face fontified t)) . -1141) (undo-tree-id1336 . -6) 1147 (1138 . 1147) (1137 . 1138) (#("	" 0 1 (fontified nil)) . 1136) (undo-tree-id1337 . -1) (1135 . 1138) (1127 . 1133) (#("Output" 0 6 (fontified nil)) . 1127) (1127 . 1133) (#("Output (as Contextualizable)" 0 28 (fontified nil)) . -1127) (1127 . 1155) (#("Output" 0 6 (face font-lock-type-face fontified t)) . -1127) (undo-tree-id1338 . -6) (undo-tree-id1339 . -6) 1133 (1125 . 1133) (1126 . 1127) (#(";" 0 1 (fontified t)) . -1126) (undo-tree-id1340 . -1) 1127 (1125 . 1127) (1124 . 1125) (1103 . 1124) (1101 . 1103) (#("	" 0 1 (fontified nil)) . -1102) (undo-tree-id1341 . -1) (1103 . 1104) (1101 . 1103) (1085 . 1101) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1085) (undo-tree-id1342 . -1) 1086 (1085 . 1086) (1069 . 1085) (#("Contex" 0 6 (fontified nil)) . 1069) (1069 . 1075) (#("Contextualizable" 0 16 (fontified nil)) . -1069) (1069 . 1085) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -1069) (undo-tree-id1343 . -6) 1075 (1067 . 1075) (1051 . 1067) (#("Contex" 0 6 (fontified nil)) . 1051) (1051 . 1057) (#("Contextualizable" 0 16 (fontified nil)) . -1051) (1051 . 1067) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -1051) (undo-tree-id1344 . -6) 1057 (1047 . 1057) (#(" " 0 1 (fontified t)) . -1047) (undo-tree-id1345 . -1) 1048 (1043 . 1048) (1041 . 1043) (1137 . 1158) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -1137) (undo-tree-id1346 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -1138) (undo-tree-id1347 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -1139) (undo-tree-id1348 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -1140) (undo-tree-id1349 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -1141) (undo-tree-id1350 . -1) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -1142) (undo-tree-id1351 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -1143) (undo-tree-id1352 . -1) 1144 (1126 . 1144) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -1126) (undo-tree-id1353 . -1) 1127 (1121 . 1127) (#(" " 0 1 (fontified t)) . -1121) (undo-tree-id1354 . -1) (#("/" 0 1 (fontified t)) . -1122) (undo-tree-id1355 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1123) (undo-tree-id1356 . -1) (#("/" 0 1 (face font-lock-doc-face fontified t)) . -1124) (undo-tree-id1357 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -1125) (undo-tree-id1358 . -1) (#("u" 0 1 (face font-lock-doc-face fontified t)) . -1126) (undo-tree-id1359 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -1127) (undo-tree-id1360 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -1128) (undo-tree-id1361 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -1129) (undo-tree-id1362 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -1130) (undo-tree-id1363 . -1) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -1131) (undo-tree-id1364 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -1132) (undo-tree-id1365 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -1133) (undo-tree-id1366 . -1) 1134 (1114 . 1134) (t 25814 29785 816506 129000)) nil (25814 31604 524236 900000) 0 nil])
([nil nil ((apply yas--snippet-revive 1214 1236 #s(yas--snippet nil (#s(yas--field 1 1228 1235 nil nil nil nil #s(yas--exit 1236 nil))) #s(yas--exit 1236 nil) 19 nil #s(yas--field 1 1228 1235 nil nil nil nil #s(yas--exit 1236 nil)) #s(yas--field 1 1208 1236 nil nil nil t #s(yas--exit 1237 nil)) nil))) nil (25814 31604 524173 464000) 0 nil])
([nil nil ((apply yas--snippet-revive 1204 1237 #s(yas--snippet nil (#s(yas--field 1 1208 1236 nil nil nil t #s(yas--exit 1237 nil))) #s(yas--exit 1237 nil) 18 nil #s(yas--field 1 1208 1236 nil nil nil t #s(yas--exit 1237 nil)) nil nil))) nil (25814 31624 164448 307000) 0 nil])
([nil nil ((#("	NoError /// emitted to early return without 
" 0 1 (fontified t) 1 8 (face font-lock-type-face fontified t) 8 9 (fontified t) 9 45 (face font-lock-doc-face fontified t) 45 46 (face font-lock-doc-face fontified t)) . 1314) (undo-tree-id1367 . -23) (undo-tree-id1368 . 1) (undo-tree-id1369 . -45) (undo-tree-id1370 . -23) (undo-tree-id1371 . -44) (undo-tree-id1372 . -44) (undo-tree-id1373 . -44) (undo-tree-id1374 . -44) (undo-tree-id1375 . -46) 1358 (t 25814 31604 537330 438000)) nil (25814 31624 164445 44000) 0 nil])
([nil nil ((112 . 113) (104 . 111) (#(" " 0 1 (fontified t)) . -104) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) 105 (103 . 105) (apply yas--snippet-revive 93 104 #s(yas--snippet nil nil #s(yas--exit 103 nil) 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 103 nil) 20 nil nil nil nil)) (93 . 104) (#("StdResult<$0>" 0 13 (fontified nil)) . 93) (93 . 106) (#("StdRes" 0 6 (fontified nil)) . 93) (93 . 99) (#("StdResult<…>" 0 12 (fontified nil)) . -93) (93 . 105) (#("StdRes" 0 6 (face font-lock-type-face fontified t)) . -93) (undo-tree-id1378 . -6) 99 (90 . 99) (76 . 90) (74 . 76) (60 . 73) (#("
" 0 1 (fontified t)) . -61) (undo-tree-id1379 . -1) (#("
" 0 1 (fontified t)) . -62) (undo-tree-id1380 . -1) 63 (61 . 63) (60 . 61) (54 . 60) (#("Result" 0 6 (fontified nil)) . -54) (54 . 60) (45 . 54) (#(":" 0 1 (fontified t)) . -45) (undo-tree-id1381 . -1) (#("e" 0 1 (fontified t)) . -46) (undo-tree-id1382 . -1) (#("r" 0 1 (fontified t)) . -47) (undo-tree-id1383 . -1) (#("r" 0 1 (fontified t)) . -48) (undo-tree-id1384 . -1) (#("o" 0 1 (fontified t)) . -49) (undo-tree-id1385 . -1) (#("r" 0 1 (fontified t)) . -50) (undo-tree-id1386 . -1) (#(":" 0 1 (fontified t)) . -51) (undo-tree-id1387 . -1) (#(":" 0 1 (fontified t)) . -52) (undo-tree-id1388 . -1) 53 (51 . 53) (46 . 51) (#("erro" 0 4 (fontified nil)) . 46) (46 . 50) (#("error" 0 5 (fontified nil)) . -46) (46 . 51) (#("erro" 0 4 (fontified t)) . -46) (undo-tree-id1389 . -4) 50 (37 . 50) (#("
" 0 1 (fontified t)) . -37) (undo-tree-id1390 . -1) (#("t" 0 1 (fontified t)) . -38) (undo-tree-id1391 . -1) (#("y" 0 1 (fontified t)) . -39) (undo-tree-id1392 . -1) (#("p" 0 1 (fontified t)) . -40) (undo-tree-id1393 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -41) (undo-tree-id1394 . -1) 42 (#(" " 0 1 (fontified t)) . -42) (undo-tree-id1395 . -1) 43 (38 . 43) (37 . 39) (t 25814 31624 177261 727000)) nil (25814 31911 331261 156000) 0 nil])
([nil nil ((151 . 166) (#("LogErrorContext" 0 3 (fontified nil) 3 15 (face font-lock-type-face fontified nil)) . 151) (undo-tree-id1396 . -7) (undo-tree-id1397 . 12) (151 . 154) (#("LogErrorContext" 0 15 (fontified nil)) . -151) (151 . 166) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -151) (undo-tree-id1398 . -3) (undo-tree-id1399 . -3) (undo-tree-id1400 . -3) (undo-tree-id1401 . -3) (undo-tree-id1402 . -3) (undo-tree-id1403 . -3) (undo-tree-id1404 . -3) (undo-tree-id1405 . -3) 154 (151 . 154) (t 25814 31911 343103 894000)) nil (25814 31922 856801 356000) 0 nil])
([nil nil ((989 . 998) (#("StdResult" 0 3 (fontified nil) 3 9 (face font-lock-type-face fontified nil)) . 989) (undo-tree-id1406 . 5) (undo-tree-id1407 . 6) (989 . 992) (#("StdResult" 0 9 (fontified nil)) . -989) (989 . 998) (#("Std" 0 3 (face font-lock-type-face fontified t)) . -989) (undo-tree-id1408 . -3) (undo-tree-id1409 . -3) (undo-tree-id1410 . -3) (undo-tree-id1411 . -3) (undo-tree-id1412 . -3) (undo-tree-id1413 . -3) (undo-tree-id1414 . -3) (undo-tree-id1415 . -3) (undo-tree-id1416 . -3) (undo-tree-id1417 . -3) 992 (989 . 992) (t 25814 31922 859743 211000)) nil (25814 31930 619111 518000) 0 nil])
([nil nil ((959 . 968) (#("StdResult" 0 3 (fontified nil) 3 9 (face font-lock-type-face fontified nil)) . 959) (undo-tree-id1418 . -4) (undo-tree-id1419 . 6) (959 . 962) (#("StdResult" 0 9 (fontified nil)) . -959) (959 . 968) (#("Std" 0 3 (face font-lock-type-face fontified t)) . -959) (undo-tree-id1420 . -3) (undo-tree-id1421 . -3) 962 (959 . 962) (t 25814 31930 626391 636000)) nil (25814 31935 510565 360000) 0 nil])
([nil nil ((118 . 123) (#("Err" 0 3 (fontified nil)) . 118) (118 . 121) (#("Error" 0 5 (fontified nil)) . -118) (118 . 123) (#("Err" 0 3 (face font-lock-type-face fontified t)) . -118) (undo-tree-id1422 . -3) (undo-tree-id1423 . -3) (undo-tree-id1424 . -3) (undo-tree-id1425 . -3) (undo-tree-id1426 . -3) (undo-tree-id1427 . -3) (undo-tree-id1428 . -3) (undo-tree-id1429 . -3) (undo-tree-id1430 . -3) 121 (118 . 121) (apply yas--snippet-revive 106 119 #s(yas--snippet nil nil #s(yas--exit 118 nil) 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 118 nil) 23 nil nil nil nil)) (106 . 119) (#("WithContext<$0>" 0 15 (fontified nil)) . 106) (106 . 121) (#("WithCError" 0 5 (fontified nil) 5 10 (face font-lock-type-face fontified nil)) . 106) (undo-tree-id1431 . 5) (106 . 111) (#("WithContext<…>" 0 14 (fontified nil)) . -106) (106 . 120) (#("WithC" 0 5 (face font-lock-type-face fontified t)) . -106) (undo-tree-id1432 . -5) (undo-tree-id1433 . -5) 111 (106 . 111) (t 25814 31935 523046 885000)) nil (25814 32201 709141 788000) 0 nil])
([nil nil ((80 . 88) (#("cont" 0 4 (fontified nil)) . 80) (80 . 84) (#("context;" 0 8 (fontified nil)) . -80) (80 . 88) (#("cont" 0 4 (face font-lock-constant-face fontified t)) . -80) (undo-tree-id1434 . -4) 84 (83 . 84) (76 . 83) (75 . 77) (t 25814 32201 719173 296000)) nil (25814 32270 536233 296000) 0 nil])
([nil nil ((80 . 96) (#("contextual" 0 10 (fontified nil)) . 80) (80 . 90) (#("contextualizable" 0 16 (fontified nil)) . -80) (80 . 96) (#("contextual" 0 10 (face font-lock-constant-face fontified t)) . -80) (undo-tree-id1435 . -6) (undo-tree-id1436 . -7) (undo-tree-id1437 . -6) (undo-tree-id1438 . -10) (undo-tree-id1439 . -8) (undo-tree-id1440 . -10) (undo-tree-id1441 . -10) 90 (87 . 90) (t 25814 32270 545720 936000)) nil (25814 32323 590354 328000) 0 nil])
([nil nil ((#("pub struct WithContext<E: Contextualizable> {
	contexts: Vec<Context>,
	error: E,
}

pub trait Contextualizable: Sized {
	type Output;
	fn contextualize(self, context: Context) -> Self::Output;
}

impl<E: Contextualizable> Contextualizable for WithContext<E> {
	type Output = Self;
	fn contextualize(mut self, context: Context) -> Self::Output {
		self.contexts.push(context);
		self
	}
}

trait DefaultContextualizable {}
impl<T: DefaultContextualizable> Contextualizable for T {
	type Output = WithContext<Self>;
	fn contextualize(self, context: Context) -> Self::Output {
		WithContext {
			contexts: vec![context],
			error: self
		}
	}
}

impl DefaultContextualizable for InternalError {}
impl DefaultContextualizable for Error {}

impl<T, E: Contextualizable> Contextualizable for StdResult<T, E> {
	type Output = StdResult<T, E::Output>;

	fn contextualize(self, context: Context) -> Self::Output {
		self.map_err(|e| e.contextualize(context))
	}
}

impl<T: Contextualizable> Contextualizable for Option<T> {
	type Output = Option<T::Output>;

	fn contextualize(self, context: Context) -> Self::Output {
		self.map(|o| o.contextualize(context))
	}
}

" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 15 (face font-lock-type-face fontified t) 15 22 (face font-lock-type-face fontified t) 22 23 (fontified t) 23 24 (face font-lock-variable-name-face fontified t) 24 26 (fontified t) 26 42 (face font-lock-type-face fontified t) 42 43 (fontified t) 43 46 (fontified t) 46 47 (fontified t) 47 55 (face font-lock-variable-name-face fontified t) 55 57 (fontified t) 57 60 (face font-lock-type-face fontified t) 60 61 (fontified t) 61 68 (face font-lock-type-face fontified t) 68 71 (fontified t) 71 72 (fontified t) 72 77 (face font-lock-variable-name-face fontified t) 77 79 (fontified t) 79 80 (face font-lock-type-face fontified t) 80 81 (fontified t) 81 82 (fontified t) 82 83 (fontified t) 83 84 (fontified t) 84 85 (fontified t) 85 88 (face font-lock-keyword-face fontified t) 88 89 (fontified t) 89 94 (face font-lock-keyword-face fontified t) 94 95 (fontified t) 95 111 (face font-lock-variable-name-face fontified t) 111 113 (fontified t) 113 118 (face font-lock-type-face fontified t) 118 121 (fontified t) 121 122 (fontified t) 122 126 (face font-lock-keyword-face fontified t) 126 127 (fontified t) 127 133 (face font-lock-type-face fontified t) 133 134 (fontified t) 134 135 (fontified t) 135 136 (fontified t) 136 138 (face font-lock-keyword-face fontified t) 138 139 (fontified t) 139 152 (face font-lock-function-name-face fontified t) 152 153 (fontified t) 153 157 (face font-lock-keyword-face fontified t) 157 159 (fontified t) 159 166 (face font-lock-variable-name-face fontified t) 166 168 (fontified t) 168 175 (face font-lock-type-face fontified t) 175 178 (fontified t) 178 179 (fontified t syntax-table (1)) 179 180 (fontified t) 180 184 (face font-lock-type-face fontified t) 184 186 (fontified t) 186 192 (face font-lock-type-face fontified t) 192 193 (fontified t) 193 194 (fontified t) 194 195 (fontified t) 195 196 (fontified t) 196 197 (fontified t) 197 201 (face font-lock-keyword-face fontified t) 201 202 (fontified t) 202 203 (face font-lock-variable-name-face fontified t) 203 205 (fontified t) 205 221 (face font-lock-type-face fontified t) 221 223 (fontified t) 223 239 (face font-lock-type-face fontified t) 239 240 (fontified t) 240 243 (face font-lock-keyword-face fontified t) 243 244 (fontified t) 244 255 (face font-lock-type-face fontified t) 255 256 (fontified t) 256 257 (face font-lock-type-face fontified t) 257 261 (fontified t) 261 262 (fontified t) 262 266 (face font-lock-keyword-face fontified t) 266 267 (fontified t) 267 273 (face font-lock-type-face fontified t) 273 276 (fontified t) 276 280 (face font-lock-type-face fontified t) 280 281 (fontified t) 281 282 (fontified t) 282 283 (fontified t) 283 285 (face font-lock-keyword-face fontified t) 285 286 (fontified t) 286 299 (face font-lock-function-name-face fontified t) 299 300 (fontified t) 300 303 (face font-lock-keyword-face fontified t) 303 304 (fontified t) 304 308 (face font-lock-keyword-face fontified t) 308 310 (fontified t) 310 317 (face font-lock-variable-name-face fontified t) 317 319 (fontified t) 319 326 (face font-lock-type-face fontified t) 326 329 (fontified t) 329 330 (fontified t syntax-table (1)) 330 331 (fontified t) 331 335 (face font-lock-type-face fontified t) 335 337 (fontified t) 337 343 (face font-lock-type-face fontified t) 343 344 (fontified t) 344 345 (fontified t) 345 346 (fontified t) 346 348 (fontified t) 348 352 (face font-lock-keyword-face fontified t) 352 353 (fontified t) 353 362 (fontified t) 362 374 (fontified t) 374 377 (fontified t) 377 379 (fontified t) 379 383 (face font-lock-keyword-face fontified t) 383 384 (fontified t) 384 386 (fontified t) 386 387 (fontified t) 387 389 (fontified t) 389 390 (fontified t) 390 395 (face font-lock-keyword-face fontified t) 395 396 (fontified t) 396 419 (face font-lock-type-face fontified t) 419 421 (fontified t) 421 422 (fontified t) 422 423 (fontified t) 423 427 (face font-lock-keyword-face fontified t) 427 428 (fontified t) 428 429 (face font-lock-variable-name-face fontified t) 429 431 (fontified t) 431 454 (face font-lock-type-face fontified t) 454 456 (fontified t) 456 472 (face font-lock-type-face fontified t) 472 473 (fontified t) 473 476 (face font-lock-keyword-face fontified t) 476 477 (fontified t) 477 478 (face font-lock-type-face fontified t) 478 481 (fontified t) 481 482 (fontified t) 482 486 (face font-lock-keyword-face fontified t) 486 487 (fontified t) 487 493 (face font-lock-type-face fontified t) 493 496 (fontified t) 496 507 (face font-lock-type-face fontified t) 507 508 (fontified t) 508 512 (face font-lock-type-face fontified t) 512 515 (fontified t) 515 516 (fontified t) 516 518 (face font-lock-keyword-face fontified t) 518 519 (fontified t) 519 532 (face font-lock-function-name-face fontified t) 532 533 (fontified t) 533 537 (face font-lock-keyword-face fontified t) 537 539 (fontified t) 539 546 (face font-lock-variable-name-face fontified t) 546 548 (fontified t) 548 555 (face font-lock-type-face fontified t) 555 558 (fontified t) 558 559 (syntax-table (1) fontified t) 559 560 (fontified t) 560 564 (face font-lock-type-face fontified t) 564 566 (fontified t) 566 572 (face font-lock-type-face fontified t) 572 573 (fontified t) 573 574 (fontified t) 574 575 (fontified t) 575 577 (fontified t) 577 588 (face font-lock-type-face fontified t) 588 591 (fontified t) 591 594 (fontified t) 594 602 (face font-lock-variable-name-face fontified t) 602 604 (fontified t) 604 608 (face font-lock-preprocessor-face fontified t) 608 619 (fontified t) 619 622 (fontified t) 622 627 (face font-lock-variable-name-face fontified t) 627 629 (fontified t) 629 633 (face font-lock-keyword-face fontified t) 633 634 (fontified t) 634 637 (fontified t) 637 638 (fontified t) 638 640 (fontified t) 640 641 (fontified t) 641 642 (fontified t) 642 643 (fontified t) 643 644 (fontified t) 644 648 (face font-lock-keyword-face fontified t) 648 649 (fontified t) 649 672 (face font-lock-type-face fontified t) 672 673 (fontified t) 673 676 (face font-lock-keyword-face fontified t) 676 677 (fontified t) 677 690 (face font-lock-type-face fontified t) 690 694 (fontified t) 694 698 (face font-lock-keyword-face fontified t) 698 699 (fontified t) 699 722 (face font-lock-type-face fontified t) 722 723 (fontified t) 723 726 (face font-lock-keyword-face fontified t) 726 727 (fontified t) 727 732 (face font-lock-type-face fontified t) 732 735 (fontified t) 735 736 (fontified t) 736 737 (fontified t) 737 741 (face font-lock-keyword-face fontified t) 741 742 (fontified t) 742 743 (face font-lock-type-face fontified t) 743 745 (fontified t) 745 746 (face font-lock-variable-name-face fontified t) 746 748 (fontified t) 748 764 (face font-lock-type-face fontified t) 764 766 (fontified t) 766 782 (face font-lock-type-face fontified t) 782 783 (fontified t) 783 786 (face font-lock-keyword-face fontified t) 786 787 (fontified t) 787 796 (face font-lock-type-face fontified t) 796 797 (fontified t) 797 798 (face font-lock-type-face fontified t) 798 800 (fontified t) 800 801 (face font-lock-type-face fontified t) 801 805 (fontified t) 805 806 (fontified t) 806 810 (face font-lock-keyword-face fontified t) 810 811 (fontified t) 811 817 (face font-lock-type-face fontified t) 817 820 (fontified t) 820 829 (face font-lock-type-face fontified t) 829 830 (fontified t) 830 831 (face font-lock-type-face fontified t) 831 833 (fontified t) 833 834 (face font-lock-type-face fontified t) 834 836 (fontified t) 836 842 (face font-lock-type-face fontified t) 842 845 (fontified t) 845 846 (fontified t) 846 847 (fontified t) 847 849 (face font-lock-keyword-face fontified t) 849 850 (fontified t) 850 863 (face font-lock-function-name-face fontified t) 863 864 (fontified t) 864 868 (face font-lock-keyword-face fontified t) 868 870 (fontified t) 870 877 (face font-lock-variable-name-face fontified t) 877 879 (fontified t) 879 886 (face font-lock-type-face fontified t) 886 889 (fontified t) 889 890 (syntax-table (1) fontified t) 890 891 (fontified t) 891 895 (face font-lock-type-face fontified t) 895 897 (fontified t) 897 903 (face font-lock-type-face fontified t) 903 904 (fontified t) 904 905 (fontified t) 905 906 (fontified t) 906 908 (fontified t) 908 912 (face font-lock-keyword-face fontified t) 912 913 (fontified t) 913 927 (fontified t) 927 949 (fontified t) 949 950 (fontified t) 950 951 (fontified t) 951 953 (fontified t) 953 954 (fontified t) 954 956 (fontified t) 956 957 (fontified t) 957 961 (face font-lock-keyword-face fontified t) 961 962 (fontified t) 962 963 (face font-lock-variable-name-face fontified t) 963 965 (fontified t) 965 981 (face font-lock-type-face fontified t) 981 983 (fontified t) 983 999 (face font-lock-type-face fontified t) 999 1000 (fontified t) 1000 1003 (face font-lock-keyword-face fontified t) 1003 1004 (fontified t) 1004 1010 (face font-lock-type-face fontified t) 1010 1011 (fontified t) 1011 1012 (face font-lock-type-face fontified t) 1012 1016 (fontified t) 1016 1017 (fontified t) 1017 1021 (face font-lock-keyword-face fontified t) 1021 1022 (fontified t) 1022 1028 (face font-lock-type-face fontified t) 1028 1031 (fontified t) 1031 1037 (face font-lock-type-face fontified t) 1037 1038 (fontified t) 1038 1039 (face font-lock-type-face fontified t) 1039 1041 (fontified t) 1041 1047 (face font-lock-type-face fontified t) 1047 1050 (fontified t) 1050 1051 (fontified t) 1051 1052 (fontified t) 1052 1054 (face font-lock-keyword-face fontified t) 1054 1055 (fontified t) 1055 1068 (face font-lock-function-name-face fontified t) 1068 1069 (fontified t) 1069 1073 (face font-lock-keyword-face fontified t) 1073 1075 (fontified t) 1075 1082 (face font-lock-variable-name-face fontified t) 1082 1084 (fontified t) 1084 1091 (face font-lock-type-face fontified t) 1091 1094 (fontified t) 1094 1095 (syntax-table (1) fontified t) 1095 1096 (fontified t) 1096 1100 (face font-lock-type-face fontified t) 1100 1102 (fontified t) 1102 1108 (face font-lock-type-face fontified t) 1108 1109 (fontified t) 1109 1110 (fontified t) 1110 1111 (fontified t) 1111 1113 (fontified t) 1113 1117 (face font-lock-keyword-face fontified t) 1117 1118 (fontified t) 1118 1128 (fontified t) 1128 1150 (fontified t) 1150 1151 (fontified t) 1151 1152 (fontified t) 1152 1154 (fontified t) 1154 1155 (fontified t) 1155 1156 (fontified t) 1156 1157 (fontified t) 1157 1158 (fontified t)) . 208) (undo-tree-id1449 . -1157) (undo-tree-id1450 . -1157) (undo-tree-id1451 . -1157) (undo-tree-id1452 . -83) (undo-tree-id1453 . -83) (undo-tree-id1454 . -84) (undo-tree-id1455 . -388) (undo-tree-id1456 . -1157) (undo-tree-id1457 . -737) (undo-tree-id1458 . -243) (undo-tree-id1459 . -260) (undo-tree-id1460 . -955) (undo-tree-id1461 . -194) (undo-tree-id1462 . -948) (undo-tree-id1463 . -384) (undo-tree-id1464 . -4) (undo-tree-id1465 . -1157) 1365 (t 25814 32323 598966 980000)) nil (25814 32981 861298 272000) 0 nil])
([nil nil ((nil rear-nonsticky nil 383 . 384) (#("
" 0 1 (fontified nil)) . -475) (383 . 476)) nil (25814 32981 861286 486000) 0 nil])
([nil nil ((98 . 102) (131 . 132) (120 . 131) (#("With" 0 4 (fontified nil)) . 120) (120 . 124) (#("WithContext" 0 11 (fontified nil)) . -120) (120 . 131) (#("With" 0 4 (face font-lock-type-face fontified t)) . -120) (undo-tree-id1442 . -4) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -4) (undo-tree-id1446 . -4) (undo-tree-id1447 . -4) 124 (118 . 124) (102 . 118) (#("contextua" 0 9 (fontified nil)) . 102) (102 . 111) (#("contextualizable" 0 16 (fontified nil)) . -102) (102 . 118) (#("contextua" 0 9 (face font-lock-constant-face fontified t)) . -102) (undo-tree-id1448 . -9) 111 (98 . 111) (97 . 98)) nil (25814 32981 861283 167000) 0 nil])
([nil nil ((514 . 515)) nil (25814 32981 861262 905000) 0 nil])
([nil nil ((226 . 227) (203 . 226) (#("DefaultContextualizable" 0 23 (fontified nil)) . -203) (203 . 226) (201 . 203) (#(":" 0 1 (fontified t)) . -201) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (#(":" 0 1 (fontified t)) . -202) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (#("W" 0 1 (face font-lock-type-face fontified t)) . -203) (undo-tree-id1470 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -204) (undo-tree-id1471 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -205) (undo-tree-id1472 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -206) (undo-tree-id1473 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -207) (undo-tree-id1474 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -208) (undo-tree-id1475 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -209) (undo-tree-id1476 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -210) (undo-tree-id1477 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -211) (undo-tree-id1478 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -212) (undo-tree-id1479 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -213) (undo-tree-id1480 . -1) (#(";" 0 1 (fontified t)) . -214) (undo-tree-id1481 . -1) 215 (214 . 215) (203 . 214) (#("WithContext" 0 11 (fontified nil)) . -203) (203 . 214) (201 . 203) (185 . 201) (#("context" 0 7 (fontified nil)) . 185) (185 . 192) (#("contextualizable" 0 16 (fontified nil)) . -185) (185 . 201) (#("context" 0 7 (face font-lock-constant-face fontified t)) . -185) (undo-tree-id1482 . -7) 192 (181 . 192) (#("p" 0 1 (fontified t)) . -181) (undo-tree-id1483 . -1) (#("u" 0 1 (fontified t)) . -182) (undo-tree-id1484 . -1) 183 (181 . 183) (180 . 181) (179 . 180) (163 . 179) (#("Contex" 0 6 (fontified nil)) . 163) (163 . 169) (#("Contextualizable" 0 16 (fontified nil)) . -163) (163 . 179) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -163) (undo-tree-id1485 . -6) 169 (161 . 169) (145 . 161) (#("context" 0 7 (fontified nil)) . 145) (145 . 152) (#("contextualizable" 0 16 (fontified nil)) . -145) (145 . 161) (#("context" 0 7 (face font-lock-constant-face fontified t)) . -145) (undo-tree-id1486 . -5) (undo-tree-id1487 . -7) 152 (150 . 152) (137 . 150) (136 . 137) (t 25814 32981 871420 538000)) nil (25814 33002 607088 958000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -509) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (#("
" 0 1 (fontified t)) . -510) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) 511 (t 25814 33002 614729 955000)) nil (25814 33006 343625 201000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -647) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (648 . 649) (646 . 648) (642 . 646) (634 . 642) (633 . 634) (620 . 633) (#("Seren" 0 5 (fontified nil)) . 620) (620 . 625) (#("SerenityError" 0 13 (fontified nil)) . -620) (620 . 633) (#("Seren" 0 5 (face font-lock-type-face fontified t)) . -620) (undo-tree-id1527 . -5) (undo-tree-id1528 . -5) 625 (620 . 625) (#("E" 0 1 (face font-lock-type-face fontified t)) . -620) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -621) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -622) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -623) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) 624 (610 . 624) (#("S" 0 1 (face font-lock-type-face fontified t)) . -610) (undo-tree-id1537 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -611) (undo-tree-id1538 . -1) 612 (611 . 612) (605 . 611) (604 . 605) (t 25814 33006 351392 328000)) nil (25814 33566 10461 352000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -648) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -649) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) 650 (648 . 650) (646 . 648)) nil (25814 33566 10446 673000) 0 nil])
([nil nil ((650 . 651)) nil (25814 33566 10427 736000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 704 704 nil nil nil t nil)) nil 26 nil nil nil nil)) (646 . 718) (#("
    fn from(value: ser::SerenityError) -> Self {
        ${0:todo!()}
    }
" 0 1 (fontified nil) 1 41 (fontified nil) 41 42 (syntax-table (1) fontified nil) 42 76 (fontified nil) 76 77 (fontified nil)) . 646) (undo-tree-id1569 . 1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (647 . 722) (#("	" 0 1 (fontified t)) . 647) 646 (t 25814 33566 23705 484000)) nil (25814 33614 718216 603000) 0 nil])
([nil nil ((720 . 724) (707 . 720) (#("Sere" 0 4 (fontified nil)) . 707) (707 . 711) (#("SerenityError" 0 13 (fontified nil)) . -707) (707 . 720) (#("Sere" 0 4 (face font-lock-type-face fontified t)) . -707) (undo-tree-id1539 . -4) (undo-tree-id1540 . -4) (undo-tree-id1541 . -4) (undo-tree-id1542 . -4) (undo-tree-id1543 . -4) 711 (701 . 711) (#(" " 0 1 (fontified t)) . -701) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -702) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -703) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -704) (undo-tree-id1550 . -1) 705 (698 . 705) (695 . 698) (#("s" 0 1 (fontified t)) . -721) (undo-tree-id1551 . -1) (#("e" 0 1 (fontified t)) . -722) (undo-tree-id1552 . -1) (#("r" 0 1 (fontified t)) . -723) (undo-tree-id1553 . -1) (#(":" 0 1 (fontified t)) . -724) (undo-tree-id1554 . -1) (#(":" 0 1 (fontified t)) . -725) (undo-tree-id1555 . -1) 726 (721 . 726) (717 . 721) (#("	" 0 1 (fontified nil)) . -720) (undo-tree-id1556 . -1) (721 . 722) (717 . 721) (710 . 717) (#("s" 0 1 (fontified t)) . -710) (undo-tree-id1557 . -1) (#("e" 0 1 (fontified t)) . -711) (undo-tree-id1558 . -1) (#("r" 0 1 (fontified t)) . -712) (undo-tree-id1559 . -1) (#(":" 0 1 (fontified t)) . -713) (undo-tree-id1560 . -1) (#(":" 0 1 (fontified t)) . -714) (undo-tree-id1561 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -715) (undo-tree-id1562 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -716) (undo-tree-id1563 . -1) 717 (704 . 717) (apply yas--snippet-revive 646 711 #s(yas--snippet nil (#s(yas--field 0 704 704 nil nil nil t nil)) nil 26 nil nil nil nil)) (#("todo!()" 0 5 (face font-lock-preprocessor-face fontified t) 5 7 (fontified t)) . 704) (undo-tree-id1564 . -7) (undo-tree-id1565 . -6) (undo-tree-id1566 . -7) (undo-tree-id1567 . -7) (undo-tree-id1568 . -7)) nil (25814 33614 718205 245000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 766 767 nil nil nil nil nil)) nil 27 nil nil nil nil)) (746 . 1279) (#("
            Decode(${0:_}, _) => todo!(),
            Format(_) => todo!(),
            Io(_) => todo!(),
            Json(_) => todo!(),
            Model(_) => todo!(),
            ExceededLimit(_, _) => todo!(),
            NotInRange(_, _, _, _) => todo!(),
            Other(_) => todo!(),
            Url(_) => todo!(),
            Client(_) => todo!(),
            Collector(_) => todo!(),
            Gateway(_) => todo!(),
            Http(_) => todo!(),
            Tungstenite(_) => todo!(),
            _ => todo!(),
        " 0 1 (fontified nil) 1 32 (fontified nil) 32 33 (syntax-table (1) fontified nil) 33 42 (fontified nil) 42 43 (fontified nil) 43 66 (fontified nil) 66 67 (syntax-table (1) fontified nil) 67 96 (fontified nil) 96 97 (syntax-table (1) fontified nil) 97 128 (fontified nil) 128 129 (syntax-table (1) fontified nil) 129 161 (fontified nil) 161 162 (syntax-table (1) fontified nil) 162 205 (fontified nil) 205 206 (syntax-table (1) fontified nil) 206 252 (fontified nil) 252 253 (syntax-table (1) fontified nil) 253 285 (fontified nil) 285 286 (syntax-table (1) fontified nil) 286 316 (fontified nil) 316 317 (syntax-table (1) fontified nil) 317 350 (fontified nil) 350 351 (syntax-table (1) fontified nil) 351 387 (fontified nil) 387 388 (syntax-table (1) fontified nil) 388 422 (fontified nil) 422 423 (syntax-table (1) fontified nil) 423 454 (fontified nil) 454 455 (syntax-table (1) fontified nil) 455 493 (fontified nil) 493 494 (syntax-table (1) fontified nil) 494 519 (fontified nil) 519 520 (syntax-table (1) fontified nil) 520 538 (fontified nil)) . 746) (undo-tree-id1574 . -1) (747 . 788) (#("			" 0 3 (fontified t)) . 747) (undo-tree-id1575 . -2) (751 . 1246) (#("		" 0 2 (fontified t)) . 751) 746 (t 25814 33614 730281 13000)) nil (25814 33626 582206 459000) 0 nil])
([nil nil ((apply yas--snippet-revive 746 1279 #s(yas--snippet nil (#s(yas--field 0 766 767 nil nil nil nil nil)) nil 27 nil nil nil nil))) nil (25814 33626 582169 974000) 0 nil])
([nil nil ((751 . 760) (746 . 752) (741 . 746) (#("m" 0 1 (fontified t)) . -741) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (#("o" 0 1 (fontified t)) . -742) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (#("d" 0 1 (face font-lock-keyword-face fontified t)) . -743) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (#("e" 0 1 (fontified t)) . -744) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) 745 (732 . 745) (729 . 732) (720 . 728) (#(":" 0 1 (fontified t)) . -720) (undo-tree-id1592 . -1) (#(" " 0 1 (fontified t)) . -721) (undo-tree-id1593 . -1) 722 (721 . 722) (#(":" 0 1 (fontified t)) . -721) (undo-tree-id1594 . -1) (#("*" 0 1 (fontified t)) . -722) (undo-tree-id1595 . -1) 723 (764 . 767) (#("(" 0 1 (fontified t)) . -764) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (#("(" 0 1 (fontified t)) . -765) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (#("_" 0 1 (fontified t)) . -766) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (#(")" 0 1 (fontified t)) . -767) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) 768 (765 . 768) (#("s" 0 1 (fontified t)) . -765) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (#("e" 0 1 (fontified t)) . -766) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (#("r" 0 1 (fontified t)) . -767) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (#(":" 0 1 (fontified t)) . -768) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (#(":" 0 1 (fontified t)) . -769) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (#(")" 0 1 (fontified t)) . -770) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) 771 (apply yas--snippet-revive 759 771 #s(yas--snippet nil (#s(yas--field 1 765 770 nil nil nil t #s(yas--exit 771 nil))) #s(yas--exit 771 nil) 28 nil #s(yas--field 1 765 770 nil nil nil t #s(yas--exit 771 nil)) nil nil)) (765 . 770) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 765 770 nil nil nil t #s(yas--exit 771 nil))) #s(yas--exit 771 nil) 28 nil #s(yas--field 1 765 770 nil nil nil t #s(yas--exit 771 nil)) nil nil)) (759 . 766) (#("Model($1)$0" 0 11 (fontified nil)) . 759) (759 . 770) (#("Model" 0 5 (fontified nil)) . 759) (759 . 764) (#("Model(…)" 0 8 (fontified nil)) . -759) (759 . 767) (#("Model" 0 5 (face font-lock-type-face fontified t)) . -759) (undo-tree-id1616 . -5) 764 (759 . 764) (#("Decode(_, _) => todo!(),
            Format(_) => todo!(),
            Io(_) => todo!(),
            Json(_) => todo!(),
            Model(_) => todo!(),
            ExceededLimit(_, _) => todo!(),
            NotInRange(_, _, _, _) => todo!(),
            Other(_) => todo!(),
            Url(_) => todo!(),
            Client(_) => todo!(),
            Collector(_) => todo!(),
            Gateway(_) => todo!(),
            Http(_) => todo!(),
            Tungstenite(_) => todo!(),
            _ => todo!()," 0 6 (face font-lock-type-face fontified t) 6 14 (fontified t) 14 15 (syntax-table (1) fontified t) 15 16 (fontified t) 16 21 (face font-lock-preprocessor-face fontified t) 21 37 (fontified t) 37 43 (face font-lock-type-face fontified t) 43 48 (fontified t) 48 49 (syntax-table (1) fontified t) 49 50 (fontified t) 50 55 (face font-lock-preprocessor-face fontified t) 55 71 (fontified t) 71 73 (face font-lock-type-face fontified t) 73 78 (fontified t) 78 79 (syntax-table (1) fontified t) 79 80 (fontified t) 80 85 (face font-lock-preprocessor-face fontified t) 85 101 (fontified t) 101 105 (face font-lock-type-face fontified t) 105 110 (fontified t) 110 111 (syntax-table (1) fontified t) 111 112 (fontified t) 112 117 (face font-lock-preprocessor-face fontified t) 117 133 (fontified t) 133 138 (face font-lock-type-face fontified t) 138 143 (fontified t) 143 144 (syntax-table (1) fontified t) 144 145 (fontified t) 145 150 (face font-lock-preprocessor-face fontified t) 150 166 (fontified t) 166 179 (face font-lock-type-face fontified t) 179 187 (fontified t) 187 188 (syntax-table (1) fontified t) 188 189 (fontified t) 189 194 (face font-lock-preprocessor-face fontified t) 194 210 (fontified t) 210 220 (face font-lock-type-face fontified t) 220 234 (fontified t) 234 235 (syntax-table (1) fontified t) 235 236 (fontified t) 236 241 (face font-lock-preprocessor-face fontified t) 241 257 (fontified t) 257 262 (face font-lock-type-face fontified t) 262 267 (fontified t) 267 268 (syntax-table (1) fontified t) 268 269 (fontified t) 269 274 (face font-lock-preprocessor-face fontified t) 274 290 (fontified t) 290 293 (face font-lock-type-face fontified t) 293 298 (fontified t) 298 299 (syntax-table (1) fontified t) 299 300 (fontified t) 300 305 (face font-lock-preprocessor-face fontified t) 305 321 (fontified t) 321 327 (face font-lock-type-face fontified t) 327 332 (fontified t) 332 333 (syntax-table (1) fontified t) 333 334 (fontified t) 334 339 (face font-lock-preprocessor-face fontified t) 339 355 (fontified t) 355 364 (face font-lock-type-face fontified t) 364 369 (fontified t) 369 370 (syntax-table (1) fontified t) 370 371 (fontified t) 371 376 (face font-lock-preprocessor-face fontified t) 376 392 (fontified t) 392 399 (face font-lock-type-face fontified t) 399 404 (fontified t) 404 405 (syntax-table (1) fontified t) 405 406 (fontified t) 406 411 (face font-lock-preprocessor-face fontified t) 411 427 (fontified t) 427 431 (face font-lock-type-face fontified t) 431 436 (fontified t) 436 437 (syntax-table (1) fontified t) 437 438 (fontified t) 438 443 (face font-lock-preprocessor-face fontified t) 443 459 (fontified t) 459 470 (face font-lock-type-face fontified t) 470 475 (fontified t) 475 476 (syntax-table (1) fontified t) 476 477 (fontified t) 477 482 (face font-lock-preprocessor-face fontified t) 482 501 (fontified t) 501 502 (syntax-table (1) fontified t) 502 503 (fontified t) 503 508 (face font-lock-preprocessor-face fontified t) 508 511 (fontified t)) . 759) (undo-tree-id1617 . -511) (undo-tree-id1618 . -7) (undo-tree-id1619 . 503) (undo-tree-id1620 . -7) (undo-tree-id1621 . -7) (undo-tree-id1622 . -7) (t 25814 33626 586925 977000)) nil (25814 33881 207808 477000) 0 nil])
([nil nil ((727 . 730) (724 . 727) (#("B" 0 1 (face font-lock-type-face fontified t)) . -724) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -725) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -726) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -727) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) 728) nil (25814 33881 207685 712000) 0 nil])
([nil nil ((723 . 728) (#("value" 0 5 (fontified nil)) . 723) (undo-tree-id1623 . -5) (723 . 728) (#("value" 0 5 (fontified t)) . -723) (undo-tree-id1624 . -5) (undo-tree-id1625 . -5) (undo-tree-id1626 . -5) (undo-tree-id1627 . -5) (undo-tree-id1628 . -5) (undo-tree-id1629 . -5) (undo-tree-id1630 . -5) (undo-tree-id1631 . -5) (undo-tree-id1632 . -5) (undo-tree-id1633 . -5) (undo-tree-id1634 . -5) 728 (724 . 728) (#("()" 0 2 (fontified nil)) . 724) (undo-tree-id1635 . -2) (723 . 724) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 723 728 nil nil nil t #s(yas--exit 729 nil))) #s(yas--exit 729 nil) 30 nil #s(yas--field 1 723 728 nil nil nil t #s(yas--exit 729 nil)) nil nil)) (709 . 726) (#("SerenityError(${1:()})$0" 0 24 (fontified nil)) . 709) (709 . 733) (#("Sere" 0 4 (fontified nil)) . 709) (709 . 713) (#("SerenityError(…)" 0 16 (fontified nil)) . -709) (709 . 725) (#("Sere" 0 4 (face font-lock-type-face fontified t)) . -709) (undo-tree-id1636 . -4) 713 (703 . 713) (#("u" 0 1 (fontified t)) . -703) (undo-tree-id1637 . -1) (#("s" 0 1 (fontified t)) . -704) (undo-tree-id1638 . -1) 705 (703 . 705) (700 . 703) (#("	" 0 1 (fontified nil)) . -702) (undo-tree-id1639 . -1) (703 . 704) (700 . 703) (693 . 700) (689 . 693) (676 . 689) (#("Seren" 0 5 (fontified nil)) . 676) (676 . 681) (#("SerenityError" 0 13 (fontified nil)) . -676) (676 . 689) (#("Seren" 0 5 (face font-lock-type-face fontified t)) . -676) (undo-tree-id1640 . -5) 681 (677 . 681) (656 . 677) (654 . 656) (#("	" 0 1 (fontified nil)) . -655) (undo-tree-id1641 . -1) (656 . 657) (654 . 656) (652 . 654) (639 . 652) (#("Intern" 0 6 (fontified nil)) . 639) (639 . 645) (#("InternalError" 0 13 (fontified nil)) . -639) (639 . 652) (#("Intern" 0 6 (face font-lock-type-face fontified t)) . -639) (undo-tree-id1642 . -6) 645 (637 . 645) (633 . 637) (620 . 633) (#("Seren" 0 5 (fontified nil)) . 620) (620 . 625) (#("SerenityError" 0 13 (fontified nil)) . -620) (620 . 633) (#("Seren" 0 5 (face font-lock-type-face fontified t)) . -620) (undo-tree-id1643 . -5) (undo-tree-id1644 . -5) 625 (620 . 625) (#("S" 0 1 (face font-lock-type-face fontified t)) . -620) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) 621 (605 . 621) (604 . 606) (#("i" 0 1 (fontified t)) . -854) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (#("m" 0 1 (fontified t)) . -855) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (#("p" 0 1 (fontified t)) . -856) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -857) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (#(" " 0 1 (fontified t)) . -858) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -859) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -860) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -861) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -862) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (#("<" 0 1 (fontified t)) . -863) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (#("s" 0 1 (fontified t)) . -864) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (#("e" 0 1 (fontified t)) . -865) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#("r" 0 1 (fontified t)) . -866) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (#(":" 0 1 (fontified t)) . -867) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (#(":" 0 1 (fontified t)) . -868) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) 869 (867 . 869) (854 . 867) (853 . 854) (apply yas--snippet-revive 822 834 #s(yas--snippet nil (#s(yas--field 1 831 833 nil nil nil nil #s(yas--exit 834 nil))) #s(yas--exit 834 nil) 29 nil #s(yas--field 1 831 833 nil nil nil nil #s(yas--exit 834 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 831 833 nil nil nil nil #s(yas--exit 834 nil))) #s(yas--exit 834 nil) 29 nil #s(yas--field 1 831 833 nil nil nil nil #s(yas--exit 834 nil)) nil nil)) (822 . 834) (#("Internal(${1:()})$0" 0 19 (fontified nil)) . 822) (822 . 841) (#("Inter" 0 5 (fontified nil)) . 822) (822 . 827) (#("Internal(…)" 0 11 (fontified nil)) . -822) (822 . 833) (#("Inter" 0 5 (face font-lock-type-face fontified t)) . -822) (undo-tree-id1677 . -5) 827 (816 . 827) (#("S" 0 1 (face font-lock-type-face fontified t)) . -816) (undo-tree-id1678 . -1) 817 (#("e" 0 1 (face font-lock-type-face fontified t)) . -817) (undo-tree-id1679 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -818) (undo-tree-id1680 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -819) (undo-tree-id1681 . -1) (#(":" 0 1 (fontified t)) . -820) (undo-tree-id1682 . -1) (#(":" 0 1 (fontified t)) . -821) (undo-tree-id1683 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -822) (undo-tree-id1684 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -823) (undo-tree-id1685 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -824) (undo-tree-id1686 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -825) (undo-tree-id1687 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -826) (undo-tree-id1688 . -1) 827 (816 . 827) (#("s" 0 1 (fontified t)) . -816) (undo-tree-id1689 . -1) 817 (811 . 817) (807 . 811) (806 . 807) (#("
" 0 1 (fontified t)) . -806) (undo-tree-id1690 . -1) (#("	" 0 1 (fontified t)) . -807) (undo-tree-id1691 . -1) (#("	" 0 1 (fontified t)) . -808) (undo-tree-id1692 . -1) (#("	" 0 1 (fontified t)) . -809) (undo-tree-id1693 . -1) (#("	" 0 1 (fontified t)) . -810) (undo-tree-id1694 . -1) 811 (806 . 811) (#("
" 0 1 (fontified t)) . -763) (undo-tree-id1695 . -1) (#("	" 0 1 (fontified t)) . -764) (undo-tree-id1696 . -1) (#("	" 0 1 (fontified t)) . -765) (undo-tree-id1697 . -1) (#("u" 0 1 (fontified t)) . -766) (undo-tree-id1698 . -1) (#("s" 0 1 (fontified t)) . -767) (undo-tree-id1699 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -768) (undo-tree-id1700 . -1) (#("r" 0 1 (fontified t)) . -769) (undo-tree-id1701 . -1) 770 (766 . 770) (763 . 766) (#("
" 0 1 (fontified t)) . -763) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (#("	" 0 1 (fontified t)) . -764) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (#("	" 0 1 (fontified t)) . -765) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) 766 (763 . 766) (t 25814 33881 256497 226000)) nil (25814 33969 645004 779000) 0 nil])
([nil nil ((apply yas--snippet-revive 709 729 #s(yas--snippet nil (#s(yas--field 1 723 728 nil nil nil t #s(yas--exit 729 nil))) #s(yas--exit 729 nil) 30 nil #s(yas--field 1 723 728 nil nil nil t #s(yas--exit 729 nil)) nil nil))) nil (25814 33982 55584 928000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -858) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -859) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -860) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) 861 (929 . 930) (#("M" 0 1 (face font-lock-type-face fontified t)) . -929) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -930) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -931) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -932) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -933) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (#("(" 0 1 (fontified t)) . -934) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (#("_" 0 1 (fontified t)) . -935) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (#(")" 0 1 (fontified t)) . -936) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) 937 (t 25814 33969 656361 704000)) nil (25814 33982 55579 781000) 0 nil])
([nil nil ((apply yas--snippet-revive 954 960 #s(yas--snippet nil nil #s(yas--exit 960 nil) 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 960 nil) 31 nil nil nil nil)) (954 . 960) (#("into()$0" 0 8 (fontified nil)) . 954) (954 . 962) (#("into() (as Into)" 0 16 (fontified nil)) . -954) (954 . 970) (952 . 954) (#("(" 0 1 (fontified t)) . -952) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (#(")" 0 1 (fontified t)) . -953) (undo-tree-id1736 . -1) 954 (t 25814 33982 66343 110000)) nil (25814 33988 135637 923000) 0 nil])
([nil nil ((348 . 349) (332 . 345) (#("Inter" 0 5 (fontified nil)) . 332) (332 . 337) (#("InternalError" 0 13 (fontified nil)) . -332) (332 . 345) (#("Inter" 0 5 (face font-lock-type-face fontified t)) . -332) (undo-tree-id1737 . -5) (undo-tree-id1738 . -5) 337 (332 . 337) (apply yas--snippet-revive 320 333 #s(yas--snippet nil nil #s(yas--exit 332 nil) 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 332 nil) 38 nil nil nil nil)) (320 . 333) (#("WithContext<$0>" 0 15 (fontified nil)) . 320) (320 . 335) (#("WithCon" 0 7 (fontified nil)) . 320) (320 . 327) (#("WithContext<…>" 0 14 (fontified nil)) . -320) (320 . 334) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -320) (undo-tree-id1739 . -7) (undo-tree-id1740 . -7) 327 (320 . 327) (apply yas--snippet-revive 313 321 #s(yas--snippet nil nil #s(yas--exit 320 nil) 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 320 nil) 37 nil nil nil nil)) (313 . 321) (#("Option<$0>" 0 10 (fontified nil)) . 313) (313 . 323) (#("Option" 0 6 (fontified nil)) . 313) (313 . 319) (#("Option<…>" 0 9 (fontified nil)) . -313) (313 . 322) (#("Option" 0 6 (face font-lock-type-face fontified t)) . -313) (undo-tree-id1741 . -6) (undo-tree-id1742 . -6) 319 (310 . 319) (apply yas--snippet-revive 300 311 #s(yas--snippet nil nil #s(yas--exit 310 nil) 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 310 nil) 36 nil nil nil nil)) (300 . 311) (#("StdResult<$0>" 0 13 (fontified nil)) . 300) (300 . 313) (#("StdRes" 0 6 (fontified nil)) . 300) (300 . 306) (#("StdResult<…>" 0 12 (fontified nil)) . -300) (300 . 312) (#("StdRes" 0 6 (face font-lock-type-face fontified t)) . -300) (undo-tree-id1743 . -6) 306 (285 . 306) (280 . 285) (279 . 280) (apply yas--snippet-revive 931 938 #s(yas--snippet nil (#s(yas--field 1 937 937 nil nil nil t #s(yas--exit 938 nil))) #s(yas--exit 938 nil) 32 nil #s(yas--field 1 937 937 nil nil nil t #s(yas--exit 938 nil)) nil nil)) (#("M" 0 1 (face font-lock-type-face fontified t)) . -937) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -938) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -939) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -940) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -941) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (#(":" 0 1 (fontified t)) . -942) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (#(":" 0 1 (fontified t)) . -943) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (#("D" 0 1 (face font-lock-type-face fontified t)) . -944) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -945) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -946) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -947) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) 948 (#("t" 0 1 (face font-lock-type-face fontified t)) . -948) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -949) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -950) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -951) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -952) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -953) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -954) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -955) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -956) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (#("D" 0 1 (face font-lock-type-face fontified t)) . -957) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -958) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -959) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -960) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (#("A" 0 1 (face font-lock-type-face fontified t)) . -961) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -962) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -963) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -964) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -965) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -966) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (#("(" 0 1 (fontified t)) . -967) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (#(")" 0 1 (fontified t)) . -968) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) 969 (apply yas--snippet-revive 944 969 #s(yas--snippet nil (#s(yas--field 1 968 968 nil nil nil nil #s(yas--exit 969 nil))) #s(yas--exit 969 nil) 33 nil #s(yas--field 1 968 968 nil nil nil nil #s(yas--exit 969 nil)) #s(yas--field 1 937 937 nil nil nil t #s(yas--exit 938 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 968 968 nil nil nil nil #s(yas--exit 969 nil))) #s(yas--exit 969 nil) 33 nil #s(yas--field 1 968 968 nil nil nil nil #s(yas--exit 969 nil)) #s(yas--field 1 937 937 nil nil nil t #s(yas--exit 938 nil)) nil)) (944 . 969) (#("DeleteMessageDaysAmount($1)$0" 0 29 (fontified nil)) . 944) (944 . 973) (#("Dele" 0 4 (fontified nil)) . 944) (944 . 948) (#("DeleteMessageDaysAmount(…)" 0 26 (fontified nil)) . -944) (944 . 970) (#("Dele" 0 4 (face font-lock-type-face fontified t)) . -944) (undo-tree-id1808 . -3) (undo-tree-id1809 . -4) 948 (947 . 948) (#("\\" 0 1 (fontified t)) . -947) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) 948 (944 . 948) (937 . 944) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 937 937 nil nil nil t #s(yas--exit 938 nil))) #s(yas--exit 938 nil) 32 nil #s(yas--field 1 937 937 nil nil nil t #s(yas--exit 938 nil)) nil nil)) (931 . 938) (#("Model($1)$0" 0 11 (fontified nil)) . 931) (931 . 942) (#("Model" 0 5 (fontified nil)) . 931) (931 . 936) (#("Model(…)" 0 8 (fontified nil)) . -931) (931 . 939) (#("Model" 0 5 (face font-lock-type-face fontified t)) . -931) (undo-tree-id1812 . -5) 936 (934 . 936) (#("l" 0 1 (face font-lock-type-face fontified t)) . -934) (undo-tree-id1813 . -1) 935 (931 . 935) (927 . 931) (t 25814 33988 146334 37000)) nil (25814 34206 113277 419000) 0 nil])
([nil nil ((566 . 567) (554 . 566) (552 . 554) (1027 . 1031) (apply yas--snippet-revive 1014 1026 #s(yas--snippet nil nil #s(yas--exit 1026 nil) 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1026 nil) 40 nil nil nil nil)) (1014 . 1026) (#("RoleNotFound$0" 0 14 (fontified nil)) . 1014) (1014 . 1028) (#("Role" 0 4 (fontified nil)) . 1014) (1014 . 1018) (#("RoleNotFound" 0 12 (fontified nil)) . -1014) (1014 . 1026) (#("Role" 0 4 (face font-lock-type-face fontified t)) . -1014) (undo-tree-id1814 . -4) 1018 (1012 . 1018) (#(":" 0 1 (fontified t)) . -1012) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (#(":" 0 1 (fontified t)) . -1013) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (#("G" 0 1 (face font-lock-type-face fontified t)) . -1014) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1015) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1016) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1017) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1018) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (#("N" 0 1 (face font-lock-type-face fontified t)) . -1019) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1020) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1021) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1022) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1023) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1024) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1025) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1026) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) 1027 (#(" " 0 1 (fontified t)) . -1028) (undo-tree-id1845 . -1) 1029 (1028 . 1029) (apply yas--snippet-revive 1014 1027 #s(yas--snippet nil nil #s(yas--exit 1027 nil) 39 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1027 nil) 39 nil nil nil nil)) (1014 . 1027) (#("GuildNotFound$0" 0 15 (fontified nil)) . 1014) (1014 . 1029) (#("GuildN" 0 6 (fontified nil)) . 1014) (1014 . 1020) (#("GuildNotFound" 0 13 (fontified nil)) . -1014) (1014 . 1027) (#("GuildN" 0 6 (face font-lock-type-face fontified t)) . -1014) (undo-tree-id1846 . -6) 1020 (1014 . 1020) (1007 . 1014) (t 25814 34206 122688 924000)) nil (25814 34394 154596 297000) 0 nil])
([nil nil ((apply yas--snippet-revive 1053 1065 #s(yas--snippet nil nil #s(yas--exit 1065 nil) 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1065 nil) 41 nil nil nil nil)) (1053 . 1065) (#("RoleNotFound$0" 0 14 (fontified nil)) . 1053) (1053 . 1067) (#("RoleNotFound" 0 12 (fontified nil)) . -1053) (1053 . 1065) (1046 . 1053) (t 25814 34394 165769 578000)) nil (25814 34537 600666 340000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -351) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (#("r" 0 1 (fontified t)) . -352) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (#("a" 0 1 (fontified t)) . -353) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (#("i" 0 1 (fontified t)) . -354) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -355) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (#(" " 0 1 (fontified t)) . -356) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) 357 (351 . 357) (350 . 352) (406 . 407) (#("A" 0 1 (face font-lock-type-face fontified t)) . -406) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) 407 (406 . 407) (t 25814 34537 612250 538000)) nil (25814 34930 803301 530000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -407) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (#("
" 0 1 (fontified t)) . -408) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) 409 (#("impl Display {
	
}" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 12 (face font-lock-type-face fontified t) 12 17 (fontified t) 17 18 (fontified t)) . 409) (undo-tree-id1966 . -18) (undo-tree-id1967 . -14) (undo-tree-id1968 . -18) (undo-tree-id1969 . -18) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -14) (undo-tree-id1973 . -14) (undo-tree-id1974 . -14) (undo-tree-id1975 . -14) (undo-tree-id1976 . -14) (undo-tree-id1977 . -14) (undo-tree-id1978 . -14) (undo-tree-id1979 . -14) (undo-tree-id1980 . -14) (undo-tree-id1981 . -14) (undo-tree-id1982 . 4) (undo-tree-id1983 . -16) (undo-tree-id1984 . -16) (undo-tree-id1985 . -16) (undo-tree-id1986 . -16) (undo-tree-id1987 . -16) (undo-tree-id1988 . -16) (undo-tree-id1989 . -16) (undo-tree-id1990 . -18) (undo-tree-id1991 . -16) (undo-tree-id1992 . -16) (undo-tree-id1993 . -4) (undo-tree-id1994 . -4) (undo-tree-id1995 . -4) (undo-tree-id1996 . -4) (423 . 425) (#("	" 0 1 (fontified nil)) . -424) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (425 . 426) (423 . 425) (409 . 423) (408 . 409) (t 25814 34930 815094 679000)) nil (25814 46170 164624 306000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -436) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (437 . 438) (435 . 437) (430 . 435) (409 . 430) (407 . 409) (t 25814 46170 174483 435000)) nil (25814 46187 195695 691000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -437) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -438) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (#(" " 0 1 (fontified t)) . -439) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (#("f" 0 1 (face font-lock-function-name-face fontified t)) . -440) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (#("m" 0 1 (face font-lock-function-name-face fontified t)) . -441) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (#("t" 0 1 (face font-lock-function-name-face fontified t)) . -442) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (#("(" 0 1 (fontified t)) . -443) (undo-tree-id2011 . -1) 444 (442 . 444) (437 . 442) (435 . 437)) nil (25814 46187 195677 381000) 0 nil])
([nil nil ((17 . 30) (#("l" 0 1 (fontified t)) . -17) (undo-tree-id2016 . -1) (#("e" 0 1 (fontified t)) . -18) (undo-tree-id2017 . -1) (#("f" 0 1 (fontified t)) . -19) (undo-tree-id2018 . -1) (#("," 0 1 (fontified t)) . -20) (undo-tree-id2019 . -1) 21 (13 . 21) (1 . 14) (1 . 2) (434 . 435) (#("{" 0 1 (fontified t)) . -434) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (#("
" 0 1 (fontified t)) . -435) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (#("	" 0 1 (fontified t)) . -436) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (#("f" 0 1 (fontified t)) . -437) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -438) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (#(" " 0 1 (fontified t)) . -439) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (#("f" 0 1 (face font-lock-function-name-face fontified t)) . -440) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (#("m" 0 1 (face font-lock-function-name-face fontified t)) . -441) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (#("t" 0 1 (face font-lock-function-name-face fontified t)) . -442) (undo-tree-id2036 . -1) 443 (437 . 443) (t 25814 46187 201142 98000)) nil (25814 46205 731234 952000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -466) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (#("	" 0 1 (fontified t)) . -467) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (#("f" 0 1 (fontified t)) . -468) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -469) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (#(" " 0 1 (fontified t)) . -470) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (#("f" 0 1 (face font-lock-function-name-face fontified t)) . -471) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (#("m" 0 1 (face font-lock-function-name-face fontified t)) . -472) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (#("t" 0 1 (face font-lock-function-name-face fontified t)) . -473) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (#("(" 0 1 (fontified t)) . -474) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) 475 (468 . 475) (466 . 468) (t 25814 46205 751133 383000)) nil (25814 46217 818073 786000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 538 545 nil nil nil nil nil)) nil 82 nil nil nil nil)) (466 . 551) (#("
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        ${0:todo!()}
    }" 0 48 (fontified nil) 48 49 (syntax-table (1) fontified nil) 49 90 (fontified nil)) . 466) (466 . 556) 451 (t 25814 46217 824461 45000)) nil (25814 46247 957940 957000) 0 nil])
([nil nil ((apply yas--snippet-revive 466 551 #s(yas--snippet nil (#s(yas--field 0 538 545 nil nil nil nil nil)) nil 82 nil nil nil nil))) nil (25814 46247 957939 112000) 0 nil])
([nil nil ((576 . 590) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -576) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) 577 (572 . 577) (554 . 572) (550 . 554) (#("	" 0 1 (fontified nil)) . -553) (undo-tree-id2198 . -1) (554 . 555) (550 . 554) (538 . 550) (#("todo!()" 0 5 (face font-lock-preprocessor-face fontified t) 5 7 (fontified t)) . 538) (undo-tree-id2199 . -6) (undo-tree-id2200 . -6) (undo-tree-id2201 . -6) (undo-tree-id2202 . -7) (undo-tree-id2203 . -7)) nil (25814 46247 957934 665000) 0 nil])
([nil nil ((532 . 547) (529 . 532) (t 25814 46247 971113 559000)) nil (25814 46257 143224 359000) 0 nil])
([nil nil ((#("impl Display for Context {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
		use Context::*;
        match self {
			Log(logctx) => write!(f, \"{logctx}\")
		}
    }
}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 24 (face font-lock-type-face fontified t) 24 26 (fontified t) 26 27 (fontified t) 27 31 (fontified t) 31 33 (face font-lock-keyword-face fontified t) 33 34 (fontified t) 34 37 (face font-lock-function-name-face fontified t) 37 38 (fontified t) 38 39 (face rust-ampersand-face fontified t) 39 43 (face font-lock-keyword-face fontified t) 43 45 (fontified t) 45 46 (face font-lock-variable-name-face fontified t) 46 48 (fontified t) 48 49 (face rust-ampersand-face fontified t) 49 52 (face font-lock-keyword-face fontified t) 52 53 (fontified t) 53 56 (face font-lock-constant-face fontified t) 56 58 (fontified t) 58 67 (face font-lock-type-face fontified t) 67 69 (fontified t) 69 70 (face font-lock-variable-name-face fontified t) 70 74 (fontified t) 74 75 (syntax-table (1) fontified t) 75 76 (fontified t) 76 79 (face font-lock-constant-face fontified t) 79 81 (fontified t) 81 87 (face font-lock-type-face fontified t) 87 88 (fontified t) 88 90 (fontified t) 90 92 (fontified t) 92 95 (face font-lock-keyword-face fontified t) 95 96 (fontified t) 96 103 (face font-lock-type-face fontified t) 103 107 (fontified t) 107 108 (fontified t) 108 116 (fontified t) 116 121 (face font-lock-keyword-face fontified t) 121 122 (fontified t) 122 126 (face font-lock-keyword-face fontified t) 126 129 (fontified t) 129 132 (fontified t) 132 135 (face font-lock-type-face fontified t) 135 145 (fontified t) 145 146 (fontified t syntax-table (1)) 146 147 (fontified t) 147 153 (face rust-builtin-formatting-macro fontified t) 153 157 (fontified t) 157 158 (face font-lock-string-face fontified t) 158 166 (face rust-string-interpolation fontified t) 166 167 (face font-lock-string-face fontified t) 167 168 (fontified t) 168 169 (fontified t) 169 172 (fontified t) 172 173 (fontified t) 173 178 (fontified t) 178 179 (fontified t) 179 180 (fontified t) 180 181 (fontified t) 181 182 (fontified t)) . 440) (undo-tree-id2251 . -181) (undo-tree-id2252 . -181) (undo-tree-id2253 . 1) (undo-tree-id2254 . -181) (undo-tree-id2255 . -168) (undo-tree-id2256 . -181) (undo-tree-id2257 . -181) (undo-tree-id2258 . -181) (t 25814 46257 147775 921000)) nil (25814 46924 784257 133000) 0 nil])
([nil nil ((629 . 631)) nil (25814 46924 784251 641000) 0 nil])
([nil nil ((nil rear-nonsticky nil 811 . 812) (nil fontified nil 630 . 812) (630 . 812)) nil (25814 46924 784251 48000) 0 nil])
([nil nil ((811 . 812)) nil (25814 46924 784250 213000) 0 nil])
([nil nil ((#("impl Display for Context {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
		use Context::*;
        match self {
			Log(logctx) => write!(f, \"{logctx}\")
		}
    }
}


" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 24 (face font-lock-type-face fontified t) 24 31 (fontified t) 31 33 (face font-lock-keyword-face fontified t) 33 34 (fontified t) 34 37 (face font-lock-function-name-face fontified t) 37 38 (fontified t) 38 39 (face rust-ampersand-face fontified t) 39 43 (face font-lock-keyword-face fontified t) 43 45 (fontified t) 45 46 (face font-lock-variable-name-face fontified t) 46 48 (fontified t) 48 49 (face rust-ampersand-face fontified t) 49 52 (face font-lock-keyword-face fontified t) 52 53 (fontified t) 53 56 (face font-lock-constant-face fontified t) 56 58 (fontified t) 58 67 (face font-lock-type-face fontified t) 67 69 (fontified t) 69 70 (face font-lock-variable-name-face fontified t) 70 74 (fontified t) 74 75 (fontified t syntax-table (1)) 75 76 (fontified t) 76 79 (face font-lock-constant-face fontified t) 79 81 (fontified t) 81 87 (face font-lock-type-face fontified t) 87 92 (fontified t) 92 95 (face font-lock-keyword-face fontified t) 95 96 (fontified t) 96 103 (face font-lock-type-face fontified t) 103 116 (fontified t) 116 121 (face font-lock-keyword-face fontified t) 121 122 (fontified t) 122 126 (face font-lock-keyword-face fontified t) 126 132 (fontified t) 132 135 (face font-lock-type-face fontified t) 135 145 (fontified t) 145 146 (fontified t syntax-table (1)) 146 147 (fontified t) 147 153 (face rust-builtin-formatting-macro fontified t) 153 157 (fontified t) 157 158 (face font-lock-string-face fontified t) 158 166 (face rust-string-interpolation fontified t) 166 167 (face font-lock-string-face fontified t) 167 181 (fontified t) 181 182 (fontified t) 182 183 (fontified t rear-nonsticky t)) . 630) (undo-tree-id2220 . -182) (undo-tree-id2221 . -182) (undo-tree-id2222 . 1) (undo-tree-id2223 . -182) (undo-tree-id2224 . -182) (undo-tree-id2225 . -182) (undo-tree-id2226 . -182) (undo-tree-id2227 . -182) (undo-tree-id2228 . -182) (undo-tree-id2229 . -182) (undo-tree-id2230 . -182) (undo-tree-id2231 . -182) (undo-tree-id2232 . -182) (undo-tree-id2233 . -182) (undo-tree-id2234 . -182) (undo-tree-id2235 . -182) (undo-tree-id2236 . -182) (undo-tree-id2237 . -182) (undo-tree-id2238 . -182) (undo-tree-id2239 . -182) (undo-tree-id2240 . -182) (undo-tree-id2241 . -182) (undo-tree-id2242 . -182) (undo-tree-id2243 . -182) (undo-tree-id2244 . -182) (undo-tree-id2245 . -182) (undo-tree-id2246 . -181) (undo-tree-id2247 . -181) (undo-tree-id2248 . -181) (undo-tree-id2249 . -181) (undo-tree-id2250 . -183)) nil (25814 46924 784248 544000) 0 nil])
([nil nil ((nil rear-nonsticky nil 906 . 907) (nil fontified nil 724 . 907) (724 . 907)) nil (25814 46924 784228 440000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -630) (undo-tree-id2204 . 1) (undo-tree-id2205 . 1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (#("
" 0 1 (fontified t rear-nonsticky t)) . -631) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) 632) nil (25814 46924 784225 245000) 0 nil])
([nil nil ((721 . 722)) nil (25814 46924 784134 479000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -892) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (#("	" 0 1 (fontified t)) . -893) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (#("	" 0 1 (fontified t)) . -894) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (#("	" 0 1 (fontified t)) . -895) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) 896 (892 . 896) (891 . 892) (t 25814 46924 797464 165000)) nil (25814 47067 238855 151000) 0 nil])
([nil nil ((133 . 145) (#("conver" 0 6 (fontified nil)) . 133) (133 . 139) (#("conversions;" 0 12 (fontified nil)) . -133) (133 . 145) (#("conver" 0 6 (face font-lock-constant-face fontified t)) . -133) (undo-tree-id2282 . -6) (undo-tree-id2283 . -4) (undo-tree-id2284 . -5) (undo-tree-id2285 . -6) (undo-tree-id2286 . -6) 139 (129 . 139) (128 . 129) (t 25814 47067 287397 865000)) nil (25814 48603 9604 141000) 0 nil])
([nil nil ((#("mod conversions;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 15 (face font-lock-constant-face fontified t) 15 16 (fontified t) 16 17 (fontified t)) . 129) (undo-tree-id2287 . 1) (undo-tree-id2288 . -16) (undo-tree-id2289 . -4) (undo-tree-id2290 . -4) (undo-tree-id2291 . -4) (undo-tree-id2292 . -15) (undo-tree-id2293 . -15) (undo-tree-id2294 . -15) (undo-tree-id2295 . -15) (undo-tree-id2296 . -15) (undo-tree-id2297 . -15) (undo-tree-id2298 . -15) (undo-tree-id2299 . -15) (undo-tree-id2300 . -15) (undo-tree-id2301 . -15) (undo-tree-id2302 . -15) (undo-tree-id2303 . -15) (undo-tree-id2304 . -15) (undo-tree-id2305 . -15) (undo-tree-id2306 . -15) (undo-tree-id2307 . -15) (undo-tree-id2308 . -15) (undo-tree-id2309 . -15) (undo-tree-id2310 . -15) (undo-tree-id2311 . -17) 144 (t 25814 48603 53433 601000)) nil (25814 48607 999170 616000) 0 nil])
([nil nil ((259 . 261)) nil (25814 48607 999125 209000) 0 nil])
([nil nil ((nil rear-nonsticky nil 260 . 261) (#("
" 0 1 (fontified nil)) . -277) (260 . 278)) nil (25814 48607 999117 638000) 0 nil])
([nil nil ((1132 . 1134) (1111 . 1132) (1107 . 1111) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -1107) (undo-tree-id2312 . -1) 1108 (1092 . 1108) (1088 . 1092) (1076 . 1088) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -1076) (undo-tree-id2313 . -1) 1077 (1056 . 1077) (1052 . 1056) (#("	" 0 1 (fontified nil)) . -1055) (undo-tree-id2314 . -1) (1056 . 1057) (1052 . 1056) (1051 . 1052) (1040 . 1051) (#("u" 0 1 (fontified t)) . -1040) (undo-tree-id2315 . -1) (#("s" 0 1 (fontified t)) . -1041) (undo-tree-id2316 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -1042) (undo-tree-id2317 . -1) (#(" " 0 1 (fontified t)) . -1043) (undo-tree-id2318 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1044) (undo-tree-id2319 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1045) (undo-tree-id2320 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1046) (undo-tree-id2321 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1047) (undo-tree-id2322 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1048) (undo-tree-id2323 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -1049) (undo-tree-id2324 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1050) (undo-tree-id2325 . -1) 1051 (1040 . 1051) (1037 . 1040) (#("	" 0 1 (fontified nil)) . -1039) (undo-tree-id2326 . -1) (1040 . 1041) (1037 . 1040) (1028 . 1037) (1016 . 1028) (1007 . 1016) (#("Forma" 0 5 (fontified nil)) . 1007) (1007 . 1012) (#("Formatter" 0 9 (fontified nil)) . -1007) (1007 . 1016) (#("Forma" 0 5 (face font-lock-type-face fontified t)) . -1007) (undo-tree-id2327 . -5) 1012 (1007 . 1012) (986 . 1007) (980 . 986) (978 . 980) (#("	" 0 1 (fontified nil)) . -979) (undo-tree-id2328 . -1) (980 . 981) (978 . 980) (975 . 978) (961 . 974) (#("InernalE" 0 8 (fontified nil)) . 961) (961 . 969) (#("InternalError" 0 13 (fontified nil)) . -961) (961 . 974) (#("InernalE" 0 8 (face font-lock-type-face fontified t)) . -961) (undo-tree-id2329 . -8) 969 (961 . 969) (#("<" 0 1 (fontified t)) . -929) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -930) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (#(":" 0 1 (fontified t)) . -931) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (#(" " 0 1 (fontified t)) . -932) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (#("D" 0 1 (face font-lock-type-face fontified t)) . -933) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -934) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -935) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -936) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -937) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -938) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -939) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) 940 (#(">" 0 1 (fontified t)) . -940) (undo-tree-id2352 . -1) 941 (929 . 941) (apply yas--snippet-revive 949 962 #s(yas--snippet nil nil #s(yas--exit 961 nil) 88 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 961 nil) 88 nil nil nil nil)) (949 . 962) (#("WithContext<$0>" 0 15 (fontified nil)) . 949) (949 . 964) (#("WithCon" 0 7 (fontified nil)) . 949) (949 . 956) (#("WithContext<…>" 0 14 (fontified nil)) . -949) (949 . 963) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -949) (undo-tree-id2353 . -7) (undo-tree-id2354 . -7) 956 (946 . 956) (925 . 946) (923 . 925) (t 25814 48608 16764 808000)) nil (25814 49664 501262 991000) 0 nil])
([nil nil ((1020 . 1021) (t 25814 49664 519601 201000)) nil (25814 49671 677506 349000) 0 nil])
([nil nil ((954 . 955) (951 . 954) (932 . 936) (#("e" 0 1 (fontified t)) . -932) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) 933 (925 . 933) (938 . 940) (925 . 938) (924 . 925) (t 25814 49671 689594 641000)) nil (25814 49748 867566 80000) 0 nil])
([nil nil ((948 . 953) (t 25814 49748 892859 825000)) nil (25814 49824 817784 806000) 0 nil])
([nil nil ((1018 . 1019) (998 . 1018) (989 . 998) (#("Forma" 0 5 (fontified nil)) . 989) (989 . 994) (#("Formatter" 0 9 (fontified nil)) . -989) (989 . 998) (#("Forma" 0 5 (face font-lock-type-face fontified t)) . -989) (undo-tree-id2357 . -5) 994 (993 . 994) (972 . 993) (962 . 972) (960 . 962) (960 . 961) (953 . 955)) nil (25814 49824 817780 708000) 0 nil])
([nil nil ((1028 . 1044) (#("OptionDisplayExt" 0 16 (fontified nil)) . 1028) (1028 . 1044) (#("OptionDisplayExt" 0 6 (face font-lock-type-face fontified t) 6 16 (face font-lock-type-face fontified t)) . -1028) (undo-tree-id2358 . -11) (undo-tree-id2359 . -16) 1044 (1041 . 1044) (1028 . 1034) (#("
" 0 1 (fontified t)) . -1021) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (#("
" 0 1 (fontified t)) . -1022) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (#("f" 0 1 (fontified t)) . -1023) (undo-tree-id2364 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -1024) (undo-tree-id2365 . -1) 1025 (1023 . 1025) (1021 . 1023) (t 25814 49824 866130 99000)) nil (25814 49841 916308 628000) 0 nil])
([nil nil ((1251 . 1253) (t 25814 49841 936116 423000)) nil (25814 49876 898538 220000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1287) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -1288) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (#(" " 0 1 (fontified t)) . -1289) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (#("f" 0 1 (face font-lock-function-name-face fontified t)) . -1290) (undo-tree-id2372 . -1) (#("m" 0 1 (face font-lock-function-name-face fontified t)) . -1291) (undo-tree-id2373 . -1) (#("t" 0 1 (face font-lock-function-name-face fontified t)) . -1292) (undo-tree-id2374 . -1) 1293 (1287 . 1293) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1287) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) 1288 (1287 . 1288) (1285 . 1287) (#("	" 0 1 (fontified nil)) . -1286) (undo-tree-id2377 . -1) (1287 . 1288) (1285 . 1287) (1283 . 1285) (1270 . 1283) (#("Internal" 0 8 (fontified nil)) . 1270) (1270 . 1278) (#("InternalError" 0 13 (fontified nil)) . -1270) (1270 . 1283) (#("Internal" 0 8 (face font-lock-type-face fontified t)) . -1270) (undo-tree-id2378 . -8) 1278 (1274 . 1278) (1253 . 1274)) nil (25814 49876 898532 751000) 0 nil])
([nil nil ((1348 . 1360) (#("s" 0 1 (fontified t)) . -1348) (undo-tree-id2381 . -1) 1349 (1348 . 1349) (1345 . 1348) (#("	" 0 1 (fontified nil)) . -1363) (undo-tree-id2382 . -1) (1364 . 1365) (1360 . 1364) (1354 . 1360) (1348 . 1354) (1345 . 1348) (#("	" 0 1 (fontified nil)) . -1347) (undo-tree-id2383 . -1) (1348 . 1349) (1345 . 1348) (1343 . 1345) (#("
" 0 1 (fontified t)) . -1343) (undo-tree-id2384 . -1) (#("	" 0 1 (fontified t)) . -1344) (undo-tree-id2385 . -1) (#("	" 0 1 (fontified t)) . -1345) (undo-tree-id2386 . -1) (#(" " 0 1 (fontified t)) . -1346) (undo-tree-id2387 . -1) 1347 (1346 . 1347) (1343 . 1346) (1337 . 1343) (#("Resul" 0 5 (fontified nil)) . 1337) (1337 . 1342) (#("Result" 0 6 (fontified nil)) . -1337) (1337 . 1343) (#("Resul" 0 5 (face font-lock-type-face fontified t)) . -1337) (undo-tree-id2388 . -5) 1342 (1333 . 1342) (1323 . 1333) (1314 . 1323) (#("Form" 0 4 (fontified nil)) . 1314) (1314 . 1318) (#("Formatter" 0 9 (fontified nil)) . -1314) (1314 . 1323) (#("Form" 0 4 (face font-lock-type-face fontified t)) . -1314) (undo-tree-id2389 . -4) 1318 (1314 . 1318) (1293 . 1314) (1288 . 1293) (#("m" 0 1 (fontified t)) . -1288) (undo-tree-id2390 . -1) (#("t" 0 1 (fontified t)) . -1289) (undo-tree-id2391 . -1) (#(" " 0 1 (fontified t)) . -1290) (undo-tree-id2392 . -1) 1291 (1287 . 1291) (t 25814 49876 902755 573000)) nil (25814 49933 879874 322000) 0 nil])
([nil nil ((1418 . 1421) (1433 . 1442) (1432 . 1433) (1411 . 1432) (1406 . 1411) (#(" " 0 1 (fontified t)) . -1406) (undo-tree-id2379 . -1) 1407 (1403 . 1407) (apply yas--snippet-revive 1379 1403 #s(yas--snippet nil (#s(yas--field 1 1399 1402 nil nil nil t #s(yas--exit 1403 nil))) #s(yas--exit 1403 nil) 89 nil #s(yas--field 1 1399 1402 nil nil nil t #s(yas--exit 1403 nil)) nil nil)) (1399 . 1402) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1399 1402 nil nil nil t #s(yas--exit 1403 nil))) #s(yas--exit 1403 nil) 89 nil #s(yas--field 1 1399 1402 nil nil nil t #s(yas--exit 1403 nil)) nil nil)) (1379 . 1400) (#("Self::SerenityError($1)$0" 0 25 (fontified nil)) . 1379) (1379 . 1404) (#("Sereni" 0 6 (fontified nil)) . 1379) (1379 . 1385) (#("Self::SerenityError(…)" 0 22 (fontified nil)) . -1379) (1379 . 1401) (#("Sereni" 0 6 (face font-lock-type-face fontified t)) . -1379) (undo-tree-id2380 . -6) 1385 (1379 . 1385) (1375 . 1379)) nil (25814 49933 879856 869000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1365) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (#(":" 0 1 (fontified t)) . -1366) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) 1367 (1352 . 1367) (#("Internal" 0 8 (fontified nil)) . 1352) (1352 . 1360) (#("InternalError::" 0 15 (fontified nil)) . -1352) (1352 . 1367) (#("Internal" 0 8 (face font-lock-type-face fontified t)) . -1352) (undo-tree-id2413 . -8) (undo-tree-id2414 . -8) (undo-tree-id2415 . -8) (undo-tree-id2416 . -8) (undo-tree-id2417 . -8) 1360 (1352 . 1360) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1352) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1353) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1354) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1355) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) 1356 (t 25814 49933 882712 79000)) nil (25814 49944 507211 401000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -1388) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1389) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1390) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1391) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (#(":" 0 1 (fontified t)) . -1392) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) 1393 (#(":" 0 1 (fontified t)) . -1393) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) 1394 (t 25814 49944 516037 473000)) nil (25814 49951 471833 94000) 0 nil])
([nil nil ((1408 . 1410) (#(">" 0 1 (syntax-table (1) fontified t)) . -1408) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (#("
" 0 1 (fontified t)) . -1409) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (#("	" 0 1 (fontified t)) . -1410) (undo-tree-id2502 . -1) (#("	" 0 1 (fontified t)) . -1411) (undo-tree-id2503 . -1) (#("	" 0 1 (fontified t)) . -1412) (undo-tree-id2504 . -1) (#("	" 0 1 (fontified t)) . -1413) (undo-tree-id2505 . -1) 1414 (t 25814 49951 476032 304000)) nil (25814 49963 325655 504000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -1286) (undo-tree-id2506 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -1287) (undo-tree-id2507 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1288) (undo-tree-id2508 . -1) 1289 (#("O" 0 1 (face font-lock-type-face fontified t)) . -1279) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1280) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1281) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1282) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1283) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1284) (undo-tree-id2519 . -1) 1285 (#("	" 0 1 (fontified nil)) . -1304) (undo-tree-id2520 . -1) (1305 . 1306) (1303 . 1305) (1299 . 1303) (1295 . 1299) (1279 . 1295) (#("OptionDis" 0 9 (fontified nil)) . 1279) (1279 . 1288) (#("OptionDisplayExt" 0 16 (fontified nil)) . -1279) (1279 . 1295) (#("OptionDis" 0 9 (face font-lock-type-face fontified t)) . -1279) (undo-tree-id2521 . -9) 1288 (1277 . 1288) (1261 . 1277) (#("Option" 0 6 (fontified nil)) . 1261) (1261 . 1267) (#("OptionDisplayExt" 0 16 (fontified nil)) . -1261) (1261 . 1277) (#("Option" 0 6 (face font-lock-type-face fontified t)) . -1261) (undo-tree-id2522 . -6) 1267 (1257 . 1267) (1253 . 1257) (1251 . 1253) (t 25814 49963 336023 548000)) nil (25814 49990 122319 480000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -1294) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (#("d" 0 1 (fontified t)) . -1295) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) 1296 (1294 . 1296) (t 25814 49990 139337 336000)) nil (25814 50095 45914 316000) 0 nil])
([nil nil ((#("impl<T: OptionDisplayExt> Display for T {
}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (face font-lock-variable-name-face fontified t) 6 8 (fontified t) 8 24 (face font-lock-type-face fontified t) 24 26 (fontified t) 26 33 (face font-lock-type-face fontified t) 33 34 (fontified t) 34 37 (face font-lock-keyword-face fontified t) 37 38 (fontified t) 38 39 (face font-lock-type-face fontified t) 39 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t)) . 1253) (undo-tree-id2523 . 3) (undo-tree-id2524 . -43) (undo-tree-id2525 . 1) (undo-tree-id2526 . -41) (undo-tree-id2527 . -40) (undo-tree-id2528 . -41) (undo-tree-id2529 . -41) (undo-tree-id2530 . -41) (undo-tree-id2531 . -41) (undo-tree-id2532 . -41) (undo-tree-id2533 . -41) (undo-tree-id2534 . -41) (undo-tree-id2535 . -40) (undo-tree-id2536 . -40) (undo-tree-id2537 . -40) (undo-tree-id2538 . -40) (undo-tree-id2539 . -40) (undo-tree-id2540 . -40) (undo-tree-id2541 . -40) (undo-tree-id2542 . -40) (undo-tree-id2543 . -40) (undo-tree-id2544 . -44) 1293) nil (25814 50095 45903 378000) 0 nil])
([nil nil ((#("pub(crate) trait OptionDisplayExt {
	fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result;
}

impl OptionDisplayExt for Option<WithContext<InternalError>> {
	fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
		match self {
			Some(err) => write!(f, \"{err}\"),
			None => write!(f, \"[non-internal error]\"),
		}
	}
}


" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 11 (fontified t) 11 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 33 (face font-lock-type-face fontified t) 33 36 (fontified t) 36 37 (fontified t) 37 39 (face font-lock-keyword-face fontified t) 39 40 (fontified t) 40 43 (face font-lock-function-name-face fontified t) 43 44 (fontified t) 44 45 (face rust-ampersand-face fontified t) 45 49 (face font-lock-keyword-face fontified t) 49 51 (fontified t) 51 52 (face font-lock-variable-name-face fontified t) 52 54 (fontified t) 54 55 (face rust-ampersand-face fontified t) 55 58 (face font-lock-keyword-face fontified t) 58 59 (fontified t) 59 62 (face font-lock-constant-face fontified t) 62 64 (fontified t) 64 73 (face font-lock-type-face fontified t) 73 75 (fontified t) 75 76 (face font-lock-variable-name-face fontified t) 76 80 (fontified t) 80 81 (syntax-table (1) fontified t) 81 82 (fontified t) 82 85 (face font-lock-constant-face fontified t) 85 87 (fontified t) 87 93 (face font-lock-type-face fontified t) 93 94 (fontified t) 94 95 (fontified t) 95 96 (fontified t) 96 97 (fontified t) 97 98 (fontified t) 98 102 (face font-lock-keyword-face fontified t) 102 103 (fontified t) 103 119 (face font-lock-type-face fontified t) 119 120 (fontified t) 120 123 (face font-lock-keyword-face fontified t) 123 124 (fontified t) 124 130 (face font-lock-type-face fontified t) 130 131 (fontified t) 131 142 (face font-lock-type-face fontified t) 142 143 (fontified t) 143 156 (face font-lock-type-face fontified t) 156 161 (fontified t) 161 162 (fontified t) 162 164 (face font-lock-keyword-face fontified t) 164 165 (fontified t) 165 168 (face font-lock-function-name-face fontified t) 168 169 (fontified t) 169 170 (face rust-ampersand-face fontified t) 170 174 (face font-lock-keyword-face fontified t) 174 176 (fontified t) 176 177 (face font-lock-variable-name-face fontified t) 177 179 (fontified t) 179 180 (face rust-ampersand-face fontified t) 180 183 (face font-lock-keyword-face fontified t) 183 184 (fontified t) 184 187 (face font-lock-constant-face fontified t) 187 189 (fontified t) 189 198 (face font-lock-type-face fontified t) 198 200 (fontified t) 200 201 (face font-lock-variable-name-face fontified t) 201 205 (fontified t) 205 206 (fontified t syntax-table (1)) 206 207 (fontified t) 207 210 (face font-lock-constant-face fontified t) 210 212 (fontified t) 212 218 (face font-lock-type-face fontified t) 218 221 (fontified t) 221 223 (fontified t) 223 228 (face font-lock-keyword-face fontified t) 228 229 (fontified t) 229 233 (face font-lock-keyword-face fontified t) 233 236 (fontified t) 236 239 (fontified t) 239 243 (face font-lock-type-face fontified t) 243 250 (fontified t) 250 251 (fontified t syntax-table (1)) 251 252 (fontified t) 252 258 (face rust-builtin-formatting-macro fontified t) 258 262 (fontified t) 262 263 (face font-lock-string-face fontified t) 263 268 (face rust-string-interpolation fontified t) 268 269 (face font-lock-string-face fontified t) 269 272 (fontified t) 272 275 (fontified t) 275 279 (face font-lock-type-face fontified t) 279 281 (fontified t) 281 282 (fontified t syntax-table (1)) 282 283 (fontified t) 283 289 (face rust-builtin-formatting-macro fontified t) 289 293 (fontified t) 293 315 (face font-lock-string-face fontified t) 315 317 (fontified t) 317 318 (fontified t) 318 321 (fontified t) 321 322 (fontified t) 322 324 (fontified t) 324 325 (fontified t) 325 327 (fontified t) 327 328 (fontified t) 328 329 (fontified t)) . 925) (undo-tree-id2554 . -328) (undo-tree-id2555 . -328) (undo-tree-id2556 . 1) (undo-tree-id2557 . -328) (undo-tree-id2558 . -103) (undo-tree-id2559 . -264) (undo-tree-id2560 . 1) (undo-tree-id2561 . -328) (undo-tree-id2562 . -328) (undo-tree-id2563 . -328) (undo-tree-id2564 . -328) (undo-tree-id2565 . -328) (undo-tree-id2566 . -328) (undo-tree-id2567 . -328) (undo-tree-id2568 . -328) (undo-tree-id2569 . -328) (undo-tree-id2570 . -328) (undo-tree-id2571 . -328) (undo-tree-id2572 . -328) (undo-tree-id2573 . -328) (undo-tree-id2574 . -328) (undo-tree-id2575 . -328) (undo-tree-id2576 . -328) (undo-tree-id2577 . -328) (undo-tree-id2578 . -328) (undo-tree-id2579 . -328) (undo-tree-id2580 . -328) (undo-tree-id2581 . -328) (undo-tree-id2582 . -328) (undo-tree-id2583 . -328) (undo-tree-id2584 . -328) (undo-tree-id2585 . -328) (undo-tree-id2586 . -328) (undo-tree-id2587 . -328) (undo-tree-id2588 . -328) (undo-tree-id2589 . -328) (undo-tree-id2590 . -328) (undo-tree-id2591 . -328) (undo-tree-id2592 . -328) (undo-tree-id2593 . -328) (undo-tree-id2594 . -327) (undo-tree-id2595 . -327) (undo-tree-id2596 . -327) (undo-tree-id2597 . -327) (undo-tree-id2598 . -327) (undo-tree-id2599 . -327) (undo-tree-id2600 . -327) (undo-tree-id2601 . -327) (undo-tree-id2602 . -329) (t 25814 50095 55930 354000)) nil (25814 50098 610579 383000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . 1124) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (t 25814 50098 625927 918000)) nil (25814 50190 604571 749000) 0 nil])
([nil nil ((424 . 428) (427 . 429) (424 . 427) (411 . 424) (#(" " 0 1 (fontified t)) . -411) (undo-tree-id2607 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -412) (undo-tree-id2608 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -413) (undo-tree-id2609 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -414) (undo-tree-id2610 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -415) (undo-tree-id2611 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -416) (undo-tree-id2612 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -417) (undo-tree-id2613 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -418) (undo-tree-id2614 . -1) 419 (417 . 419) (401 . 417) (#("=" 0 1 (fontified t)) . -707) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -708) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) 709 (707 . 709) (705 . 707) (684 . 705) (682 . 684) (674 . 682) (656 . 674) (654 . 656) (638 . 654) (636 . 638) (635 . 636) (621 . 635) (619 . 621) (t 25814 50190 615866 550000)) nil (25815 30853 54517 828000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -424) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (#("u" 0 1 (fontified t)) . -425) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (#("b" 0 1 (fontified t)) . -426) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (#(" " 0 1 (fontified t)) . -427) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) 428 (t 25815 30853 72009 198000)) nil (25815 30857 301515 69000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -427) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (#("
" 0 1 (fontified t)) . -428) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) 429 (#("impl<T> From<OptError<T>> for Option<T> {
	fn from(
}" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (face font-lock-type-face fontified t) 6 8 (fontified t) 8 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 21 (face font-lock-type-face fontified t) 21 22 (fontified t) 22 23 (face font-lock-type-face fontified t) 23 26 (fontified t) 26 29 (face font-lock-keyword-face fontified t) 29 30 (fontified t) 30 36 (face font-lock-type-face fontified t) 36 37 (fontified t) 37 38 (face font-lock-type-face fontified t) 38 42 (fontified t) 42 43 (fontified t) 43 45 (face font-lock-keyword-face fontified t) 45 46 (fontified t) 46 50 (face font-lock-function-name-face fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t)) . 429) (undo-tree-id2698 . -53) (undo-tree-id2699 . -12) (undo-tree-id2700 . -51) (undo-tree-id2701 . 2) (undo-tree-id2702 . -51) (#("&" 0 1 (fontified t)) . -480) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) 481 (#("self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
		write!(f, \"{inner}\", inner = self.0)
	}" 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t) 6 7 (face font-lock-variable-name-face fontified t) 7 9 (fontified t) 9 10 (face rust-ampersand-face fontified t) 10 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 17 (face font-lock-constant-face fontified t) 17 19 (fontified t) 19 28 (face font-lock-type-face fontified t) 28 30 (fontified t) 30 31 (face font-lock-variable-name-face fontified t) 31 35 (fontified t) 35 36 (syntax-table (1) fontified t) 36 37 (fontified t) 37 40 (face font-lock-constant-face fontified t) 40 42 (fontified t) 42 48 (face font-lock-type-face fontified t) 48 51 (fontified t) 51 53 (fontified t) 53 59 (face rust-builtin-formatting-macro fontified t) 59 63 (fontified t) 63 64 (face font-lock-string-face fontified t) 64 71 (face rust-string-interpolation fontified t) 71 72 (face font-lock-string-face fontified t) 72 74 (fontified t) 74 82 (fontified t) 82 86 (face font-lock-keyword-face fontified t) 86 89 (fontified t) 89 90 (fontified t) 90 92 (fontified t)) . 481) (undo-tree-id2707 . -92) (undo-tree-id2708 . -29) (undo-tree-id2709 . 3) (568 . 570) (555 . 568) (534 . 555) (531 . 534) (#("	" 0 1 (fontified nil)) . -533) (undo-tree-id2710 . -1) (534 . 535) (531 . 534) (513 . 531) (509 . 513) (500 . 509) (#("Form" 0 4 (fontified nil)) . 500) (500 . 504) (#("Formatter" 0 9 (fontified nil)) . -500) (500 . 509) (#("Form" 0 4 (face font-lock-type-face fontified t)) . -500) (undo-tree-id2711 . -4) 504 (484 . 504) (#("," 0 1 (fontified t)) . -484) (undo-tree-id2712 . -1) 485 (474 . 485) (472 . 474) (470 . 472) (#("	" 0 1 (fontified nil)) . -471) (undo-tree-id2713 . -1) (472 . 473) (470 . 472) (453 . 454) (437 . 442) (462 . 464) (460 . 461) (apply yas--snippet-revive 453 461 #s(yas--snippet nil nil #s(yas--exit 460 nil) 98 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 460 nil) 98 nil nil nil nil)) (453 . 461) (#("Option<$0>" 0 10 (fontified nil)) . 453) (453 . 463) (#("Opti" 0 4 (fontified nil)) . 453) (453 . 457) (#("Option<…>" 0 9 (fontified nil)) . -453) (453 . 462) (#("Opti" 0 4 (face font-lock-type-face fontified t)) . -453) (undo-tree-id2714 . -4) 457 (448 . 457) (446 . 447) (apply yas--snippet-revive 437 447 #s(yas--snippet nil nil #s(yas--exit 446 nil) 97 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 446 nil) 97 nil nil nil nil)) (437 . 447) (#("OptError<$0>" 0 12 (fontified nil)) . 437) (437 . 449) (#("OptEr" 0 5 (fontified nil)) . 437) (437 . 442) (#("OptError<…>" 0 11 (fontified nil)) . -437) (437 . 448) (#("OptEr" 0 5 (face font-lock-type-face fontified t)) . -437) (undo-tree-id2715 . -5) 442 (432 . 442) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -432) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (#(" " 0 1 (fontified t)) . -433) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -434) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -435) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -436) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -437) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (#("<" 0 1 (fontified t)) . -438) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) 439 (434 . 439) (#("I" 0 1 (face font-lock-type-face fontified t)) . -434) (undo-tree-id2730 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -435) (undo-tree-id2731 . -1) 436 (429 . 436) (t 25815 30857 312010 672000)) nil (25815 30957 984809 588000) 0 nil])
([nil nil ((432 . 433) (424 . 431) (t 25815 30958 8709 427000)) nil (25815 31004 301418 662000) 0 nil])
([nil nil ((401 . 417) (400 . 401) (t 25815 31004 322055 810000)) nil (25815 31129 633493 858000) 0 nil])
([nil nil ((415 . 421) (t 25815 31129 655419 932000)) nil (25815 31135 450105 969000) 0 nil])
([nil nil ((421 . 428) (t 25815 31135 472087 885000)) nil (25815 31141 86958 13000) 0 nil])
([nil nil ((#("
impl From<ser::SerenityError> for InternalError {
	fn from(value: ser::SerenityError) -> Self {
		Self::SerenityError(value)
	}
}

impl From<ser::SerenityError> for Error {
    fn from(value: ser::SerenityError) -> Self {
		use ser::SerenityError as Ser;
		use ser::ModelError as Model;
        match value {
            Ser::Model(Model::RoleNotFound) => Error::RoleNotFound,
			e => Self::Internal(e.into())
        }
    }
}

" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 10 (face font-lock-type-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-constant-face fontified t) 14 16 (fontified t) 16 29 (face font-lock-type-face fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 34 (face font-lock-keyword-face fontified t) 34 35 (fontified t) 35 48 (face font-lock-type-face fontified t) 48 49 (fontified t) 49 51 (fontified t) 51 52 (fontified t) 52 54 (face font-lock-keyword-face fontified t) 54 55 (fontified t) 55 59 (face font-lock-function-name-face fontified t) 59 60 (fontified t) 60 65 (face font-lock-variable-name-face fontified t) 65 67 (fontified t) 67 70 (face font-lock-constant-face fontified t) 70 72 (fontified t) 72 85 (face font-lock-type-face fontified t) 85 88 (fontified t) 88 89 (syntax-table (1) fontified t) 89 90 (fontified t) 90 94 (face font-lock-type-face fontified t) 94 97 (fontified t) 97 99 (fontified t) 99 103 (face font-lock-type-face fontified t) 103 105 (fontified t) 105 118 (face font-lock-type-face fontified t) 118 119 (fontified t) 119 124 (fontified t) 124 125 (fontified t) 125 126 (fontified t) 126 128 (fontified t) 128 129 (fontified t) 129 130 (fontified t) 130 131 (fontified t) 131 132 (fontified t) 132 136 (face font-lock-keyword-face fontified t) 136 137 (fontified t) 137 141 (face font-lock-type-face fontified t) 141 142 (fontified t) 142 145 (face font-lock-constant-face fontified t) 145 147 (fontified t) 147 160 (face font-lock-type-face fontified t) 160 161 (fontified t) 161 162 (fontified t) 162 165 (face font-lock-keyword-face fontified t) 165 166 (fontified t) 166 171 (face font-lock-type-face fontified t) 171 172 (fontified t) 172 173 (fontified t) 173 174 (fontified t) 174 178 (fontified t) 178 180 (face font-lock-keyword-face fontified t) 180 181 (fontified t) 181 185 (face font-lock-function-name-face fontified t) 185 186 (fontified t) 186 191 (face font-lock-variable-name-face fontified t) 191 193 (fontified t) 193 196 (face font-lock-constant-face fontified t) 196 198 (fontified t) 198 211 (face font-lock-type-face fontified t) 211 214 (fontified t) 214 215 (syntax-table (1) fontified t) 215 216 (fontified t) 216 220 (face font-lock-type-face fontified t) 220 221 (fontified t) 221 223 (fontified t) 223 225 (fontified t) 225 228 (face font-lock-keyword-face fontified t) 228 229 (fontified t) 229 232 (face font-lock-constant-face fontified t) 232 234 (fontified t) 234 247 (face font-lock-type-face fontified t) 247 248 (fontified t) 248 250 (face font-lock-keyword-face fontified t) 250 251 (fontified t) 251 254 (face font-lock-type-face fontified t) 254 256 (fontified t) 256 258 (fontified t) 258 261 (face font-lock-keyword-face fontified t) 261 262 (fontified t) 262 265 (face font-lock-constant-face fontified t) 265 267 (fontified t) 267 277 (face font-lock-type-face fontified t) 277 278 (fontified t) 278 280 (face font-lock-keyword-face fontified t) 280 281 (fontified t) 281 286 (face font-lock-type-face fontified t) 286 287 (fontified t) 287 288 (fontified t) 288 296 (fontified t) 296 301 (face font-lock-keyword-face fontified t) 301 309 (fontified t) 309 310 (fontified t) 310 322 (fontified t) 322 325 (face font-lock-type-face fontified t) 325 327 (fontified t) 327 332 (face font-lock-type-face fontified t) 332 333 (fontified t) 333 338 (face font-lock-type-face fontified t) 338 340 (fontified t) 340 352 (face font-lock-type-face fontified t) 352 355 (fontified t) 355 356 (syntax-table (1) fontified t) 356 357 (fontified t) 357 362 (face font-lock-type-face fontified t) 362 364 (fontified t) 364 376 (face font-lock-type-face fontified t) 376 378 (fontified t) 378 384 (fontified t) 384 385 (syntax-table (1) fontified t) 385 386 (fontified t) 386 390 (face font-lock-type-face fontified t) 390 392 (fontified t) 392 400 (face font-lock-type-face fontified t) 400 403 (fontified t) 403 409 (fontified t) 409 410 (fontified t) 410 411 (fontified t) 411 419 (fontified t) 419 420 (fontified t) 420 421 (fontified t) 421 427 (fontified t) 427 428 (fontified t) 428 429 (fontified t) 429 430 (fontified t)) . 1279) (undo-tree-id2732 . -429) (undo-tree-id2733 . -429) (undo-tree-id2734 . -429) (undo-tree-id2735 . -322) (undo-tree-id2736 . -255) (undo-tree-id2737 . -377) (undo-tree-id2738 . -429) (undo-tree-id2739 . -429) (undo-tree-id2740 . -429) (undo-tree-id2741 . -429) (undo-tree-id2742 . -430) 1708 (t 25815 31141 95422 450000)) nil (25815 31481 108278 749000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1276) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (#("
" 0 1 (fontified t)) . -1277) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (#("
" 0 1 (fontified t rear-nonsticky t)) . -1278) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) 1279 (1279 . 1280) (t 25815 31481 135480 787000)) nil (25815 31487 426595 787000) 0 nil])
([nil nil ((1277 . 1278)) nil (25815 31487 426117 179000) 0 nil])
([nil nil ((278 . 293) (277 . 278) (t 25815 31487 448814 964000)) nil (25815 31530 442648 452000) 0 nil])
([nil nil ((282 . 294) (#("impl_display" 0 12 (fontified nil)) . 282) (282 . 294) (#("impl_display" 0 12 (face font-lock-constant-face fontified t)) . -282) (undo-tree-id2858 . -5) (undo-tree-id2859 . -5) (undo-tree-id2860 . -5) (undo-tree-id2861 . -5) (undo-tree-id2862 . -5) (undo-tree-id2863 . -5) (undo-tree-id2864 . -5) (undo-tree-id2865 . -5) (undo-tree-id2866 . -5) (undo-tree-id2867 . -5) (undo-tree-id2868 . -5) (undo-tree-id2869 . -5) (undo-tree-id2870 . -12) (undo-tree-id2871 . -12) (undo-tree-id2872 . -5) (undo-tree-id2873 . -5) (undo-tree-id2874 . -5) (undo-tree-id2875 . -5) (undo-tree-id2876 . -5) (undo-tree-id2877 . -5) (undo-tree-id2878 . -5) (undo-tree-id2879 . -5) (undo-tree-id2880 . -5) (undo-tree-id2881 . -5) (undo-tree-id2882 . -11) (undo-tree-id2883 . -12) (undo-tree-id2884 . -12) (undo-tree-id2885 . -12) (undo-tree-id2886 . -12) (undo-tree-id2887 . -12) (undo-tree-id2888 . -12) (undo-tree-id2889 . -12) (undo-tree-id2890 . -12) 294 (287 . 294) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -287) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -288) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -289) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -290) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -291) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) 292) nil (25815 31530 442630 277000) 0 nil])
([nil nil ((#("impl Display for Context {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
		use Context::*;
        match self {
			Log(logctx) => write!(f, \"{logctx}\"),
		}
    }
}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 24 (face font-lock-type-face fontified t) 24 31 (fontified t) 31 33 (face font-lock-keyword-face fontified t) 33 34 (fontified t) 34 37 (face font-lock-function-name-face fontified t) 37 38 (fontified t) 38 39 (face rust-ampersand-face fontified t) 39 43 (face font-lock-keyword-face fontified t) 43 45 (fontified t) 45 46 (face font-lock-variable-name-face fontified t) 46 48 (fontified t) 48 49 (face rust-ampersand-face fontified t) 49 52 (face font-lock-keyword-face fontified t) 52 53 (fontified t) 53 56 (face font-lock-constant-face fontified t) 56 58 (fontified t) 58 67 (face font-lock-type-face fontified t) 67 68 (fontified t) 68 69 (fontified t) 69 70 (face font-lock-variable-name-face fontified t) 70 71 (fontified t) 71 74 (fontified t) 74 75 (syntax-table (1) fontified t) 75 76 (fontified t) 76 79 (face font-lock-constant-face fontified t) 79 81 (fontified t) 81 87 (face font-lock-type-face fontified t) 87 92 (fontified t) 92 95 (face font-lock-keyword-face fontified t) 95 96 (fontified t) 96 103 (face font-lock-type-face fontified t) 103 116 (fontified t) 116 121 (face font-lock-keyword-face fontified t) 121 122 (fontified t) 122 126 (face font-lock-keyword-face fontified t) 126 129 (fontified t) 129 132 (fontified t) 132 135 (face font-lock-type-face fontified t) 135 145 (fontified t) 145 146 (syntax-table (1) fontified t) 146 147 (fontified t) 147 153 (face rust-builtin-formatting-macro fontified t) 153 157 (fontified t) 157 158 (face font-lock-string-face fontified t) 158 166 (face rust-string-interpolation fontified t) 166 167 (face font-lock-string-face fontified t) 167 169 (fontified t) 169 170 (fontified t) 170 180 (fontified t) 180 182 (fontified t) 182 183 (fontified t)) . 912) (undo-tree-id3026 . -182) (undo-tree-id3027 . -182) (undo-tree-id3028 . -182) (undo-tree-id3029 . -183) (undo-tree-id3030 . -2) (undo-tree-id3031 . -182) 1094 (t 25815 31530 462153 868000)) nil (25815 32026 885750 936000) 0 nil])
([nil nil ((#("impl Display for InternalError {
	fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
		use InternalError::*;
		match self {
			SerenityError(err) => write!(f, \"serenity error: {err}\")
		}
	}
}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 30 (face font-lock-type-face fontified t) 30 33 (fontified t) 33 34 (fontified t) 34 36 (face font-lock-keyword-face fontified t) 36 37 (fontified t) 37 40 (face font-lock-function-name-face fontified t) 40 41 (fontified t) 41 42 (face rust-ampersand-face fontified t) 42 46 (face font-lock-keyword-face fontified t) 46 48 (fontified t) 48 49 (face font-lock-variable-name-face fontified t) 49 51 (fontified t) 51 52 (face rust-ampersand-face fontified t) 52 55 (face font-lock-keyword-face fontified t) 55 56 (fontified t) 56 59 (face font-lock-constant-face fontified t) 59 61 (fontified t) 61 70 (face font-lock-type-face fontified t) 70 71 (fontified t) 71 72 (fontified t) 72 73 (face font-lock-variable-name-face fontified t) 73 74 (fontified t) 74 77 (fontified t) 77 78 (fontified t syntax-table (1)) 78 79 (fontified t) 79 82 (face font-lock-constant-face fontified t) 82 84 (fontified t) 84 90 (face font-lock-type-face fontified t) 90 93 (fontified t) 93 95 (fontified t) 95 98 (face font-lock-keyword-face fontified t) 98 99 (fontified t) 99 112 (face font-lock-type-face fontified t) 112 116 (fontified t) 116 117 (fontified t) 117 119 (fontified t) 119 124 (face font-lock-keyword-face fontified t) 124 125 (fontified t) 125 129 (face font-lock-keyword-face fontified t) 129 132 (fontified t) 132 135 (fontified t) 135 148 (face font-lock-type-face fontified t) 148 155 (fontified t) 155 156 (fontified t syntax-table (1)) 156 157 (fontified t) 157 163 (face rust-builtin-formatting-macro fontified t) 163 167 (fontified t) 167 184 (face font-lock-string-face fontified t) 184 189 (face rust-string-interpolation fontified t) 189 190 (face font-lock-string-face fontified t) 190 191 (fontified t) 191 192 (fontified t) 192 195 (fontified t) 195 196 (fontified t) 196 198 (fontified t) 198 199 (fontified t) 199 200 (fontified t) 200 201 (fontified t)) . 912) (undo-tree-id3016 . -201) (undo-tree-id3017 . -201) (undo-tree-id3018 . -200) (undo-tree-id3019 . -199) (undo-tree-id3020 . -199) (undo-tree-id3021 . -199) (undo-tree-id3022 . -199) (undo-tree-id3023 . -155) (undo-tree-id3024 . -1) (undo-tree-id3025 . -201) 1113) nil (25815 32026 885732 958000) 0 nil])
([nil nil ((381 . 389) (#("OptError" 0 8 (fontified nil)) . 381) (381 . 389) (#("OptError" 0 8 (face font-lock-type-face fontified t)) . -381) (undo-tree-id3045 . -2) (undo-tree-id3046 . -8) (undo-tree-id3047 . -8) 389 (383 . 389) (#("E" 0 1 (face font-lock-type-face fontified t)) . -383) (undo-tree-id3048 . -1) 384 (383 . 384) (#("t" 0 1 (face font-lock-type-face fontified t)) . -383) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -384) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -385) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -386) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) 387 (t 25815 32026 898868 652000)) nil (25815 32142 372494 353000) 0 nil])
([nil nil ((474 . 478) (t 25815 32144 322210 508000)) nil (25815 32189 334016 949000) 0 nil] [nil nil ((#("pub struct OptError<T>(Option<T>);
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 19 (face font-lock-type-face fontified t) 19 20 (fontified t) 20 21 (face font-lock-type-face fontified t) 21 23 (fontified t) 23 29 (face font-lock-type-face fontified t) 29 30 (fontified t) 30 31 (face font-lock-type-face fontified t) 31 32 (fontified t) 32 34 (fontified t) 34 35 (fontified t)) . 451) (undo-tree-id3042 . -34) (undo-tree-id3043 . -34) (undo-tree-id3044 . -33) 484) ((451 . 486)) (25815 32141 460999 563000) 0 nil])
([nil nil ((822 . 824) (814 . 822) (#("LogError" 0 8 (fontified nil)) . -814) (814 . 822) (802 . 814) (#("l" 0 1 (fontified t)) . -802) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (#("o" 0 1 (fontified t)) . -803) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (#("g" 0 1 (fontified t)) . -804) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (#(":" 0 1 (fontified t)) . -805) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (#(":" 0 1 (fontified t)) . -806) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (#("L" 0 1 (face font-lock-type-face fontified t)) . -807) (undo-tree-id3081 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -808) (undo-tree-id3082 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -809) (undo-tree-id3083 . -1) 810 (807 . 810) (#("L" 0 1 (face font-lock-type-face fontified t)) . -807) (undo-tree-id3084 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -808) (undo-tree-id3085 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -809) (undo-tree-id3086 . -1) 810 (809 . 810) (#("g" 0 1 (face font-lock-type-face fontified t)) . -809) (undo-tree-id3087 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -810) (undo-tree-id3088 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -811) (undo-tree-id3089 . -1) 812 (798 . 812) (797 . 798) (#("	" 0 1 (fontified nil)) . 796) (undo-tree-id3090 . -1) (797 . 798) (#("L" 0 1 (face font-lock-type-face fontified t)) . -797) (undo-tree-id3091 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -798) (undo-tree-id3092 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -799) (undo-tree-id3093 . -1) 800 (797 . 800) (#("L" 0 1 (face font-lock-type-face fontified t)) . -797) (undo-tree-id3094 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -798) (undo-tree-id3095 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -799) (undo-tree-id3096 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -800) (undo-tree-id3097 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -801) (undo-tree-id3098 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -802) (undo-tree-id3099 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -803) (undo-tree-id3100 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -804) (undo-tree-id3101 . -1) 805 (797 . 805) (795 . 797) (t 25815 32189 338880 257000)) nil (25815 52890 785949 736000) 0 nil])
([nil nil ((486 . 493) (484 . 486) (480 . 484) (468 . 471) (#("<" 0 1 (fontified t)) . -467) (undo-tree-id3032 . -1) (undo-tree-id3034 . -1) (undo-tree-id3036 . -1) 468 (467 . 468) (472 . 477) (470 . 472) (#("	" 0 1 (fontified nil)) . -471) (undo-tree-id3038 . -1) (undo-tree-id3040 . -1) (472 . 473) (470 . 472) (463 . 470) (451 . 463) (450 . 451)) ((#("
" 0 1 (fontified t)) . 450) (#("pub enum Opt" 0 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 12 (face font-lock-type-face fontified nil)) . 451) (#("Error {" 0 4 (face font-lock-type-face fontified nil) 4 5 (face font-lock-type-face fontified nil) 5 7 (fontified nil)) . 463) (#("
	" 0 1 (fontified nil) 1 2 (fontified nil)) . 470) (undo-tree-id3060 . 2) (#("}" 0 1 (fontified nil)) . 472) (471 . 472) (#("
	" 0 1 (fontified nil) 1 2 (fontified nil)) . 470) (#("Error" 0 5 (face font-lock-type-face fontified nil)) . 472) (#("<" 0 1 (fontified nil)) . 467) (467 . 468) (#("<E>" 0 1 (fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (fontified t)) . 468) (#("(E)," 0 1 (fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 4 (fontified nil)) . 480) (#("
	" 0 1 (fontified t) 1 2 (fontified nil)) . 484) (#("NoError" 0 7 (face font-lock-type-face fontified t)) . 486) (t 25815 32084 678872 937000)) (25815 32084 659752 633000) 0 nil])
([nil nil ((352 . 356) (299 . 301) (297 . 299) (t 25815 52890 790343 99000)) nil (25815 53135 307155 336000) 0 nil])
nil
([nil nil ((665 . 666) (660 . 665) (#("Error" 0 5 (fontified nil)) . -660) (660 . 665) (658 . 660) (#(":" 0 1 (fontified t)) . -658) (undo-tree-id3102 . -1) (#(":" 0 1 (fontified t)) . -659) (undo-tree-id3103 . -1) (#("t" 0 1 (fontified t)) . -660) (undo-tree-id3104 . -1) (#("y" 0 1 (fontified t)) . -661) (undo-tree-id3105 . -1) (#("p" 0 1 (fontified t)) . -662) (undo-tree-id3106 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -663) (undo-tree-id3107 . -1) (#("s" 0 1 (fontified t)) . -664) (undo-tree-id3108 . -1) (#(":" 0 1 (fontified t)) . -665) (undo-tree-id3109 . -1) (#(":" 0 1 (fontified t)) . -666) (undo-tree-id3110 . -1) 667 (656 . 667) (117 . 120) (106 . 117) (105 . 106) (#("c" 0 1 (fontified t)) . -641) (undo-tree-id3111 . -1) (#("r" 0 1 (fontified t)) . -642) (undo-tree-id3112 . -1) (#("a" 0 1 (fontified t)) . -643) (undo-tree-id3113 . -1) (#("t" 0 1 (fontified t)) . -644) (undo-tree-id3114 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -645) (undo-tree-id3115 . -1) (#(":" 0 1 (fontified t)) . -646) (undo-tree-id3116 . -1) (#(":" 0 1 (fontified t)) . -647) (undo-tree-id3117 . -1) (#("p" 0 1 (fontified t)) . -648) (undo-tree-id3118 . -1) (#("g" 0 1 (fontified t)) . -649) (undo-tree-id3119 . -1) 650 (641 . 650) (#("s" 0 1 (fontified t)) . -641) (undo-tree-id3120 . -1) (#("e" 0 1 (fontified t)) . -642) (undo-tree-id3121 . -1) (#("r" 0 1 (fontified t)) . -643) (undo-tree-id3122 . -1) 644 (640 . 644) (#("(" 0 1 (fontified t)) . -640) (undo-tree-id3123 . -1) 641 (627 . 641) (625 . 627) (t 25815 53135 326909 888000)) nil (25815 53378 228332 87000) 0 nil])
([nil nil ((702 . 703) (692 . 701) (apply yas--snippet-revive 683 693 #s(yas--snippet nil nil #s(yas--exit 692 nil) 120 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 692 nil) 120 nil nil nil nil)) (683 . 693) (#("RunError<$0>" 0 12 (fontified nil)) . 683) (683 . 695) (#("Run" 0 3 (fontified nil)) . 683) (683 . 686) (#("RunError<…>" 0 11 (fontified nil)) . -683) (683 . 694) (#("Run" 0 3 (face font-lock-type-face fontified t)) . -683) (undo-tree-id3124 . -3) 686 (679 . 686) (678 . 679) (#("p" 0 1 (fontified t)) . -678) (undo-tree-id3125 . -1) (#("g" 0 1 (fontified t)) . -679) (undo-tree-id3126 . -1) 680 (678 . 680) (#("p" 0 1 (fontified t)) . -678) (undo-tree-id3127 . -1) 679 (670 . 679) (#("B" 0 1 (face font-lock-type-face fontified t)) . -670) (undo-tree-id3128 . -1) 671 (669 . 671) (667 . 669) (666 . 667) (t 25815 53378 243338 149000)) nil (25815 55663 807162 924000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -1059) (undo-tree-id3129 . -1) 1060 (1059 . 1064) (1058 . 1061) (1051 . 1058) (1049 . 1051) (#("	" 0 1 (fontified nil)) . -1050) (undo-tree-id3130 . -1) (1051 . 1052) (1049 . 1051) (1047 . 1049) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1047) (undo-tree-id3131 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -1048) (undo-tree-id3132 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1049) (undo-tree-id3133 . -1) 1050 (1047 . 1050) (#("
" 0 1 (fontified t)) . -1032) (undo-tree-id3134 . -1) (#("/" 0 1 (fontified t)) . -1033) (undo-tree-id3135 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1034) (undo-tree-id3136 . -1) (#("/" 0 1 (face font-lock-doc-face fontified t)) . -1035) (undo-tree-id3137 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -1036) (undo-tree-id3138 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -1037) (undo-tree-id3139 . -1) (#("q" 0 1 (face font-lock-doc-face fontified t)) . -1038) (undo-tree-id3140 . -1) (#("u" 0 1 (face font-lock-doc-face fontified t)) . -1039) (undo-tree-id3141 . -1) 1040 (1037 . 1040) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -1037) (undo-tree-id3142 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -1038) (undo-tree-id3143 . -1) 1039 (1035 . 1039) (#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1035) (undo-tree-id3144 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -1036) (undo-tree-id3145 . -1) (#("h" 0 1 (face font-lock-comment-face fontified t)) . -1037) (undo-tree-id3146 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -1038) (undo-tree-id3147 . -1) 1039 (1033 . 1039) (1032 . 1033) (1033 . 1047) (#("t" 0 1 (fontified t)) . -1033) (undo-tree-id3148 . -1) (#("r" 0 1 (fontified t)) . -1034) (undo-tree-id3149 . -1) (#("a" 0 1 (fontified t)) . -1035) (undo-tree-id3150 . -1) 1036 (#("i" 0 1 (fontified t)) . -1036) (undo-tree-id3151 . -1) 1037 (1033 . 1037) (1032 . 1033) (t 25815 55663 819160 859000)) nil (25815 56293 472273 835000) 0 nil])
([nil nil ((1061 . 1063) (#("]" 0 1 (face font-lock-doc-face fontified t)) . -1061) (undo-tree-id3152 . -1) 1062 (1060 . 1062) (1048 . 1060) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -1048) (undo-tree-id3153 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -1049) (undo-tree-id3154 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -1050) (undo-tree-id3155 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -1051) (undo-tree-id3156 . -1) 1052 (1033 . 1052) (1032 . 1033) (t 25815 56293 495692 923000)) nil (25815 56306 548175 472000) 0 nil])
([nil nil ((1119 . 1129) (#("N" 0 1 (face font-lock-doc-face fontified t)) . -1119) (undo-tree-id3160 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -1120) (undo-tree-id3161 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -1121) (undo-tree-id3162 . -1) (#(":" 0 1 (face font-lock-doc-face fontified t)) . -1122) (undo-tree-id3163 . -1) 1123 (1117 . 1123) (1108 . 1109) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1108) (undo-tree-id3164 . -1) 1109 (1105 . 1109) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . 1104) (undo-tree-id3165 . -1) (1105 . 1106) (1105 . 1106) (1109 . 1112) (1088 . 1109) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -1088) (undo-tree-id3166 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -1089) (undo-tree-id3167 . -1) 1090 (1088 . 1090) (1084 . 1088) (1063 . 1084) (#("M" 0 1 (face font-lock-doc-face fontified t)) . -1057) (undo-tree-id3168 . -1) (#("E" 0 1 (face font-lock-doc-face fontified t)) . -1058) (undo-tree-id3169 . -1) (#("I" 0 1 (face font-lock-doc-face fontified t)) . -1059) (undo-tree-id3170 . -1) 1060 (1057 . 1060) (t 25815 56306 569023 110000)) nil (25815 56385 9322 479000) 0 nil])
([nil nil ((1178 . 1179) (1157 . 1178) (#(":" 0 1 (fontified t)) . -1157) (undo-tree-id3157 . -1) (#(" " 0 1 (fontified t)) . -1158) (undo-tree-id3158 . -1) 1159 (#("k" 0 1 (fontified t)) . -1159) (undo-tree-id3159 . -1) 1160 (1155 . 1160)) nil (25815 56385 9285 133000) 0 nil])
([nil nil ((1171 . 1184) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1171) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (#(":" 0 1 (fontified t)) . -1172) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (#(" " 0 1 (fontified t)) . -1173) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -1174) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1175) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1176) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1177) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) 1178 (1164 . 1178) (#(" " 0 1 (fontified t)) . -1158) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (#("w" 0 1 (fontified t)) . -1159) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (#("h" 0 1 (fontified t)) . -1160) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (#("e" 0 1 (fontified t)) . -1161) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (#("r" 0 1 (fontified t)) . -1162) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -1163) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (#(" " 0 1 (fontified t)) . -1164) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1165) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1166) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1167) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1168) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (#(":" 0 1 (fontified t)) . -1169) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (#(" " 0 1 (fontified t)) . -1170) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (#("I" 0 1 (face font-lock-type-face fontified nil)) . -1171) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1172) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1173) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1174) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (#("<" 0 1 (fontified t)) . -1175) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1176) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (#(">" 0 1 (fontified t)) . -1177) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (#(" " 0 1 (fontified t)) . -1178) (undo-tree-id3243 . -1) 1179 (t 25815 56385 19004 85000)) nil (25815 56404 229008 380000) 0 nil])
([nil nil ((1184 . 1189) (#("Error" 0 5 (fontified nil)) . 1184) (1184 . 1189) (#("Error" 0 5 (face font-lock-variable-name-face fontified t)) . -1184) (undo-tree-id3244 . -5) (undo-tree-id3245 . -5) (undo-tree-id3246 . -5) (undo-tree-id3247 . -5) (undo-tree-id3248 . -5) (undo-tree-id3249 . -5) (undo-tree-id3250 . -5) (undo-tree-id3251 . -5) (undo-tree-id3252 . -5) 1189 (1187 . 1189) (1184 . 1187) (#("S" 0 1 (face font-lock-variable-name-face fontified t)) . -1184) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -1185) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -1186) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (#("f" 0 1 (face font-lock-variable-name-face fontified t)) . -1187) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) 1188 (#("	" 0 1 (fontified nil)) . -1237) (undo-tree-id3261 . -1) (1238 . 1239) (1236 . 1238) (1234 . 1236) (1230 . 1233) (1208 . 1211) (#(" " 0 1 (fontified t)) . -1208) (undo-tree-id3262 . -1) 1209 (1208 . 1209) (1153 . 1159) (#("I" 0 1 (face font-lock-type-face fontified t)) . -1153) (undo-tree-id3263 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1154) (undo-tree-id3264 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1155) (undo-tree-id3265 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1156) (undo-tree-id3266 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1157) (undo-tree-id3267 . -1) (#(";" 0 1 (fontified t)) . -1158) (undo-tree-id3268 . -1) 1159 (1148 . 1159) (1146 . 1148) (1212 . 1215) (#(" " 0 1 (fontified t)) . -1212) (undo-tree-id3269 . -1) 1213 (1212 . 1213) (1193 . 1196) (1199 . 1209) (#("o" 0 1 (fontified t)) . -1199) (undo-tree-id3270 . -1) (#("n" 0 1 (fontified t)) . -1200) (undo-tree-id3271 . -1) (#(" " 0 1 (fontified t)) . -1201) (undo-tree-id3272 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -1202) (undo-tree-id3273 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1203) (undo-tree-id3274 . -1) 1204 (1189 . 1204) (1188 . 1189) (t 25815 56404 242332 716000)) nil (25815 56477 731138 929000) 0 nil])
([nil nil ((1239 . 1240)) nil (25815 56477 731054 665000) 0 nil])
([nil nil ((1223 . 1232) (#("StdResult" 0 3 (fontified nil) 3 9 (face font-lock-type-face fontified nil)) . 1223) (undo-tree-id3275 . 6) (1223 . 1226) (#("StdResult" 0 9 (fontified nil)) . -1223) (1223 . 1232) (#("Std" 0 3 (face font-lock-type-face fontified t)) . -1223) (undo-tree-id3276 . -3) (undo-tree-id3277 . -3) (undo-tree-id3278 . -3) (undo-tree-id3279 . -3) (undo-tree-id3280 . -3) (undo-tree-id3281 . -3) (undo-tree-id3282 . -3) 1226 (1223 . 1226) (t 25815 56477 735647 961000)) nil (25815 56485 525162 36000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1283) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (1284 . 1285) (1281 . 1284) (1271 . 1281) (1258 . 1271) (#(" " 0 1 (fontified t)) . -1258) (undo-tree-id3336 . -1) (#("w" 0 1 (fontified t)) . -1259) (undo-tree-id3337 . -1) (#("h" 0 1 (fontified t)) . -1260) (undo-tree-id3338 . -1) (#("e" 0 1 (fontified t)) . -1261) (undo-tree-id3339 . -1) (#("r" 0 1 (fontified t)) . -1262) (undo-tree-id3340 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -1263) (undo-tree-id3341 . -1) (#(" " 0 1 (fontified t)) . -1264) (undo-tree-id3342 . -1) 1265 (1263 . 1265) (1242 . 1263) (1240 . 1242) (t 25815 56485 535646 25000)) nil (25815 56545 929256 837000) 0 nil])
([nil nil ((1339 . 1340) (#("s" 0 1 (fontified t)) . -1339) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (#("e" 0 1 (fontified t)) . -1340) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (#("l" 0 1 (fontified t)) . -1341) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1342) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) 1343 (apply yas--snippet-revive 1306 1345 #s(yas--snippet nil (#s(yas--field 1 1314 1344 nil nil nil t #s(yas--exit 1345 nil))) #s(yas--exit 1345 nil) 129 nil #s(yas--field 1 1314 1344 nil nil nil t #s(yas--exit 1345 nil)) nil nil)) (apply yas--snippet-revive 1334 1344 #s(yas--snippet nil (#s(yas--field 1 1339 1343 nil nil nil nil #s(yas--exit 1344 nil))) #s(yas--exit 1344 nil) 130 nil #s(yas--field 1 1339 1343 nil nil nil nil #s(yas--exit 1344 nil)) #s(yas--field 1 1314 1344 nil nil nil t #s(yas--exit 1345 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1339 1343 nil nil nil nil #s(yas--exit 1344 nil))) #s(yas--exit 1344 nil) 130 nil #s(yas--field 1 1339 1343 nil nil nil nil #s(yas--exit 1344 nil)) #s(yas--field 1 1314 1344 nil nil nil t #s(yas--exit 1345 nil)) nil)) (1334 . 1344) (#("into(${1:self})$0" 0 17 (fontified nil)) . 1334) (undo-tree-id3322 . -17) (1334 . 1351) (#("into(…) (as Into)" 0 17 (fontified nil)) . -1334) (undo-tree-id3323 . -17) (1334 . 1351) (1325 . 1334) (1314 . 1325) (#("I" 0 1 (face font-lock-type-face fontified t)) . -1314) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1315) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) 1316 (1315 . 1316) (#("op" 0 2 (fontified nil)) . 1315) (undo-tree-id3330 . -2) (1314 . 1315) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1314 1344 nil nil nil t #s(yas--exit 1345 nil))) #s(yas--exit 1345 nil) 129 nil #s(yas--field 1 1314 1344 nil nil nil t #s(yas--exit 1345 nil)) nil nil)) (1306 . 1317) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 1306) (1306 . 1324) (#("map" 0 3 (fontified nil)) . 1306) (1306 . 1309) (#("map_err(…)" 0 10 (fontified nil)) . -1306) (1306 . 1316) (#("map" 0 3 (fontified t)) . -1306) (undo-tree-id3331 . -3) 1309 (1301 . 1309) (1298 . 1301) (1242 . 1257) (1240 . 1242)) nil (25815 56545 929238 963000) 0 nil])
([nil nil ((1319 . 1320) (#("e" 0 1 (fontified t)) . -1319) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) 1320 (t 25815 56545 942297 685000)) nil (25815 56558 163447 325000) 0 nil])
([nil nil ((1325 . 1330) (#("Error (as MEII)" 0 15 (fontified nil)) . -1325) (1325 . 1340) (1319 . 1325) (1320 . 1324) (t 25815 56558 175627 963000)) nil (25815 56568 970499 721000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -1325) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1326) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1327) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1328) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1329) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) 1330) nil (25815 56568 970493 936000) 0 nil])
([nil nil ((1208 . 1209) (#(" " 0 1 (fontified nil)) . 1207) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (1208 . 1209) (1214 . 1220) (1195 . 1208) (1161 . 1173) (1159 . 1161) (1178 . 1181) (t 25815 56568 985625 262000)) nil (25815 56625 789496 963000) 0 nil])
([nil nil ((1320 . 1325) (1319 . 1320) (t 25815 56625 812277 695000)) nil (25815 56630 153456 118000) 0 nil])
([nil nil ((1320 . 1323) (apply yas--snippet-revive 1310 1321 #s(yas--snippet nil nil #s(yas--exit 1320 nil) 131 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1320 nil) 131 nil nil nil nil)) (1310 . 1321) (#("StdResult<$0>" 0 13 (fontified nil)) . 1310) (1310 . 1323) (#("StdRes" 0 6 (fontified nil)) . 1310) (1310 . 1316) (#("StdResult<…>" 0 12 (fontified nil)) . -1310) (1310 . 1322) (#("StdRes" 0 6 (face font-lock-type-face fontified t)) . -1310) (undo-tree-id3417 . -6) 1316 (1314 . 1316) (1296 . 1314) (1294 . 1296) (1313 . 1314) (#(" " 0 1 (fontified nil)) . 1312) (undo-tree-id3418 . -1) (1313 . 1314) (t 25815 56630 168943 262000)) nil (25815 56788 681464 855000) 0 nil])
([nil nil ((1172 . 1175)) nil (25815 56788 681449 511000) 0 nil])
([nil nil ((1210 . 1213) (t 25815 56788 692236 400000)) nil (25815 56796 731782 469000) 0 nil])
([nil nil ((1336 . 1337) (1333 . 1335) (1315 . 1316) (1329 . 1332) (apply yas--snippet-revive 1319 1330 #s(yas--snippet nil nil #s(yas--exit 1329 nil) 132 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1329 nil) 132 nil nil nil nil)) (1319 . 1330) (#("StdResult<$0>" 0 13 (fontified nil)) . 1319) (1319 . 1332) (#("StdRes" 0 6 (fontified nil)) . 1319) (1319 . 1325) (#("StdResult<…>" 0 12 (fontified nil)) . -1319) (1319 . 1331) (#("StdRes" 0 6 (face font-lock-type-face fontified t)) . -1319) (undo-tree-id3419 . -6) 1325 (1323 . 1325) (1320 . 1323) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1320) (undo-tree-id3420 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified nil)) . -1321) (undo-tree-id3421 . -1) (#("f" 0 1 (face font-lock-variable-name-face fontified nil)) . -1322) (undo-tree-id3422 . -1) (#(":" 0 1 (fontified t)) . -1323) (undo-tree-id3423 . -1) (#(":" 0 1 (fontified t)) . -1324) (undo-tree-id3424 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1325) (undo-tree-id3425 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1326) (undo-tree-id3426 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1327) (undo-tree-id3427 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1328) (undo-tree-id3428 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1329) (undo-tree-id3429 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1330) (undo-tree-id3430 . -1) (#("<" 0 1 (fontified t)) . -1331) (undo-tree-id3431 . -1) 1332 (1314 . 1315) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1314) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) 1315 (1323 . 1332) (1313 . 1323) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1313) (undo-tree-id3434 . -1) 1314 (1313 . 1314) (#(" " 0 1 (fontified t)) . -1313) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (#("=" 0 1 (fontified t)) . -1314) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (#(" " 0 1 (fontified t)) . -1315) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1316) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1317) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1318) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -1319) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1320) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1321) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1322) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1323) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1324) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (#("<" 0 1 (fontified t)) . -1325) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1326) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (#("," 0 1 (fontified t)) . -1327) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (#(" " 0 1 (fontified t)) . -1328) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (#(">" 0 1 (fontified t)) . -1329) (undo-tree-id3480 . -1) 1330 (t 25815 56796 738901 3000)) nil (25815 56830 33898 568000) 0 nil])
([nil nil ((1372 . 1377) (1347 . 1349) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1347) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) 1348 (1365 . 1371) (#("Output" 0 6 (fontified nil)) . 1365) (1365 . 1371) (#("Output (as MEII)" 0 16 (fontified nil)) . -1365) (1365 . 1381) (#("Output" 0 6 (face font-lock-type-face fontified t)) . -1365) (undo-tree-id3485 . -6) 1371 (1358 . 1371) (1355 . 1358) (t 25815 56830 48892 477000)) nil (25815 56858 608978 351000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1376) (undo-tree-id3481 . -1) 1377) nil (25815 56858 608969 493000) 0 nil])
([nil nil ((1447 . 1449) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1447) (undo-tree-id3486 . -1) 1448 (t 25815 56858 625551 821000)) nil (25815 56899 139335 393000) 0 nil])
([nil nil ((1402 . 1404) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1402) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) 1403 (t 25815 56899 148874 737000)) nil (25815 57143 661358 237000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1242) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) 1243 (1242 . 1243) (t 25815 57143 672144 656000)) nil (25815 57154 59767 924000) 0 nil])
([nil nil ((717 . 733) (#("a" 0 1 (face font-lock-type-face fontified t)) . -717) (undo-tree-id3501 . -1) 718 (706 . 718) (704 . 706) (703 . 704) (t 25815 57154 65475 287000)) nil (25815 57227 183 679000) 0 nil])
([nil nil ((#("/// trait just adds a [`meii`][MEII::meii] method that is equivalent to
/// .map_err(Into::into)
pub trait MEII {
	type Error;
	type Output<T>;
	fn meii<T>(self) -> Self::Output<T>
	where Self::Error: Into<T>;
}

impl<T, E> MEII for StdResult<T, E> {
	type Error = E;
	type Output<E1> = StdResult<T, E1>;
	fn meii<E1>(self) -> Self::Output<E1>
	where Self::Error: Into<E1> {
		self.map_err(|e| <Self::Error as Into<E1>>::into(e))
	}
}
" 0 72 (face font-lock-doc-face fontified t) 72 76 (face font-lock-doc-face fontified t) 76 96 (face font-lock-doc-face fontified t) 96 97 (face font-lock-doc-face fontified t) 97 100 (face font-lock-keyword-face fontified t) 100 101 (fontified t) 101 106 (face font-lock-keyword-face fontified t) 106 107 (fontified t) 107 111 (face font-lock-type-face fontified t) 111 114 (fontified t) 114 115 (fontified t) 115 119 (face font-lock-keyword-face fontified t) 119 120 (fontified t) 120 125 (face font-lock-type-face fontified t) 125 127 (fontified t) 127 128 (fontified t) 128 132 (face font-lock-keyword-face fontified t) 132 133 (fontified t) 133 139 (face font-lock-type-face fontified t) 139 140 (fontified t) 140 141 (face font-lock-type-face fontified t) 141 142 (fontified t) 142 143 (fontified t) 143 144 (fontified t) 144 145 (fontified t) 145 147 (face font-lock-keyword-face fontified t) 147 148 (fontified t) 148 152 (face font-lock-function-name-face fontified t) 152 153 (fontified t) 153 154 (face font-lock-type-face fontified t) 154 155 (fontified t) 155 156 (fontified t) 156 160 (face font-lock-keyword-face fontified t) 160 163 (fontified t) 163 164 (fontified t syntax-table (1)) 164 165 (fontified t) 165 169 (face font-lock-type-face fontified t) 169 171 (fontified t) 171 177 (face font-lock-type-face fontified t) 177 178 (fontified t) 178 179 (face font-lock-type-face fontified t) 179 180 (fontified t) 180 181 (fontified t) 181 182 (fontified t) 182 187 (face font-lock-keyword-face fontified t) 187 188 (fontified t) 188 192 (face font-lock-type-face fontified t) 192 194 (fontified t) 194 195 (face font-lock-variable-name-face fontified t) 195 199 (face font-lock-variable-name-face fontified t) 199 201 (fontified t) 201 205 (face font-lock-type-face fontified t) 205 206 (fontified t) 206 207 (face font-lock-type-face fontified t) 207 208 (fontified t) 208 209 (fontified t) 209 210 (fontified t) 210 211 (fontified t) 211 212 (fontified t) 212 213 (fontified t) 213 217 (face font-lock-keyword-face fontified t) 217 218 (fontified t) 218 219 (face font-lock-type-face fontified t) 219 221 (fontified t) 221 222 (face font-lock-type-face fontified t) 222 223 (fontified t) 223 224 (fontified t) 224 228 (face font-lock-type-face fontified t) 228 229 (fontified t) 229 232 (face font-lock-keyword-face fontified t) 232 233 (fontified t) 233 242 (face font-lock-type-face fontified t) 242 243 (fontified t) 243 244 (face font-lock-type-face fontified t) 244 246 (fontified t) 246 247 (face font-lock-type-face fontified t) 247 251 (fontified t) 251 252 (fontified t) 252 256 (face font-lock-keyword-face fontified t) 256 257 (fontified t) 257 262 (face font-lock-type-face fontified t) 262 265 (fontified t) 265 266 (face font-lock-type-face fontified t) 266 268 (fontified t) 268 269 (fontified t) 269 273 (face font-lock-keyword-face fontified t) 273 274 (fontified t) 274 280 (face font-lock-type-face fontified t) 280 281 (fontified t) 281 283 (face font-lock-type-face fontified t) 283 287 (fontified t) 287 296 (face font-lock-type-face fontified t) 296 297 (fontified t) 297 298 (face font-lock-type-face fontified t) 298 300 (fontified t) 300 302 (face font-lock-type-face fontified t) 302 304 (fontified t) 304 305 (fontified t) 305 306 (fontified t) 306 308 (face font-lock-keyword-face fontified t) 308 309 (fontified t) 309 313 (face font-lock-function-name-face fontified t) 313 314 (fontified t) 314 316 (face font-lock-type-face fontified t) 316 318 (fontified t) 318 322 (face font-lock-keyword-face fontified t) 322 325 (fontified t) 325 326 (syntax-table (1) fontified t) 326 327 (fontified t) 327 331 (face font-lock-type-face fontified t) 331 333 (fontified t) 333 339 (face font-lock-type-face fontified t) 339 340 (fontified t) 340 342 (face font-lock-type-face fontified t) 342 343 (fontified t) 343 344 (fontified t) 344 345 (fontified t) 345 350 (face font-lock-keyword-face fontified t) 350 351 (fontified t) 351 355 (face font-lock-type-face fontified t) 355 357 (fontified t) 357 358 (face font-lock-variable-name-face fontified t) 358 362 (face font-lock-variable-name-face fontified t) 362 364 (fontified t) 364 368 (face font-lock-type-face fontified t) 368 369 (fontified t) 369 371 (face font-lock-type-face fontified t) 371 375 (fontified t) 375 377 (fontified t) 377 381 (face font-lock-keyword-face fontified t) 381 382 (fontified t) 382 395 (fontified t) 395 399 (face font-lock-type-face fontified t) 399 401 (fontified t) 401 406 (face font-lock-type-face fontified t) 406 407 (fontified t) 407 409 (face font-lock-keyword-face fontified t) 409 410 (fontified t) 410 414 (face font-lock-type-face fontified t) 414 415 (fontified t) 415 417 (face font-lock-type-face fontified t) 417 421 (fontified t) 421 427 (fontified t) 427 428 (fontified t) 428 429 (fontified t) 429 430 (fontified t) 430 432 (fontified t) 432 433 (fontified t) 433 434 (fontified t) 434 435 (fontified t)) . 1063) (undo-tree-id3502 . -435) (undo-tree-id3503 . -435) (undo-tree-id3504 . -434) (undo-tree-id3505 . -212) (undo-tree-id3506 . -212) (undo-tree-id3507 . -212) (undo-tree-id3508 . -212) (undo-tree-id3509 . -113) (undo-tree-id3510 . -314) (undo-tree-id3511 . -72) (undo-tree-id3512 . -435) (undo-tree-id3513 . -72) (undo-tree-id3514 . -72) (undo-tree-id3515 . -72) (undo-tree-id3516 . -72) (undo-tree-id3517 . -72) (undo-tree-id3518 . -72) (undo-tree-id3519 . -72) (undo-tree-id3520 . -72) (undo-tree-id3521 . -72) (undo-tree-id3522 . -72) (undo-tree-id3523 . -72) (undo-tree-id3524 . -435) (undo-tree-id3525 . -435) (undo-tree-id3526 . -435) 1498 (t 25815 57227 15445 582000)) nil (25815 58046 463894 131000) 0 nil])
([nil nil ((#("impl DefaultContextualizable for InternalError {}
impl DefaultContextualizable for Error {}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 28 (face font-lock-type-face fontified t) 28 29 (fontified t) 29 32 (face font-lock-keyword-face fontified t) 32 33 (fontified t) 33 46 (face font-lock-type-face fontified t) 46 47 (fontified t) 47 49 (fontified t) 49 50 (fontified t) 50 54 (face font-lock-keyword-face fontified t) 54 55 (fontified t) 55 78 (face font-lock-type-face fontified t) 78 79 (fontified t) 79 82 (face font-lock-keyword-face fontified t) 82 83 (fontified t) 83 88 (face font-lock-type-face fontified t) 88 89 (fontified t) 89 91 (fontified t) 91 92 (fontified t) 92 93 (fontified t)) . 970) (undo-tree-id3546 . -92) (undo-tree-id3547 . -92) (undo-tree-id3548 . 1) (undo-tree-id3549 . -92) (undo-tree-id3550 . -93) (undo-tree-id3551 . -93) (undo-tree-id3552 . -93) (undo-tree-id3553 . -93) (undo-tree-id3554 . -93) (undo-tree-id3555 . -93) (undo-tree-id3556 . -93) (undo-tree-id3557 . -92) (undo-tree-id3558 . -92) (undo-tree-id3559 . -92) (undo-tree-id3560 . -92) (undo-tree-id3561 . -92) (undo-tree-id3562 . -92) (undo-tree-id3563 . -92) (undo-tree-id3564 . -92) (undo-tree-id3565 . -92) (undo-tree-id3566 . -92) (undo-tree-id3567 . -92) (undo-tree-id3568 . -92) (undo-tree-id3569 . -92) (undo-tree-id3570 . -92) (undo-tree-id3571 . -92) (undo-tree-id3572 . -92) (undo-tree-id3573 . -92) (undo-tree-id3574 . -92) (undo-tree-id3575 . -93) (t 25815 58046 491798 119000)) nil (25816 3461 608981 222000) 0 nil])
([nil nil ((1108 . 1109) (1102 . 1107) (apply yas--snippet-revive 1073 1103 #s(yas--snippet nil nil #s(yas--exit 1102 nil) 156 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1102 nil) 156 nil nil nil nil)) (1073 . 1103) (#("impl_contextualizable_error!($0)" 0 32 (fontified nil)) . 1073) (1073 . 1105) (#("impl_con" 0 8 (fontified nil)) . 1073) (1073 . 1081) (#("impl_contextualizable_error!(…)" 0 31 (fontified nil)) . -1073) (1073 . 1104) (#("impl_con" 0 8 (fontified t)) . -1073) (undo-tree-id3527 . -8) (undo-tree-id3528 . -4) (undo-tree-id3529 . -4) (undo-tree-id3530 . -8) (undo-tree-id3531 . -8) (undo-tree-id3532 . -8) (undo-tree-id3533 . -8) (undo-tree-id3534 . -8) 1081 (1080 . 1081) (1073 . 1080) (1072 . 1073) (1071 . 1072) (#("
" 0 1 (fontified t)) . -1071) (undo-tree-id3535 . -1) (#("	" 0 1 (fontified t)) . -1072) (undo-tree-id3536 . -1) 1073 (1071 . 1073) (1057 . 1070) (#("Internal" 0 8 (fontified nil)) . 1057) (1057 . 1065) (#("InternalError" 0 13 (fontified nil)) . -1057) (1057 . 1070) (#("Internal" 0 8 (face font-lock-type-face fontified t)) . -1057) (undo-tree-id3537 . -8) 1065 (1057 . 1065) (273 . 331) (apply yas--snippet-revive 970 1000 #s(yas--snippet nil nil #s(yas--exit 999 nil) 155 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 999 nil) 155 nil nil nil nil)) (970 . 1000) (#("impl_contextualizable_error!($0)" 0 32 (fontified nil)) . 970) (970 . 1002) (#("impl_" 0 5 (fontified nil)) . 970) (970 . 975) (#("impl_contextualizable_error!(…) (use self::contextualizable::impl_contextualizable_error)" 0 89 (fontified nil)) . -970) (970 . 1059) (#("impl_" 0 5 (fontified t)) . -970) (undo-tree-id3538 . -5) (undo-tree-id3539 . -5) 975 (970 . 975) (#("c" 0 1 (fontified t)) . -970) (undo-tree-id3540 . -1) (#("o" 0 1 (fontified t)) . -971) (undo-tree-id3541 . -1) (#("n" 0 1 (fontified t)) . -972) (undo-tree-id3542 . -1) (#("t" 0 1 (fontified t)) . -973) (undo-tree-id3543 . -1) 974 (970 . 974) (#("i" 0 1 (fontified t)) . -970) (undo-tree-id3544 . -1) (#("m" 0 1 (fontified t)) . -971) (undo-tree-id3545 . -1) 972 (970 . 972)) nil (25816 3461 608919 272000) 0 nil])
([nil nil ((1109 . 1110)) nil (25816 3461 608810 152000) 0 nil])
([nil nil ((670 . 672) (651 . 670) (#("Web" 0 3 (fontified nil)) . 651) (651 . 654) (#("WebhookErrorContext" 0 19 (fontified nil)) . -651) (651 . 670) (#("Web" 0 3 (face font-lock-type-face fontified t)) . -651) (undo-tree-id0 . -3) (undo-tree-id1 . -3) (undo-tree-id2 . -3) (undo-tree-id3 . -3) (undo-tree-id4 . -3) 654 (649 . 654) (642 . 649) (#("web" 0 3 (fontified nil)) . 642) (642 . 645) (#("webhook" 0 7 (fontified nil)) . -642) (642 . 649) (#("web" 0 3 (fontified t)) . -642) (undo-tree-id5 . -3) 645 (627 . 645) (625 . 627) (624 . 625) (#("
" 0 1 (fontified t)) . -624) (undo-tree-id6 . -1) (#("	" 0 1 (fontified t)) . -625) (undo-tree-id7 . -1) (#("	" 0 1 (fontified t)) . -626) (undo-tree-id8 . -1) 627 (624 . 627) (t 25816 3461 634902 514000)) nil (25817 24809 455727 638000) 0 nil])
([nil nil ((732 . 734) (709 . 732) (#("ReplicationErrorContext" 0 23 (fontified nil)) . -709) (709 . 732) (707 . 709) (#(";" 0 1 (fontified t)) . -707) (undo-tree-id0 . -1) (#(":" 0 1 (fontified t)) . -708) (undo-tree-id1 . -1) 709 (707 . 709) (693 . 707) (#("msgreplication" 0 14 (fontified nil)) . -693) (693 . 707) (674 . 693) (672 . 674) (t 25817 24809 467462 202000)) nil (25818 9901 60710 287000) 0 nil])
([nil nil ((1264 . 1265) (32 . 62) (1223 . 1223) (1223 . 1234) (#("async" 0 5 (fontified nil)) . 1223) (1223 . 1228) (#("async_trait (use async_trait::async_trait)" 0 42 (fontified nil)) . -1223) (1223 . 1265) (#("async" 0 5 (face font-lock-keyword-face fontified t)) . -1223) (undo-tree-id2 . -5) (undo-tree-id3 . -5) (undo-tree-id4 . -5) (undo-tree-id5 . -5) (undo-tree-id6 . -5) 1228 (1221 . 1228) (1220 . 1221) (1313 . 1314) (#(" " 0 1 (fontified t)) . -1313) (undo-tree-id7 . -1) (#("{" 0 1 (fontified t)) . -1314) (undo-tree-id8 . -1) (#("
" 0 1 (fontified t)) . -1315) (undo-tree-id9 . -1) (#("	" 0 1 (fontified t)) . -1316) (undo-tree-id10 . -1) (#("	" 0 1 (fontified t)) . -1317) (undo-tree-id11 . -1) (#("
" 0 1 (fontified t)) . -1318) (undo-tree-id12 . -1) (#("	" 0 1 (fontified t)) . -1319) (undo-tree-id13 . -1) (#("}" 0 1 (fontified t)) . -1320) (undo-tree-id14 . -1) 1321 (1315 . 1318) (#("-" 0 1 (fontified t)) . -1314) (undo-tree-id15 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -1315) (undo-tree-id16 . -1) (#(" " 0 1 (fontified t)) . -1316) (undo-tree-id17 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -1317) (undo-tree-id18 . -1) 1318 (1314 . 1318) (#("	" 0 1 (fontified nil)) . -1317) (undo-tree-id19 . -1) (1318 . 1319) (1315 . 1318) (1313 . 1315) (#(" " 0 1 (fontified t)) . -1313) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("-" 0 1 (fontified t)) . -1314) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -1315) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#(" " 0 1 (fontified t)) . -1316) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1317) (undo-tree-id32 . -1) 1318 (1317 . 1318) (1293 . 1312) (#("w" 0 1 (fontified t)) . -1293) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("h" 0 1 (fontified t)) . -1294) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("a" 0 1 (fontified t)) . -1295) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("t" 0 1 (fontified t)) . -1296) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#(":" 0 1 (fontified nil)) . -1297) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#(" " 0 1 (fontified t)) . -1298) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("i" 0 1 (fontified t)) . -1299) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("m" 0 1 (fontified t)) . -1300) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("p" 0 1 (fontified t)) . -1301) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -1302) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#(" " 0 1 (fontified t)) . -1303) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1304) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1305) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1306) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1307) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1308) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1309) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1310) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1311) (undo-tree-id69 . -1) (undo-tree-id70 . -1) 1312 (1293 . 1312) (1291 . 1293) (1292 . 1296) (1286 . 1292) (#(";" 0 1 (fontified t)) . -1286) (undo-tree-id71 . -1) (#(":" 0 1 (fontified t)) . -1287) (undo-tree-id72 . -1) 1288 (1277 . 1288) (1253 . 1255) (#(";" 0 1 (fontified t)) . -1253) (undo-tree-id73 . -1) 1254 (1246 . 1254) (1244 . 1246) (#("c" 0 1 (fontified t)) . -1266) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("t" 0 1 (fontified t)) . -1267) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("x" 0 1 (fontified t)) . -1268) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#(":" 0 1 (fontified t)) . -1269) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#(" " 0 1 (fontified t)) . -1270) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) 1271 (#("i" 0 1 (fontified t)) . -1271) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("m" 0 1 (fontified t)) . -1272) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("p" 0 1 (fontified t)) . -1273) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -1274) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#(" " 0 1 (fontified t)) . -1275) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("A" 0 1 (face font-lock-type-face fontified t)) . -1276) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1277) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -1278) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1279) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1280) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("<" 0 1 (fontified t)) . -1281) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("s" 0 1 (fontified t)) . -1282) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("e" 0 1 (fontified t)) . -1283) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("r" 0 1 (fontified t)) . -1284) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#(":" 0 1 (fontified t)) . -1285) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#(":" 0 1 (fontified t)) . -1286) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("H" 0 1 (face font-lock-type-face fontified t)) . -1287) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1288) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1289) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1290) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#(">" 0 1 (fontified t)) . -1291) (undo-tree-id140 . -1) (undo-tree-id141 . -1) 1292 (1285 . 1292) (#(":" 0 1 (fontified t)) . -1285) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (#(":" 0 1 (fontified t)) . -1286) (undo-tree-id144 . -1) (undo-tree-id145 . -1) 1287 (#("H" 0 1 (face font-lock-type-face fontified t)) . -1287) (undo-tree-id146 . -1) (undo-tree-id147 . -1) 1288 (1279 . 1288) (1266 . 1279) (1259 . 1266) (#("s" 0 1 (fontified t)) . -1259) (undo-tree-id148 . -1) (#("e" 0 1 (fontified t)) . -1260) (undo-tree-id149 . -1) (#("l" 0 1 (fontified t)) . -1261) (undo-tree-id150 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1262) (undo-tree-id151 . -1) (#("," 0 1 (fontified t)) . -1263) (undo-tree-id152 . -1) (#(" " 0 1 (fontified t)) . -1264) (undo-tree-id153 . -1) 1265 (1258 . 1265) (1248 . 1258) (1233 . 1242) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1233) (undo-tree-id154 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -1234) (undo-tree-id155 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1235) (undo-tree-id156 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1236) (undo-tree-id157 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1237) (undo-tree-id158 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1238) (undo-tree-id159 . -1) 1239 (1237 . 1239) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1237) (undo-tree-id160 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -1238) (undo-tree-id161 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1239) (undo-tree-id162 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1240) (undo-tree-id163 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1241) (undo-tree-id164 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1242) (undo-tree-id165 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -1243) (undo-tree-id166 . -1) 1244 (1249 . 1250) (#(" " 0 1 (fontified t)) . -1249) (undo-tree-id167 . -1) 1250 (1248 . 1250) (1261 . 1262) (#(" " 0 1 (fontified t)) . -1261) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#("U" 0 1 (face font-lock-type-face fontified t)) . -1262) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1263) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1264) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1265) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) 1266 (1246 . 1248) (1243 . 1244) (1227 . 1243) (#("P" 0 1 (face font-lock-type-face fontified t)) . -1227) (undo-tree-id183 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1228) (undo-tree-id184 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1229) (undo-tree-id185 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1230) (undo-tree-id186 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1231) (undo-tree-id187 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -1232) (undo-tree-id188 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1233) (undo-tree-id189 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1234) (undo-tree-id190 . -1) 1235 (#("	" 0 1 (fontified nil)) . -1238) (undo-tree-id191 . -1) (1239 . 1240) (1237 . 1239) (1221 . 1237) (1220 . 1222) (1268 . 1278) (1262 . 1268) (#("&" 0 1 (fontified t)) . -1262) (undo-tree-id192 . -1) (#("s" 0 1 (fontified t)) . -1263) (undo-tree-id193 . -1) (#("e" 0 1 (fontified t)) . -1264) (undo-tree-id194 . -1) (#("l" 0 1 (fontified t)) . -1265) (undo-tree-id195 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1266) (undo-tree-id196 . -1) 1267 (1262 . 1267) (1258 . 1262) (#("(" 0 1 (fontified t)) . -1258) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (#("i" 0 1 (fontified t)) . -1259) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("m" 0 1 (fontified t)) . -1260) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("p" 0 1 (fontified t)) . -1261) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -1262) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#(" " 0 1 (fontified t)) . -1263) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1264) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1265) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1266) (undo-tree-id229 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1267) (undo-tree-id230 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -1268) (undo-tree-id231 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1269) (undo-tree-id232 . -1) (#("(" 0 1 (fontified t)) . -1270) (undo-tree-id233 . -1) (#("=" 0 1 (fontified t)) . -1271) (undo-tree-id234 . -1) 1272 (1271 . 1272) (1266 . 1271) (1259 . 1266) (1258 . 1259) (1255 . 1258) (1249 . 1255) (1247 . 1249) (#("	" 0 1 (fontified nil)) . -1248) (undo-tree-id235 . -1) (1249 . 1250) (1247 . 1249) (1235 . 1247) (#("D" 0 1 (face font-lock-type-face fontified t)) . -1235) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1236) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1237) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1238) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1239) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1240) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -1241) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1242) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -1243) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1244) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1245) (undo-tree-id256 . -1) (undo-tree-id257 . -1) 1246 (1236 . 1246) (1221 . 1236) (#("t" 0 1 (fontified t)) . -1221) (undo-tree-id258 . -1) (#("r" 0 1 (fontified t)) . -1222) (undo-tree-id259 . -1) (#("a" 0 1 (fontified t)) . -1223) (undo-tree-id260 . -1) (#("i" 0 1 (fontified t)) . -1224) (undo-tree-id261 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -1225) (undo-tree-id262 . -1) (#(" " 0 1 (fontified t)) . -1226) (undo-tree-id263 . -1) 1227 (1221 . 1227) (1220 . 1221) (t 25818 9901 107116 970000)) nil (25818 34829 605472 848000) 0 nil])
([nil nil ((1418 . 1419)) nil (25818 34829 604705 973000) 0 nil])
([nil nil ((1302 . 1308) (t 25818 34829 626057 45000)) nil (25818 34834 97019 818000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1472) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (1473 . 1474) (1470 . 1473) (1459 . 1470) (1450 . 1459) (1414 . 1420) (1412 . 1414) (1402 . 1405) (1424 . 1439) (#("Repo" 0 4 (fontified nil)) . 1424) (1424 . 1428) (#("ReportingMedium" 0 15 (fontified nil)) . -1424) (1424 . 1439) (#("Repo" 0 4 (face font-lock-type-face fontified t)) . -1424) (undo-tree-id307 . -4) 1428 (1424 . 1428) (1419 . 1424) (#("<" 0 1 (fontified t)) . -1402) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1403) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#(">" 0 1 (fontified t)) . -1404) (undo-tree-id312 . -1) (undo-tree-id313 . -1) 1405 (t 25818 34834 126057 39000)) nil (25818 34958 836189 458000) 0 nil])
([nil nil ((1408 . 1414) (1382 . 1383) (1371 . 1382) (#("async_" 0 6 (fontified nil)) . 1371) (1371 . 1377) (#("async_trait" 0 11 (fontified nil)) . -1371) (1371 . 1382) (#("async_" 0 6 (fontified t)) . -1371) (undo-tree-id264 . -6) 1377 (1369 . 1377) (1368 . 1369) (1468 . 1469) (#(" " 0 1 (fontified t)) . -1468) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (#("{" 0 1 (fontified t)) . -1469) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (#("
" 0 1 (fontified t)) . -1470) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("	" 0 1 (fontified t)) . -1471) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (#("	" 0 1 (fontified t)) . -1472) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (#("
" 0 1 (fontified t)) . -1473) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (#("	" 0 1 (fontified t)) . -1474) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#("}" 0 1 (fontified t)) . -1475) (undo-tree-id300 . -1) (undo-tree-id301 . -1) 1476 (1470 . 1473)) nil (25818 34958 836171 501000) 0 nil])
([nil nil ((1542 . 1548) (#("(" 0 1 (fontified t)) . -1542) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (#("f" 0 1 (fontified t)) . -1543) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (#("o" 0 1 (fontified t)) . -1544) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (#(")" 0 1 (fontified t)) . -1545) (undo-tree-id333 . -1) (undo-tree-id334 . 1) 1546 (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -1545) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (#("m" 0 1 (fontified t)) . -1546) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (#("a" 0 1 (fontified t)) . -1547) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (#("t" 0 1 (fontified t)) . -1548) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (#("!" 0 1 (fontified t)) . -1549) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (#("(" 0 1 (fontified t)) . -1550) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -1551) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (#("E" 0 1 (face font-lock-string-face fontified t)) . -1552) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1553) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1554) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1555) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1556) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1557) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1558) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -1559) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1560) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1561) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) 1562 (#("i" 0 1 (face font-lock-string-face fontified t)) . -1562) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1563) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -1564) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1565) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -1566) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1567) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -1568) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -1569) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1570) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (#("n" 0 1 (face font-lock-string-face fontified nil)) . -1571) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -1572) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (#(":" 0 1 (face font-lock-string-face fontified t)) . -1573) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1574) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (#("{" 0 1 (face rust-string-interpolation fontified t)) . -1575) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (#("e" 0 1 (face rust-string-interpolation fontified t)) . -1576) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (#("r" 0 1 (face rust-string-interpolation fontified t)) . -1577) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#("r" 0 1 (face rust-string-interpolation fontified t)) . -1578) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (#("}" 0 1 (face rust-string-interpolation fontified t)) . -1579) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (#("." 0 1 (face font-lock-string-face fontified t)) . -1580) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -1581) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . 1) (undo-tree-id446 . -1) (#(")" 0 1 (fontified t)) . -1582) (undo-tree-id447 . -1) (undo-tree-id448 . -1) 1583 (#("," 0 1 (fontified t)) . -1582) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (#("
" 0 1 (fontified t)) . -1583) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#("	" 0 1 (fontified t)) . -1584) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (#("	" 0 1 (fontified t)) . -1585) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (#("	" 0 1 (fontified t)) . -1586) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (#("	" 0 1 (fontified t)) . -1587) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (#("	" 0 1 (fontified t)) . -1588) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (#("	" 0 1 (fontified t)) . -1589) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (#(" " 0 1 (fontified t)) . -1590) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (#("e" 0 1 (fontified t)) . -1591) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (#("r" 0 1 (fontified t)) . -1592) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (#("r" 0 1 (fontified t)) . -1593) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (#(" " 0 1 (fontified t)) . -1594) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (#("=" 0 1 (fontified t)) . -1595) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (#(" " 0 1 (fontified t)) . -1596) (undo-tree-id478 . -1) (undo-tree-id479 . -1) 1597 (1586 . 1591) 1584 (1586 . 1592) (apply yas--snippet-revive 1539 1588 #s(yas--snippet nil (#s(yas--field 1 1543 1587 nil nil nil t #s(yas--exit 1588 nil))) #s(yas--exit 1588 nil) 80 nil #s(yas--field 1 1543 1587 nil nil nil t #s(yas--exit 1588 nil)) nil nil)) (1583 . 1586) (1582 . 1583) (1580 . 1581) (1576 . 1579) (1575 . 1577) (1557 . 1575) (#(":" 0 1 (face font-lock-string-face fontified t)) . -1557) (undo-tree-id480 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1558) (undo-tree-id481 . -1) 1559 (1557 . 1559) (1552 . 1557) (1551 . 1553) (1544 . 1552) (#("text" 0 4 (fontified nil)) . 1544) (1543 . 1544) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1543 1587 nil nil nil t #s(yas--exit 1588 nil))) #s(yas--exit 1588 nil) 80 nil #s(yas--field 1 1543 1587 nil nil nil t #s(yas--exit 1588 nil)) nil nil)) (1539 . 1548) (#("say(${1:text})$0" 0 16 (fontified nil)) . 1539) (1539 . 1555) (#("say(…)" 0 6 (fontified nil)) . -1539) (1539 . 1545) (1534 . 1539) (1531 . 1534) (#("	" 0 1 (fontified nil)) . -1533) (undo-tree-id482 . -1) (1534 . 1535) (1531 . 1534) (1530 . 1531) (1515 . 1530) (1508 . 1515) (1487 . 1508) (#("t" 0 1 (face font-lock-function-name-face fontified t)) . -1487) (undo-tree-id483 . -1) 1488 (1474 . 1488) (1472 . 1474) (1463 . 1472) (1458 . 1463) (1407 . 1408) (1396 . 1407) (#("async_trai" 0 10 (fontified nil)) . 1396) (1396 . 1406) (#("async_trait" 0 11 (fontified nil)) . -1396) (1396 . 1407) (#("async_trai" 0 10 (fontified t)) . -1396) (undo-tree-id484 . -10) 1406 (1394 . 1406) (1393 . 1394) (#("a" 0 1 (fontified t)) . -1443) (undo-tree-id485 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -1444) (undo-tree-id486 . -1) (#("y" 0 1 (fontified t)) . -1445) (undo-tree-id487 . -1) 1446 (1443 . 1446) (#("f" 0 1 (fontified t)) . -1443) (undo-tree-id488 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -1444) (undo-tree-id489 . -1) (#(" " 0 1 (fontified t)) . -1445) (undo-tree-id490 . -1) 1446 (1443 . 1446) (1441 . 1443) (#("	" 0 1 (fontified nil)) . -1442) (undo-tree-id491 . -1) (1443 . 1444) (1441 . 1443) (1435 . 1441) (136 . 161) (1398 . 1398) (1398 . 1410) (#("Pois" 0 4 (fontified nil)) . 1398) (1398 . 1402) (#("PoiseContext (use crate::PoiseContext)" 0 38 (fontified nil)) . -1398) (1398 . 1436) (#("Pois" 0 4 (face font-lock-type-face fontified t)) . -1398) (undo-tree-id492 . -4) (undo-tree-id493 . -4) 1402 (1398 . 1402) (1373 . 1377) (1389 . 1394) (1374 . 1389) (#("Repo" 0 4 (fontified nil)) . 1374) (1374 . 1378) (#("ReportingMedium" 0 15 (fontified nil)) . -1374) (1374 . 1389) (#("Repo" 0 4 (face font-lock-type-face fontified t)) . -1374) (undo-tree-id494 . -4) 1378 (1369 . 1378) (1367 . 1369) (1493 . 1494) (t 25818 34958 846056 934000)) nil (25818 35334 688998 729000) 0 nil])
([nil nil ((1649 . 1662) (1634 . 1649) (1632 . 1634) (#("	" 0 1 (fontified nil)) . -1633) (undo-tree-id314 . -1) (1634 . 1635) (1632 . 1634) (1631 . 1632) (1630 . 1631) (62 . 86) (1595 . 1595) (1595 . 1606) (#("Repl" 0 4 (fontified nil)) . 1595) (1595 . 1599) (#("ReplyHandle (use poise::ReplyHandle)" 0 36 (fontified nil)) . -1595) (1595 . 1631) (#("Repl" 0 4 (face font-lock-type-face fontified t)) . -1595) (undo-tree-id315 . -4) 1599 (1595 . 1599) (1591 . 1595) (1590 . 1591) (1575 . 1590) (#("Repo" 0 4 (fontified nil)) . 1575) (1575 . 1579) (#("ReportingMedium" 0 15 (fontified nil)) . -1575) (1575 . 1590) (#("Repo" 0 4 (face font-lock-type-face fontified t)) . -1575) (undo-tree-id316 . -4) 1579 (1570 . 1579) (1569 . 1570) (1555 . 1569) (#("i" 0 1 (fontified t)) . -1555) (undo-tree-id317 . -1) (#("m" 0 1 (fontified t)) . -1556) (undo-tree-id318 . -1) (#("p" 0 1 (fontified t)) . -1557) (undo-tree-id319 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -1558) (undo-tree-id320 . -1) 1559 (1555 . 1559) (1553 . 1555)) nil (25818 35334 688046 498000) 0 nil])
([nil nil ((1648 . 1649) (#("i" 0 1 (fontified t)) . -1648) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (#("m" 0 1 (fontified t)) . -1649) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (#("p" 0 1 (fontified t)) . -1650) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -1651) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (#(" " 0 1 (fontified t)) . -1652) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (#("A" 0 1 (face font-lock-type-face fontified t)) . -1653) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1654) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -1655) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1656) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1657) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (#("<" 0 1 (fontified t)) . -1658) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (#("H" 0 1 (face font-lock-type-face fontified t)) . -1659) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1660) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1661) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1662) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (#(">" 0 1 (fontified t)) . -1663) (undo-tree-id611 . -1) (undo-tree-id612 . -1) 1664 (1598 . 1601) (t 25818 35334 709390 479000)) nil (25818 35362 552211 604000) 0 nil])
([nil nil ((1633 . 1637) (1650 . 1652) (t 25818 35362 559390 517000)) nil (25818 35373 222371 821000) 0 nil])
([nil nil ((1599 . 1603) (t 25818 35373 242723 865000)) nil (25818 35381 874645 874000) 0 nil])
([nil nil ((1639 . 1640) (#("_" 0 1 (face font-lock-variable-name-face fontified t)) . -1639) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) 1640) nil (25818 35381 874641 579000) 0 nil])
([nil nil ((1660 . 1661) (#("	" 0 1 (fontified nil)) . 1659) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (1660 . 1661) (t 25818 35381 882723 878000)) nil (25818 35399 138118 694000) 0 nil])
([nil nil ((1666 . 1669) (1665 . 1666) (1653 . 1665) (#("PoiseC" 0 6 (fontified nil)) . 1653) (1653 . 1659) (#("PoiseContext" 0 12 (fontified nil)) . -1653) (1653 . 1665) (#("PoiseC" 0 6 (face font-lock-type-face fontified t)) . -1653) (undo-tree-id621 . -6) 1659 (1658 . 1659) (1653 . 1658) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1653) (undo-tree-id622 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1654) (undo-tree-id623 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1655) (undo-tree-id624 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1656) (undo-tree-id625 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1657) (undo-tree-id626 . -1) 1658 (1653 . 1658) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1653) (undo-tree-id627 . -1) 1654 (#("," 0 1 (fontified t)) . -1601) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (#(" " 0 1 (fontified t)) . -1602) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1603) (undo-tree-id636 . -1) (undo-tree-id637 . 1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (#(":" 0 1 (fontified t)) . -1604) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (#(" " 0 1 (fontified t)) . -1605) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (#("i" 0 1 (fontified t)) . -1606) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (#("m" 0 1 (fontified t)) . -1607) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (#("p" 0 1 (fontified t)) . -1608) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -1609) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (#(" " 0 1 (fontified t)) . -1610) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (#("A" 0 1 (face font-lock-type-face fontified t)) . -1611) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1612) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -1613) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1614) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1615) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (#("<" 0 1 (fontified t)) . -1616) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (#("H" 0 1 (face font-lock-type-face fontified t)) . -1617) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1618) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1619) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1620) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (#(">" 0 1 (fontified t)) . -1621) (undo-tree-id691 . -1) 1622 (1611 . 1622) (#("H" 0 1 (face font-lock-type-face fontified t)) . -1611) (undo-tree-id692 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1612) (undo-tree-id693 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1613) (undo-tree-id694 . -1) 1614 (1604 . 1614) (1682 . 1687) (1661 . 1682) (t 25818 35399 146057 236000)) nil (25818 35473 81235 798000) 0 nil])
([nil nil ((1667 . 1668) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . 1667) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (t 25818 35473 99390 688000)) nil (25818 35479 19201 778000) 0 nil])
([nil nil ((1653 . 1654) (1699 . 1704) (t 25818 35479 26057 365000)) nil (25818 35566 480198 908000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1782) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) 1783 (1782 . 1783) (#("." 0 1 (fontified t)) . -1782) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) 1783 (1779 . 1783) (#("content" 0 7 (fontified nil)) . 1779) (undo-tree-id731 . -7) (1778 . 1779) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1778 1782 nil nil nil t #s(yas--exit 1783 nil))) #s(yas--exit 1783 nil) 82 nil #s(yas--field 1 1778 1782 nil nil nil t #s(yas--exit 1783 nil)) #s(yas--field 2 1764 1783 nil nil nil t #s(yas--exit 1784 nil)) nil)) (1770 . 1786) (#("content(${1:content})$0" 0 23 (fontified nil)) . 1770) (undo-tree-id732 . -23) (1770 . 1793) (#("content(…)" 0 10 (fontified nil)) . -1770) (undo-tree-id733 . -10) (1770 . 1780) (1765 . 1770) (#("builder" 0 7 (fontified nil)) . 1765) (undo-tree-id734 . -7) (1764 . 1765) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1759 1762 nil nil nil nil #s(yas--field 2 1764 1783 nil nil nil t #s(yas--exit 1784 nil))) #s(yas--field 2 1764 1783 nil nil nil t #s(yas--exit 1784 nil))) #s(yas--exit 1784 nil) 81 nil #s(yas--field 2 1764 1783 nil nil nil t #s(yas--exit 1784 nil)) nil nil)) (1754 . 1772) (#("edit(${1:ctx}, ${2:builder})$0" 0 30 (fontified nil)) . 1754) (1754 . 1784) (#("edit(…)" 0 7 (fontified nil)) . -1754) (1754 . 1761) (1749 . 1754) (#("c" 0 1 (fontified t)) . -1749) (undo-tree-id735 . -1) (#("t" 0 1 (fontified t)) . -1750) (undo-tree-id736 . -1) (#("x" 0 1 (fontified t)) . -1751) (undo-tree-id737 . -1) (#("." 0 1 (fontified t)) . -1752) (undo-tree-id738 . -1) 1753 (1752 . 1753) (#("." 0 1 (fontified t)) . -1752) (undo-tree-id739 . -1) (#("e" 0 1 (fontified t)) . -1753) (undo-tree-id740 . -1) (#("d" 0 1 (fontified t)) . -1754) (undo-tree-id741 . -1) (#("i" 0 1 (fontified t)) . -1755) (undo-tree-id742 . -1) 1756 (1749 . 1756) (#("s" 0 1 (fontified t)) . -1749) (undo-tree-id743 . -1) (#("e" 0 1 (fontified t)) . -1750) (undo-tree-id744 . -1) (#("l" 0 1 (fontified t)) . -1751) (undo-tree-id745 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1752) (undo-tree-id746 . -1) (#("." 0 1 (fontified t)) . -1753) (undo-tree-id747 . -1) 1754 (1749 . 1754) (1746 . 1749) (#("	" 0 1 (fontified nil)) . -1748) (undo-tree-id748 . -1) (1749 . 1750) (1746 . 1749) (1739 . 1746) (1718 . 1739) (1706 . 1718) (#("PoiseC" 0 6 (fontified nil)) . 1706) (1706 . 1712) (#("PoiseContext" 0 12 (fontified nil)) . -1706) (1706 . 1718) (#("PoiseC" 0 6 (face font-lock-type-face fontified t)) . -1706) (undo-tree-id749 . -6) 1712 (1711 . 1712) (1705 . 1711)) nil (25818 35566 480190 48000) 0 nil])
([nil nil ((apply yas--snippet-revive 1754 1784 #s(yas--snippet nil (#s(yas--field 1 1759 1762 nil nil nil nil #s(yas--field 2 1764 1783 nil nil nil t #s(yas--exit 1784 nil))) #s(yas--field 2 1764 1783 nil nil nil t #s(yas--exit 1784 nil))) #s(yas--exit 1784 nil) 81 nil #s(yas--field 2 1764 1783 nil nil nil t #s(yas--exit 1784 nil)) nil nil)) (apply yas--snippet-revive 1770 1783 #s(yas--snippet nil (#s(yas--field 1 1778 1782 nil nil nil t #s(yas--exit 1783 nil))) #s(yas--exit 1783 nil) 82 nil #s(yas--field 1 1778 1782 nil nil nil t #s(yas--exit 1783 nil)) #s(yas--field 2 1764 1783 nil nil nil t #s(yas--exit 1784 nil)) nil))) nil (25818 35576 190029 172000) 0 nil])
([nil nil ((1785 . 1786) (1572 . 1573) (t 25818 35566 489390 856000)) nil (25818 35576 190021 53000) 0 nil])
([nil nil ((1659 . 1662) (1673 . 1674) (#("_" 0 1 (face font-lock-variable-name-face fontified t)) . -1673) (undo-tree-id750 . -1) (undo-tree-id751 . -1) 1674 (1602 . 1606) (t 25818 35576 212724 208000)) nil (25818 35592 623455 885000) 0 nil])
([nil nil ((1651 . 1655) (#("," 0 1 (fontified t)) . -1602) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (#(" " 0 1 (fontified t)) . -1603) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (#("'" 0 1 (fontified t)) . -1604) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (#("b" 0 1 (face font-lock-variable-name-face fontified t)) . -1605) (undo-tree-id772 . -1) 1606 (t 25818 35592 642724 240000)) nil (25818 35609 993311 273000) 0 nil])
([nil nil ((1496 . 1498) (#(")" 0 1 (fontified t)) . -1496) (undo-tree-id773 . -1) 1497 (1495 . 1497) (1494 . 1495) (1348 . 1352) (t 25818 35610 12724 273000)) nil (25818 35636 940853 180000) 0 nil])
([nil nil ((1496 . 1497) (#("_" 0 1 (face font-lock-variable-name-face fontified t)) . 1496) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (t 25818 35636 949390 995000)) nil (25818 35642 265501 276000) 0 nil])
([nil nil ((1496 . 1497) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . 1496) (undo-tree-id786 . -1) (t 25818 35642 272724 339000)) nil (25818 35646 193914 83000) 0 nil])
([nil nil ((1400 . 1403) (#("a" 0 1 (fontified t)) . -1400) (undo-tree-id787 . -1) (undo-tree-id788 . -1) 1401 (1399 . 1401) (1373 . 1377) (t 25818 35646 216057 681000)) nil (25818 35667 400906 643000) 0 nil])
([nil nil ((1815 . 1820) (#("await" 0 5 (fontified nil)) . -1815) (1815 . 1820) (1814 . 1815) (1589 . 1594) (#("await" 0 5 (fontified nil)) . -1589) (1589 . 1594) (1588 . 1589) (#("." 0 1 (fontified t)) . -1588) (undo-tree-id789 . -1) (#("\\" 0 1 (fontified t)) . -1589) (undo-tree-id790 . -1) 1590 (1588 . 1590) (t 25818 35667 419391 57000)) nil (25818 35701 419272 422000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -1931) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1932) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -1933) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (#("y" 0 1 (face font-lock-variable-name-face fontified t)) . -1934) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -1935) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -1936) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (#("_" 0 1 (face font-lock-variable-name-face fontified t)) . -1937) (undo-tree-id805 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -1938) (undo-tree-id806 . -1) 1939 (1931 . 1939) (#("'" 0 1 (fontified t)) . -1931) (undo-tree-id807 . -1) (undo-tree-id808 . -1) 1932 (1931 . 1932) (t 25818 35701 439391 128000)) nil (25818 35766 941083 444000) 0 nil])
([nil nil ((1938 . 1942) (1883 . 1887) (t 25818 35766 949391 272000)) nil (25818 35859 407843 365000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -1883) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1884) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (#("," 0 1 (fontified t)) . -1885) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (#(" " 0 1 (fontified t)) . -1886) (undo-tree-id821 . -1) (undo-tree-id822 . -1) 1887 (t 25818 35859 429391 481000)) nil (25818 35871 922217 819000) 0 nil])
([nil nil ((1888 . 1892) (1883 . 1887) (t 25818 35871 942724 843000)) nil (25818 35916 85558 564000) 0 nil])
([nil nil ((1749 . 1752) (1724 . 1725) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1724) (undo-tree-id823 . -1) 1725 (1722 . 1726) (1744 . 1745) (1741 . 1744) (#("Ctx" 0 3 (fontified nil)) . 1741) (1741 . 1744) (#("Ctx (as ReportingMedium)" 0 24 (fontified nil)) . -1741) (1741 . 1765) (#("Ctx" 0 3 (face font-lock-type-face fontified t)) . -1741) (undo-tree-id824 . -3) (undo-tree-id825 . -3) 1744 (1735 . 1744) (#("&" 0 1 (fontified t)) . -1735) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1736) (undo-tree-id829 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1737) (undo-tree-id830 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1738) (undo-tree-id831 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1739) (undo-tree-id832 . -1) (#(":" 0 1 (fontified t)) . -1740) (undo-tree-id833 . -1) (#(":" 0 1 (fontified t)) . -1741) (undo-tree-id834 . -1) 1742 (1736 . 1742) (#("P" 0 1 (face font-lock-type-face fontified t)) . -1736) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1737) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1738) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1739) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1740) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1741) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1742) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1743) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1744) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1745) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -1746) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1747) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (#("<" 0 1 (fontified t)) . -1748) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (#("'" 0 1 (fontified t)) . -1749) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (#("_" 0 1 (face font-lock-variable-name-face fontified t)) . -1750) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (#(">" 0 1 (fontified t)) . -1751) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) 1752 (t 25818 35916 92724 951000)) nil (25818 35964 340224 163000) 0 nil])
([nil nil ((apply yas--snippet-revive 1813 1824 #s(yas--snippet nil nil #s(yas--exit 1824 nil) 83 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1824 nil) 83 nil nil nil nil)) (1813 . 1824) (#("to_string()$0" 0 13 (fontified nil)) . 1813) (1813 . 1826) (#("to_string() (as ToString)" 0 25 (fontified nil)) . -1813) (1813 . 1838) (1812 . 1813) (#("." 0 1 (fontified t)) . -1812) (undo-tree-id883 . -1) (undo-tree-id884 . -1) 1813 (1812 . 1813) (t 25818 35964 359391 734000)) nil (25818 35991 492837 296000) 0 nil])
([nil nil ((1590 . 1594) (1587 . 1590) (t 25818 35991 502725 134000)) nil (25818 37275 543768 960000) 0 nil])
([nil nil ((#("#[async_trait]
trait ReportingMedium {
	type Ctx<'a>;
	async fn report_on<'a>(&self, ctx: Self::Ctx<'a>, what: impl ToString);
}

#[async_trait]
impl<'a> ReportingMedium for PoiseContext<'a> {
	type Ctx<'b> = ();
	async fn report_on(&self, ctx: (), what: impl ToString) {
		self.say(what.into()).await;
	}
}

#[async_trait]
impl<'a> ReportingMedium for ReplyHandle<'a> {
	type Ctx<'b> = &'b PoiseContext<'b>;

	async fn report_on<'c>(&self, ctx: Self::Ctx<'c>, what: impl ToString) {
		self.edit(ctx, |e| e.content(what.to_string())).await;
	}
}

" 0 2 (face font-lock-preprocessor-face fontified t) 2 14 (face font-lock-preprocessor-face fontified t) 14 15 (fontified t) 15 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 36 (face font-lock-type-face fontified t) 36 39 (fontified t) 39 40 (fontified t) 40 44 (face font-lock-keyword-face fontified t) 44 45 (fontified t) 45 48 (face font-lock-type-face fontified t) 48 50 (fontified t) 50 51 (face font-lock-variable-name-face fontified t) 51 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t) 54 55 (fontified t) 55 60 (face font-lock-keyword-face fontified t) 60 61 (fontified t) 61 63 (face font-lock-keyword-face fontified t) 63 64 (fontified t) 64 73 (face font-lock-function-name-face fontified t) 73 75 (fontified t) 75 76 (face font-lock-variable-name-face fontified t) 76 77 (fontified t) 77 78 (fontified t) 78 79 (face rust-ampersand-face fontified t) 79 83 (face font-lock-keyword-face fontified t) 83 85 (fontified t) 85 88 (face font-lock-variable-name-face fontified t) 88 90 (fontified t) 90 94 (face font-lock-type-face fontified t) 94 96 (fontified t) 96 99 (face font-lock-type-face fontified t) 99 101 (fontified t) 101 102 (face font-lock-variable-name-face fontified t) 102 103 (fontified t) 103 105 (fontified t) 105 109 (face font-lock-variable-name-face fontified t) 109 111 (fontified t) 111 115 (face font-lock-keyword-face fontified t) 115 116 (fontified t) 116 124 (face font-lock-type-face fontified t) 124 126 (fontified t) 126 127 (fontified t) 127 129 (fontified t) 129 130 (fontified t) 130 132 (face font-lock-preprocessor-face fontified t) 132 144 (face font-lock-preprocessor-face fontified t) 144 145 (fontified t) 145 149 (face font-lock-keyword-face fontified t) 149 151 (fontified t) 151 152 (face font-lock-variable-name-face fontified t) 152 153 (fontified t) 153 154 (fontified t) 154 169 (face font-lock-type-face fontified t) 169 170 (fontified t) 170 173 (face font-lock-keyword-face fontified t) 173 174 (fontified t) 174 186 (face font-lock-type-face fontified t) 186 188 (fontified t) 188 189 (face font-lock-variable-name-face fontified t) 189 193 (fontified t) 193 194 (fontified t) 194 198 (face font-lock-keyword-face fontified t) 198 199 (fontified t) 199 202 (face font-lock-type-face fontified t) 202 204 (fontified t) 204 205 (face font-lock-variable-name-face fontified t) 205 206 (fontified t) 206 213 (fontified t) 213 214 (fontified t) 214 219 (face font-lock-keyword-face fontified t) 219 220 (fontified t) 220 222 (face font-lock-keyword-face fontified t) 222 223 (fontified t) 223 232 (face font-lock-function-name-face fontified t) 232 233 (fontified t) 233 234 (face rust-ampersand-face fontified t) 234 238 (face font-lock-keyword-face fontified t) 238 240 (fontified t) 240 243 (face font-lock-variable-name-face fontified t) 243 249 (fontified t) 249 253 (face font-lock-variable-name-face fontified t) 253 255 (fontified t) 255 259 (face font-lock-keyword-face fontified t) 259 260 (fontified t) 260 268 (face font-lock-type-face fontified t) 268 272 (fontified t) 272 274 (fontified t) 274 278 (face font-lock-keyword-face fontified t) 278 279 (fontified t) 279 288 (fontified t) 288 294 (fontified t) 294 296 (fontified t) 296 301 (face font-lock-keyword-face fontified t) 301 302 (fontified t) 302 303 (fontified t) 303 305 (fontified t) 305 306 (fontified t) 306 308 (fontified t) 308 309 (fontified t) 309 311 (face font-lock-preprocessor-face fontified t) 311 323 (face font-lock-preprocessor-face fontified t) 323 324 (fontified t) 324 328 (face font-lock-keyword-face fontified t) 328 330 (fontified t) 330 331 (face font-lock-variable-name-face fontified t) 331 332 (fontified t) 332 333 (fontified t) 333 348 (face font-lock-type-face fontified t) 348 349 (fontified t) 349 352 (face font-lock-keyword-face fontified t) 352 353 (fontified t) 353 364 (face font-lock-type-face fontified t) 364 366 (fontified t) 366 367 (face font-lock-variable-name-face fontified t) 367 368 (fontified t) 368 371 (fontified t) 371 372 (fontified t) 372 376 (face font-lock-keyword-face fontified t) 376 377 (fontified t) 377 380 (face font-lock-type-face fontified t) 380 382 (fontified t) 382 383 (face font-lock-variable-name-face fontified t) 383 384 (fontified t) 384 387 (fontified t) 387 388 (face rust-ampersand-face fontified t) 388 389 (fontified t) 389 390 (face font-lock-variable-name-face fontified t) 390 391 (fontified t) 391 403 (face font-lock-type-face fontified t) 403 405 (fontified t) 405 406 (face font-lock-variable-name-face fontified t) 406 407 (fontified t) 407 409 (fontified t) 409 410 (fontified t) 410 411 (fontified t) 411 416 (face font-lock-keyword-face fontified t) 416 417 (fontified t) 417 419 (face font-lock-keyword-face fontified t) 419 420 (fontified t) 420 429 (face font-lock-function-name-face fontified t) 429 431 (fontified t) 431 432 (face font-lock-variable-name-face fontified t) 432 433 (fontified t) 433 434 (fontified t) 434 435 (face rust-ampersand-face fontified t) 435 439 (face font-lock-keyword-face fontified t) 439 441 (fontified t) 441 444 (face font-lock-variable-name-face fontified t) 444 446 (fontified t) 446 450 (face font-lock-type-face fontified t) 450 452 (fontified t) 452 455 (face font-lock-type-face fontified t) 455 457 (fontified t) 457 458 (face font-lock-variable-name-face fontified t) 458 459 (fontified t) 459 461 (fontified t) 461 465 (face font-lock-variable-name-face fontified t) 465 467 (fontified t) 467 471 (face font-lock-keyword-face fontified t) 471 472 (fontified t) 472 480 (face font-lock-type-face fontified t) 480 484 (fontified t) 484 486 (fontified t) 486 490 (face font-lock-keyword-face fontified t) 490 491 (fontified t) 491 507 (fontified t) 507 520 (fontified t) 520 531 (fontified t) 531 532 (fontified t) 532 534 (fontified t) 534 539 (face font-lock-keyword-face fontified t) 539 540 (fontified t) 540 541 (fontified t) 541 543 (fontified t) 543 544 (fontified t) 544 545 (fontified t) 545 546 (fontified t) 546 547 (fontified t)) . 1300) (undo-tree-id1990 . -546) (undo-tree-id1991 . -546) (undo-tree-id1992 . -125) (undo-tree-id1993 . -546) (undo-tree-id1994 . -148) (undo-tree-id1995 . -270) (undo-tree-id1996 . -353) (undo-tree-id1997 . -329) (undo-tree-id1998 . -546) (undo-tree-id1999 . -546) (undo-tree-id2000 . -546) (undo-tree-id2001 . -546) (undo-tree-id2002 . -546) (undo-tree-id2003 . -546) (undo-tree-id2004 . -546) (undo-tree-id2005 . -546) (undo-tree-id2006 . -546) (undo-tree-id2007 . -546) (undo-tree-id2008 . -546) (undo-tree-id2009 . -547) 1846 (t 25818 37529 397174 958000)) nil (25818 38102 233985 277000) 0 nil] [nil nil ((#("#[async_trait]
trait ReportingMedium {
	type Ctx<'a>;
	async fn report_on<'a>(&self, ctx: Self::Ctx<'a>, what: impl ToString);
}

#[async_trait]
impl<'a> ReportingMedium for PoiseContext<'a> {
	type Ctx<'b> = ();
	async fn report_on(&self, ctx: (), what: impl ToString) {
		self.say(what.into()).await;
	}
}

#[async_trait]
impl<'a> ReportingMedium for ReplyHandle<'a> {
	type Ctx<'b> = &'b PoiseContext<'b>;

	async fn report_on<'c>(&self, ctx: Self::Ctx<'c>, what: impl ToString) {
		self.edit(ctx, |e| e.content(what.to_string())).await;
	}
}" 0 2 (face font-lock-preprocessor-face fontified t) 2 14 (face font-lock-preprocessor-face fontified t) 14 15 (fontified t) 15 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 36 (face font-lock-type-face fontified t) 36 39 (fontified t) 39 40 (fontified t) 40 44 (face font-lock-keyword-face fontified t) 44 45 (fontified t) 45 48 (face font-lock-type-face fontified t) 48 50 (fontified t) 50 51 (face font-lock-variable-name-face fontified t) 51 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t) 54 55 (fontified t) 55 60 (face font-lock-keyword-face fontified t) 60 61 (fontified t) 61 63 (face font-lock-keyword-face fontified t) 63 64 (fontified t) 64 73 (face font-lock-function-name-face fontified t) 73 75 (fontified t) 75 76 (face font-lock-variable-name-face fontified t) 76 77 (fontified t) 77 78 (fontified t) 78 79 (face rust-ampersand-face fontified t) 79 83 (face font-lock-keyword-face fontified t) 83 85 (fontified t) 85 88 (face font-lock-variable-name-face fontified t) 88 90 (fontified t) 90 94 (face font-lock-type-face fontified t) 94 96 (fontified t) 96 99 (face font-lock-type-face fontified t) 99 101 (fontified t) 101 102 (face font-lock-variable-name-face fontified t) 102 103 (fontified t) 103 105 (fontified t) 105 109 (face font-lock-variable-name-face fontified t) 109 111 (fontified t) 111 115 (face font-lock-keyword-face fontified t) 115 116 (fontified t) 116 124 (face font-lock-type-face fontified t) 124 126 (fontified t) 126 127 (fontified t) 127 129 (fontified t) 129 130 (fontified t) 130 132 (face font-lock-preprocessor-face fontified t) 132 144 (face font-lock-preprocessor-face fontified t) 144 145 (fontified t) 145 149 (face font-lock-keyword-face fontified t) 149 151 (fontified t) 151 152 (face font-lock-variable-name-face fontified t) 152 153 (fontified t) 153 154 (fontified t) 154 169 (face font-lock-type-face fontified t) 169 170 (fontified t) 170 173 (face font-lock-keyword-face fontified t) 173 174 (fontified t) 174 186 (face font-lock-type-face fontified t) 186 188 (fontified t) 188 189 (face font-lock-variable-name-face fontified t) 189 193 (fontified t) 193 194 (fontified t) 194 198 (face font-lock-keyword-face fontified t) 198 199 (fontified t) 199 202 (face font-lock-type-face fontified t) 202 204 (fontified t) 204 205 (face font-lock-variable-name-face fontified t) 205 206 (fontified t) 206 213 (fontified t) 213 214 (fontified t) 214 219 (face font-lock-keyword-face fontified t) 219 220 (fontified t) 220 222 (face font-lock-keyword-face fontified t) 222 223 (fontified t) 223 232 (face font-lock-function-name-face fontified t) 232 233 (fontified t) 233 234 (face rust-ampersand-face fontified t) 234 238 (face font-lock-keyword-face fontified t) 238 240 (fontified t) 240 243 (face font-lock-variable-name-face fontified t) 243 249 (fontified t) 249 253 (face font-lock-variable-name-face fontified t) 253 255 (fontified t) 255 259 (face font-lock-keyword-face fontified t) 259 260 (fontified t) 260 268 (face font-lock-type-face fontified t) 268 272 (fontified t) 272 274 (fontified t) 274 278 (face font-lock-keyword-face fontified t) 278 279 (fontified t) 279 288 (fontified t) 288 294 (fontified t) 294 296 (fontified t) 296 301 (face font-lock-keyword-face fontified t) 301 302 (fontified t) 302 303 (fontified t) 303 305 (fontified t) 305 306 (fontified t) 306 308 (fontified t) 308 309 (fontified t) 309 311 (face font-lock-preprocessor-face fontified t) 311 323 (face font-lock-preprocessor-face fontified t) 323 324 (fontified t) 324 328 (face font-lock-keyword-face fontified t) 328 330 (fontified t) 330 331 (face font-lock-variable-name-face fontified t) 331 332 (fontified t) 332 333 (fontified t) 333 348 (face font-lock-type-face fontified t) 348 349 (fontified t) 349 352 (face font-lock-keyword-face fontified t) 352 353 (fontified t) 353 364 (face font-lock-type-face fontified t) 364 366 (fontified t) 366 367 (face font-lock-variable-name-face fontified t) 367 368 (fontified t) 368 371 (fontified t) 371 372 (fontified t) 372 376 (face font-lock-keyword-face fontified t) 376 377 (fontified t) 377 380 (face font-lock-type-face fontified t) 380 382 (fontified t) 382 383 (face font-lock-variable-name-face fontified t) 383 384 (fontified t) 384 387 (fontified t) 387 388 (face rust-ampersand-face fontified t) 388 389 (fontified t) 389 390 (face font-lock-variable-name-face fontified t) 390 391 (fontified t) 391 403 (face font-lock-type-face fontified t) 403 405 (fontified t) 405 406 (face font-lock-variable-name-face fontified t) 406 407 (fontified t) 407 409 (fontified t) 409 410 (fontified t) 410 411 (fontified t) 411 416 (face font-lock-keyword-face fontified t) 416 417 (fontified t) 417 419 (face font-lock-keyword-face fontified t) 419 420 (fontified t) 420 429 (face font-lock-function-name-face fontified t) 429 431 (fontified t) 431 432 (face font-lock-variable-name-face fontified t) 432 433 (fontified t) 433 434 (fontified t) 434 435 (face rust-ampersand-face fontified t) 435 439 (face font-lock-keyword-face fontified t) 439 441 (fontified t) 441 444 (face font-lock-variable-name-face fontified t) 444 446 (fontified t) 446 450 (face font-lock-type-face fontified t) 450 452 (fontified t) 452 455 (face font-lock-type-face fontified t) 455 457 (fontified t) 457 458 (face font-lock-variable-name-face fontified t) 458 459 (fontified t) 459 461 (fontified t) 461 465 (face font-lock-variable-name-face fontified t) 465 467 (fontified t) 467 471 (face font-lock-keyword-face fontified t) 471 472 (fontified t) 472 480 (face font-lock-type-face fontified t) 480 484 (fontified t) 484 486 (fontified t) 486 490 (face font-lock-keyword-face fontified t) 490 491 (fontified t) 491 507 (fontified t) 507 520 (fontified t) 520 531 (fontified t) 531 532 (fontified t) 532 534 (fontified t) 534 539 (face font-lock-keyword-face fontified t) 539 540 (fontified t) 540 541 (fontified t) 541 543 (fontified t) 543 544 (fontified t) 544 545 (fontified t)) . 1300) (undo-tree-id1112 . -544) (undo-tree-id1113 . -544) (undo-tree-id1114 . -125) (undo-tree-id1115 . -544) (undo-tree-id1116 . -148) (undo-tree-id1117 . -270) (undo-tree-id1118 . -353) (undo-tree-id1120 . -329) (undo-tree-id1122 . -545) (t 25818 36027 76058 555000)) ((1300 . 1845)) (25818 37275 270554 913000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1343) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (1344 . 1345) (1342 . 1344) (1340 . 1342) (1329 . 1330) (1300 . 1314) (1299 . 1300) (1322 . 1324) (1301 . 1322) (#("u" 0 1 (fontified t)) . -1301) (undo-tree-id1873 . -1) (#("b" 0 1 (face font-lock-keyword-face fontified t)) . -1302) (undo-tree-id1874 . -1) (#(" " 0 1 (fontified t)) . -1303) (undo-tree-id1875 . -1) 1304 (1300 . 1304) (#("
" 0 1 (fontified t)) . -1300) (undo-tree-id1876 . -1) 1301 (1300 . 1301) (#("t" 0 1 (fontified t)) . -1341) (undo-tree-id1877 . -1) (#("y" 0 1 (fontified t)) . -1342) (undo-tree-id1878 . -1) (#("p" 0 1 (fontified t)) . -1343) (undo-tree-id1879 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -1344) (undo-tree-id1880 . -1) (#(" " 0 1 (fontified t)) . -1345) (undo-tree-id1881 . -1) 1346 (1343 . 1346) (#("e" 0 1 (fontified t)) . -1343) (undo-tree-id1882 . -1) 1344 (1341 . 1344) (1299 . 1301) (1337 . 1339) (#("i" 0 1 (fontified t)) . -1371) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (#("m" 0 1 (fontified t)) . -1372) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (#("p" 0 1 (fontified t)) . -1373) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -1374) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (#(" " 0 1 (fontified t)) . -1375) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -1376) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1377) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1378) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1379) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1380) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1381) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1382) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) 1383 (#("n" 0 1 (face font-lock-type-face fontified t)) . -1383) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1384) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -1385) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1386) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1387) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1388) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1389) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -1390) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (#("<" 0 1 (fontified t)) . -1391) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1392) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1393) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -1394) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (#("<" 0 1 (fontified t)) . -1395) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (#("'" 0 1 (fontified t)) . -1396) (undo-tree-id1933 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1397) (undo-tree-id1934 . -1) (#(">" 0 1 (fontified t)) . -1398) (undo-tree-id1935 . -1) (#(" " 0 1 (fontified t)) . -1399) (undo-tree-id1936 . -1) (#("=" 0 1 (fontified t)) . -1400) (undo-tree-id1937 . -1) (#(" " 0 1 (fontified t)) . -1401) (undo-tree-id1938 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1402) (undo-tree-id1939 . -1) (#(">" 0 1 (fontified t)) . -1403) (undo-tree-id1940 . -1) 1404 (#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -1361) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -1362) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (#("x" 0 1 (face font-lock-variable-name-face fontified t)) . -1363) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (#(":" 0 1 (fontified t)) . -1364) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (#(" " 0 1 (fontified t)) . -1365) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (#("C" 0 1 (face font-lock-variable-name-face fontified t)) . -1366) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (#("," 0 1 (fontified t)) . -1367) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (#(" " 0 1 (fontified t)) . -1368) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) 1369 (#("<" 0 1 (fontified t)) . -1354) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (#("'" 0 1 (fontified t)) . -1355) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1356) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (#("," 0 1 (fontified t)) . -1357) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (#(" " 0 1 (fontified t)) . -1358) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1359) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (#(":" 0 1 (fontified t)) . -1360) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (#(" " 0 1 (fontified t)) . -1361) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (#("'" 0 1 (fontified t)) . -1362) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1363) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (#(">" 0 1 (fontified t)) . -1364) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) 1365) nil (25818 38102 233957 990000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1485) (undo-tree-id885 . -1) (undo-tree-id887 . -1) (undo-tree-id889 . -1) (#("-" 0 1 (fontified t)) . -1486) (undo-tree-id891 . -1) (undo-tree-id893 . -1) (undo-tree-id895 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -1487) (undo-tree-id897 . -1) (undo-tree-id899 . -1) (undo-tree-id901 . -1) (#(" " 0 1 (fontified t)) . -1488) (undo-tree-id903 . -1) (undo-tree-id905 . -1) (undo-tree-id907 . -1) 1489 (#(">" 0 1 (fontified t)) . -1468) (undo-tree-id909 . -1) (undo-tree-id910 . -1) 1469 (1486 . 1490) (1484 . 1485) (1475 . 1477) (#(" " 0 1 (fontified nil)) . 1474) (undo-tree-id912 . -1) (1475 . 1476) (1452 . 1469) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1452) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1453) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1454) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1455) (undo-tree-id919 . -1) (undo-tree-id920 . -1) 1456 (#("c" 0 1 (face font-lock-type-face fontified t)) . -1456) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1457) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (#("(" 0 1 (fontified t)) . -1458) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (#("&" 0 1 (fontified t)) . -1459) (undo-tree-id927 . -1) (#("m" 0 1 (fontified t)) . -1460) (undo-tree-id928 . -1) (#("u" 0 1 (fontified t)) . -1461) (undo-tree-id929 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -1462) (undo-tree-id930 . -1) 1463 (1448 . 1463) (62 . 86) (1412 . 1412) (1412 . 1423) (#("CreateRe" 0 8 (fontified nil)) . 1412) (1412 . 1420) (#("CreateReply (use poise::CreateReply)" 0 36 (fontified nil)) . -1412) (1412 . 1448) (#("CreateRe" 0 8 (face font-lock-type-face fontified t)) . -1412) (undo-tree-id931 . -8) 1420 (1408 . 1420) (1407 . 1408) (1402 . 1410) (1397 . 1402) (#("f" 0 1 (fontified t)) . -1397) (undo-tree-id932 . -1) 1398 (1397 . 1398) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1397) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (#(":" 0 1 (fontified t)) . -1398) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (#(" " 0 1 (fontified t)) . -1399) (undo-tree-id937 . -1) (#("i" 0 1 (fontified t)) . -1400) (undo-tree-id938 . -1) (#("m" 0 1 (fontified t)) . -1401) (undo-tree-id939 . -1) 1402 (1397 . 1402) (1403 . 1409) (1401 . 1403) (1393 . 1401) (#("	" 0 1 (fontified t)) . -1387) 1394 (1388 . 1394) (1385 . 1388) (#("
" 0 1 (fontified t)) . -1385) (undo-tree-id940 . -1) (#("	" 0 1 (fontified t)) . -1386) (undo-tree-id941 . -1) (#("	" 0 1 (fontified t)) . -1387) (undo-tree-id942 . -1) (#("\\" 0 1 (fontified t)) . -1388) (undo-tree-id943 . -1) 1389 (1388 . 1389) (1385 . 1388) (#("," 0 1 (fontified t)) . -1385) (undo-tree-id944 . -1) (undo-tree-id945 . -1) 1386 (1385 . 1386) (1366 . 1375) (1356 . 1359) (1363 . 1364) (#("<" 0 1 (fontified t)) . -1356) (undo-tree-id946 . -1) (#("'" 0 1 (fontified t)) . -1357) (undo-tree-id947 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1358) (undo-tree-id948 . -1) (#("," 0 1 (fontified t)) . -1359) (undo-tree-id949 . -1) (#(" " 0 1 (fontified t)) . -1360) (undo-tree-id950 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1361) (undo-tree-id951 . -1) (#(":" 0 1 (fontified t)) . -1362) (undo-tree-id952 . -1) (#(" " 0 1 (fontified t)) . -1363) (undo-tree-id953 . -1) (#("'" 0 1 (fontified t)) . -1364) (undo-tree-id954 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1365) (undo-tree-id955 . -1) (#(">" 0 1 (fontified t)) . -1366) (undo-tree-id956 . -1) 1367 (#("p" 0 1 (fontified t)) . -1374) (undo-tree-id957 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) 1375 (#("o" 0 1 (fontified t)) . -1375) (undo-tree-id961 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (#("s" 0 1 (fontified t)) . -1376) (undo-tree-id965 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (#("t" 0 1 (fontified t)) . -1377) (undo-tree-id969 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (#("a" 0 1 (fontified nil)) . -1378) (undo-tree-id973 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (#("b" 0 1 (fontified nil)) . -1379) (undo-tree-id977 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (#("l" 0 1 (fontified t)) . -1380) (undo-tree-id981 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (#("e" 0 1 (fontified t)) . -1381) (undo-tree-id985 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (#(":" 0 1 (fontified t)) . -1382) (undo-tree-id989 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (#(" " 0 1 (fontified t)) . -1383) (undo-tree-id993 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (#("i" 0 1 (fontified t)) . -1384) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (#("m" 0 1 (fontified t)) . -1385) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (#("p" 0 1 (fontified t)) . -1386) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -1387) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (#(" " 0 1 (fontified t)) . -1388) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -1389) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1390) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1391) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1392) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1393) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1394) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1395) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) 1396 (#("n" 0 1 (face font-lock-type-face fontified t)) . -1396) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1397) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -1398) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1399) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1400) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1401) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1402) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -1403) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (#("<" 0 1 (fontified t)) . -1404) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1405) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1406) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -1407) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (#("<" 0 1 (fontified t)) . -1408) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (#("'" 0 1 (fontified t)) . -1409) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1410) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (#(">" 0 1 (fontified t)) . -1411) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (#(" " 0 1 (fontified nil)) . -1412) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (#("=" 0 1 (fontified nil)) . -1413) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (#(" " 0 1 (fontified t)) . -1414) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1415) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (#(">" 0 1 (fontified t)) . -1416) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) 1417 (#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -1374) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -1375) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (#("x" 0 1 (face font-lock-variable-name-face fontified t)) . -1376) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (#(":" 0 1 (fontified t)) . -1377) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (#(" " 0 1 (fontified t)) . -1378) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (#("C" 0 1 (face font-lock-variable-name-face fontified t)) . -1379) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (#("," 0 1 (fontified t)) . -1380) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (#(" " 0 1 (fontified t)) . -1381) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) 1382) ((1374 . 1382) (1374 . 1417) (1356 . 1367) (#("F" 0 1 (face font-lock-type-face fontified nil)) . 1363) (#("<F>" 0 1 (fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (fontified nil)) . 1356) (#("builder: " 0 1 (face font-lock-variable-name-face fontified nil) 1 2 (face font-lock-variable-name-face fontified nil) 2 3 (face font-lock-variable-name-face fontified nil) 3 4 (face font-lock-variable-name-face fontified nil) 4 5 (face font-lock-variable-name-face fontified nil) 5 6 (face font-lock-variable-name-face fontified nil) 6 7 (face font-lock-variable-name-face fontified nil) 7 8 (fontified nil) 8 9 (fontified nil)) . 1366) (undo-tree-id1694 . -9) (#("," 0 1 (fontified nil)) . 1385) (undo-tree-id1695 . -1) (1385 . 1386) (#("
		" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1385) (undo-tree-id1696 . -3) (#("\\" 0 1 (fontified nil)) . 1388) (undo-tree-id1697 . -1) (1385 . 1389) (#("
		" 0 1 (fontified t) 1 2 (fontified nil) 2 3 (fontified nil)) . 1385) (undo-tree-id1698 . -3) (undo-tree-id1699 . -1) (undo-tree-id1700 . -3) (undo-tree-id1701 . -1) (undo-tree-id1702 . -3) (undo-tree-id1703 . -1) (undo-tree-id1704 . -3) (#("where " 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil)) . 1388) (undo-tree-id1705 . -6) (undo-tree-id1706 . -6) (undo-tree-id1707 . -6) (undo-tree-id1708 . -6) (1387 . 1388) (#("for<'a> " 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (face font-lock-variable-name-face fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 1393) (undo-tree-id1709 . -8) (undo-tree-id1710 . -4) (undo-tree-id1711 . -7) (undo-tree-id1712 . -4) (#("Fn" 0 2 (face font-lock-type-face fontified nil)) . 1401) (undo-tree-id1713 . -2) (#("Once()" 0 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 1403) (undo-tree-id1714 . -5) (#("F: im" 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 1397) (undo-tree-id1715 . -5) (1397 . 1402) (#("f" 0 1 (fontified nil)) . 1397) (undo-tree-id1716 . -1) (1397 . 1398) (#("F: Fn" 0 1 (face font-lock-variable-name-face fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (face font-lock-type-face fontified nil)) . 1397) (undo-tree-id1717 . -5) (undo-tree-id1718 . -5) (#("Once(), " 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 1402) (undo-tree-id1719 . -8) (undo-tree-id1720 . -8) (#("&" 0 1 (face rust-ampersand-face fontified nil)) . 1407) (#("mut CreateRe" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 12 (face font-lock-type-face fontified nil)) . 1408) (1412 . 1420) (#("CreateReply (use poise::CreateReply)" 0 36 (fontified nil)) . 1412) (1412 . 1448) (#("CreateRe" 0 8 (fontified nil)) . 1412) (1412 . 1420) (#("CreateReply" 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (face font-lock-type-face fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (face font-lock-type-face fontified nil) 8 9 (face font-lock-type-face fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (face font-lock-type-face fontified nil)) . 1412) ("use poise::CreateReply;
" . 62) (#(" -> FnOnce(&mut" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (syntax-table (1) fontified nil) 3 4 (fontified nil) 4 5 (face font-lock-type-face fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (face font-lock-type-face fontified nil) 8 9 (face font-lock-type-face fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil) 13 14 (fontified nil) 14 15 (face font-lock-keyword-face fontified nil)) . 1448) (1452 . 1463) (#("&mut CreateReply>" 0 1 (face rust-ampersand-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (face font-lock-type-face fontified nil) 8 9 (face font-lock-type-face fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (face font-lock-type-face fontified nil) 11 12 (face font-lock-type-face fontified nil) 12 13 (face font-lock-type-face fontified nil) 13 14 (face font-lock-type-face fontified nil) 14 15 (face font-lock-type-face fontified nil) 15 16 (face font-lock-type-face fontified nil) 16 17 (fontified nil)) . 1452) (#("
" 0 1 (fontified nil)) . 1475) (1474 . 1475) (#("		" 0 1 (fontified nil) 1 2 (fontified nil)) . 1475) (#("F" 0 1 (face font-lock-type-face fontified nil)) . 1484) (#(" -> " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (syntax-table (1) fontified nil) 3 4 (fontified nil)) . 1486) (1468 . 1469) (1485 . 1489)) (25818 37275 38863 396000) 0 nil])
([nil nil ((1335 . 1339) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1335) (undo-tree-id1864 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1336) (undo-tree-id1865 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1337) (undo-tree-id1866 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1338) (undo-tree-id1867 . -1) 1339 (#("t" 0 1 (face font-lock-type-face fontified t)) . -1339) (undo-tree-id1868 . -1) 1340 (1344 . 1353) (1342 . 1344)) nil (25818 38102 233873 172000) 0 nil])
([nil nil ((#("F" 0 1 (face font-lock-type-face fontified t)) . -1421) (undo-tree-id1170 . -1) (#(":" 0 1 (fontified t)) . -1422) (undo-tree-id1172 . -1) (#(" " 0 1 (fontified nil)) . -1423) (undo-tree-id1174 . -1) (#("F" 0 1 (face font-lock-type-face fontified nil)) . -1424) (undo-tree-id1176 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1425) (undo-tree-id1178 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1426) (undo-tree-id1180 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1427) (undo-tree-id1182 . -1) 1428 (#("c" 0 1 (face font-lock-type-face fontified t)) . -1428) (undo-tree-id1184 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1429) (undo-tree-id1186 . -1) (#("(" 0 1 (fontified t)) . -1430) (undo-tree-id1188 . -1) (#("&" 0 1 (face rust-ampersand-face fontified t)) . -1431) (undo-tree-id1190 . -1) (#("m" 0 1 (fontified t)) . -1432) (undo-tree-id1192 . -1) (#("u" 0 1 (fontified t)) . -1433) (undo-tree-id1194 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -1434) (undo-tree-id1196 . -1) (#(" " 0 1 (fontified t)) . -1435) (undo-tree-id1198 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1436) (undo-tree-id1200 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1437) (undo-tree-id1202 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1438) (undo-tree-id1204 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1439) (undo-tree-id1206 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1440) (undo-tree-id1208 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1441) (undo-tree-id1210 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -1442) (undo-tree-id1212 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1443) (undo-tree-id1214 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1444) (undo-tree-id1216 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1445) (undo-tree-id1218 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -1446) (undo-tree-id1220 . -1) (#(")" 0 1 (fontified t)) . -1447) (undo-tree-id1222 . -1) (#(" " 0 1 (fontified t)) . -1448) (undo-tree-id1224 . -1) 1449 (#("-" 0 1 (fontified t)) . -1449) (undo-tree-id1226 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -1450) (undo-tree-id1228 . -1) (#(" " 0 1 (fontified t)) . -1451) (undo-tree-id1230 . -1) (#("&" 0 1 (face rust-ampersand-face fontified t)) . -1452) (undo-tree-id1232 . -1) (#("m" 0 1 (fontified t)) . -1453) (undo-tree-id1234 . -1) (#("u" 0 1 (fontified t)) . -1454) (undo-tree-id1236 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -1455) (undo-tree-id1238 . -1) (#(" " 0 1 (fontified t)) . -1456) (undo-tree-id1240 . -1) (#("C" 0 1 (face font-lock-type-face fontified nil)) . -1457) (undo-tree-id1242 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1458) (undo-tree-id1244 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1459) (undo-tree-id1246 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1460) (undo-tree-id1248 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1461) (undo-tree-id1250 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1462) (undo-tree-id1252 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -1463) (undo-tree-id1254 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1464) (undo-tree-id1256 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1465) (undo-tree-id1258 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1466) (undo-tree-id1260 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -1467) (undo-tree-id1262 . -1) (#("," 0 1 (fontified t)) . -1468) (undo-tree-id1264 . -1) (#(" " 0 1 (fontified t)) . -1469) (undo-tree-id1265 . -1) 1470 (t 25818 36418 475747 524000)) ((1421 . 1470)) (25818 37274 775634 45000) 0 nil])
([nil nil ((1417 . 1418) (#("	" 0 1 (fontified nil)) . 1416) (undo-tree-id1798 . -1) (1415 . 1418) (1409 . 1414) (#("m" 0 1 (fontified t)) . -1409) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (#("u" 0 1 (fontified t)) . -1410) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -1411) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (#(" " 0 1 (fontified t)) . -1412) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1413) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1414) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1415) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1416) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) 1417 (1416 . 1417) (1411 . 1416) (1390 . 1411) (1387 . 1390) (#("	" 0 1 (fontified t)) . -1381) 1388 (1382 . 1388) (1379 . 1382) (#("
" 0 1 (fontified t)) . -1339) (undo-tree-id1815 . -1) (#("	" 0 1 (fontified t)) . -1340) (undo-tree-id1816 . -1) 1341 (1358 . 1361) (1368 . 1369) (#("i" 0 1 (fontified t)) . -1368) (undo-tree-id1817 . -1) (#("m" 0 1 (fontified t)) . -1369) (undo-tree-id1818 . -1) (#("p" 0 1 (fontified t)) . -1370) (undo-tree-id1819 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -1371) (undo-tree-id1820 . -1) (#("(" 0 1 (fontified t)) . -1372) (undo-tree-id1821 . -1) 1373 (1365 . 1373) (#("p" 0 1 (fontified t)) . -1365) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (#("o" 0 1 (fontified t)) . -1366) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (#("s" 0 1 (fontified t)) . -1367) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (#("t" 0 1 (fontified t)) . -1368) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (#("a" 0 1 (fontified t)) . -1369) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (#("b" 0 1 (fontified t)) . -1370) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (#("l" 0 1 (fontified t)) . -1371) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (#("e" 0 1 (fontified t)) . -1372) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (#(":" 0 1 (fontified t)) . -1373) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (#(" " 0 1 (fontified t)) . -1374) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) 1375 (#("#[async_trait]
pub trait ReportableRepr {
	async fn 
}" 0 2 (face font-lock-preprocessor-face fontified t) 2 14 (face font-lock-preprocessor-face fontified t) 14 15 (fontified t) 15 18 (face font-lock-keyword-face fontified t) 18 19 (fontified t) 19 24 (face font-lock-keyword-face fontified t) 24 25 (fontified t) 25 39 (face font-lock-type-face fontified t) 39 42 (fontified t) 42 43 (fontified t) 43 48 (face font-lock-keyword-face fontified t) 48 49 (fontified t) 49 51 (face font-lock-keyword-face fontified t) 51 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t)) . 1300) (undo-tree-id1860 . -54) (undo-tree-id1861 . 15) (undo-tree-id1862 . -53) (undo-tree-id1863 . -53)) nil (25818 38102 233862 255000) 0 nil])
([nil nil ((1417 . 1420) (1424 . 1437) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1424) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (#("=" 0 1 (fontified t)) . -1425) (undo-tree-id1135 . -1) 1426 (1425 . 1426) (#("
" 0 1 (fontified t)) . -1417) (undo-tree-id1136 . 1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (#("	" 0 1 (fontified t)) . -1418) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (#("	" 0 1 (fontified t)) . -1419) (undo-tree-id1142 . -1) 1420 (#("f" 0 1 (fontified t)) . -1417) (undo-tree-id1143 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (#("o" 0 1 (fontified t)) . -1418) (undo-tree-id1147 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -1419) (undo-tree-id1151 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (#("<" 0 1 (fontified t)) . -1420) (undo-tree-id1155 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (#("'" 0 1 (fontified t)) . -1421) (undo-tree-id1159 . -1) (undo-tree-id1160 . 1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1422) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (#(">" 0 1 (fontified t)) . -1423) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) 1424) ((1417 . 1424) (1417 . 1420) (#("=" 0 1 (fontified nil)) . 1425) (undo-tree-id1686 . -1) (1424 . 1426) (#("impl FnOnce<>" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 11 (face font-lock-type-face fontified nil) 11 12 (fontified nil) 12 13 (fontified nil)) . 1424) (undo-tree-id1687 . -12) (undo-tree-id1688 . -13) (undo-tree-id1689 . -11) (undo-tree-id1690 . -11) (undo-tree-id1691 . -11) (undo-tree-id1692 . -11) (undo-tree-id1693 . -13) (#("F: " 0 1 (face font-lock-variable-name-face fontified t) 1 3 (fontified t)) . 1417)) (25818 37274 540287 78000) 0 nil])
([nil nil ((1460 . 1461) (1417 . 1418) (#("	" 0 1 (fontified t)) . -1417) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (#("a" 0 1 (fontified t)) . -1418) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (#("s" 0 1 (fontified t)) . -1419) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (#("y" 0 1 (fontified t)) . -1420) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (#("n" 0 1 (fontified t)) . -1421) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (#("c" 0 1 (fontified t)) . -1422) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (#(" " 0 1 (fontified t)) . -1423) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) 1424 (1465 . 1466) (1463 . 1465) (#(")" 0 1 (fontified t)) . -1463) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -1464) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) 1465 (1461 . 1465) (1452 . 1461) (#("Form" 0 4 (fontified nil)) . 1452) (1452 . 1456) (#("Formatter" 0 9 (fontified nil)) . -1452) (1452 . 1461) (#("Form" 0 4 (face font-lock-type-face fontified t)) . -1452) (undo-tree-id1769 . -4) 1456 (1452 . 1456) (1437 . 1452) (1434 . 1437) (1430 . 1434) (#("l" 0 1 (face font-lock-function-name-face fontified t)) . -1430) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (#("y" 0 1 (face font-lock-function-name-face fontified t)) . -1431) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (#("_" 0 1 (face font-lock-function-name-face fontified t)) . -1432) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (#("b" 0 1 (face font-lock-function-name-face fontified t)) . -1433) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (#("u" 0 1 (face font-lock-function-name-face fontified t)) . -1434) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -1435) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (#("l" 0 1 (face font-lock-function-name-face fontified t)) . -1436) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (#("d" 0 1 (face font-lock-function-name-face fontified t)) . -1437) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -1438) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (#("r" 0 1 (face font-lock-function-name-face fontified t)) . -1439) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (#("(" 0 1 (fontified t)) . -1440) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) 1441 (1431 . 1441) (#("b" 0 1 (face font-lock-function-name-face fontified t)) . -1431) (undo-tree-id1792 . -1) (#("u" 0 1 (face font-lock-function-name-face fontified t)) . -1432) (undo-tree-id1793 . -1) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -1433) (undo-tree-id1794 . -1) (#("l" 0 1 (face font-lock-function-name-face fontified t)) . -1434) (undo-tree-id1795 . -1) 1435 (1430 . 1435) (#("l" 0 1 (face font-lock-function-name-face fontified t)) . -1430) (undo-tree-id1796 . -1) (#("y" 0 1 (face font-lock-function-name-face fontified t)) . -1431) (undo-tree-id1797 . -1) 1432 (1426 . 1432) (1418 . 1426)) nil (25818 38102 233806 345000) 0 nil])
([nil nil ((1465 . 1476) (#("CreateRe" 0 8 (fontified nil)) . 1465) (1465 . 1473) (#("CreateReply" 0 11 (fontified nil)) . -1465) (1465 . 1476) (#("CreateRe" 0 8 (face font-lock-type-face fontified t)) . -1465) (undo-tree-id1124 . -8) (undo-tree-id1126 . -8) 1473 (1456 . 1473) (#(" " 0 1 (fontified t)) . -1455) (undo-tree-id1127 . -1) (#("-" 0 1 (fontified t)) . -1456) (undo-tree-id1128 . -1) 1457 (1455 . 1457) (1444 . 1455) (#("Create" 0 6 (fontified nil)) . 1444) (1444 . 1450) (#("CreateReply" 0 11 (fontified nil)) . -1444) (1444 . 1455) (#("Create" 0 6 (face font-lock-type-face fontified t)) . -1444) (undo-tree-id1129 . -6) 1450 (1439 . 1450) (1438 . 1440) (#("<" 0 1 (fontified t)) . -1438) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (#(">" 0 1 (fontified t)) . -1439) (undo-tree-id1132 . -1) 1440) ((1438 . 1440) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 1438) (undo-tree-id1668 . -2) (undo-tree-id1669 . -2) (undo-tree-id1670 . -2) (undo-tree-id1671 . -2) (undo-tree-id1672 . -2) (undo-tree-id1673 . -2) (#("&mut Create" 0 1 (face rust-ampersand-face fontified nil) 1 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 11 (face font-lock-type-face fontified nil)) . 1439) (1444 . 1450) (#("CreateReply" 0 11 (fontified nil)) . 1444) (1444 . 1455) (#("Create" 0 6 (fontified nil)) . 1444) (1444 . 1450) (#("CreateReply" 0 11 (face font-lock-type-face fontified nil)) . 1444) (#(" -" 0 1 (fontified nil) 1 2 (fontified nil)) . 1455) (1455 . 1457) (#(" -> &mut CreateRe" 0 2 (fontified nil) 2 3 (syntax-table (1) fontified nil) 3 4 (fontified nil) 4 5 (face rust-ampersand-face fontified nil) 5 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 17 (face font-lock-type-face fontified nil)) . 1456) (undo-tree-id1674 . -17) (undo-tree-id1675 . -9) (undo-tree-id1676 . -9) (undo-tree-id1677 . -9) (undo-tree-id1678 . -9) (undo-tree-id1679 . -9) (1465 . 1473) (#("CreateReply" 0 11 (fontified nil)) . 1465) (1465 . 1476) (#("CreateRe" 0 8 (fontified nil)) . 1465) (1465 . 1473) (#("CreateReply" 0 11 (face font-lock-type-face fontified t)) . 1465) (undo-tree-id1680 . -7) (undo-tree-id1681 . -7) (undo-tree-id1682 . -7) (undo-tree-id1683 . -7) (undo-tree-id1684 . -7) (undo-tree-id1685 . -7)) (25818 37274 328097 41000) 0 nil])
([nil nil ((1469 . 1475) (#("Res" 0 3 (fontified nil)) . 1469) (1469 . 1472) (#("Result" 0 6 (fontified nil)) . -1469) (1469 . 1475) (#("Res" 0 3 (face font-lock-type-face fontified t)) . -1469) (undo-tree-id2010 . -3) 1472 (1460 . 1472) (t 25818 38102 243423 194000)) nil (25818 38134 78261 492000) 0 nil])
([nil nil ((#("	where F: FnOnce(impl FnOnce(&mut CreateReply) -> &mut CreateReply);
" 0 1 (fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 8 (face font-lock-variable-name-face fontified t) 8 10 (fontified t) 10 16 (face font-lock-type-face fontified t) 16 17 (fontified t) 17 21 (face font-lock-keyword-face fontified t) 21 22 (fontified t) 22 28 (face font-lock-type-face fontified t) 28 29 (fontified t) 29 30 (face rust-ampersand-face fontified t) 30 33 (face font-lock-keyword-face fontified t) 33 34 (fontified t) 34 45 (face font-lock-type-face fontified t) 45 48 (fontified t) 48 49 (syntax-table (1) fontified t) 49 50 (fontified t) 50 51 (face rust-ampersand-face fontified t) 51 54 (face font-lock-keyword-face fontified t) 54 55 (fontified t) 55 66 (face font-lock-type-face fontified t) 66 67 (fontified t) 67 68 (fontified t) 68 69 (fontified t)) . 1410) (undo-tree-id1485 . -7) (undo-tree-id1486 . 2) (undo-tree-id1487 . -68) (undo-tree-id1488 . -28) (undo-tree-id1490 . -62) (undo-tree-id1491 . -62) (undo-tree-id1493 . -66) (undo-tree-id1495 . -66) (undo-tree-id1497 . -66) (undo-tree-id1499 . -66) (undo-tree-id1501 . -66) (undo-tree-id1503 . -66) (undo-tree-id1505 . -66) (undo-tree-id1507 . -66) (undo-tree-id1509 . -66) (undo-tree-id1511 . -62) (undo-tree-id1513 . -62) (undo-tree-id1515 . -62) (undo-tree-id1517 . -62) (undo-tree-id1519 . -62) (undo-tree-id1521 . -69) 1472 (t 25818 36991 207776 387000)) ((1410 . 1479)) (25818 37274 120961 112000) 0 nil])
([nil nil ((1660 . 1675) (1652 . 1655) (#("," 0 1 (fontified t)) . -1657) (undo-tree-id2042 . -1) (#(" " 0 1 (fontified t)) . -1658) (undo-tree-id2043 . -1) 1659 (1657 . 1659) (1563 . 1573) (#("r" 0 1 (fontified t)) . -1563) (undo-tree-id2044 . -1) 1564 (1563 . 1564) (#("o" 0 1 (fontified t)) . -1563) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (#("r" 0 1 (fontified t)) . -1564) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) 1565 (1558 . 1565) (1550 . 1553) (apply yas--snippet-revive 1614 1656 #s(yas--snippet nil nil #s(yas--exit 1653 nil) 84 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1653 nil) 84 nil nil nil nil)) (1614 . 1656) (#("fn report_on_builder(self) -> Self {
		$0
	}" 0 28 (fontified nil) 28 29 (syntax-table (1) fontified nil) 29 44 (fontified nil)) . 1614) (1656 . 1657) (1651 . 1653) (#("    " 0 4 (fontified nil)) . 1651) (1614 . 1659) (#("fn repo" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 7 (fontified nil)) . 1614) (undo-tree-id2049 . -3) (1617 . 1621) (#("fn report_on_builder(..)" 0 24 (fontified nil)) . -1617) (1617 . 1641) (#("repo" 0 4 (face font-lock-function-name-face fontified t)) . -1617) (undo-tree-id2050 . -4) 1621 (1614 . 1621) (1612 . 1614) (#("	" 0 1 (fontified nil)) . -1613) (undo-tree-id2051 . -1) (1614 . 1615) (1612 . 1614) (1610 . 1612) (62 . 86) (1575 . 1575) (1575 . 1586) (#("CreateReply" 0 11 (fontified nil)) . 1575) (1575 . 1586) (#("CreateReply (use poise::CreateReply)" 0 36 (fontified nil)) . -1575) (1575 . 1611) (#("CreateReply" 0 11 (face font-lock-type-face fontified t)) . -1575) (undo-tree-id2052 . -10) (undo-tree-id2053 . -11) 1586 (1585 . 1586) (#("y" 0 1 (face font-lock-type-face fontified t)) . -1585) (undo-tree-id2054 . -1) (#(" " 0 1 (fontified t)) . -1586) (undo-tree-id2055 . -1) 1587 (1584 . 1587) (1432 . 1433) (1580 . 1583) (1564 . 1580) (1549 . 1564) (#("Report" 0 6 (fontified nil)) . 1549) (1549 . 1555) (#("ReportOnBuilder" 0 15 (fontified nil)) . -1549) (1549 . 1564) (#("Report" 0 6 (face font-lock-type-face fontified t)) . -1549) (undo-tree-id2056 . -6) 1555 (1544 . 1555) (1542 . 1544) (1531 . 1539) (1531 . 1532) (#(" " 0 1 (fontified t)) . -1531) (undo-tree-id2057 . -1) 1532 (1525 . 1532) (1492 . 1494) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1492) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -1493) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1494) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1495) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) 1496 (1492 . 1496) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1492) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1493) (undo-tree-id2068 . -1) 1494 (1522 . 1525) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -1522) (undo-tree-id2069 . -1) 1523 (1520 . 1523) (#("l" 0 1 (face font-lock-function-name-face fontified t)) . -1520) (undo-tree-id2070 . -1) 1521 (1514 . 1521) (1492 . 1494) (1509 . 1512) (#("l" 0 1 (face font-lock-function-name-face fontified t)) . -1509) (undo-tree-id2071 . -1) 1510 (1506 . 1510) (#("_" 0 1 (face font-lock-function-name-face fontified t)) . -1506) (undo-tree-id2072 . -1) (#("_" 0 1 (face font-lock-function-name-face fontified t)) . -1507) (undo-tree-id2073 . -1) 1508 (1503 . 1508) (1496 . 1499) (1492 . 1496) (#("M" 0 1 (face font-lock-type-face fontified t)) . -1492) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1493) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1494) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1495) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1496) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -1497) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) 1498 (1500 . 1502) (#("	" 0 1 (fontified nil)) . -1501) (undo-tree-id2086 . -1) (1502 . 1503) (1500 . 1502) (1492 . 1500) (1481 . 1492) (1480 . 1481) (1479 . 1480) (t 25818 38134 86736 272000)) nil (25818 38770 439985 5000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1324) (undo-tree-id1266 . -1) (undo-tree-id1267 . 1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1271 . -1) (undo-tree-id1273 . -1) (undo-tree-id1275 . -1) (undo-tree-id1277 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1282 . -1) (undo-tree-id1284 . -1) (#("
" 0 1 (fontified t)) . -1325) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1289 . -1) (undo-tree-id1291 . -1) (undo-tree-id1293 . -1) (undo-tree-id1295 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1300 . -1) (undo-tree-id1302 . -1) (#("p" 0 1 (fontified t)) . -1326) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1306 . -1) (undo-tree-id1308 . -1) (undo-tree-id1310 . -1) (undo-tree-id1312 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1317 . -1) (#("u" 0 1 (fontified t)) . -1327) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1322 . -1) (undo-tree-id1324 . -1) (undo-tree-id1326 . -1) (undo-tree-id1328 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1333 . -1) (#("b" 0 1 (face font-lock-keyword-face fontified t)) . -1328) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1338 . -1) (undo-tree-id1340 . -1) (undo-tree-id1342 . -1) (undo-tree-id1344 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1349 . -1) (#(" " 0 1 (fontified t)) . -1329) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1354 . -1) (undo-tree-id1356 . -1) (undo-tree-id1358 . -1) (undo-tree-id1360 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1365 . -1) (#("s" 0 1 (fontified t)) . -1330) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1370 . -1) (undo-tree-id1372 . -1) (undo-tree-id1374 . -1) (undo-tree-id1376 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1381 . -1) (#("t" 0 1 (fontified t)) . -1331) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1386 . -1) (undo-tree-id1388 . -1) (undo-tree-id1390 . -1) (undo-tree-id1392 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1397 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1332) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1402 . -1) (undo-tree-id1404 . -1) (undo-tree-id1406 . -1) (undo-tree-id1408 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1413 . -1) (#("u" 0 1 (fontified t)) . -1333) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1418 . -1) (undo-tree-id1420 . -1) (undo-tree-id1422 . -1) (undo-tree-id1424 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1429 . -1) (#("c" 0 1 (fontified t)) . -1334) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1434 . -1) (undo-tree-id1436 . -1) (undo-tree-id1438 . -1) (undo-tree-id1440 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1445 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -1335) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1450 . -1) (undo-tree-id1452 . -1) (undo-tree-id1454 . -1) (undo-tree-id1456 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1461 . -1) (#(" " 0 1 (fontified t)) . -1336) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1466 . -1) (undo-tree-id1468 . -1) (undo-tree-id1470 . -1) (undo-tree-id1472 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1477 . -1) 1337 (1326 . 1337) (1326 . 1327) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1397) (undo-tree-id1479 . -1) 1398 (#("<" 0 1 (fontified t)) . -1381) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1382) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (#(">" 0 1 (fontified t)) . -1383) (undo-tree-id1484 . -1) 1384 (1325 . 1326) (1409 . 1410)) ((#(";" 0 1 (fontified nil)) . 1409) (#("
" 0 1 (fontified nil)) . 1325) (undo-tree-id1666 . -1) (1381 . 1384) (1397 . 1398) (#("
" 0 1 (fontified nil)) . 1326) (#("pub struct " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (face font-lock-keyword-face fontified nil) 10 11 (fontified nil)) . 1326) (undo-tree-id1667 . -11) (1324 . 1337)) (25818 37273 778513 379000) 0 nil])
([nil nil ((#("#[async_trait]
pub trait Reportable {
	async fn report<F>(self, f: F) -> Self
	where F: for<'a> FnOnce(&'a Self);

	fn report_fmt(&self, f: fmt::Formatter<'_>) -> fmt::Result;
}

trait ReportOnBuilder {
	fn report_on_builder<R>(self, reportable: R) -> Self;
}

impl ReportOnBuilder for &mut CreateReply {
	fn report_on_builder<R>(self, reportable: R) -> Self {
		
	}
}
" 0 2 (face font-lock-preprocessor-face fontified t) 2 14 (face font-lock-preprocessor-face fontified t) 14 15 (fontified t) 15 18 (face font-lock-keyword-face fontified t) 18 19 (fontified t) 19 24 (face font-lock-keyword-face fontified t) 24 25 (fontified t) 25 35 (face font-lock-type-face fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 44 (face font-lock-keyword-face fontified t) 44 45 (fontified t) 45 47 (face font-lock-keyword-face fontified t) 47 48 (fontified t) 48 54 (face font-lock-function-name-face fontified t) 54 55 (fontified t) 55 56 (face font-lock-type-face fontified t) 56 57 (fontified t) 57 58 (fontified t) 58 62 (face font-lock-keyword-face fontified t) 62 63 (fontified t) 63 64 (fontified t) 64 65 (face font-lock-variable-name-face fontified t) 65 67 (fontified t) 67 68 (face font-lock-type-face fontified t) 68 71 (fontified t) 71 72 (fontified t syntax-table (1)) 72 73 (fontified t) 73 77 (face font-lock-type-face fontified t) 77 78 (fontified t) 78 79 (fontified t) 79 84 (face font-lock-keyword-face fontified t) 84 85 (fontified t) 85 86 (face font-lock-variable-name-face fontified t) 86 88 (fontified t) 88 91 (face font-lock-keyword-face fontified t) 91 93 (fontified t) 93 94 (face font-lock-variable-name-face fontified t) 94 96 (fontified t) 96 102 (face font-lock-type-face fontified t) 102 103 (fontified t) 103 104 (face rust-ampersand-face fontified t) 104 105 (fontified t) 105 106 (face font-lock-variable-name-face fontified t) 106 107 (fontified t) 107 111 (face font-lock-type-face fontified t) 111 112 (fontified t) 112 114 (fontified t) 114 115 (fontified t) 115 116 (fontified t) 116 118 (face font-lock-keyword-face fontified t) 118 119 (fontified t) 119 129 (face font-lock-function-name-face fontified t) 129 130 (fontified t) 130 131 (face rust-ampersand-face fontified t) 131 135 (face font-lock-keyword-face fontified t) 135 137 (fontified t) 137 138 (face font-lock-variable-name-face fontified t) 138 140 (fontified t) 140 143 (face font-lock-constant-face fontified t) 143 145 (fontified t) 145 154 (face font-lock-type-face fontified t) 154 156 (fontified t) 156 157 (face font-lock-variable-name-face fontified t) 157 161 (fontified t) 161 162 (fontified t syntax-table (1)) 162 163 (fontified t) 163 166 (face font-lock-constant-face fontified t) 166 168 (fontified t) 168 174 (face font-lock-type-face fontified t) 174 175 (fontified t) 175 176 (fontified t) 176 177 (fontified t) 177 178 (fontified t) 178 179 (fontified t) 179 184 (face font-lock-keyword-face fontified t) 184 185 (fontified t) 185 200 (face font-lock-type-face fontified t) 200 203 (fontified t) 203 204 (fontified t) 204 206 (face font-lock-keyword-face fontified t) 206 207 (fontified t) 207 224 (face font-lock-function-name-face fontified t) 224 225 (fontified t) 225 226 (face font-lock-type-face fontified t) 226 227 (fontified t) 227 228 (fontified t) 228 232 (face font-lock-keyword-face fontified t) 232 234 (fontified t) 234 244 (face font-lock-variable-name-face fontified t) 244 246 (fontified t) 246 247 (face font-lock-type-face fontified t) 247 250 (fontified t) 250 251 (syntax-table (1) fontified t) 251 252 (fontified t) 252 256 (face font-lock-type-face fontified t) 256 257 (fontified t) 257 258 (fontified t) 258 260 (fontified t) 260 261 (fontified t) 261 265 (face font-lock-keyword-face fontified t) 265 266 (fontified t) 266 281 (face font-lock-type-face fontified t) 281 282 (fontified t) 282 285 (face font-lock-keyword-face fontified t) 285 286 (fontified t) 286 287 (face rust-ampersand-face fontified t) 287 290 (face font-lock-keyword-face fontified t) 290 291 (fontified t) 291 302 (face font-lock-type-face fontified t) 302 305 (fontified t) 305 306 (fontified t) 306 308 (face font-lock-keyword-face fontified t) 308 309 (fontified t) 309 326 (face font-lock-function-name-face fontified t) 326 327 (fontified t) 327 328 (face font-lock-type-face fontified t) 328 329 (fontified t) 329 330 (fontified t) 330 334 (face font-lock-keyword-face fontified t) 334 336 (fontified t) 336 346 (face font-lock-variable-name-face fontified t) 346 348 (fontified t) 348 349 (face font-lock-type-face fontified t) 349 352 (fontified t) 352 353 (syntax-table (1) fontified t) 353 354 (fontified t) 354 358 (face font-lock-type-face fontified t) 358 359 (fontified t) 359 360 (fontified t) 360 361 (fontified t) 361 366 (fontified t) 366 367 (fontified t) 367 368 (fontified t) 368 369 (fontified t)) . 1326) (undo-tree-id2011 . -369) (undo-tree-id2012 . 6) (undo-tree-id2013 . -368) (undo-tree-id2014 . -54) (undo-tree-id2015 . -54) (undo-tree-id2016 . -177) (undo-tree-id2017 . -24) (undo-tree-id2018 . -37) (undo-tree-id2019 . -64) (undo-tree-id2020 . -369) (undo-tree-id2021 . -77) (undo-tree-id2022 . -54) (undo-tree-id2023 . -155) (undo-tree-id2024 . -115) (undo-tree-id2025 . -369) (undo-tree-id2026 . 20) (undo-tree-id2027 . -369) (undo-tree-id2028 . -369) (undo-tree-id2029 . -369) (undo-tree-id2030 . -369) (undo-tree-id2031 . -369) (undo-tree-id2032 . -369) (undo-tree-id2033 . -369) (undo-tree-id2034 . -369) (undo-tree-id2035 . -369) (undo-tree-id2036 . -369) (undo-tree-id2037 . -367) (undo-tree-id2038 . -367) (undo-tree-id2039 . -367) (undo-tree-id2040 . -367) (undo-tree-id2041 . -369)) nil (25818 38770 439939 139000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1385) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1527 . -1) (undo-tree-id1529 . -1) (undo-tree-id1531 . -1) (undo-tree-id1533 . -1) (undo-tree-id1535 . -1) (#(" " 0 1 (fontified t)) . -1386) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1541 . -1) (undo-tree-id1543 . -1) (undo-tree-id1545 . -1) (undo-tree-id1547 . -1) (undo-tree-id1549 . -1) (#("b" 0 1 (fontified t)) . -1387) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1554 . -1) (undo-tree-id1556 . -1) (undo-tree-id1558 . -1) (undo-tree-id1560 . -1) (undo-tree-id1562 . -1) (#("u" 0 1 (fontified t)) . -1388) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1567 . -1) (undo-tree-id1569 . -1) (undo-tree-id1571 . -1) (undo-tree-id1573 . -1) (undo-tree-id1575 . -1) (#("i" 0 1 (fontified t)) . -1389) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1580 . -1) (undo-tree-id1582 . -1) (undo-tree-id1584 . -1) (undo-tree-id1586 . -1) (undo-tree-id1588 . -1) (#("l" 0 1 (fontified t)) . -1390) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1593 . -1) (undo-tree-id1595 . -1) (undo-tree-id1597 . -1) (undo-tree-id1599 . -1) (undo-tree-id1601 . -1) (#("d" 0 1 (fontified t)) . -1391) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1606 . -1) (undo-tree-id1608 . -1) (undo-tree-id1610 . -1) (undo-tree-id1612 . -1) (undo-tree-id1614 . -1) (#("e" 0 1 (fontified t)) . -1392) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1619 . -1) (undo-tree-id1621 . -1) (undo-tree-id1623 . -1) (undo-tree-id1625 . -1) (undo-tree-id1627 . -1) (#("r" 0 1 (fontified t)) . -1393) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1632 . -1) (undo-tree-id1634 . -1) (undo-tree-id1636 . -1) (undo-tree-id1638 . -1) (undo-tree-id1640 . -1) (#(":" 0 1 (fontified t)) . -1394) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1645 . -1) (undo-tree-id1647 . -1) (undo-tree-id1649 . -1) (undo-tree-id1651 . -1) (undo-tree-id1653 . -1) (#(" " 0 1 (fontified t)) . -1395) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1658 . -1) (undo-tree-id1660 . -1) (undo-tree-id1662 . -1) (undo-tree-id1664 . -1) 1396 (t 25818 37186 427518 893000)) ((1385 . 1396) (t 25818 37192 60845 609000)) (25818 37192 52532 304000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1326) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1327) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) 1328 (1326 . 1328) (t 25818 38770 447353 653000)) nil (25818 43674 513998 561000) 0 nil])
nil
([nil nil ((598 . 599) (578 . 585) (#("O" 0 1 (face font-lock-type-face fontified t)) . -565) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -566) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -567) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -568) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -569) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -570) (undo-tree-id2102 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -571) (undo-tree-id2103 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -572) (undo-tree-id2104 . -1) 573 (t 25818 43674 553525 591000)) nil (25818 43826 81013 863000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . 601) (t 25818 43826 99992 243000)) nil (25818 43830 151662 87000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . 565) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (t 25818 43830 189987 26000)) nil (25818 43842 601670 980000) 0 nil])
([nil nil ((#("use contextualizable::DefaultContextualizable;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 20 (face font-lock-constant-face fontified t) 20 22 (fontified t) 22 45 (face font-lock-type-face fontified t) 45 47 (fontified t)) . 330) (undo-tree-id2107 . -6) (undo-tree-id2108 . -46) (undo-tree-id2109 . -6) (undo-tree-id2110 . -6) (undo-tree-id2111 . -6) (undo-tree-id2112 . -6) (undo-tree-id2113 . -6) (undo-tree-id2114 . -6) (undo-tree-id2115 . -6) (undo-tree-id2116 . -6) (undo-tree-id2117 . -47) 336 (t 25818 43842 629971 210000)) nil (25818 44074 258383 614000) 0 nil])
([nil nil ((530 . 538) (#("OptErr" 0 6 (fontified nil)) . 530) (530 . 536) (#("OptError" 0 8 (fontified nil)) . -530) (530 . 538) (#("OptErr" 0 6 (face font-lock-type-face fontified t)) . -530) (undo-tree-id2118 . -3) (undo-tree-id2119 . -3) (undo-tree-id2120 . -6) (undo-tree-id2121 . -6) (undo-tree-id2122 . -6) (undo-tree-id2123 . -6) 536 (533 . 536) (#("i" 0 1 (face font-lock-type-face fontified t)) . -533) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -534) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -535) (undo-tree-id2130 . -1) 536 (t 25818 44074 283022 331000)) nil (25818 44320 216157 114000) 0 nil])
([nil nil ((1470 . 1474) (1460 . 1470) (62 . 83) (1433 . 1433) (1433 . 1439) (#("Future" 0 6 (fontified nil)) . 1433) (1433 . 1439) (#("Future (use futures::Future)" 0 28 (fontified nil)) . -1433) (1433 . 1461) (#("Future" 0 6 (face font-lock-type-face fontified t)) . -1433) (undo-tree-id2131 . -6) 1439 (1434 . 1439) (1433 . 1434) (1432 . 1433) (1425 . 1428) 1429 (1428 . 1429) (1425 . 1428) (1423 . 1425) (1419 . 1423) (1402 . 1419) (1315 . 1318) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1314) (undo-tree-id2132 . -1) 1315 (1314 . 1315) (1319 . 1330) (1317 . 1319) (#("&" 0 1 (fontified t)) . -1386) (undo-tree-id2133 . -1) (#("s" 0 1 (fontified t)) . -1387) (undo-tree-id2134 . -1) (#("e" 0 1 (fontified t)) . -1388) (undo-tree-id2135 . -1) (#("l" 0 1 (fontified t)) . -1389) (undo-tree-id2136 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1390) (undo-tree-id2137 . -1) 1391 (1386 . 1391) (1377 . 1386) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1377) (undo-tree-id2138 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1378) (undo-tree-id2139 . -1) 1379 (#(":" 0 1 (fontified t)) . -1379) (undo-tree-id2140 . -1) (#(" " 0 1 (fontified t)) . -1380) (undo-tree-id2141 . -1) 1381 (1376 . 1381) (1375 . 1376) (#("	" 0 1 (fontified t)) . -1370) 1376 (1371 . 1376) (1368 . 1371) (1354 . 1368) (1339 . 1347) (#(" " 0 1 (fontified t)) . -1346) (undo-tree-id2142 . -1) (#("i" 0 1 (fontified t)) . -1347) (undo-tree-id2143 . -1) (#("m" 0 1 (fontified t)) . -1348) (undo-tree-id2144 . -1) (#("p" 0 1 (fontified t)) . -1349) (undo-tree-id2145 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -1350) (undo-tree-id2146 . -1) (#(" " 0 1 (fontified t)) . -1351) (undo-tree-id2147 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1352) (undo-tree-id2148 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1353) (undo-tree-id2149 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1354) (undo-tree-id2150 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1355) (undo-tree-id2151 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -1356) (undo-tree-id2152 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1357) (undo-tree-id2153 . -1) 1358 (1340 . 1358) (1339 . 1340) (1319 . 1339) (1317 . 1319) (1291 . 1292) (1280 . 1291) (#("async" 0 5 (fontified nil)) . 1280) (1280 . 1285) (#("async_trait" 0 11 (fontified nil)) . -1280) (1280 . 1291) (#("async" 0 5 (face font-lock-keyword-face fontified t)) . -1280) (undo-tree-id2154 . -5) 1285 (1278 . 1285) (1277 . 1278) (1296 . 1300) (1288 . 1296) (#("R" 0 1 (face font-lock-type-face fontified t)) . -1288) (undo-tree-id2155 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1289) (undo-tree-id2156 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1290) (undo-tree-id2157 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1291) (undo-tree-id2158 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1292) (undo-tree-id2159 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1293) (undo-tree-id2160 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1294) (undo-tree-id2161 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -1295) (undo-tree-id2162 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1296) (undo-tree-id2163 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1297) (undo-tree-id2164 . -1) 1298 (#("
" 0 1 (fontified t)) . -1300) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (#("	" 0 1 (fontified t)) . -1301) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) 1302 (#("a" 0 1 (fontified t)) . -1302) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -1303) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (#("y" 0 1 (fontified t)) . -1304) (undo-tree-id2173 . -1) 1305 (1302 . 1305) (1300 . 1302) (#("	" 0 1 (fontified nil)) . -1301) (undo-tree-id2174 . -1) (1302 . 1303) (1300 . 1302) (1299 . 1300) (1278 . 1299) (#("
" 0 1 (fontified t)) . -1278) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (#("
" 0 1 (fontified t)) . -1279) (undo-tree-id2193 . -1) 1280 (1279 . 1280) (t 25818 44320 239408 184000)) nil (25818 46899 725706 531000) 0 nil])
([nil nil ((1476 . 1477)) nil (25818 46899 725639 439000) 0 nil])
([nil nil ((1624 . 1628) (#("Self" 0 4 (fontified nil)) . 1624) (1624 . 1628) (#("Self" 0 4 (face font-lock-type-face fontified t)) . -1624) (undo-tree-id2209 . -4) (undo-tree-id2210 . -4) (undo-tree-id2211 . -4) (undo-tree-id2212 . -4) 1628 (1623 . 1628) (1617 . 1618) (1619 . 1622) (1596 . 1597) (1605 . 1606) (1492 . 1506) (1491 . 1492) (1415 . 1419) (1357 . 1362) (1356 . 1357) (#("i" 0 1 (fontified t)) . -1409) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (#("m" 0 1 (fontified t)) . -1410) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (#("p" 0 1 (fontified t)) . -1411) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -1412) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (#(" " 0 1 (fontified t)) . -1413) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1414) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1415) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1416) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1417) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (#("r" 0 1 (face font-lock-type-face fontified nil)) . -1418) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (#("e" 0 1 (face font-lock-type-face fontified nil)) . -1419) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (#("<" 0 1 (fontified nil)) . -1420) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1421) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1422) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1423) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1424) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1425) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1426) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) 1427 (#(" " 0 1 (fontified t)) . -1427) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) 1428 (1420 . 1428) (1414 . 1420) (#("Future" 0 6 (fontified nil)) . 1414) (1414 . 1420) (#("Future" 0 6 (face font-lock-type-face fontified t)) . -1414) (undo-tree-id2263 . -6) 1420 (1405 . 1420) (1636 . 1637) (1627 . 1632) (1598 . 1599) (1589 . 1590) (#(" " 0 1 (fontified nil)) . 1588) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (1589 . 1590) (1588 . 1589) (apply yas--snippet-revive 1542 1655 #s(yas--snippet nil nil #s(yas--exit 1652 nil) 114 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1652 nil) 114 nil nil nil nil)) (1542 . 1655) (#("fn inspect_err_async<Fut,F>(&self,inspector:F)where F:FnOnce(&Self::Error) -> Fut,Fut:Future<Output = ()> {
		$0
	}" 0 76 (fontified nil) 76 77 (syntax-table (1) fontified nil) 77 115 (fontified nil)) . 1542) (1655 . 1656) (1650 . 1652) (#("    " 0 4 (fontified nil)) . 1650) (1542 . 1658) (#("fn insp" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 7 (fontified nil)) . 1542) (undo-tree-id2266 . -3) (1545 . 1549) (#("fn inspect_err_async(..)" 0 24 (fontified nil)) . -1545) (1545 . 1569) (#("insp" 0 4 (face font-lock-function-name-face fontified t)) . -1545) (undo-tree-id2267 . -4) 1549 (1542 . 1549) (1540 . 1542) (1536 . 1540) (1525 . 1536) (1523 . 1525) (#("	" 0 1 (fontified nil)) . -1524) (undo-tree-id2268 . -1) (1525 . 1526) (1523 . 1525) (1504 . 1523) (1489 . 1504) (#("Async" 0 5 (fontified nil)) . 1489) (1489 . 1494) (#("AsyncInspectErr" 0 15 (fontified nil)) . -1489) (1489 . 1504) (#("Async" 0 5 (face font-lock-type-face fontified t)) . -1489) (undo-tree-id2269 . -5) 1494 (#("I" 0 1 (face font-lock-type-face fontified t)) . -1494) (undo-tree-id2270 . -1) (#("N" 0 1 (face font-lock-type-face fontified t)) . -1495) (undo-tree-id2271 . -1) 1496 (1493 . 1496) (1482 . 1493) (#(" " 0 1 (fontified t)) . -1482) (undo-tree-id2272 . -1) 1483 (1478 . 1483) (1476 . 1478) (t 25818 46899 733419 770000)) nil (25818 47004 116713 856000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -1599) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) 1600 (#("&" 0 1 (face rust-ampersand-face fontified t)) . -1391) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (#("=" 0 1 (fontified t)) . -1392) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) 1393 (1392 . 1393) (#("	" 0 1 (fontified nil)) . -1716) (undo-tree-id2208 . -1) (1717 . 1718) (1713 . 1717) (1711 . 1713) (1701 . 1711)) nil (25818 47004 116660 490000) 0 nil])
([nil nil ((1727 . 1739) (1726 . 1727) (1722 . 1726) (1715 . 1716) (#("	" 0 1 (fontified nil)) . -1724) (undo-tree-id2273 . -1) (1725 . 1726) (1721 . 1725) (1714 . 1721) (#(" " 0 1 (fontified t)) . -1714) (undo-tree-id2274 . -1) (#("i" 0 1 (fontified t)) . -1715) (undo-tree-id2275 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -1716) (undo-tree-id2276 . -1) 1717 (1699 . 1717) (#("match self {
			Ok(x) => 
			Err(e
		}" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 10 (face font-lock-keyword-face fontified t) 10 13 (fontified t) 13 16 (fontified t) 16 18 (face font-lock-type-face fontified t) 18 23 (fontified t) 23 24 (syntax-table (1) fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 29 (fontified t) 29 32 (face font-lock-type-face fontified t) 32 34 (fontified t) 34 35 (fontified t) 35 38 (fontified t)) . 1699) (undo-tree-id2277 . -38) (undo-tree-id2278 . -33) (undo-tree-id2279 . 4) (#("i" 0 1 (fontified t)) . -1724) (undo-tree-id2280 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -1725) (undo-tree-id2281 . -1) (#("s" 0 1 (fontified t)) . -1726) (undo-tree-id2282 . -1) (#("p" 0 1 (fontified t)) . -1727) (undo-tree-id2283 . -1) (#("e" 0 1 (fontified t)) . -1728) (undo-tree-id2284 . -1) (#("c" 0 1 (fontified t)) . -1729) (undo-tree-id2285 . -1) (#("t" 0 1 (fontified t)) . -1730) (undo-tree-id2286 . -1) (#("o" 0 1 (fontified t)) . -1731) (undo-tree-id2287 . -1) (#("r" 0 1 (fontified t)) . -1732) (undo-tree-id2288 . -1) (#("(" 0 1 (fontified t)) . -1733) (undo-tree-id2289 . -1) (#("x" 0 1 (fontified t)) . -1734) (undo-tree-id2290 . -1) (#(")" 0 1 (fontified t)) . -1735) (undo-tree-id2291 . -1) (#("," 0 1 (fontified t)) . -1736) (undo-tree-id2292 . -1) 1737 (1741 . 1746) (1737 . 1741) (1736 . 1737) (1733 . 1736) (1724 . 1733) (#("inspec" 0 6 (fontified nil)) . 1724) (1724 . 1730) (#("inspector" 0 9 (fontified nil)) . -1724) (1724 . 1733) (#("inspec" 0 6 (fontified t)) . -1724) (undo-tree-id2293 . -6) 1730 (1715 . 1730) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1715) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1716) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -1717) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1718) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (#("(" 0 1 (fontified t)) . -1719) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) 1720 (1715 . 1720) (1711 . 1715) (1718 . 1722) (#("self" 0 4 (fontified nil)) . 1718) (1718 . 1722) (#("self" 0 4 (face font-lock-keyword-face fontified t)) . -1718) (undo-tree-id2304 . -4) 1722 (1718 . 1722) (1715 . 1718) (t 25818 47004 123254 950000)) nil (25818 47050 556922 263000) 0 nil])
([nil nil ((1537 . 1546) (#("StdResult" 0 3 (fontified nil) 3 9 (face font-lock-type-face fontified nil)) . 1537) (undo-tree-id2305 . 6) (1537 . 1540) (#("StdResult" 0 9 (fontified nil)) . -1537) (1537 . 1546) (#("Std" 0 3 (face font-lock-type-face fontified t)) . -1537) (undo-tree-id2306 . -3) (undo-tree-id2307 . -3) (undo-tree-id2308 . -3) (undo-tree-id2309 . -3) (undo-tree-id2310 . -3) (undo-tree-id2311 . -3) (undo-tree-id2312 . -3) 1540 (1537 . 1540) (t 25818 47050 589854 208000)) nil (25818 47061 768211 365000) 0 nil])
([nil nil ((1573 . 1579) (t 25818 47061 789838 450000)) nil (25818 47072 919259 393000) 0 nil])
([nil nil ((1676 . 1680) (#("Send" 0 4 (fontified nil)) . 1676) (1676 . 1680) (#("Send" 0 4 (face font-lock-type-face fontified t)) . -1676) (undo-tree-id2313 . -4) (undo-tree-id2314 . -4) (undo-tree-id2315 . -4) (undo-tree-id2316 . -4) (undo-tree-id2317 . -4) (undo-tree-id2318 . -4) (undo-tree-id2319 . -4) (undo-tree-id2320 . -4) (undo-tree-id2321 . -4) (undo-tree-id2322 . -4) 1680 (1673 . 1680) (t 25818 47072 929822 957000)) nil (25818 47095 247037 417000) 0 nil])
([nil nil ((1653 . 1660) (#(" " 0 1 (fontified t)) . -1680) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (#("+" 0 1 (fontified t)) . -1681) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (#(" " 0 1 (fontified t)) . -1682) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1683) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1684) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1685) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1686) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (#("=" 0 1 (fontified t)) . -1687) (undo-tree-id2344 . -1) 1688 (1687 . 1688) (1429 . 1436) (t 25818 47095 266459 101000)) nil (25818 47115 945824 894000) 0 nil])
([nil nil ((1762 . 1767) (#("await" 0 5 (fontified nil)) . -1762) (1762 . 1767) (1761 . 1762) (#("," 0 1 (fontified t)) . -1761) (undo-tree-id2345 . -1) 1762 (1761 . 1762) (t 25818 47115 953098 112000)) nil (25818 47145 772896 670000) 0 nil])
([nil nil ((1720 . 1724) (#("Send" 0 4 (fontified nil)) . 1720) (1720 . 1724) (#("Send" 0 4 (face font-lock-type-face fontified t)) . -1720) (undo-tree-id2346 . -4) (undo-tree-id2347 . -4) 1724 (1717 . 1724) (t 25818 47145 803059 179000)) nil (25818 47152 758713 210000) 0 nil])
([nil nil ((1496 . 1500) (#("Send" 0 4 (fontified nil)) . 1496) (1496 . 1500) (#("Send" 0 4 (face font-lock-type-face fontified t)) . -1496) (undo-tree-id2348 . -4) (undo-tree-id2349 . -4) (undo-tree-id2350 . -4) (undo-tree-id2351 . -4) (undo-tree-id2352 . -4) (undo-tree-id2353 . -4) (undo-tree-id2354 . -4) (undo-tree-id2355 . -4) (undo-tree-id2356 . -4) (undo-tree-id2357 . -4) 1500 (1493 . 1500) (t 25818 47153 616382 503000)) nil (25818 47163 395120 748000) 0 nil])
([nil nil ((1567 . 1584) (t 25818 47163 416370 61000)) nil (25818 47222 419485 334000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1803) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 1804 (1803 . 1804) (t 25818 47222 469630 773000)) nil (25822 19533 190741 201000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 1769) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (t 25822 19533 265981 923000)) nil (25822 19610 65230 466000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 1691) (t 25822 19610 89309 95000)) nil (25822 19622 228295 278000) 0 nil])
([nil nil ((1789 . 1790) (1691 . 1692)) nil (25822 19622 228287 999000) 0 nil])
([nil nil ((1810 . 1816) (1805 . 1810) (1779 . 1792) (t 25822 19622 252641 456000)) nil (25822 19774 171104 794000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1810) 1824 (1805 . 1806) (#(":" 0 1 (fontified t)) . -1805) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 1806 (1805 . 1806) (t 25822 19774 192629 358000)) nil (25822 19779 643643 357000) 0 nil])
([nil nil ((1518 . 1525) (t 25822 19779 689295 589000)) nil (25823 39615 736691 421000) 0 nil])
([nil nil ((1312 . 1319) (t 25823 39615 760769 747000)) nil (25823 41162 482500 372000) 0 nil])
([nil nil ((#("(" 0 1 (face font-lock-preprocessor-face fontified t)) . -1518) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("?" 0 1 (face font-lock-preprocessor-face fontified t)) . -1519) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("S" 0 1 (face font-lock-preprocessor-face fontified t)) . -1520) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("e" 0 1 (face font-lock-preprocessor-face fontified t)) . -1521) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("n" 0 1 (face font-lock-preprocessor-face fontified t)) . -1522) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("d" 0 1 (face font-lock-preprocessor-face fontified t)) . -1523) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#(")" 0 1 (face font-lock-preprocessor-face fontified t)) . -1524) (undo-tree-id78 . -1) (undo-tree-id79 . -1) 1525 (#("(" 0 1 (face font-lock-preprocessor-face fontified t)) . -1312) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (#("?" 0 1 (face font-lock-preprocessor-face fontified t)) . -1313) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("S" 0 1 (face font-lock-preprocessor-face fontified t)) . -1314) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("e" 0 1 (face font-lock-preprocessor-face fontified t)) . -1315) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("n" 0 1 (face font-lock-preprocessor-face fontified t)) . -1316) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("d" 0 1 (face font-lock-preprocessor-face fontified t)) . -1317) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("=" 0 1 (face font-lock-preprocessor-face fontified t)) . -1318) (undo-tree-id158 . -1) (undo-tree-id159 . -1) 1319 (1318 . 1319) (#(")" 0 1 (face font-lock-preprocessor-face fontified t)) . -1318) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) 1319) nil (25826 5828 330037 350000) 0 nil] [nil nil ((#("#[async_trait(?Send)]
pub trait AsyncInspectErr {
	type Error;
	async fn inspect_err_async<Fut, F>(self, inspector: F) -> Self
	where F: Send + FnOnce(&Self::Error) -> Fut,
		  Fut: Future<Output = ()> + Send;
}

#[async_trait(?Send)]
impl<T, E> AsyncInspectErr for StdResult<T, E> where Self: Send {
	type Error = E;
	async fn inspect_err_async<Fut, F>(self, inspector: F) -> Self
	where F: Send + FnOnce(&Self::Error) -> Fut,
		  Fut: Future<Output = ()> + Send {
		if let Err(e) = self {
			let future = inspector(&e);
			future.await;
		}
		self
	}
}
" 0 21 (face font-lock-preprocessor-face fontified t) 21 22 (fontified t) 22 25 (face font-lock-keyword-face fontified t) 25 26 (fontified t) 26 31 (face font-lock-keyword-face fontified t) 31 32 (fontified t) 32 47 (face font-lock-type-face fontified t) 47 51 (fontified t) 51 55 (face font-lock-keyword-face fontified t) 55 56 (fontified t) 56 61 (face font-lock-type-face fontified t) 61 64 (fontified t) 64 69 (face font-lock-keyword-face fontified t) 69 70 (fontified t) 70 72 (face font-lock-keyword-face fontified t) 72 73 (fontified t) 73 90 (face font-lock-function-name-face fontified t) 90 91 (fontified t) 91 94 (face font-lock-type-face fontified t) 94 96 (fontified t) 96 97 (face font-lock-type-face fontified t) 97 99 (fontified t) 99 103 (face font-lock-keyword-face fontified t) 103 105 (fontified t) 105 114 (face font-lock-variable-name-face fontified t) 114 116 (fontified t) 116 117 (face font-lock-type-face fontified t) 117 120 (fontified t) 120 121 (fontified t syntax-table (1)) 121 122 (fontified t) 122 126 (face font-lock-type-face fontified t) 126 128 (fontified t) 128 133 (face font-lock-keyword-face fontified t) 133 134 (fontified t) 134 135 (face font-lock-variable-name-face fontified t) 135 137 (fontified t) 137 141 (face font-lock-type-face fontified t) 141 144 (fontified t) 144 150 (face font-lock-type-face fontified t) 150 151 (fontified t) 151 152 (face rust-ampersand-face fontified t) 152 156 (face font-lock-type-face fontified t) 156 158 (fontified t) 158 163 (face font-lock-type-face fontified t) 163 166 (fontified t) 166 167 (fontified t syntax-table (1)) 167 168 (fontified t) 168 171 (face font-lock-type-face fontified t) 171 177 (fontified t) 177 180 (face font-lock-variable-name-face fontified t) 180 182 (fontified t) 182 188 (face font-lock-type-face fontified t) 188 189 (fontified t) 189 195 (face font-lock-type-face fontified t) 195 204 (fontified t) 204 208 (face font-lock-type-face fontified t) 208 209 (fontified t) 209 210 (fontified t) 210 213 (fontified t) 213 234 (face font-lock-preprocessor-face fontified t) 234 235 (fontified t) 235 239 (face font-lock-keyword-face fontified t) 239 240 (fontified t) 240 241 (face font-lock-type-face fontified t) 241 243 (fontified t) 243 244 (face font-lock-type-face fontified t) 244 246 (fontified t) 246 261 (face font-lock-type-face fontified t) 261 262 (fontified t) 262 265 (face font-lock-keyword-face fontified t) 265 266 (fontified t) 266 275 (face font-lock-type-face fontified t) 275 276 (fontified t) 276 277 (face font-lock-type-face fontified t) 277 279 (fontified t) 279 280 (face font-lock-type-face fontified t) 280 282 (fontified t) 282 287 (face font-lock-keyword-face fontified t) 287 288 (fontified t) 288 292 (face font-lock-variable-name-face fontified t) 292 294 (fontified t) 294 298 (face font-lock-type-face fontified t) 298 302 (fontified t) 302 306 (face font-lock-keyword-face fontified t) 306 307 (fontified t) 307 312 (face font-lock-type-face fontified t) 312 315 (fontified t) 315 316 (face font-lock-type-face fontified t) 316 319 (fontified t) 319 324 (face font-lock-keyword-face fontified t) 324 325 (fontified t) 325 327 (face font-lock-keyword-face fontified t) 327 328 (fontified t) 328 345 (face font-lock-function-name-face fontified t) 345 346 (fontified t) 346 349 (face font-lock-type-face fontified t) 349 351 (fontified t) 351 352 (face font-lock-type-face fontified t) 352 354 (fontified t) 354 358 (face font-lock-keyword-face fontified t) 358 360 (fontified t) 360 369 (face font-lock-variable-name-face fontified t) 369 371 (fontified t) 371 372 (face font-lock-type-face fontified t) 372 375 (fontified t) 375 376 (fontified t syntax-table (1)) 376 377 (fontified t) 377 381 (face font-lock-type-face fontified t) 381 382 (fontified t) 382 383 (fontified t) 383 388 (face font-lock-keyword-face fontified t) 388 389 (fontified t) 389 390 (face font-lock-variable-name-face fontified t) 390 392 (fontified t) 392 396 (face font-lock-type-face fontified t) 396 399 (fontified t) 399 405 (face font-lock-type-face fontified t) 405 406 (fontified t) 406 407 (face rust-ampersand-face fontified t) 407 411 (face font-lock-type-face fontified t) 411 413 (fontified t) 413 418 (face font-lock-type-face fontified t) 418 421 (fontified t) 421 422 (fontified t syntax-table (1)) 422 423 (fontified t) 423 426 (face font-lock-type-face fontified t) 426 428 (fontified t) 428 432 (fontified t) 432 435 (face font-lock-variable-name-face fontified t) 435 437 (fontified t) 437 443 (face font-lock-type-face fontified t) 443 444 (fontified t) 444 450 (face font-lock-type-face fontified t) 450 459 (fontified t) 459 463 (face font-lock-type-face fontified t) 463 466 (fontified t) 466 468 (fontified t) 468 470 (face font-lock-keyword-face fontified t) 470 471 (fontified t) 471 474 (face font-lock-keyword-face fontified t) 474 475 (fontified t) 475 478 (face font-lock-type-face fontified t) 478 484 (fontified t) 484 488 (face font-lock-keyword-face fontified t) 488 491 (fontified t) 491 494 (fontified t) 494 497 (face font-lock-keyword-face fontified t) 497 498 (fontified t) 498 504 (face font-lock-variable-name-face fontified t) 504 507 (fontified t) 507 516 (fontified t) 516 517 (fontified t) 517 518 (face rust-ampersand-face fontified t) 518 522 (fontified t) 522 532 (fontified t) 532 537 (face font-lock-keyword-face fontified t) 537 539 (fontified t) 539 543 (fontified t) 543 545 (fontified t) 545 549 (face font-lock-keyword-face fontified t) 549 555 (fontified t)) . 1299) (undo-tree-id36 . -555) (undo-tree-id37 . 535) (undo-tree-id38 . -554) (undo-tree-id39 . -542) (undo-tree-id40 . -541) (undo-tree-id41 . -541) (undo-tree-id42 . -537) (undo-tree-id43 . 535) (undo-tree-id44 . -555) (undo-tree-id45 . -555) (undo-tree-id47 . -19) (undo-tree-id49 . -19) (undo-tree-id50 . -555) (undo-tree-id52 . -22) (undo-tree-id54 . -22) (undo-tree-id56 . -22) (undo-tree-id58 . -555) (undo-tree-id60 . -555) (undo-tree-id62 . -555) (undo-tree-id64 . -555) 1854 (t 25823 39633 404103 705000)) ((1299 . 1854) (t 25823 39638 767437 223000)) (25823 39638 731351 533000) 0 nil])
([nil nil ((1588 . 1592) (#("Sync" 0 4 (fontified nil)) . 1588) (1588 . 1592) (#("Sync" 0 4 (face font-lock-type-face fontified nil)) . 1588) (1573 . 1592) (#("E: Send + " 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (face font-lock-type-face fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil)) . 1573) (1573 . 1583) (#("Self: Send + Sync" 0 1 (face font-lock-variable-name-face fontified nil) 1 2 (face font-lock-variable-name-face fontified nil) 2 3 (face font-lock-variable-name-face fontified nil) 3 4 (face font-lock-variable-name-face fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (face font-lock-type-face fontified nil) 8 9 (face font-lock-type-face fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil) 13 14 (face font-lock-type-face fontified nil) 14 15 (face font-lock-type-face fontified nil) 15 16 (face font-lock-type-face fontified nil) 16 17 (face font-lock-type-face fontified nil)) . 1573) (undo-tree-id155 . -10) (undo-tree-id156 . -10) (undo-tree-id157 . -10) (undo-tree-id158 . -10) (undo-tree-id159 . -10) (1583 . 1590)) ((#(" + Sync" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (face font-lock-type-face fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face fontified nil)) . 1583) (1573 . 1590) (#("E: Send +" 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (face font-lock-type-face fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (fontified nil) 8 9 (fontified nil)) . 1573) (#(" " 0 1 (fontified nil)) . 1582) (1573 . 1583) (#("Self: Send, E: Sync" 0 1 (face font-lock-variable-name-face fontified nil) 1 2 (face font-lock-variable-name-face fontified nil) 2 3 (face font-lock-variable-name-face fontified nil) 3 4 (face font-lock-variable-name-face fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (face font-lock-type-face fontified nil) 8 9 (face font-lock-type-face fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (face font-lock-variable-name-face fontified nil) 13 15 (fontified nil) 15 19 (face font-lock-type-face fontified nil)) . 1573) (undo-tree-id148 . -15) (undo-tree-id149 . -15) (undo-tree-id151 . -12) (undo-tree-id153 . -15) (1588 . 1592) (#("Sync" 0 4 (fontified nil)) . 1588) (1588 . 1592) (#("Sync" 0 4 (face font-lock-type-face fontified t)) . 1588)) (25826 5830 270201 211000) 0 nil])
nil
([nil nil ((1588 . 1595)) ((#("Send + " 0 4 (face font-lock-type-face fontified t) 4 7 (fontified t)) . 1588)) (25826 5830 565582 51000) 0 nil])
([nil nil ((1353 . 1358) (1354 . 1356) (1348 . 1354) (#(" " 0 1 (fontified t)) . -1348) (undo-tree-id160 . -1) (undo-tree-id161 . -1) 1349 (1347 . 1349) (1326 . 1347) (1321 . 1326) (1319 . 1321) (#("	" 0 1 (fontified nil)) . -1320) (undo-tree-id162 . -1) (1321 . 1322) (1319 . 1321) (1313 . 1319) (1312 . 1313) (1300 . 1312) (#("i" 0 1 (fontified t)) . -1300) (undo-tree-id163 . -1) (#("a" 0 1 (fontified t)) . -1301) (undo-tree-id164 . -1) (#("t" 0 1 (fontified t)) . -1302) (undo-tree-id165 . -1) (#(" " 0 1 (fontified t)) . -1303) (undo-tree-id166 . -1) 1304 (1298 . 1304) (#("i" 0 1 (fontified t)) . -1298) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#("m" 0 1 (fontified t)) . -1299) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#("p" 0 1 (fontified t)) . -1300) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -1301) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#(" " 0 1 (fontified t)) . -1302) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("I" 0 1 (face font-lock-type-face fontified nil)) . -1303) (undo-tree-id177 . -1) (#("n" 0 1 (face font-lock-type-face fontified nil)) . -1304) (undo-tree-id178 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1305) (undo-tree-id179 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1306) (undo-tree-id180 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1307) (undo-tree-id181 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -1308) (undo-tree-id182 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1309) (undo-tree-id183 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1310) (undo-tree-id184 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1311) (undo-tree-id185 . -1) (#(" " 0 1 (fontified t)) . -1312) (undo-tree-id186 . -1) 1313 (1303 . 1313) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1303) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1304) (undo-tree-id189 . -1) (undo-tree-id190 . -1) 1305 (1303 . 1305) (1298 . 1303) (1297 . 1298) (t 25826 5832 231392 638000)) nil (25826 6185 502694 772000) 0 nil] [nil nil ((1572 . 1573) (#(" " 0 1 (fontified t)) . -1572) (undo-tree-id216 . -1) (undo-tree-id218 . -1) (undo-tree-id220 . -1) (undo-tree-id222 . -1) (undo-tree-id224 . -1) (#("S" 0 1 (face font-lock-variable-name-face fontified t)) . -1573) (undo-tree-id227 . -1) (undo-tree-id229 . -1) (undo-tree-id231 . -1) (undo-tree-id233 . -1) (undo-tree-id235 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -1574) (undo-tree-id238 . -1) (undo-tree-id240 . -1) (undo-tree-id242 . -1) (undo-tree-id244 . -1) (undo-tree-id246 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -1575) (undo-tree-id249 . -1) (undo-tree-id251 . -1) (undo-tree-id253 . -1) (undo-tree-id255 . -1) (undo-tree-id257 . -1) (#("f" 0 1 (face font-lock-variable-name-face fontified t)) . -1576) (undo-tree-id260 . -1) (undo-tree-id262 . -1) (undo-tree-id264 . -1) (undo-tree-id266 . -1) (#(":" 0 1 (fontified t)) . -1577) (undo-tree-id269 . -1) (undo-tree-id271 . -1) (undo-tree-id273 . -1) (undo-tree-id275 . -1) (#(" " 0 1 (fontified t)) . -1578) (undo-tree-id278 . -1) (undo-tree-id280 . -1) (undo-tree-id282 . -1) (undo-tree-id284 . -1) (#("S" 0 1 (face font-lock-variable-name-face fontified t)) . -1579) (undo-tree-id287 . -1) (undo-tree-id289 . -1) (undo-tree-id291 . -1) (undo-tree-id293 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -1580) (undo-tree-id296 . -1) (undo-tree-id298 . -1) (undo-tree-id300 . -1) (undo-tree-id302 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -1581) (undo-tree-id305 . -1) (undo-tree-id307 . -1) (undo-tree-id309 . -1) (undo-tree-id311 . -1) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -1582) (undo-tree-id314 . -1) (undo-tree-id316 . -1) (undo-tree-id318 . -1) (undo-tree-id320 . -1) (#("," 0 1 (fontified t)) . -1583) (undo-tree-id323 . -1) (undo-tree-id325 . -1) (undo-tree-id327 . -1) (undo-tree-id329 . -1) (#(" " 0 1 (fontified t)) . -1584) (undo-tree-id332 . -1) (undo-tree-id334 . -1) 1585 (t 25823 41225 907546 981000)) ((1572 . 1585) (#(" " 0 1 (fontified t)) . 1572)) (25826 5825 671964 500000) 0 nil])
([nil nil ((1351 . 1357) (#("Output (as InspectFn)" 0 21 (fontified nil)) . -1351) (1351 . 1372) (1346 . 1351) (1340 . 1346) (1335 . 1339) (1335 . 1336) (1314 . 1317) (1321 . 1332) (#("(" 0 1 (fontified t)) . -1321) (undo-tree-id191 . -1) 1322 (1321 . 1322) (1317 . 1321) (t 25826 6185 516885 746000)) nil (25826 6298 297885 188000) 0 nil])
([nil nil ((1580 . 1584) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1580) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1581) (#("," 0 1 (fontified t)) . -1582) 1583 (1572 . 1583) (t 25823 41706 400901 960000)) ((#(" Self: SEn," 0 1 (fontified nil) 1 5 (face font-lock-variable-name-face fontified nil) 5 7 (fontified nil) 7 8 (face font-lock-type-face fontified nil) 8 9 (face font-lock-type-face fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (fontified nil)) . 1572) (1580 . 1583) (#("end," 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t)) . 1580)) (25826 5825 248910 60000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1320) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#(" " 0 1 (fontified t)) . -1321) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1322) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1323) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1324) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1325) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -1326) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1327) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (#("(" 0 1 (fontified t)) . -1328) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("s" 0 1 (fontified t)) . -1329) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("e" 0 1 (fontified t)) . -1330) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (#("l" 0 1 (fontified t)) . -1331) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1332) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("," 0 1 (fontified t)) . -1333) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#(" " 0 1 (fontified t)) . -1334) (undo-tree-id236 . -1) (#("&" 0 1 (fontified t)) . -1335) (undo-tree-id237 . -1) 1336 (#("'" 0 1 (fontified t)) . -1336) (undo-tree-id238 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1337) (undo-tree-id239 . -1) (#(" " 0 1 (fontified t)) . -1338) (undo-tree-id240 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1339) (undo-tree-id241 . -1) (#(")" 0 1 (fontified t)) . -1340) (undo-tree-id242 . -1) (#(" " 0 1 (fontified t)) . -1341) (undo-tree-id243 . -1) (#("-" 0 1 (fontified t)) . -1342) (undo-tree-id244 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -1343) (undo-tree-id245 . -1) (#(" " 0 1 (fontified t)) . -1344) (undo-tree-id246 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1345) (undo-tree-id247 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1346) (undo-tree-id248 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1347) (undo-tree-id249 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1348) (undo-tree-id250 . -1) (#(":" 0 1 (fontified t)) . -1349) (undo-tree-id251 . -1) (#(":" 0 1 (fontified t)) . -1350) (undo-tree-id252 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1351) (undo-tree-id253 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1352) (undo-tree-id254 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1353) (undo-tree-id255 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1354) (undo-tree-id256 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1355) (undo-tree-id257 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1356) (undo-tree-id258 . -1) 1357 (t 25826 6298 336618 658000)) nil (25826 6313 345516 863000) 0 nil])
([nil nil ((#("#[async_trait]
" 0 14 (face font-lock-preprocessor-face fontified t) 14 15 (fontified t)) . 1299) (undo-tree-id376 . -13) (undo-tree-id378 . -13) (undo-tree-id380 . -13) 1312 (t 25823 41719 927569 104000)) ((1299 . 1314)) (25826 5824 830933 110000) 0 nil])
([nil nil ((1407 . 1408) (1401 . 1407) (#("Output (as InspectFn)" 0 21 (fontified nil)) . -1401) (1401 . 1422) (1390 . 1401) (#("(" 0 1 (fontified t)) . -1390) (undo-tree-id259 . -1) (#(" " 0 1 (fontified t)) . -1391) (undo-tree-id260 . -1) 1392 (1390 . 1392) (1315 . 1318) (#("," 0 1 (fontified t)) . -1315) (undo-tree-id261 . -1) 1316 (1314 . 1316) (#("," 0 1 (fontified t)) . -1315) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#(" " 0 1 (fontified t)) . -1316) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (#("'" 0 1 (fontified t)) . -1317) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1318) (undo-tree-id271 . -1) 1319 (1378 . 1390) (1364 . 1378) (t 25826 6313 363247 787000)) nil (25826 6347 751056 369000) 0 nil])
([nil nil ((1420 . 1425) (1399 . 1420) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1399) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1400) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1401) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1402) 1403) ((1399 . 1403) (#("impl Future<Output = " 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (face font-lock-type-face fontified nil) 8 9 (face font-lock-type-face fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (face font-lock-type-face fontified nil) 11 12 (fontified nil) 12 13 (face font-lock-type-face fontified nil) 13 14 (face font-lock-type-face fontified nil) 14 15 (face font-lock-type-face fontified nil) 15 16 (face font-lock-type-face fontified nil) 16 17 (face font-lock-type-face fontified nil) 17 18 (face font-lock-type-face fontified nil) 18 19 (fontified nil) 19 20 (fontified nil) 20 21 (fontified nil)) . 1399) (#("Self>" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (fontified t)) . 1420) (t 25826 5818 914772 618000)) (25826 5816 674655 700000) 0 nil])
([nil nil ((1321 . 1328) (#("'static" 0 1 (fontified nil) 1 7 (fontified nil)) . 1321) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (1322 . 1328) (#("'static" 0 7 (fontified nil)) . -1322) (1322 . 1329) (#("static" 0 6 (face font-lock-keyword-face fontified t)) . -1322) (undo-tree-id274 . -6) (undo-tree-id275 . -6) 1328 (1319 . 1328) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1447) (undo-tree-id276 . -1) 1448 (1443 . 1448) (#(" " 0 1 (fontified t)) . -1443) (undo-tree-id277 . -1) 1444 (1433 . 1444) (#(" " 0 1 (fontified t)) . -1433) (undo-tree-id278 . -1) (undo-tree-id279 . -1) 1434 (1433 . 1434) (1416 . 1423) (1417 . 1426) (#("Insp" 0 4 (fontified nil)) . 1417) (1417 . 1421) (#("InspectFn" 0 9 (fontified nil)) . -1417) (1417 . 1426) (#("Insp" 0 4 (face font-lock-type-face fontified t)) . -1417) (undo-tree-id280 . -4) 1421 (1412 . 1421) (1410 . 1412) (t 25826 6347 769826 940000)) nil (25826 6389 988957 449000) 0 nil])
([nil nil ((1689 . 1699) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1689) (undo-tree-id339 . -1) 1690 (1673 . 1690) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1673) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1674) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1675) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1676) 1677 (#("a" 0 1 (fontified t)) . -1621) (undo-tree-id345 . -1) (undo-tree-id347 . -1) (#("s" 0 1 (fontified t)) . -1622) (undo-tree-id349 . -1) (undo-tree-id351 . -1) (#("y" 0 1 (fontified t)) . -1623) (undo-tree-id353 . -1) (undo-tree-id355 . -1) (#("n" 0 1 (fontified t)) . -1624) (undo-tree-id357 . -1) (undo-tree-id359 . -1) 1625 (#("c" 0 1 (fontified t)) . -1625) (undo-tree-id361 . -1) (undo-tree-id363 . -1) (#(" " 0 1 (fontified t)) . -1626) 1627 (#("a" 0 1 (fontified t)) . -1341) (#("s" 0 1 (fontified t)) . -1342) (#("y" 0 1 (fontified t)) . -1343) (#("n" 0 1 (fontified t)) . -1344) (#("c" 0 1 (fontified t)) . -1345) (#(" " 0 1 (fontified t)) . -1346) 1347) ((1341 . 1347) (1621 . 1627) (1673 . 1677) (#("impl Future<Outpt" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 11 (face font-lock-type-face fontified nil) 11 12 (fontified nil) 12 16 (face font-lock-type-face fontified nil) 16 17 (face font-lock-type-face fontified nil)) . 1673) (1689 . 1690) (#("ut = Self>" 0 2 (face font-lock-type-face fontified t) 2 5 (fontified t) 5 9 (face font-lock-type-face fontified t) 9 10 (fontified t)) . 1689)) (25826 5816 184676 124000) 0 nil])
([nil nil ((1599 . 1610) (1596 . 1599) (#("]" 0 1 (fontified t)) . -1596) (undo-tree-id281 . -1) 1597 (1596 . 1597) (#("	" 0 1 (fontified nil)) . -1598) (undo-tree-id282 . -1) (1599 . 1600) (1596 . 1599) (1591 . 1596) (1574 . 1591) (1560 . 1574) (1558 . 1560) (1555 . 1558) (#("U" 0 1 (face font-lock-type-face fontified t)) . -1555) (undo-tree-id283 . -1) (#("=" 0 1 (fontified t)) . -1556) (undo-tree-id284 . -1) 1557 (1556 . 1557) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1556) (undo-tree-id285 . -1) 1557 (1554 . 1557) (1541 . 1554) (#("p" 0 1 (fontified t)) . -1541) (undo-tree-id286 . -1) (#("y" 0 1 (fontified t)) . -1542) (undo-tree-id287 . -1) (#("e" 0 1 (fontified t)) . -1543) (undo-tree-id288 . -1) (#(" " 0 1 (fontified t)) . -1544) (undo-tree-id289 . -1) 1545 (1540 . 1545) (1538 . 1540) (1519 . 1537) (1511 . 1519) (1504 . 1507) 1508 (1504 . 1508) (1503 . 1504) (1502 . 1503) (#(" " 0 1 (fontified t)) . -1502) (undo-tree-id290 . -1) (undo-tree-id291 . -1) 1503 (1502 . 1503) (#("," 0 1 (fontified t)) . -1502) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("
" 0 1 (fontified t)) . -1503) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (#("	" 0 1 (fontified t)) . -1504) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (#(" " 0 1 (fontified t)) . -1505) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#(" " 0 1 (fontified t)) . -1506) (undo-tree-id300 . -1) (undo-tree-id301 . -1) 1507 (#("F" 0 1 (face font-lock-type-face fontified t)) . -1507) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1508) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1509) (undo-tree-id306 . -1) (undo-tree-id307 . -1) 1510 (#(":" 0 1 (fontified t)) . -1510) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (#(" " 0 1 (fontified t)) . -1511) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1512) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1513) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1514) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1515) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1516) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1517) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (#("<" 0 1 (fontified t)) . -1518) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1519) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1520) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1521) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1522) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1523) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1524) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (#(" " 0 1 (fontified t)) . -1525) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (#("=" 0 1 (fontified t)) . -1526) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#(" " 0 1 (fontified t)) . -1527) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (#("(" 0 1 (fontified t)) . -1528) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (#(")" 0 1 (fontified t)) . -1529) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#(">" 0 1 (fontified t)) . -1530) (undo-tree-id348 . -1) (undo-tree-id349 . -1) 1531 (1518 . 1531) (#("(" 0 1 (fontified t)) . -1518) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1519) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1520) (undo-tree-id354 . -1) 1521 (1520 . 1521) (1511 . 1520) (1504 . 1507) 1508 (1504 . 1508) (#("  " 0 2 (fontified nil)) . -1504) (1503 . 1504) (1499 . 1503) (1498 . 1499) (1443 . 1448) (1493 . 1494) (#(" " 0 1 (fontified t)) . -1493) (undo-tree-id355 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1494) (undo-tree-id356 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1495) (undo-tree-id357 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1496) (undo-tree-id358 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1497) (undo-tree-id359 . -1) (#(":" 0 1 (fontified t)) . -1498) (undo-tree-id360 . -1) (#(":" 0 1 (fontified t)) . -1499) (undo-tree-id361 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1500) (undo-tree-id362 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1501) (undo-tree-id363 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1502) (undo-tree-id364 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1503) (undo-tree-id365 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1504) (undo-tree-id366 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1505) (undo-tree-id367 . -1) 1506 (1474 . 1494) (#("	" 0 1 (fontified t)) . -1468) 1475 (1472 . 1475) (1469 . 1472) (1467 . 1469) (1466 . 1467) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1466) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1467) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1468) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1469) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -1470) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1471) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (#("(" 0 1 (fontified t)) . -1472) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (#("&" 0 1 (face rust-ampersand-face fontified t)) . -1473) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) 1474 (#("'" 0 1 (fontified t)) . -1474) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (#("a" 0 1 (fontified t)) . -1475) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (#(" " 0 1 (fontified t)) . -1476) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (#("E" 0 1 (face font-lock-type-face fontified nil)) . -1477) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (#(")" 0 1 (fontified nil)) . -1478) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (#(" " 0 1 (fontified t)) . -1479) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#("-" 0 1 (fontified t)) . -1480) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -1481) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (#(" " 0 1 (fontified t)) . -1482) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1483) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (#("
" 0 1 (fontified t)) . -1484) (undo-tree-id455 . -1) (#("	" 0 1 (fontified t)) . -1485) (undo-tree-id456 . -1) (#("w" 0 1 (fontified t)) . -1486) (undo-tree-id457 . -1) (#("h" 0 1 (fontified t)) . -1487) (undo-tree-id458 . -1) (#("e" 0 1 (fontified t)) . -1488) (undo-tree-id459 . -1) (#("r" 0 1 (fontified t)) . -1489) (undo-tree-id460 . -1) (#("e" 0 1 (fontified t)) . -1490) (undo-tree-id461 . -1) (#(" " 0 1 (fontified t)) . -1491) (undo-tree-id462 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1492) (undo-tree-id463 . -1) (#(":" 0 1 (fontified t)) . -1493) (undo-tree-id464 . -1) (#(" " 0 1 (fontified t)) . -1494) (undo-tree-id465 . -1) 1495 (1486 . 1495) (1484 . 1486) (1483 . 1484) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1420) (undo-tree-id466 . -1) (undo-tree-id467 . -1) 1421 (1420 . 1421) (#("	" 0 1 (fontified nil)) . -1498) (undo-tree-id468 . -1) (1499 . 1500) (1497 . 1499) (1495 . 1497) (1489 . 1495) (#("Output (as InspectFn)" 0 21 (fontified nil)) . -1489) (1489 . 1510) (1475 . 1489) (1472 . 1475) (1466 . 1472) (#("FnO" 0 3 (fontified nil)) . 1466) (1466 . 1469) (#("FnOnce" 0 6 (fontified nil)) . -1466) (1466 . 1472) (#("FnO" 0 3 (face font-lock-type-face fontified t)) . -1466) (undo-tree-id469 . -3) 1469 (1468 . 1469) (#(":" 0 1 (fontified t)) . -1443) (undo-tree-id470 . -1) (#(" " 0 1 (fontified t)) . -1444) (undo-tree-id471 . -1) (#("=" 0 1 (fontified t)) . -1445) (undo-tree-id472 . -1) (#("=" 0 1 (fontified t)) . -1446) (undo-tree-id473 . -1) 1447 (1431 . 1447) (t 25826 6390 6383 373000)) nil (25826 6709 160412 374000) 0 nil])
([nil nil ((#("#[async_trait]
" 0 14 (face font-lock-preprocessor-face fontified t) 14 15 (fontified t)) . 1506) (undo-tree-id12 . -14) (t 25823 64435 311782 395000)) ((1506 . 1521)) (25826 5815 554848 737000) 0 nil])
([nil nil ((#(" Send + FnOnce(&Self::Error) -> Fut,
		  Fut: Future<Output = ()> + Send " 0 1 (fontified t) 1 5 (face font-lock-type-face fontified t) 5 8 (fontified t) 8 14 (face font-lock-type-face fontified t) 14 15 (fontified t) 15 16 (face rust-ampersand-face fontified t) 16 20 (face font-lock-type-face fontified t) 20 22 (fontified t) 22 27 (face font-lock-type-face fontified t) 27 30 (fontified t) 30 31 (fontified t syntax-table (1)) 31 32 (fontified t) 32 35 (face font-lock-type-face fontified t) 35 41 (fontified t) 41 44 (face font-lock-variable-name-face fontified t) 44 46 (fontified t) 46 52 (face font-lock-type-face fontified t) 52 53 (fontified t) 53 59 (face font-lock-type-face fontified t) 59 64 (fontified t) 64 65 (fontified t) 65 68 (fontified t) 68 72 (face font-lock-type-face fontified t) 72 73 (fontified t)) . 2010) (undo-tree-id509 . -72) (undo-tree-id510 . -72) (undo-tree-id511 . -72) (t 25826 6709 172138 996000)) nil (25826 6751 115099 673000) 0 nil])
([nil nil ((1358 . 1362) (1345 . 1358) (#("e" 0 1 (fontified t)) . -1345) (undo-tree-id0 . -1) 1346 (1343 . 1346) (1341 . 1343) (#("t" 0 1 (fontified t)) . -1299) (undo-tree-id1 . -1) (#("y" 0 1 (fontified t)) . -1300) (undo-tree-id2 . -1) (#("p" 0 1 (fontified t)) . -1301) (undo-tree-id3 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -1302) (undo-tree-id4 . -1) 1303 (1299 . 1303) (1298 . 1300) (#("s" 0 1 (fontified t)) . -1506) (undo-tree-id5 . -1) (#("t" 0 1 (fontified t)) . -1507) (undo-tree-id6 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1508) (undo-tree-id7 . -1) (#("u" 0 1 (fontified t)) . -1509) (undo-tree-id8 . -1) (#("c" 0 1 (fontified t)) . -1510) (undo-tree-id9 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -1511) (undo-tree-id10 . -1) (#(" " 0 1 (fontified t)) . -1512) (undo-tree-id11 . -1) 1513 (1506 . 1513) (1505 . 1507)) ((#("

" 0 1 (fontified t) 1 2 (fontified nil)) . 1505) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (#("struct " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil)) . 1506) (1506 . 1513) (#("

" 0 1 (fontified t) 1 2 (fontified nil)) . 1298) (undo-tree-id133 . -1) (undo-tree-id134 . 1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . 1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (#("type" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (face font-lock-keyword-face fontified nil)) . 1299) (1299 . 1303) (#("
	" 0 1 (fontified t) 1 2 (fontified nil)) . 1341) (undo-tree-id144 . -2) (#("tye" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil)) . 1343) (undo-tree-id145 . -2) (1345 . 1346) (#("pe InspectFut" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 13 (face font-lock-type-face fontified nil)) . 1345) (undo-tree-id146 . -13) (#("ure;" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t)) . 1358) (undo-tree-id147 . -3)) (25826 5815 107931 174000) 0 nil])
([nil nil ((2028 . 2032) (2019 . 2028) (#("Inspect" 0 7 (fontified nil)) . 2019) (2019 . 2026) (#("InspectFn" 0 9 (fontified nil)) . -2019) (2019 . 2028) (#("Inspect" 0 7 (face font-lock-type-face fontified t)) . -2019) (undo-tree-id507 . -7) 2026 (2019 . 2026) (2010 . 2019) (#("F" 0 1 (face font-lock-type-face fontified t)) . -2010) (undo-tree-id508 . -1) 2011 (2010 . 2011) (2010 . 2011)) nil (25826 6751 115096 450000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1352) (undo-tree-id13 . -1) (undo-tree-id15 . -1) 1353 (1350 . 1353) (#("a" 0 1 (fontified t)) . -1350) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 1351 (1347 . 1351) (#("," 0 1 (fontified t)) . -1347) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#(" " 0 1 (fontified t)) . -1348) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 1349 (1348 . 1349) (1327 . 1348) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -1327) (undo-tree-id24 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1328) (undo-tree-id25 . -1) 1329 (1327 . 1329) (1344 . 1346) (1332 . 1344) (1330 . 1332) (#("	" 0 1 (fontified nil)) . -1331) (undo-tree-id26 . -1) (1332 . 1333) (1330 . 1332) (1324 . 1330) (1320 . 1324) (1299 . 1320) (1431 . 1433) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1431) (undo-tree-id27 . -1) 1432 (1420 . 1432) (#("i" 0 1 (fontified t)) . -1420) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("m" 0 1 (fontified t)) . -1421) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("p" 0 1 (fontified t)) . -1422) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -1423) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#(" " 0 1 (fontified t)) . -1424) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 1425 (#("F" 0 1 (face font-lock-type-face fontified t)) . -1425) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1426) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1427) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1428) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1429) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1430) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("<" 0 1 (fontified t)) . -1431) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1432) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1433) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1434) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1435) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1436) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1437) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#(" " 0 1 (fontified t)) . -1438) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("=" 0 1 (fontified t)) . -1439) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#(" " 0 1 (fontified t)) . -1440) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1441) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1442) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1443) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1444) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#(">" 0 1 (fontified t)) . -1445) (undo-tree-id78 . -1) (undo-tree-id79 . -1) 1446 (1361 . 1365) (1530 . 1531) (t 25825 19896 194694 76000)) ((#("
" 0 1 (fontified t)) . 1530) (#("<'a>" 0 1 (fontified t) 1 2 (fontified t) 2 3 (face font-lock-variable-name-face fontified t) 3 4 (fontified t)) . 1361) (1420 . 1446) (#("InspectFutue" 0 11 (face font-lock-type-face fontified nil) 11 12 (face font-lock-type-face fontified nil)) . 1420) (1431 . 1432) (#("re" 0 2 (face font-lock-type-face fontified t)) . 1431) (#("struct InspectFuture<" 0 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil) 7 20 (face font-lock-type-face fontified nil) 20 21 (fontified nil)) . 1299) (undo-tree-id96 . -21) (undo-tree-id97 . -21) (undo-tree-id98 . -21) (undo-tree-id99 . -21) (undo-tree-id100 . -21) (undo-tree-id101 . -21) (undo-tree-id102 . -21) (#("'a, " 0 1 (fontified nil) 1 2 (face font-lock-variable-name-face fontified nil) 2 4 (fontified nil)) . 1320) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (#("Fut> {" 0 3 (face font-lock-variable-name-face fontified nil) 3 4 (fontified nil) 4 6 (fontified nil)) . 1324) (undo-tree-id110 . -6) (undo-tree-id111 . 3) (undo-tree-id112 . -3) (undo-tree-id113 . -3) (undo-tree-id114 . 3) (undo-tree-id115 . -3) (undo-tree-id116 . -6) (undo-tree-id117 . -3) (undo-tree-id118 . -3) (#("
	" 0 1 (fontified nil) 1 2 (fontified nil)) . 1330) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (#("}" 0 1 (fontified nil)) . 1332) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (1331 . 1332) (#("
	" 0 1 (fontified nil) 1 2 (fontified nil)) . 1330) (#("future: Fut," 0 6 (face font-lock-variable-name-face fontified nil) 6 8 (fontified nil) 8 11 (face font-lock-type-face fontified nil) 11 12 (fontified nil)) . 1332) (#("
	" 0 2 (fontified t)) . 1344) (#("\" " 0 1 (face font-lock-string-face fontified nil) 1 2 (face font-lock-string-face fontified nil)) . 1327) (undo-tree-id123 . -2) (1327 . 1329) (#(": Future<Output = ()," 0 2 (fontified nil) 2 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil) 9 15 (face font-lock-type-face fontified nil) 15 20 (fontified nil) 20 21 (fontified nil)) . 1327) (undo-tree-id124 . -9) (undo-tree-id125 . -21) (undo-tree-id126 . -20) (undo-tree-id127 . -20) (#(" " 0 1 (fontified nil)) . 1348) (undo-tree-id128 . -1) (1347 . 1349) (#(" + a" 0 3 (fontified nil) 3 4 (fontified nil)) . 1347) (undo-tree-id129 . 4) (1350 . 1351) (#("'a " 0 1 (fontified nil) 1 2 (face font-lock-variable-name-face fontified nil) 2 3 (fontified nil)) . 1350) (1352 . 1353)) (25826 5814 881804 49000) 0 nil])
([nil nil ((#("			future.await;
" 0 10 (fontified t) 10 15 (face font-lock-keyword-face fontified t) 15 17 (fontified t)) . 2091) (undo-tree-id499 . -16) (undo-tree-id500 . 1) (undo-tree-id501 . -16) (undo-tree-id502 . -15) (undo-tree-id503 . -15) (undo-tree-id504 . -15) (undo-tree-id505 . -15) (undo-tree-id506 . -17) 2106) nil (25826 6751 115091 818000) 0 nil])
([nil nil ((1347 . 1348) (t 25826 4030 379336 240000)) ((#(">" 0 1 (fontified t)) . 1347) (t 25826 4036 785976 618000)) (25826 5814 787879 705000) 0 nil])
([nil nil ((2076 . 2082) (#("l" 0 1 (fontified t)) . -2063) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (#("e" 0 1 (fontified t)) . -2064) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (#("t" 0 1 (fontified t)) . -2065) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (#(" " 0 1 (fontified t)) . -2066) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (#("f" 0 1 (face font-lock-variable-name-face fontified t)) . -2067) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -2068) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -2069) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -2070) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -2071) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -2072) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (#(" " 0 1 (fontified t)) . -2073) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (#("=" 0 1 (fontified t)) . -2074) (undo-tree-id496 . -1) (undo-tree-id497 . -1) 2075 (#(" " 0 1 (fontified t)) . -2075) (undo-tree-id498 . -1) 2076) nil (25826 6751 115081 291000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1313) (undo-tree-id80 . -1) (1314 . 1315) (1312 . 1314) (1299 . 1312) (#("struct InspectFuture<'a, Fut: Future<Output = ()> + 'a> {
	future: Fut,
	
}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 20 (face font-lock-type-face fontified t) 20 22 (fontified t) 22 23 (face font-lock-variable-name-face fontified t) 23 25 (fontified t) 25 28 (face font-lock-variable-name-face fontified t) 28 30 (fontified t) 30 36 (face font-lock-type-face fontified t) 36 37 (fontified t) 37 43 (face font-lock-type-face fontified t) 43 53 (fontified t) 53 54 (face font-lock-variable-name-face fontified t) 54 55 (fontified t) 55 58 (fontified t) 58 59 (fontified t) 59 65 (face font-lock-variable-name-face fontified t) 65 67 (fontified t) 67 70 (face font-lock-type-face fontified t) 70 73 (fontified t) 73 74 (fontified t) 74 75 (fontified t)) . 1299) (undo-tree-id81 . -75) (undo-tree-id82 . 26) (undo-tree-id83 . -28) (undo-tree-id84 . -37) (undo-tree-id85 . 21) (undo-tree-id86 . -75) (t 25826 4036 785976 618000)) ((1299 . 1374) (#("enum Future {" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 11 (face font-lock-type-face fontified nil) 11 13 (fontified nil)) . 1299) (undo-tree-id87 . -13) (undo-tree-id88 . -13) (undo-tree-id89 . -13) (undo-tree-id90 . -13) (#("
	" 0 1 (fontified t) 1 2 (fontified nil)) . 1312) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("}" 0 1 (fontified nil)) . 1314) (undo-tree-id95 . -1) (1313 . 1314)) (25826 5814 784813 17000) 0 nil])
([nil nil ((2031 . 2034) (t 25826 6751 125344 687000)) nil (25826 6766 742839 200000) 0 nil])
nil
([nil nil ((#("F" 0 1 (face font-lock-type-face fontified t)) . -1965) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1966) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1967) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (#("," 0 1 (fontified t)) . -1968) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (#(" " 0 1 (fontified t)) . -1969) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) 1970) nil (25826 6766 742833 561000) 0 nil])
([nil nil ((1918 . 1928) (t 25826 6766 758630 100000)) nil (25826 6785 550569 818000) 0 nil])
([nil nil ((2081 . 2085) (#("call" 0 4 (fontified nil)) . 2081) (2081 . 2085) (#("call (as InspectFn)" 0 19 (fontified nil)) . -2081) (2081 . 2100) (#("call" 0 4 (fontified t)) . -2081) (undo-tree-id551 . -4) (undo-tree-id552 . -4) 2085 (2080 . 2085) (t 25826 6785 568572 189000)) nil (25826 6804 49376 78000) 0 nil])
([nil nil ((1534 . 1541) (t 25826 6804 68514 975000)) nil (25826 6815 825667 849000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1533) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1534) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1535) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1536) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1537) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (#(" " 0 1 (fontified t)) . -1538) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (#("+" 0 1 (fontified t)) . -1539) (undo-tree-id568 . -1) (undo-tree-id569 . -1) 1540 (t 25826 6815 841811 770000)) nil (25826 6823 440341 608000) 0 nil])
([nil nil ((1541 . 1548) (1368 . 1375) (t 25826 6823 448454 777000)) nil (25826 6833 394591 622000) 0 nil])
([nil nil ((1773 . 1780) (1764 . 1773) (#("Inspect" 0 7 (fontified nil)) . 1764) (1764 . 1771) (#("InspectFn" 0 9 (fontified nil)) . -1764) (1764 . 1773) (#("Inspect" 0 7 (face font-lock-type-face fontified t)) . -1764) (undo-tree-id570 . -7) 1771 (1766 . 1771) (1765 . 1766) (#("N" 0 1 (face font-lock-type-face fontified t)) . -1765) (undo-tree-id571 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1766) (undo-tree-id572 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1767) (undo-tree-id573 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1768) (undo-tree-id574 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -1769) (undo-tree-id575 . -1) 1770 (1753 . 1770) (#("f" 0 1 (fontified t)) . -1753) (undo-tree-id576 . -1) 1754 (1753 . 1754) (#("F: Send + FnOnce(&Self::Error) -> Fut,
		  Fut: Future<Output = ()> + Send" 0 1 (face font-lock-variable-name-face fontified t) 1 3 (fontified t) 3 7 (face font-lock-type-face fontified t) 7 10 (fontified t) 10 16 (face font-lock-type-face fontified t) 16 17 (fontified t) 17 18 (face rust-ampersand-face fontified t) 18 22 (face font-lock-type-face fontified t) 22 24 (fontified t) 24 29 (face font-lock-type-face fontified t) 29 32 (fontified t) 32 33 (fontified t syntax-table (1)) 33 34 (fontified t) 34 37 (face font-lock-type-face fontified t) 37 43 (fontified t) 43 46 (face font-lock-variable-name-face fontified t) 46 48 (fontified t) 48 54 (face font-lock-type-face fontified t) 54 55 (fontified t) 55 61 (face font-lock-type-face fontified t) 61 66 (fontified t) 66 67 (fontified t) 67 70 (fontified t) 70 74 (face font-lock-type-face fontified t)) . 1753) (undo-tree-id577 . -74) (undo-tree-id578 . -74) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1715) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1716) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1717) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (#("," 0 1 (fontified t)) . -1718) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (#(" " 0 1 (fontified t)) . -1719) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) 1720 (t 25826 6833 418423 707000)) nil (25826 6857 651775 933000) 0 nil])
([nil nil ((1671 . 1674) (t 25826 6857 668347 857000)) nil (25826 6884 57446 954000) 0 nil])
([nil nil ((1829 . 1832)) nil (25826 6884 57445 405000) 0 nil])
([nil nil ((1673 . 1682)) nil (25826 6884 57441 479000) 0 nil])
([nil nil ((1331 . 1335) (#("Sen" 0 3 (fontified nil)) . 1331) (1331 . 1334) (#("Send" 0 4 (fontified nil)) . -1331) (1331 . 1335) (#("Sen" 0 3 (face font-lock-type-face fontified t)) . -1331) (undo-tree-id594 . -3) 1334 (1329 . 1334) (t 25826 6884 74931 502000)) nil (25826 6922 941072 465000) 0 nil])
([nil nil ((1518 . 1522) (#("Send" 0 4 (fontified nil)) . 1518) (1518 . 1522) (#("Send" 0 4 (face font-lock-type-face fontified t)) . -1518) (undo-tree-id595 . -4) (undo-tree-id596 . -4) (undo-tree-id597 . -4) (undo-tree-id598 . -4) (undo-tree-id599 . -4) (undo-tree-id600 . -4) (undo-tree-id601 . -4) 1522 (1515 . 1522) (t 25826 6922 958141 828000)) nil (25826 6935 121859 369000) 0 nil])
([nil nil ((1332 . 1349) (1331 . 1332) (1330 . 1331) (#("
" 0 1 (face font-lock-comment-face fontified t)) . -1330) (undo-tree-id602 . -1) (#("/" 0 1 (fontified t)) . -1331) (undo-tree-id603 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1332) (undo-tree-id604 . -1) 1333 (1332 . 1333) (1331 . 1332) (1330 . 1331) (1314 . 1330) (#("+" 0 1 (face font-lock-comment-face fontified t)) . -1314) (undo-tree-id605 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -1315) (undo-tree-id606 . -1) 1316 (1300 . 1316) (#("/" 0 1 (face font-lock-doc-face fontified t)) . -1300) (undo-tree-id607 . -1) 1301 (1298 . 1301) (1297 . 1298) (t 25826 6935 174769 671000)) nil (25826 6963 937186 468000) 0 nil])
([nil nil ((1945 . 1948) (#(" " 0 1 (fontified nil)) . 1944) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (1945 . 1946) (#(" " 0 1 (fontified nil)) . 1926) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (1927 . 1928) (t 25826 6963 954677 880000)) nil (25826 6994 579690 154000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -2065) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (#("o" 0 1 (fontified t)) . -2066) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (#("r" 0 1 (fontified t)) . -2067) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (#("<" 0 1 (fontified t)) . -2068) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (#("'" 0 1 (fontified t)) . -2069) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -2070) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (#(">" 0 1 (fontified t)) . -2071) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (#(" " 0 1 (fontified t)) . -2072) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) 2073 (2020 . 2024) (t 25826 6994 597912 999000)) nil (25826 7097 980560 82000) 0 nil])
([nil nil ((1792 . 1796) (#("f" 0 1 (fontified t)) . -1833) (undo-tree-id711 . -1) (#("o" 0 1 (fontified t)) . -1834) (undo-tree-id712 . -1) (#("r" 0 1 (fontified t)) . -1835) (undo-tree-id713 . -1) (#("<" 0 1 (fontified t)) . -1836) (undo-tree-id714 . -1) (#("'" 0 1 (fontified t)) . -1837) (undo-tree-id715 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1838) (undo-tree-id716 . -1) (#(">" 0 1 (fontified t)) . -1839) (undo-tree-id717 . -1) (#(" " 0 1 (fontified t)) . -1840) (undo-tree-id718 . -1) 1841 (t 25826 7097 997578 304000)) nil (25826 7126 117532 955000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -2124) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) 2125 (2098 . 2099) (t 25826 7126 147486 425000)) nil (25826 35648 620492 158000) 0 nil])
([nil nil ((1933 . 1937) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1933) (undo-tree-id727 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1934) (undo-tree-id728 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1935) (undo-tree-id729 . -1) 1936 (1929 . 1936) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1929) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1930) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1931) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1932) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (#(":" 0 1 (fontified t)) . -1933) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (#(" " 0 1 (fontified t)) . -1934) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1935) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1936) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1937) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1938) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (#("," 0 1 (fontified t)) . -1939) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) 1940 (t 25826 35648 636915 478000)) nil (25826 35680 927582 501000) 0 nil])
([nil nil ((1932 . 1939) (t 25826 35680 940157 157000)) nil (25826 35701 711231 210000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 2102) (undo-tree-id792 . -1) (undo-tree-id793 . -1)) nil (25826 35701 711227 917000) 0 nil])
([nil nil ((1927 . 1929) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -1927) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (#("
" 0 1 (fontified t)) . -1928) (undo-tree-id765 . 1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (#("	" 0 1 (fontified t)) . -1929) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (#(" " 0 1 (fontified t)) . -1930) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (#(" " 0 1 (fontified t)) . -1931) (undo-tree-id773 . -1) (undo-tree-id774 . -1) 1932 (#(" " 0 1 (fontified t)) . -1928) (undo-tree-id775 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1929) (undo-tree-id776 . -1) (#(":" 0 1 (fontified t)) . -1930) (undo-tree-id777 . -1) (#(" " 0 1 (fontified t)) . -1931) (undo-tree-id778 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1932) (undo-tree-id779 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1933) (undo-tree-id780 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1934) (undo-tree-id781 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1935) (undo-tree-id782 . -1) (#(" " 0 1 (fontified t)) . -1936) (undo-tree-id783 . -1) (#("+" 0 1 (fontified t)) . -1937) (undo-tree-id784 . -1) (#(" " 0 1 (fontified t)) . -1938) (undo-tree-id785 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1939) (undo-tree-id786 . 1) (undo-tree-id787 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -1940) (undo-tree-id788 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1941) (undo-tree-id789 . -1) 1942 (#("c" 0 1 (face font-lock-type-face fontified t)) . -1942) (undo-tree-id790 . -1) (#("," 0 1 (fontified t)) . -1943) (undo-tree-id791 . -1) 1944 (2097 . 2101)) nil (25826 35701 711211 372000) 0 nil])
([nil nil ((1944 . 1948) (1939 . 1944) (1929 . 1939) (t 25826 35701 733430 945000)) nil (25826 35720 108092 241000) 0 nil])
([nil nil ((2145 . 2162) (#("nOnce<Output = ()" 0 5 (face font-lock-type-face fontified t) 5 6 (fontified t) 6 12 (face font-lock-type-face fontified t) 12 17 (fontified t)) . 2145) (undo-tree-id794 . -17) (1881 . 1894) (1875 . 1881) (#("Future" 0 6 (fontified nil)) . 1875) (1875 . 1881) (#("Future" 0 6 (face font-lock-type-face fontified t)) . -1875) (undo-tree-id795 . -6) (undo-tree-id796 . -6) 1881 (1875 . 1881) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1875) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1876) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1877) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1878) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -1879) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1880) (undo-tree-id807 . -1) (undo-tree-id808 . -1) 1881 (1875 . 1881) (#("FnOnce" 0 6 (fontified nil)) . 1875) (1875 . 1881) (#("FnOnce" 0 6 (face font-lock-type-face fontified t)) . -1875) (undo-tree-id809 . -6) (undo-tree-id810 . -6) 1881 (1874 . 1881) (1867 . 1870) 1871 (1867 . 1871) (1865 . 1867) (1864 . 1865) (1843 . 1864) (1837 . 1843) (#("FnOnce" 0 6 (fontified nil)) . 1837) (1837 . 1843) (#("FnOnce" 0 6 (face font-lock-type-face fontified t)) . -1837) (undo-tree-id811 . -6) (undo-tree-id812 . -6) 1843 (1837 . 1843) (#("I" 0 1 (face font-lock-type-face fontified t)) . -1837) (undo-tree-id813 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1838) (undo-tree-id814 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1839) (undo-tree-id815 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1840) (undo-tree-id816 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1841) (undo-tree-id817 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -1842) (undo-tree-id818 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1843) (undo-tree-id819 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1844) (undo-tree-id820 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1845) (undo-tree-id821 . -1) (#("<" 0 1 (fontified t)) . -1846) (undo-tree-id822 . -1) (#("'" 0 1 (fontified t)) . -1847) (undo-tree-id823 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1848) (undo-tree-id824 . -1) (#("," 0 1 (fontified t)) . -1849) (undo-tree-id825 . -1) (#(" " 0 1 (fontified t)) . -1850) (undo-tree-id826 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1851) (undo-tree-id827 . -1) (#(">" 0 1 (fontified t)) . -1852) (undo-tree-id828 . -1) 1853 (2109 . 2123) (#(">" 0 1 (syntax-table (1) fontified t)) . -2109) (undo-tree-id829 . -1) (undo-tree-id830 . -1) 2110 (2103 . 2110) (2095 . 2098) 2100 (2099 . 2100) (2095 . 2099) (2094 . 2095) (#(" " 0 1 (fontified nil)) . 2094) (undo-tree-id831 . 1) (2093 . 2094) (2086 . 2093) (2065 . 2086) (#("I" 0 1 (face font-lock-type-face fontified t)) . -2065) (undo-tree-id832 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2066) (undo-tree-id833 . 1) (undo-tree-id834 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -2067) (undo-tree-id835 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -2068) (undo-tree-id836 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -2069) (undo-tree-id837 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -2070) (undo-tree-id838 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2071) (undo-tree-id839 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -2072) (undo-tree-id840 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2073) (undo-tree-id841 . -1) (#("<" 0 1 (fontified t)) . -2074) (undo-tree-id842 . -1) (#("'" 0 1 (fontified t)) . -2075) (undo-tree-id843 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -2076) (undo-tree-id844 . -1) (#("," 0 1 (fontified t)) . -2077) (undo-tree-id845 . -1) (#(" " 0 1 (fontified t)) . -2078) (undo-tree-id846 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -2079) (undo-tree-id847 . -1) (#(">" 0 1 (fontified t)) . -2080) (undo-tree-id848 . -1) 2081 (t 25826 35720 120044 617000)) nil (25826 35807 437085 688000) 0 nil])
([nil nil ((2066 . 2071) (#("u" 0 1 (face font-lock-type-face fontified t)) . -2066) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2067) (undo-tree-id852 . -1) (#("," 0 1 (fontified t)) . -2068) (undo-tree-id853 . -1) (#(" " 0 1 (fontified t)) . -2069) (undo-tree-id854 . -1) 2070 (2066 . 2070) (t 25826 35807 466455 512000)) nil (25826 35832 933780 552000) 0 nil])
([nil nil ((1797 . 1802) (t 25826 35832 943046 425000)) nil (25826 35841 634145 16000) 0 nil])
([nil nil ((2187 . 2188) (2176 . 2179) 2184 (2176 . 2184) (2175 . 2176) (#(" " 0 1 (fontified nil)) . 2175) (2174 . 2175) (2173 . 2174) (t 25826 35841 689686 973000)) nil (25826 35941 311538 286000) 0 nil])
([nil nil ((1910 . 1913) (1902 . 1905) 1907 (1906 . 1907) (1902 . 1906) (1900 . 1902) (1899 . 1900) (t 25826 35941 336052 426000)) nil (25826 35956 614731 542000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2245) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (#("c" 0 1 (fontified t)) . -2246) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (#("a" 0 1 (fontified t)) . -2247) (undo-tree-id859 . -1) (#("l" 0 1 (fontified t)) . -2248) (undo-tree-id860 . -1) (#("l" 0 1 (fontified t)) . -2249) (undo-tree-id861 . -1) 2250 (t 25826 35956 639338 950000)) nil (25826 35968 985461 905000) 0 nil])
([nil nil ((2190 . 2194) (#("Send" 0 4 (fontified nil)) . 2190) (2190 . 2194) (#("Send" 0 4 (face font-lock-type-face fontified t)) . -2190) (undo-tree-id862 . -4) (undo-tree-id863 . -4) 2194 (2187 . 2194) (t 25826 35968 995967 722000)) nil (25826 35978 937322 654000) 0 nil])
([nil nil ((1902 . 1906) (#("Send" 0 4 (fontified nil)) . 1902) (1902 . 1906) (#("Send" 0 4 (face font-lock-type-face fontified t)) . -1902) (undo-tree-id864 . -4) (undo-tree-id865 . -4) 1906 (1899 . 1906) (t 25826 35978 949270 471000)) nil (25826 38529 905034 317000) 0 nil])
([nil nil ((1630 . 1631) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1630) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) 1631 (1503 . 1511) (1442 . 1443) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1442) (undo-tree-id964 . -1) 1443 (1370 . 1378) (t 25826 38532 708719 931000)) nil (25826 38966 246023 853000) 0 nil] [nil nil ((#("F: FnOnce(&'a E) -> Fut + Send,
		  Fut: Future<Output = ()> + Send,
		  Self: 'a" 0 1 (face font-lock-variable-name-face fontified t) 1 3 (fontified t) 3 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 11 (face rust-ampersand-face fontified t) 11 12 (fontified t) 12 13 (face font-lock-variable-name-face fontified t) 13 14 (fontified t) 14 15 (face font-lock-type-face fontified t) 15 18 (fontified t) 18 19 (fontified t syntax-table (1)) 19 20 (fontified t) 20 23 (face font-lock-type-face fontified t) 23 26 (fontified t) 26 30 (face font-lock-type-face fontified t) 30 32 (fontified t) 32 36 (fontified t) 36 39 (face font-lock-variable-name-face fontified t) 39 41 (fontified t) 41 47 (face font-lock-type-face fontified t) 47 48 (fontified t) 48 54 (face font-lock-type-face fontified t) 54 63 (fontified t) 63 67 (face font-lock-type-face fontified t) 67 69 (fontified t) 69 73 (fontified t) 73 77 (face font-lock-variable-name-face fontified t) 77 80 (fontified t) 80 81 (face font-lock-variable-name-face fontified t)) . 1839) (undo-tree-id930 . -80) (undo-tree-id931 . -80) (undo-tree-id932 . -80) (t 25826 35986 352581 19000)) ((1839 . 1920)) (25826 38529 482791 465000) 0 nil] [nil nil ((#("		if let Err(ref e) = self {
" 0 2 (fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 18 (face font-lock-variable-name-face fontified t) 18 22 (fontified t) 22 26 (face font-lock-keyword-face fontified t) 26 29 (fontified t)) . 2218) (undo-tree-id897 . -28) (undo-tree-id898 . -14) (undo-tree-id899 . -14) (undo-tree-id900 . -14) (undo-tree-id901 . -14) (undo-tree-id902 . -14) (undo-tree-id903 . -14) (undo-tree-id904 . -14) (undo-tree-id905 . -14) (undo-tree-id906 . -14) (undo-tree-id907 . -14) (undo-tree-id908 . -14) (undo-tree-id909 . -14) (undo-tree-id910 . -14) (undo-tree-id911 . -14) (undo-tree-id912 . -14) (undo-tree-id913 . -14) (undo-tree-id914 . -14) (undo-tree-id915 . -29) 2232 (t 25826 35986 352581 19000)) ((2218 . 2247)) (25826 38087 118920 428000) 0 nil])
([nil nil ((1545 . 1549) (1868 . 1870) (1853 . 1868) (#("FnOnce(&'a E) -> Fut + Send,
		  Fut: Future<Output = ()> + Send,
		  Self: 'a" 0 6 (face font-lock-type-face fontified t) 6 7 (fontified t) 7 8 (face rust-ampersand-face fontified t) 8 9 (fontified t) 9 10 (face font-lock-variable-name-face fontified t) 10 11 (fontified t) 11 12 (face font-lock-type-face fontified t) 12 15 (fontified t) 15 16 (fontified t syntax-table (1)) 16 17 (fontified t) 17 20 (face font-lock-type-face fontified t) 20 23 (fontified t) 23 27 (face font-lock-type-face fontified t) 27 29 (fontified t) 29 33 (fontified t) 33 36 (face font-lock-variable-name-face fontified t) 36 38 (fontified t) 38 44 (face font-lock-type-face fontified t) 44 45 (fontified t) 45 51 (face font-lock-type-face fontified t) 51 60 (fontified t) 60 64 (face font-lock-type-face fontified t) 64 66 (fontified t) 66 70 (fontified t) 70 74 (face font-lock-variable-name-face fontified t) 74 77 (fontified t) 77 78 (face font-lock-variable-name-face fontified t)) . 1853) (undo-tree-id965 . -78) (undo-tree-id966 . -33) (undo-tree-id967 . -33) (undo-tree-id968 . -77) (undo-tree-id969 . -27) (#("," 0 1 (fontified t)) . -1813) (undo-tree-id970 . -1) (#(" " 0 1 (fontified t)) . -1814) (undo-tree-id971 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1815) (undo-tree-id972 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1816) (undo-tree-id973 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1817) (undo-tree-id974 . -1) 1818 (t 25826 38966 267070 311000)) nil (25826 38987 369135 926000) 0 nil])
([nil nil ((1840 . 1842) (1839 . 1840) (1860 . 1864) (1851 . 1860) (#("Inspect" 0 7 (fontified nil)) . 1851) (1851 . 1858) (#("InspectFn" 0 9 (fontified nil)) . -1851) (1851 . 1860) (#("Inspect" 0 7 (face font-lock-type-face fontified t)) . -1851) (undo-tree-id929 . -7) 1858 (1839 . 1858)) ((#("for<'b: 'a> Inspect" 0 3 (face font-lock-keyword-face fontified nil) 3 5 (fontified nil) 5 6 (face font-lock-variable-name-face fontified nil) 6 9 (fontified nil) 9 10 (face font-lock-variable-name-face fontified nil) 10 12 (fontified nil) 12 19 (face font-lock-type-face fontified nil)) . 1839) (undo-tree-id934 . -6) (undo-tree-id935 . 19) (undo-tree-id936 . -12) (undo-tree-id937 . 19) (undo-tree-id938 . -6) (undo-tree-id939 . -6) (undo-tree-id940 . -6) (undo-tree-id941 . -6) (undo-tree-id942 . -6) (undo-tree-id943 . -6) (undo-tree-id944 . -6) (undo-tree-id945 . -6) (undo-tree-id946 . -6) (undo-tree-id947 . -6) (undo-tree-id948 . -6) (undo-tree-id949 . -6) (undo-tree-id950 . -6) (undo-tree-id951 . -6) (undo-tree-id952 . -6) (undo-tree-id953 . -6) (undo-tree-id954 . -6) (1851 . 1858) (#("InspectFn" 0 9 (fontified nil)) . 1851) (1851 . 1860) (#("Inspect" 0 7 (fontified nil)) . 1851) (1851 . 1858) (#("InspectFn" 0 9 (face font-lock-type-face fontified nil)) . 1851) (undo-tree-id955 . -9) (#("<'b>" 0 2 (fontified nil) 2 3 (face font-lock-variable-name-face fontified nil) 3 4 (fontified nil)) . 1860) (undo-tree-id956 . -1) (#("F" 0 1 (face font-lock-variable-name-face fontified nil)) . 1839) (#(": " 0 2 (fontified t)) . 1840) (t 25826 38520 662099 558000)) (25826 38520 622285 92000) 0 nil])
([nil nil ((#("		}
" 0 3 (fontified t) 3 4 (fontified t)) . 2241) (undo-tree-id888 . -3) (undo-tree-id889 . -2) (undo-tree-id890 . -2) (undo-tree-id891 . -2) (undo-tree-id892 . -2) (undo-tree-id893 . -2) (undo-tree-id894 . -2) (undo-tree-id895 . -2) (undo-tree-id896 . -4) 2243) ((2241 . 2245)) (25826 38086 691084 394000) 0 nil])
([nil nil ((1883 . 1885) (#("'" 0 1 (fontified t)) . -1883) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1884) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) 1885 (1875 . 1885) (1874 . 1875) (t 25826 38987 380323 911000)) nil (25826 38998 898353 251000) 0 nil])
nil
([nil nil ((#("l" 0 1 (fontified t)) . -2229) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) 2230 (2220 . 2230) (#("a" 0 1 (fontified t)) . -2220) (undo-tree-id870 . -1) 2221 (2220 . 2221) (#("l" 0 1 (fontified t)) . -2220) (undo-tree-id871 . -1) 2221 (#("e" 0 1 (fontified t)) . -2221) (undo-tree-id872 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -2222) (undo-tree-id873 . -1) (#(" " 0 1 (fontified t)) . -2223) (undo-tree-id874 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -2224) (undo-tree-id875 . -1) (#(" " 0 1 (fontified t)) . -2225) (undo-tree-id876 . -1) (#("=" 0 1 (fontified t)) . -2226) (undo-tree-id877 . -1) (#(" " 0 1 (fontified t)) . -2227) (undo-tree-id878 . -1) (#("s" 0 1 (fontified t)) . -2228) (undo-tree-id879 . -1) (#("e" 0 1 (fontified t)) . -2229) (undo-tree-id880 . -1) (#("l" 0 1 (fontified t)) . -2230) (undo-tree-id881 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -2231) (undo-tree-id882 . -1) (#("." 0 1 (fontified t)) . -2232) (undo-tree-id883 . -1) 2233 (2228 . 2233) (2225 . 2228) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -2225) (undo-tree-id884 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -2226) (undo-tree-id885 . -1) (#(" " 0 1 (fontified t)) . -2227) (undo-tree-id886 . -1) (#("=" 0 1 (fontified t)) . -2228) (undo-tree-id887 . -1) 2229 (2220 . 2229) (2217 . 2220)) ((#("
		" 0 1 (fontified t) 1 3 (fontified nil)) . 2217) (undo-tree-id916 . -3) (undo-tree-id917 . -3) (undo-tree-id918 . -3) (undo-tree-id919 . -1) (undo-tree-id920 . -3) (#("let err =" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 5 (face font-lock-variable-name-face fontified nil) 5 6 (face font-lock-variable-name-face fontified nil) 6 7 (face font-lock-variable-name-face fontified nil) 7 8 (fontified nil) 8 9 (fontified nil)) . 2220) (undo-tree-id921 . -9) (2225 . 2229) (#(" = " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 2225) (undo-tree-id922 . -3) (#("self." 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil)) . 2228) (undo-tree-id923 . -5) (2220 . 2233) (#("a" 0 1 (fontified nil)) . 2220) (undo-tree-id924 . -1) (2220 . 2221) (#("match &sel" 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil) 6 7 (face rust-ampersand-face fontified nil) 7 9 (fontified nil) 9 10 (fontified nil)) . 2220) (undo-tree-id925 . -8) (undo-tree-id926 . -10) (undo-tree-id927 . -10) (undo-tree-id928 . -8) (2229 . 2230)) (25826 38086 684394 349000) 0 nil])
([nil nil ((1813 . 1814) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . 1813) (undo-tree-id989 . -1) (t 25826 38998 940280 272000)) nil (25826 39009 359641 752000) 0 nil])
nil
([nil nil ((2104 . 2125) (2098 . 2104) (#("p" 0 1 (fontified t)) . -2098) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (#("r" 0 1 (fontified t)) . -2099) (undo-tree-id992 . -1) (undo-tree-id993 . -1) 2100 (2097 . 2100) (#("FnOnce(&'a E) -> Fut + Send,
		  Fut: Future<Output = ()> + Send,
		  Self: 'a" 0 6 (face font-lock-type-face fontified t) 6 7 (fontified t) 7 8 (face rust-ampersand-face fontified t) 8 9 (fontified t) 9 10 (face font-lock-variable-name-face fontified t) 10 11 (fontified t) 11 12 (face font-lock-type-face fontified t) 12 15 (fontified t) 15 16 (fontified t syntax-table (1)) 16 17 (fontified t) 17 20 (face font-lock-type-face fontified t) 20 23 (fontified t) 23 27 (face font-lock-type-face fontified t) 27 29 (fontified t) 29 33 (fontified t) 33 36 (face font-lock-variable-name-face fontified t) 36 38 (fontified t) 38 44 (face font-lock-type-face fontified t) 44 45 (fontified t) 45 51 (face font-lock-type-face fontified t) 51 56 (fontified t) 56 60 (fontified t) 60 64 (face font-lock-type-face fontified t) 64 66 (fontified t) 66 70 (fontified t) 70 74 (face font-lock-variable-name-face fontified t) 74 77 (fontified t) 77 78 (face font-lock-variable-name-face fontified t)) . 2097) (undo-tree-id994 . -78) (#("," 0 1 (fontified t)) . -2057) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (#(" " 0 1 (fontified t)) . -2058) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -2059) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -2060) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2061) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) 2062 (t 25826 39009 380240 870000)) nil (25826 39034 799995 769000) 0 nil])
([nil nil ((2053 . 2054) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . 2053) (undo-tree-id1010 . -1) (t 25826 39034 826811 539000)) nil (25826 39041 302210 991000) 0 nil])
([nil nil ((2170 . 2174) (#("call" 0 4 (fontified nil)) . 2170) (2170 . 2174) (#("call (as InspectFn)" 0 19 (fontified nil)) . -2170) (2170 . 2189) (#("call" 0 4 (fontified t)) . -2170) (undo-tree-id1011 . -4) (undo-tree-id1012 . -4) (undo-tree-id1013 . -4) (undo-tree-id1014 . -4) (undo-tree-id1015 . -4) (undo-tree-id1016 . -4) 2174 (2169 . 2174) (t 25826 39041 410120 46000)) nil (25826 39060 761613 430000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1509) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (#(" " 0 1 (fontified t)) . -1510) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (#("'" 0 1 (fontified t)) . -1511) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1512) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) 1513 (1501 . 1505) (#(":" 0 1 (fontified t)) . -1376) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (#(" " 0 1 (fontified t)) . -1377) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (#("'" 0 1 (fontified t)) . -1378) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1379) (undo-tree-id1031 . -1) 1380 (1368 . 1372) (t 25826 39060 773380 377000)) nil (25826 39316 644248 594000) 0 nil])
([nil nil ((1594 . 1599) (t 25826 39316 659084 693000)) nil (25826 39373 594473 851000) 0 nil])
([nil nil ((1750 . 1752) (1721 . 1725) (#("	" 0 1 (fontified nil)) . -1747) (undo-tree-id1032 . -1) (1748 . 1749) (1746 . 1748) (1742 . 1746) (1735 . 1742) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1735) (undo-tree-id1033 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1736) (undo-tree-id1034 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1737) (undo-tree-id1035 . -1) 1738 (1735 . 1738) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1735) (undo-tree-id1036 . -1) 1736 (1721 . 1736) (1719 . 1721) (t 25826 39373 625537 603000)) nil (25826 40238 822170 390000) 0 nil])
([nil nil ((1813 . 1815) (1801 . 1813) (1797 . 1798) (#("," 0 1 (fontified t)) . -1797) (undo-tree-id1077 . -1) (#("
" 0 1 (fontified t)) . -1798) (undo-tree-id1078 . -1) 1799 (1798 . 1799) (1795 . 1798) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -1795) (undo-tree-id1079 . -1) 1796 (1793 . 1796) (1781 . 1793) (1760 . 1781) (#(" " 0 1 (fontified nil)) . 1759) (undo-tree-id1080 . -1) (1760 . 1761) (1749 . 1755) (1750 . 1752) (#("'" 0 1 (fontified t)) . -1749) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) 1750 (1749 . 1750) (1748 . 1751) (t 25826 40238 845635 108000)) nil (25826 40524 116878 196000) 0 nil])
([nil nil ((#("pub struct InspectErrFuture<'fut, Fut>
where Fut: Future<Output = ()> + 'fut {
	future: Fut,
	
}

" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 27 (face font-lock-type-face fontified t) 27 29 (fontified t) 29 32 (face font-lock-variable-name-face fontified t) 32 34 (fontified t) 34 37 (face font-lock-type-face fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 44 (face font-lock-keyword-face fontified t) 44 45 (fontified t) 45 48 (face font-lock-variable-name-face fontified t) 48 50 (fontified t) 50 56 (face font-lock-type-face fontified t) 56 57 (fontified t) 57 63 (face font-lock-type-face fontified t) 63 73 (fontified t) 73 76 (face font-lock-variable-name-face fontified t) 76 77 (fontified t) 77 79 (fontified t) 79 80 (fontified t) 80 86 (face font-lock-variable-name-face fontified t) 86 88 (fontified t) 88 91 (face font-lock-type-face fontified t) 91 94 (fontified t) 94 95 (fontified t) 95 96 (fontified t) 96 97 (fontified t) 97 98 (fontified t)) . 1721) (undo-tree-id1045 . -97) (undo-tree-id1046 . -97) (undo-tree-id1047 . 96) (undo-tree-id1048 . -97) (undo-tree-id1049 . -97) (undo-tree-id1050 . -97) (undo-tree-id1051 . -97) (undo-tree-id1052 . -1) (undo-tree-id1053 . -97) (undo-tree-id1054 . -57) (undo-tree-id1055 . 4) (undo-tree-id1056 . -2) (undo-tree-id1057 . -2) (undo-tree-id1058 . -2) (undo-tree-id1059 . -2) (undo-tree-id1060 . -2) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -97) (undo-tree-id1070 . -97) (undo-tree-id1071 . -97) (undo-tree-id1072 . -97) (undo-tree-id1073 . -97) (undo-tree-id1074 . -97) (undo-tree-id1075 . -97) (undo-tree-id1076 . -98) 1818) nil (25826 40524 116860 279000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -1595) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (#(" " 0 1 (fontified t)) . -1596) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (#("'" 0 1 (fontified t)) . -1597) (undo-tree-id1043 . -1) (#("b" 0 1 (face font-lock-variable-name-face fontified t)) . -1598) (undo-tree-id1044 . -1) 1599) nil (25826 40524 116663 965000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1594) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) 1595) nil (25826 40524 116620 286000) 0 nil])
([nil nil ((#("for<'a> InspectFn<'a, 'b, E>" 0 3 (face font-lock-keyword-face fontified t) 3 5 (fontified t) 5 6 (face font-lock-variable-name-face fontified t) 6 8 (fontified t) 8 17 (face font-lock-type-face fontified t) 17 19 (fontified t) 19 20 (face font-lock-variable-name-face fontified t) 20 23 (fontified t) 23 24 (face font-lock-variable-name-face fontified t) 24 26 (fontified t) 26 27 (face font-lock-type-face fontified t) 27 28 (fontified t)) . 1857) (undo-tree-id1136 . -27) (undo-tree-id1137 . -27) (undo-tree-id1138 . -27) (undo-tree-id1139 . -27) (undo-tree-id1140 . -27) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -27) (undo-tree-id1148 . -27) (undo-tree-id1149 . -27) (undo-tree-id1150 . -28) 1884 (t 25826 40524 157903 520000)) nil (25826 40894 438051 377000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . -1899) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1900) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (#(">" 0 1 (fontified t)) . -1901) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) 1902 (#("<" 0 1 (fontified nil)) . -1756) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1757) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (#(":" 0 1 (fontified t)) . -1758) (undo-tree-id1117 . -1) (#(" " 0 1 (fontified t)) . -1759) (undo-tree-id1118 . -1) (#("'" 0 1 (fontified t)) . -1760) (undo-tree-id1119 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -1761) (undo-tree-id1120 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -1762) (undo-tree-id1121 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1763) (undo-tree-id1122 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -1764) (undo-tree-id1123 . -1) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -1765) (undo-tree-id1124 . -1) (#("c" 0 1 (face font-lock-keyword-face fontified t)) . -1766) (undo-tree-id1125 . -1) (#(">" 0 1 (fontified t)) . -1767) (undo-tree-id1126 . -1) 1768 (#("S" 0 1 (face font-lock-type-face fontified t)) . -1865) (undo-tree-id1127 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1866) (undo-tree-id1128 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1867) (undo-tree-id1129 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1868) (undo-tree-id1130 . -1) (#(":" 0 1 (fontified t)) . -1869) (undo-tree-id1131 . -1) (#(":" 0 1 (fontified t)) . -1870) (undo-tree-id1132 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1871) (undo-tree-id1133 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1872) (undo-tree-id1134 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1873) (undo-tree-id1135 . -1) 1874 (1865 . 1874) (1857 . 1865)) nil (25826 40894 438013 940000) 0 nil])
([nil nil ((1912 . 1913) (1910 . 1912) (#("*" 0 1 (fontified t)) . -1910) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (#("(" 0 1 (fontified t)) . -1911) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) 1912 (1900 . 1912) (1894 . 1900) (#("Future" 0 6 (fontified nil)) . 1894) (1894 . 1900) (#("Future" 0 6 (face font-lock-type-face fontified t)) . -1894) (undo-tree-id1175 . -6) (undo-tree-id1176 . -6) 1900 (1894 . 1900) (1861 . 1864) (1852 . 1853) (#(" " 0 1 (fontified t)) . -1851) (undo-tree-id1177 . -1) 1852 (1851 . 1852) (1845 . 1852) (1882 . 1883) (1875 . 1878) 1879 (1878 . 1879) (1875 . 1878) (1873 . 1875) (1869 . 1873) (1864 . 1869) (1853 . 1864) (t 25826 40894 479855 195000)) nil (25826 41063 744650 118000) 0 nil])
([nil nil ((1805 . 1810) (t 25826 41063 759524 379000)) nil (25826 41716 410776 770000) 0 nil])
([nil nil ((1956 . 1974) (#("AsyncInspecFmttErr" 0 14 (fontified nil) 14 18 (face font-lock-type-face fontified nil)) . 1956) (1956 . 1970) (#("AsyncInspectFmtErr" 0 18 (fontified nil)) . -1956) (1956 . 1974) (#("AsyncInspecFmt" 0 14 (face font-lock-type-face fontified t)) . -1956) (undo-tree-id1485 . -11) (undo-tree-id1486 . -14) 1970 (1967 . 1970) (1805 . 1806) (1801 . 1805) (1797 . 1801) (1753 . 1756) (#("a" 0 1 (face font-lock-function-name-face fontified t)) . -1794) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (#("s" 0 1 (face font-lock-function-name-face fontified t)) . -1795) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (#("y" 0 1 (face font-lock-function-name-face fontified t)) . -1796) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (#("n" 0 1 (face font-lock-function-name-face fontified t)) . -1797) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (#("c" 0 1 (face font-lock-function-name-face fontified t)) . -1798) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) 1799) nil (25827 21961 518202 458000) 0 nil] [nil nil ((#("'" 0 1 (fontified t)) . -1800) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (#("b" 0 1 (face font-lock-variable-name-face fontified t)) . -1801) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (#("," 0 1 (fontified t)) . -1802) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (#(" " 0 1 (fontified t)) . -1803) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) 1804 (t 25826 41073 76178 688000)) ((1800 . 1804)) (25826 41716 75873 363000) 0 nil])
([nil nil ((#("	type Error;
" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 11 (face font-lock-type-face fontified t) 11 12 (fontified t) 12 13 (fontified t)) . 1762) (undo-tree-id1480 . -12) (undo-tree-id1481 . -12) (undo-tree-id1482 . -12) (undo-tree-id1483 . -11) (undo-tree-id1484 . -11) 1773) nil (25827 21961 518192 972000) 0 nil])
([nil nil ((2172 . 2193) (2165 . 2168) 2169 (2168 . 2169) (2165 . 2168) (2164 . 2165) (#(" " 0 1 (fontified nil)) . 2164) (2163 . 2164) (2147 . 2163) (2132 . 2147) (#("I" 0 1 (face font-lock-type-face fontified t)) . -2132) (undo-tree-id1187 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2133) (undo-tree-id1188 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -2134) (undo-tree-id1189 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -2135) (undo-tree-id1190 . -1) (#("e" 0 1 (face font-lock-type-face fontified nil)) . -2136) (undo-tree-id1191 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -2137) (undo-tree-id1192 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2138) (undo-tree-id1193 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -2139) (undo-tree-id1194 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2140) (undo-tree-id1195 . -1) (#("<" 0 1 (fontified t)) . -2141) (undo-tree-id1196 . -1) (#("'" 0 1 (fontified t)) . -2142) (undo-tree-id1197 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -2143) (undo-tree-id1198 . -1) (#("," 0 1 (fontified t)) . -2144) (undo-tree-id1199 . -1) (#(" " 0 1 (fontified t)) . -2145) (undo-tree-id1200 . -1) (#("'" 0 1 (fontified t)) . -2146) (undo-tree-id1201 . -1) (#("b" 0 1 (face font-lock-variable-name-face fontified t)) . -2147) (undo-tree-id1202 . -1) (#("," 0 1 (fontified t)) . -2148) (undo-tree-id1203 . -1) (#(" " 0 1 (fontified t)) . -2149) (undo-tree-id1204 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -2150) (undo-tree-id1205 . -1) (#(">" 0 1 (fontified t)) . -2151) (undo-tree-id1206 . -1) (#("=" 0 1 (fontified t)) . -2152) (undo-tree-id1207 . -1) 2153 (2152 . 2153) (2079 . 2084) (#("'" 0 1 (fontified t)) . -2078) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (#("b" 0 1 (face font-lock-variable-name-face fontified t)) . -2079) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (#("," 0 1 (fontified t)) . -2080) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (#(" " 0 1 (fontified t)) . -2081) (undo-tree-id1215 . -1) 2082 (t 25826 41097 689477 763000)) ((2078 . 2082) (#(", Fut" 0 2 (fontified t) 2 5 (face font-lock-type-face fontified t)) . 2079) (#("=" 0 1 (fontified nil)) . 2152) (undo-tree-id1288 . -1) (2132 . 2153) (#("FnOnce(&'a Self" 0 6 (face font-lock-type-face fontified nil) 6 7 (fontified nil) 7 8 (face rust-ampersand-face fontified nil) 8 9 (fontified nil) 9 10 (face font-lock-variable-name-face fontified nil) 10 11 (fontified nil) 11 15 (face font-lock-type-face fontified nil)) . 2132) (undo-tree-id1289 . -15) (undo-tree-id1290 . -15) (undo-tree-id1291 . -15) (undo-tree-id1292 . -15) (undo-tree-id1293 . -15) (#("::Error) -> Fut," 0 2 (fontified nil) 2 7 (face font-lock-type-face fontified nil) 7 10 (fontified nil) 10 11 (syntax-table (1) fontified nil) 11 12 (fontified nil) 12 15 (face font-lock-type-face fontified nil) 15 16 (fontified nil)) . 2147) (undo-tree-id1294 . -11) (undo-tree-id1295 . -16) (undo-tree-id1296 . -16) (undo-tree-id1297 . -16) (undo-tree-id1298 . -16) (#("
" 0 1 (fontified t)) . 2163) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (2164 . 2165) (#("	" 0 1 (fontified nil)) . 2164) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (#("Fut" 0 3 (face font-lock-variable-name-face fontified nil)) . 2165) (undo-tree-id1306 . -3) (undo-tree-id1307 . -3) (undo-tree-id1308 . -3) (#(":" 0 1 (fontified nil)) . 2168) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (#("	  " 0 3 (fontified nil)) . 2165) (#(" Future<OUtput = ()> " 0 1 (fontified t) 1 7 (face font-lock-type-face fontified t) 7 8 (fontified t) 8 9 (face font-lock-type-face fontified t) 9 10 (face font-lock-type-face fontified t) 10 14 (face font-lock-type-face fontified t) 14 21 (fontified t)) . 2172) (undo-tree-id1312 . -8) (undo-tree-id1313 . -9) (undo-tree-id1314 . -9)) (25826 41715 761152 647000) 0 nil])
([nil nil ((1851 . 1857) (#("Strin" 0 5 (fontified nil)) . 1851) (1851 . 1856) (#("String" 0 6 (fontified nil)) . -1851) (1851 . 1857) (#("Strin" 0 5 (face font-lock-type-face fontified t)) . -1851) (undo-tree-id1427 . -5) 1856 (1851 . 1856) (#("&" 0 1 (fontified t)) . -1851) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (#("'" 0 1 (fontified t)) . -1852) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1853) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (#(" " 0 1 (fontified t)) . -1854) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1855) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1856) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1857) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1858) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (#(":" 0 1 (fontified t)) . -1859) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (#(":" 0 1 (fontified t)) . -1860) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1861) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1862) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1863) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1864) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1865) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) 1866 (#("f" 0 1 (fontified t)) . -1844) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (#("o" 0 1 (fontified t)) . -1845) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (#("r" 0 1 (fontified t)) . -1846) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (#("<" 0 1 (fontified t)) . -1847) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (#("'" 0 1 (fontified t)) . -1848) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1849) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (#(">" 0 1 (fontified t)) . -1850) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (#(" " 0 1 (fontified t)) . -1851) (undo-tree-id1479 . -1) 1852) nil (25827 21961 518184 268000) 0 nil])
([nil nil ((2181 . 2182) (#("U" 0 1 (face font-lock-type-face fontified t)) . 2181) (t 25826 41126 149435 359000)) ((2181 . 2182) (#("u" 0 1 (face font-lock-type-face fontified t)) . 2181)) (25826 41715 363512 100000) 0 nil])
([nil nil ((#("// what is rust generics + async?
// a clusterfuck.
trait InspectFn<'a: 'b, 'b, E: 'static>: Send {
	type Output: Future<Output = ()> + Send + 'b;
	fn call(self, error: &'a E) -> Self::Output;
}

impl<'a: 'b, 'b, E: 'static, F, Fut> InspectFn<'a, 'b, E> for F
where F: FnOnce(&'a E) -> Fut + Send,
	  Fut: Future<Output = ()> + Send + 'b {
	type Output = Fut;
	fn call(self, error: &'a E) -> Fut {
		self(error)
	}
}

" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 34 (face font-lock-comment-face fontified t) 34 37 (face font-lock-comment-delimiter-face fontified t) 37 51 (face font-lock-comment-face fontified t) 51 52 (face font-lock-comment-face fontified t) 52 57 (face font-lock-keyword-face fontified t) 57 58 (fontified t) 58 67 (face font-lock-type-face fontified t) 67 69 (fontified t) 69 70 (face font-lock-variable-name-face fontified t) 70 73 (fontified t) 73 74 (face font-lock-variable-name-face fontified t) 74 77 (fontified t) 77 78 (face font-lock-variable-name-face fontified t) 78 80 (fontified t) 80 81 (face font-lock-variable-name-face fontified t) 81 83 (fontified t) 83 84 (fontified t) 84 90 (face font-lock-keyword-face fontified t) 90 93 (fontified t) 93 97 (face font-lock-type-face fontified t) 97 100 (fontified t) 100 101 (fontified t) 101 105 (face font-lock-keyword-face fontified t) 105 106 (fontified t) 106 112 (face font-lock-variable-name-face fontified t) 112 114 (fontified t) 114 120 (face font-lock-type-face fontified t) 120 121 (fontified t) 121 127 (face font-lock-type-face fontified t) 127 136 (fontified t) 136 140 (face font-lock-type-face fontified t) 140 143 (fontified t) 143 144 (fontified t) 144 145 (face font-lock-variable-name-face fontified t) 145 147 (fontified t) 147 148 (fontified t) 148 150 (face font-lock-keyword-face fontified t) 150 151 (fontified t) 151 155 (face font-lock-function-name-face fontified t) 155 156 (fontified t) 156 160 (face font-lock-keyword-face fontified t) 160 162 (fontified t) 162 167 (face font-lock-variable-name-face fontified t) 167 169 (fontified t) 169 170 (face rust-ampersand-face fontified t) 170 171 (fontified t) 171 172 (face font-lock-variable-name-face fontified t) 172 173 (fontified t) 173 174 (face font-lock-type-face fontified t) 174 177 (fontified t) 177 178 (fontified t syntax-table (1)) 178 179 (fontified t) 179 183 (face font-lock-type-face fontified t) 183 185 (fontified t) 185 191 (face font-lock-type-face fontified t) 191 192 (fontified t) 192 193 (fontified t) 193 195 (fontified t) 195 196 (fontified t) 196 200 (face font-lock-keyword-face fontified t) 200 202 (fontified t) 202 203 (face font-lock-variable-name-face fontified t) 203 206 (fontified t) 206 207 (face font-lock-variable-name-face fontified t) 207 210 (fontified t) 210 211 (face font-lock-variable-name-face fontified t) 211 213 (fontified t) 213 214 (face font-lock-variable-name-face fontified t) 214 217 (fontified t) 217 223 (face font-lock-keyword-face fontified t) 223 225 (fontified t) 225 226 (face font-lock-type-face fontified t) 226 228 (fontified t) 228 231 (face font-lock-type-face fontified t) 231 232 (fontified t) 232 233 (fontified t) 233 242 (face font-lock-type-face fontified t) 242 243 (fontified t) 243 244 (fontified t) 244 245 (face font-lock-variable-name-face fontified t) 245 248 (fontified t) 248 249 (face font-lock-variable-name-face fontified t) 249 251 (fontified t) 251 252 (face font-lock-type-face fontified t) 252 254 (fontified t) 254 257 (face font-lock-keyword-face fontified t) 257 258 (fontified t) 258 259 (face font-lock-type-face fontified t) 259 260 (fontified t) 260 265 (face font-lock-keyword-face fontified t) 265 266 (fontified t) 266 267 (face font-lock-variable-name-face fontified t) 267 269 (fontified t) 269 275 (face font-lock-type-face fontified t) 275 276 (fontified t) 276 277 (face rust-ampersand-face fontified t) 277 278 (fontified t) 278 279 (face font-lock-variable-name-face fontified t) 279 280 (fontified t) 280 281 (face font-lock-type-face fontified t) 281 284 (fontified t) 284 285 (syntax-table (1) fontified t) 285 286 (fontified t) 286 289 (face font-lock-type-face fontified t) 289 292 (fontified t) 292 296 (face font-lock-type-face fontified t) 296 298 (fontified t) 298 301 (fontified t) 301 304 (face font-lock-variable-name-face fontified t) 304 306 (fontified t) 306 312 (face font-lock-type-face fontified t) 312 313 (fontified t) 313 319 (face font-lock-type-face fontified t) 319 327 (fontified t) 327 328 (fontified t) 328 332 (face font-lock-type-face fontified t) 332 335 (fontified t) 335 336 (fontified t) 336 337 (face font-lock-variable-name-face fontified t) 337 338 (fontified t) 338 340 (fontified t) 340 341 (fontified t) 341 345 (face font-lock-keyword-face fontified t) 345 346 (fontified t) 346 352 (face font-lock-type-face fontified t) 352 355 (fontified t) 355 358 (face font-lock-type-face fontified t) 358 360 (fontified t) 360 361 (fontified t) 361 363 (face font-lock-keyword-face fontified t) 363 364 (fontified t) 364 368 (face font-lock-function-name-face fontified t) 368 369 (fontified t) 369 373 (face font-lock-keyword-face fontified t) 373 375 (fontified t) 375 380 (face font-lock-variable-name-face fontified t) 380 382 (fontified t) 382 383 (face rust-ampersand-face fontified t) 383 384 (fontified t) 384 385 (face font-lock-variable-name-face fontified t) 385 386 (fontified t) 386 387 (face font-lock-type-face fontified t) 387 390 (fontified t) 390 391 (fontified t syntax-table (1)) 391 392 (fontified t) 392 395 (face font-lock-type-face fontified t) 395 398 (fontified t) 398 400 (fontified t) 400 404 (face font-lock-keyword-face fontified t) 404 411 (fontified t) 411 412 (fontified t) 412 414 (fontified t) 414 415 (fontified t) 415 417 (fontified t) 417 418 (fontified t)) . 1298) (undo-tree-id1412 . -417) (undo-tree-id1413 . -417) (undo-tree-id1414 . 59) (undo-tree-id1415 . -418) (undo-tree-id1416 . -418) (undo-tree-id1417 . -418) (undo-tree-id1418 . -81) (undo-tree-id1419 . -174) (undo-tree-id1420 . -258) (undo-tree-id1421 . -91) (undo-tree-id1422 . -417) (undo-tree-id1423 . -75) (undo-tree-id1424 . -38) (undo-tree-id1425 . -417) (undo-tree-id1426 . -359) 1715) nil (25827 21961 518146 836000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2236) (undo-tree-id1216 . -1) (undo-tree-id1218 . -1) (undo-tree-id1220 . -1) (undo-tree-id1222 . -1) (undo-tree-id1224 . -1) (#("c" 0 1 (fontified t)) . -2237) (undo-tree-id1225 . -1) (undo-tree-id1227 . -1) (undo-tree-id1229 . -1) (undo-tree-id1231 . -1) (undo-tree-id1233 . -1) (#("a" 0 1 (fontified t)) . -2238) (undo-tree-id1234 . -1) (undo-tree-id1236 . -1) (undo-tree-id1238 . -1) (undo-tree-id1240 . -1) (undo-tree-id1242 . -1) (#("l" 0 1 (fontified t)) . -2239) (undo-tree-id1243 . -1) (undo-tree-id1245 . -1) (undo-tree-id1247 . -1) (undo-tree-id1249 . -1) (undo-tree-id1251 . -1) (#("l" 0 1 (fontified t)) . -2240) (undo-tree-id1252 . -1) (undo-tree-id1254 . -1) (undo-tree-id1256 . -1) (undo-tree-id1258 . -1) 2241 (t 25826 41132 209425 957000)) ((2236 . 2241)) (25826 41714 965834 397000) 0 nil])
([nil nil ((1643 . 1647)) nil (25827 21961 518136 813000) 0 nil])
([nil nil ((2194 . 2200) (#("S" 0 1 (face font-lock-type-face fontified t)) . -2194) (undo-tree-id1260 . -1) 2195 (2193 . 2195) (t 25826 41140 499412 891000)) ((#("+S" 0 1 (fontified nil) 1 2 (face font-lock-type-face fontified nil)) . 2193) (2194 . 2195) (#(" Send " 0 1 (fontified t) 1 5 (face font-lock-type-face fontified t) 5 6 (fontified t)) . 2194)) (25826 41714 534036 707000) 0 nil])
([nil nil ((#("	type Error = E;
" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 11 (face font-lock-type-face fontified t) 11 14 (fontified t) 14 15 (face font-lock-type-face fontified t) 15 17 (fontified t)) . 1599) (undo-tree-id1408 . -16) (undo-tree-id1409 . -16) (undo-tree-id1410 . -16) (undo-tree-id1411 . -15) 1614) nil (25827 21961 518135 799000) 0 nil])
([nil nil ((1914 . 1921) (t 25826 41150 849396 248000)) ((#(" + Send" 0 3 (fontified t) 3 7 (face font-lock-type-face fontified t)) . 1914)) (25826 41714 73319 815000) 0 nil])
([nil nil ((1676 . 1690) (#("f" 0 1 (fontified t)) . -1676) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (#("o" 0 1 (fontified t)) . -1677) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -1678) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (#("<" 0 1 (fontified t)) . -1679) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) 1680 (#("'" 0 1 (fontified t)) . -1680) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1681) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (#(">" 0 1 (fontified t)) . -1682) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) 1683 (#(" " 0 1 (fontified t)) . -1683) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -1684) (undo-tree-id1388 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1685) (undo-tree-id1389 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1686) (undo-tree-id1390 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1687) (undo-tree-id1391 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1688) (undo-tree-id1392 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -1689) (undo-tree-id1393 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1690) (undo-tree-id1394 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1691) (undo-tree-id1395 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1692) (undo-tree-id1396 . -1) (#("<" 0 1 (fontified t)) . -1693) (undo-tree-id1397 . -1) (#("'" 0 1 (fontified t)) . -1694) (undo-tree-id1398 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1695) (undo-tree-id1399 . -1) (#("," 0 1 (fontified t)) . -1696) (undo-tree-id1400 . -1) (#(" " 0 1 (fontified t)) . -1697) (undo-tree-id1401 . -1) (#("'" 0 1 (fontified t)) . -1698) (undo-tree-id1402 . -1) (#("b" 0 1 (face font-lock-variable-name-face fontified t)) . -1699) (undo-tree-id1403 . -1) (#("," 0 1 (fontified t)) . -1700) (undo-tree-id1404 . -1) (#(" " 0 1 (fontified t)) . -1701) (undo-tree-id1405 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1702) (undo-tree-id1406 . -1) (#(">" 0 1 (fontified t)) . -1703) (undo-tree-id1407 . -1) 1704) nil (25827 21961 518127 998000) 0 nil])
([nil nil ((2172 . 2176) (#("Send" 0 4 (fontified nil)) . 2172) (2172 . 2176) (#("Send" 0 4 (face font-lock-type-face fontified t)) . -2172) (undo-tree-id1261 . -4) (undo-tree-id1262 . -4) (undo-tree-id1264 . -4) (undo-tree-id1266 . -4) (undo-tree-id1268 . -4) (undo-tree-id1270 . -4) 2176 (2169 . 2176) (t 25826 41162 336044 25000)) ((#(" + Send" 0 3 (fontified nil) 3 7 (face font-lock-type-face fontified nil)) . 2169) (2172 . 2176) (#("Send" 0 4 (fontified nil)) . 2172) (2172 . 2176) (#("Send" 0 4 (face font-lock-type-face fontified t)) . 2172)) (25826 41713 564567 252000) 0 nil])
([nil nil ((1354 . 1355) (#("insp" 0 4 (face font-lock-function-name-face fontified t)) . 1354) (1359 . 1362) (#("c" 0 1 (face font-lock-function-name-face fontified t)) . 1359) (#("r" 0 1 (face font-lock-function-name-face fontified t)) . 1363) (#("_async_st" 0 9 (face font-lock-function-name-face fontified t)) . 1365) (undo-tree-id1368 . -3) (undo-tree-id1369 . -3) (undo-tree-id1370 . -3) 1368 (1609 . 1610) (#("insp" 0 4 (face font-lock-function-name-face fontified t)) . 1609) (1614 . 1617) (#("c" 0 1 (face font-lock-function-name-face fontified t)) . 1614) (#("r" 0 1 (face font-lock-function-name-face fontified t)) . 1618) (#("_async_st" 0 9 (face font-lock-function-name-face fontified t)) . 1620) (undo-tree-id1371 . -1) 1609) nil (25827 21961 518099 803000) 0 nil])
([nil nil ((1884 . 1891) (t 25826 41178 532683 326000)) ((#(" + Send" 0 3 (fontified t) 3 7 (face font-lock-type-face fontified t)) . 1884) (undo-tree-id1271 . -6) (undo-tree-id1272 . -6) (undo-tree-id1273 . -6) (undo-tree-id1274 . -6) (undo-tree-id1275 . -6) (undo-tree-id1276 . -6) (undo-tree-id1277 . -6) (undo-tree-id1278 . -6) (undo-tree-id1279 . -6) (undo-tree-id1280 . -6) (undo-tree-id1281 . -6) (undo-tree-id1282 . -6) (undo-tree-id1283 . -6) (undo-tree-id1284 . -6) (undo-tree-id1285 . -6) (undo-tree-id1286 . -6) (undo-tree-id1287 . -6) (t 25826 41187 386001 349000)) (25826 41187 355944 372000) 0 nil])
([nil nil ((1702 . 1703) (1682 . 1702) (1675 . 1678) 1679 (1675 . 1679) (1674 . 1675) (#(" " 0 1 (fontified nil)) . 1674) (undo-tree-id1354 . 1) (1673 . 1674) (1667 . 1673) (1665 . 1667) (1606 . 1611) (#("'" 0 1 (fontified t)) . -1605) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (#("b" 0 1 (face font-lock-variable-name-face fontified t)) . -1606) (undo-tree-id1357 . -1) (#("," 0 1 (fontified t)) . -1607) (undo-tree-id1358 . -1) (#(" " 0 1 (fontified t)) . -1608) (undo-tree-id1359 . -1) 1609 (#("'" 0 1 (fontified t)) . -1365) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (#("b" 0 1 (face font-lock-variable-name-face fontified t)) . -1366) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (#("," 0 1 (fontified t)) . -1367) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (#(" " 0 1 (fontified t)) . -1368) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) 1369) nil (25827 21961 518091 452000) 0 nil])
nil
([nil nil ((#("r" 0 1 (fontified t)) . -1718) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (#("e" 0 1 (fontified t)) . -1719) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (#("f" 0 1 (fontified t)) . -1720) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (#(" " 0 1 (fontified t)) . -1721) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) 1722 (1727 . 1728)) nil (25827 21961 518068 991000) 0 nil])
([nil nil ((1555 . 1562) (#("Displ" 0 5 (fontified nil)) . 1555) (1555 . 1560) (#("Display (alias {})" 0 18 (fontified nil)) . -1555) (1555 . 1573) (#("Displ" 0 5 (face font-lock-type-face fontified t)) . -1555) (undo-tree-id1497 . -5) (undo-tree-id1498 . -5) (undo-tree-id1499 . -5) (undo-tree-id1500 . -5) 1560 (1552 . 1560) (1745 . 1757) (#("." 0 1 (fontified t)) . -1743) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (#("c" 0 1 (fontified t)) . -1744) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (#("a" 0 1 (fontified t)) . -1745) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (#("l" 0 1 (fontified t)) . -1746) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (#("l" 0 1 (fontified t)) . -1747) (undo-tree-id1509 . -1) 1748 (t 25827 21961 531882 408000)) nil (25827 21981 812263 529000) 0 nil])
([nil nil ((1574 . 1581) (#("Disp" 0 4 (fontified nil)) . 1574) (1574 . 1578) (#("Display (alias {})" 0 18 (fontified nil)) . -1574) (1574 . 1592) (#("Disp" 0 4 (face font-lock-type-face fontified t)) . -1574) (undo-tree-id1510 . -4) (undo-tree-id1511 . -4) (undo-tree-id1512 . -4) (undo-tree-id1513 . -4) 1578 (1574 . 1578) (1571 . 1574) (#(" " 0 1 (fontified t)) . -1552) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (#("+" 0 1 (fontified t)) . -1553) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (#(" " 0 1 (fontified t)) . -1554) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (#("D" 0 1 (face font-lock-type-face fontified t)) . -1555) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1556) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1557) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1558) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1559) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1560) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -1561) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) 1562 (t 25827 21981 822191 894000)) nil (25827 21998 527740 321000) 0 nil])
([nil nil ((1717 . 1720) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1717) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) 1718 (1713 . 1718) (t 25827 21998 552448 116000)) nil (25827 22019 244467 472000) 0 nil])
([nil nil ((1685 . 1689) (#("Send" 0 4 (fontified nil)) . 1685) (1685 . 1689) (#("Send" 0 4 (face font-lock-type-face fontified t)) . -1685) (undo-tree-id1542 . -4) (undo-tree-id1543 . -4) (undo-tree-id1544 . -4) (undo-tree-id1545 . -4) (undo-tree-id1546 . -4) (undo-tree-id1547 . -4) (undo-tree-id1548 . -4) 1689 (1682 . 1689) (t 25827 22019 256099 778000)) nil (25827 22025 279061 996000) 0 nil])
([nil nil ((1469 . 1476) (1435 . 1439) (#("Send" 0 4 (fontified nil)) . 1435) (1435 . 1439) (#("Send" 0 4 (face font-lock-type-face fontified t)) . -1435) (undo-tree-id1549 . -4) (undo-tree-id1550 . -4) 1439 (1432 . 1439) (t 25827 22025 289526 133000)) nil (25827 22035 971432 948000) 0 nil])
([nil nil ((1328 . 1329) (#("Insp" 0 4 (face font-lock-type-face fontified t)) . 1328) (undo-tree-id1551 . -2) (undo-tree-id1552 . -2) (undo-tree-id1553 . -2) (1333 . 1336) (#("ctFm" 0 4 (face font-lock-type-face fontified t)) . 1333) 1330 (1512 . 1513) (#("Insp" 0 4 (face font-lock-type-face fontified t)) . 1512) (1517 . 1520) (#("ctFm" 0 4 (face font-lock-type-face fontified t)) . 1517) 1507 (t 25827 22035 983024 608000)) nil (25827 22254 250669 618000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1795) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (#("t" 0 1 (fontified t)) . -1796) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (#("o" 0 1 (fontified t)) . -1797) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (#("_" 0 1 (fontified t)) . -1798) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (#("s" 0 1 (fontified t)) . -1799) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (#("t" 0 1 (fontified t)) . -1800) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (#("r" 0 1 (fontified t)) . -1801) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (#("i" 0 1 (fontified t)) . -1802) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (#("n" 0 1 (fontified t)) . -1803) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (#("g" 0 1 (fontified t)) . -1804) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (#("(" 0 1 (fontified t)) . -1805) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (#(")" 0 1 (fontified t)) . -1806) (undo-tree-id1576 . -1) 1807 (1792 . 1795) (1774 . 1791) (t 25827 22254 265324 569000)) nil (25827 36719 679376 161000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . -1452) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1453) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1454) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1455) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1456) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1457) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1458) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (#(" " 0 1 (fontified t)) . -1459) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (#("=" 0 1 (fontified t)) . -1460) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (#(" " 0 1 (fontified t)) . -1461) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (#("(" 0 1 (fontified t)) . -1462) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (#(")" 0 1 (fontified t)) . -1463) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (#(">" 0 1 (fontified t)) . -1464) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) 1465 (#("<" 0 1 (fontified t)) . -1712) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1713) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1714) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1715) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1716) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (#("u" 0 1 (face font-lock-type-face fontified nil)) . -1717) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1718) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (#(" " 0 1 (fontified t)) . -1719) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (#("=" 0 1 (fontified t)) . -1720) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (#(" " 0 1 (fontified t)) . -1721) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (#("(" 0 1 (fontified t)) . -1722) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (#(")" 0 1 (fontified t)) . -1723) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (#(">" 0 1 (fontified t)) . -1724) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) 1725 (t 25827 36719 711664 451000)) nil (25827 36867 219856 993000) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . -1156) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (#("	" 0 1 (fontified t)) . -1157) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1158) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1159) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1160) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (#("c" 0 1 (face font-lock-type-face fontified nil)) . -1161) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (#("u" 0 1 (face font-lock-type-face fontified nil)) . -1162) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (#("r" 0 1 (face font-lock-type-face fontified nil)) . -1163) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1164) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1165) (undo-tree-id1689 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1166) (undo-tree-id1690 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1167) (undo-tree-id1691 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1168) (undo-tree-id1692 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1169) (undo-tree-id1693 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1170) (undo-tree-id1694 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1171) (undo-tree-id1695 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1172) (undo-tree-id1696 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1173) (undo-tree-id1697 . -1) (#("<" 0 1 (fontified t)) . -1174) (undo-tree-id1698 . -1) 1175 (1158 . 1175) (1156 . 1158) (t 25827 36867 255020 706000)) nil (25827 59617 526729 603000) 0 nil])
nil
