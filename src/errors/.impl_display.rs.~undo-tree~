(undo-tree-save-format-version . 1)
"7930277fc1815e4b1311fba8fd212bb67f2cc2c7"
[nil nil nil nil (25815 31630 576475 322000) 0 nil]
([nil nil ((16 . 31) (#("D" 0 1 (face font-lock-type-face fontified t)) . -16) (undo-tree-id0 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -17) (undo-tree-id1 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -18) (undo-tree-id2 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -19) (undo-tree-id3 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -20) (undo-tree-id4 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -21) (undo-tree-id5 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -22) (undo-tree-id6 . -1) 23 (3 . 23) (1 . 3) (1 . 3) (65 . 82) (51 . 65) (30 . 51) (29 . 30) (27 . 29) (#("	" 0 1 (fontified nil)) . -28) (undo-tree-id7 . -1) (29 . 30) (27 . 29) (22 . 27) (1 . 22) (#("A" 0 1 (face font-lock-type-face fontified t)) . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 2 (1 . 2) (t 25815 31464 88811 808000)) nil (25815 31630 576455 383000) 0 nil])
([nil nil ((116 . 117)) nil (25815 31630 576353 789000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -121) (undo-tree-id15 . -1) (122 . 123) (119 . 122) (114 . 119) (t 25815 31630 582165 741000)) nil (25815 31770 338450 775000) 0 nil])
([nil nil ((119 . 122)) nil (25815 31770 338444 901000) 0 nil])
([nil nil ((#("impl Display for Context {
	fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
		
	}
}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 24 (face font-lock-type-face fontified t) 24 27 (fontified t) 27 28 (fontified t) 28 30 (face font-lock-keyword-face fontified t) 30 31 (fontified t) 31 34 (face font-lock-function-name-face fontified t) 34 35 (fontified t) 35 36 (face rust-ampersand-face fontified t) 36 40 (face font-lock-keyword-face fontified t) 40 42 (fontified t) 42 43 (face font-lock-variable-name-face fontified t) 43 45 (fontified t) 45 46 (face rust-ampersand-face fontified t) 46 49 (face font-lock-keyword-face fontified t) 49 50 (fontified t) 50 53 (face font-lock-constant-face fontified t) 53 55 (fontified t) 55 64 (face font-lock-type-face fontified t) 64 66 (fontified t) 66 67 (face font-lock-variable-name-face fontified t) 67 71 (fontified t) 71 72 (syntax-table (1) fontified t) 72 73 (fontified t) 73 76 (face font-lock-constant-face fontified t) 76 78 (fontified t) 78 84 (face font-lock-type-face fontified t) 84 90 (fontified t) 90 92 (fontified t) 92 93 (fontified t) 93 94 (fontified t) 94 95 (fontified t)) . 33) (undo-tree-id10 . -95) (undo-tree-id11 . 95) (undo-tree-id12 . -94) (undo-tree-id13 . 3) (undo-tree-id14 . -95)) nil (25815 31770 338441 125000) 0 nil])
([nil nil ((nil rear-nonsticky nil 215 . 216) (nil fontified nil 33 . 216) (33 . 216)) nil (25815 31770 338419 350000) 0 nil])
([nil nil ((nil rear-nonsticky nil 416 . 417) (nil fontified nil 216 . 417) (216 . 417)) nil (25815 31770 338413 335000) 0 nil])
([nil nil ((60 . 62) (53 . 60) (#("Displa" 0 6 (fontified nil)) . 53) (53 . 59) (#("Display (alias {})" 0 18 (fontified nil)) . -53) (53 . 71) (#("Displa" 0 6 (face font-lock-type-face fontified t)) . -53) (undo-tree-id16 . -6) 59 (53 . 59) (32 . 53) (31 . 32) (t 25815 31770 338846 851000)) nil (25815 31813 648239 652000) 0 nil])
([nil nil ((53 . 66) (#("Internal" 0 8 (fontified nil)) . 53) (53 . 61) (#("InternalError" 0 13 (fontified nil)) . -53) (53 . 66) (#("Internal" 0 8 (face font-lock-type-face fontified t)) . -53) (undo-tree-id17 . -8) (undo-tree-id18 . -8) (undo-tree-id19 . -8) (undo-tree-id20 . -8) (undo-tree-id21 . -8) 61 (53 . 61) (#("D" 0 1 (face font-lock-type-face fontified t)) . -53) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -54) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -55) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -56) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -57) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -58) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -59) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) 60 (t 25815 31813 648850 910000)) nil (25815 31991 247165 406000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -285) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -286) (undo-tree-id76 . -1) (undo-tree-id77 . -1) 287 (285 . 287) (t 25815 31991 248865 910000)) nil (25815 32025 371966 865000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -454) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -455) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) 456 (454 . 456) (t 25815 32025 372201 870000)) nil (25815 32030 617118 84000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -124) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -125) (undo-tree-id90 . -1) (undo-tree-id91 . -1) 126 (124 . 126) (122 . 124) (#("	" 0 1 (fontified nil)) . -123) (undo-tree-id92 . -1) (124 . 125) (122 . 124) (120 . 122) (118 . 119) (66 . 76) (apply yas--snippet-revive 99 109 #s(yas--snippet nil nil #s(yas--exit 108 nil) 107 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 108 nil) 107 nil nil nil nil)) (99 . 109) (#("OptError<$0>" 0 12 (fontified nil)) . 99) (99 . 111) (#("OptE" 0 4 (fontified nil)) . 99) (99 . 103) (#("OptError<â€¦> (use super::OptError)" 0 33 (fontified nil)) . -99) (99 . 132) (#("OptE" 0 4 (face font-lock-type-face fontified t)) . -99) (undo-tree-id93 . -4) 103 (102 . 103) (91 . 102) (70 . 91) (69 . 71) (t 25815 32030 908868 956000)) nil (25815 32343 2873 569000) 0 nil])
([nil nil ((265 . 273) (244 . 265) (240 . 244) (221 . 240) (208 . 221) (204 . 208) (#("	" 0 1 (fontified nil)) . -207) (undo-tree-id94 . -1) (208 . 209) (204 . 208) (200 . 204) (185 . 200) (#("use OptError::*;
		match self {
			
		}" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 12 (face font-lock-type-face fontified t) 12 17 (fontified t) 17 19 (fontified t) 19 24 (face font-lock-keyword-face fontified t) 24 25 (fontified t) 25 29 (face font-lock-keyword-face fontified t) 29 36 (fontified t) 36 39 (fontified t)) . 185) (undo-tree-id95 . -39) (undo-tree-id96 . -39) (216 . 220) (#("	" 0 1 (fontified nil)) . -219) (undo-tree-id97 . -1) (220 . 221) (216 . 220) (204 . 216) (201 . 204) (185 . 201) (182 . 185) (#("	" 0 1 (fontified nil)) . -184) (undo-tree-id98 . -1) (185 . 186) (182 . 185) (164 . 182) (#(" " 0 1 (fontified t)) . -164) (undo-tree-id99 . -1) 165 (160 . 165) (151 . 160) (#("Form" 0 4 (fontified nil)) . 151) (151 . 155) (#("Formatter" 0 9 (fontified nil)) . -151) (151 . 160) (#("Form" 0 4 (face font-lock-type-face fontified t)) . -151) (undo-tree-id100 . -4) 155 (135 . 155) (124 . 135) (t 25815 32343 8890 162000)) nil (25815 32409 186145 208000) 0 nil])
([nil nil ((756 . 768) (753 . 756) (768 . 772) (#("	" 0 1 (fontified nil)) . -771) (undo-tree-id105 . -1) (772 . 773) (768 . 772) (756 . 768) (753 . 756) (#("	" 0 1 (fontified nil)) . -755) (undo-tree-id106 . -1) (756 . 757) (753 . 756) (#("
" 0 1 (fontified t)) . -753) (undo-tree-id107 . -1) (#("	" 0 1 (fontified t)) . -754) (undo-tree-id108 . -1) (#("	" 0 1 (fontified t)) . -755) (undo-tree-id109 . -1) (#("{" 0 1 (fontified t)) . -756) (undo-tree-id110 . -1) 757 (756 . 757) (753 . 756) (#("{" 0 1 (fontified t)) . -753) (undo-tree-id111 . -1) (#("
" 0 1 (fontified t)) . -754) (undo-tree-id112 . -1) (#("	" 0 1 (fontified t)) . -755) (undo-tree-id113 . -1) (#("}" 0 1 (fontified t)) . -756) (undo-tree-id114 . -1) 757 (#("	" 0 1 (fontified nil)) . -756) (undo-tree-id115 . -1) (757 . 758) (754 . 757) (750 . 754) (731 . 750) (722 . 731) (#("Forma" 0 5 (fontified nil)) . 722) (722 . 727) (#("Formatter" 0 9 (fontified nil)) . -722) (722 . 731) (#("Forma" 0 5 (face font-lock-type-face fontified t)) . -722) (undo-tree-id116 . -5) 727 (722 . 727) (701 . 722) (695 . 701) (693 . 695) (#("	" 0 1 (fontified nil)) . -694) (undo-tree-id117 . -1) (695 . 696) (693 . 695) (686 . 693) (#("I" 0 1 (face font-lock-type-face fontified t)) . -686) (undo-tree-id118 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -687) (undo-tree-id119 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -688) (undo-tree-id120 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -689) (undo-tree-id121 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -690) (undo-tree-id122 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -691) (undo-tree-id123 . -1) 692 (687 . 692) (681 . 687) (669 . 681) (668 . 669) (t 25815 32409 195560 844000)) nil (25815 52079 325025 37000) 0 nil])
([nil nil ((760 . 764) (#("S" 0 1 (face font-lock-type-face fontified t)) . -760) (undo-tree-id101 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -761) (undo-tree-id102 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -762) (undo-tree-id103 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -763) (undo-tree-id104 . -1) 764) nil (25815 52079 324985 969000) 0 nil])
([nil nil ((796 . 797)) nil (25815 52079 324962 467000) 0 nil])
([nil nil ((760 . 765) (#("S" 0 1 (face font-lock-type-face fontified t)) . -760) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -761) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -762) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) 763 (#("f" 0 1 (face font-lock-type-face fontified t)) . -763) (undo-tree-id137 . -1) (undo-tree-id138 . -1) 764 (t 25815 52079 330515 294000)) nil (25815 52085 666013 952000) 0 nil])
([nil nil ((78 . 83) (#("Err" 0 3 (fontified nil)) . 78) (78 . 81) (#("Error" 0 5 (fontified nil)) . -78) (78 . 83) (#("Err" 0 3 (face font-lock-type-face fontified t)) . -78) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) 81 (76 . 81) (t 25815 52085 677180 426000)) nil (25815 52093 713539 558000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 814 815 nil nil nil nil nil)) nil 108 nil nil nil nil)) (791 . 1030) (#("
			MissingPermission(${0:_}) => todo!(),
			RoleNotFound => todo!(),
			MemberNotFound => todo!(),
			ChannelNotFound => todo!(),
			MessageAlreadyCrossposted => todo!(),
			CannotCrosspostMessage => todo!(),
			Internal(_) => todo!(),
" 0 4 (fontified nil) 4 31 (fontified nil) 31 32 (syntax-table (1) fontified nil) 32 41 (fontified nil) 41 45 (fontified nil) 45 59 (fontified nil) 59 60 (syntax-table (1) fontified nil) 60 89 (fontified nil) 89 90 (syntax-table (1) fontified nil) 90 120 (fontified nil) 120 121 (syntax-table (1) fontified nil) 121 161 (fontified nil) 161 162 (syntax-table (1) fontified nil) 162 199 (fontified nil) 199 200 (syntax-table (1) fontified nil) 200 226 (fontified nil) 226 227 (syntax-table (1) fontified nil) 227 237 (fontified nil)) . 791) (undo-tree-id231 . -1) (undo-tree-id232 . 196) (1028 . 1030) (1001 . 1004) (#("    " 0 4 (fontified nil)) . 1001) (963 . 966) (#("    " 0 4 (fontified nil)) . 963) (922 . 925) (#("    " 0 4 (fontified nil)) . 922) (891 . 894) (#("    " 0 4 (fontified nil)) . 891) (861 . 864) (#("    " 0 4 (fontified nil)) . 861) (833 . 836) (#("    " 0 4 (fontified nil)) . 833) (792 . 795) (#("    " 0 4 (fontified nil)) . 792) (792 . 833) (#("			" 0 3 (fontified t)) . 792) (undo-tree-id233 . -3) (796 . 997) (#("		" 0 2 (fontified t)) . 796) 791 (t 25815 52093 717178 490000)) nil (25815 52805 672763 122000) 0 nil])
([nil nil ((apply yas--snippet-revive 791 1030 #s(yas--snippet nil (#s(yas--field 0 814 815 nil nil nil nil nil)) nil 108 nil nil nil nil))) nil (25815 52805 672753 372000) 0 nil])
([nil nil ((1195 . 1196) (1180 . 1195) (1159 . 1180) (1155 . 1159) (#(" " 0 1 (fontified nil)) . 1154) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (1155 . 1156) (#("t" 0 1 (fontified t)) . -1155) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("o" 0 1 (fontified t)) . -1156) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#("d" 0 1 (fontified t)) . -1157) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("o" 0 1 (fontified t)) . -1158) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("!" 0 1 (fontified t)) . -1159) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("(" 0 1 (fontified t)) . -1160) (undo-tree-id180 . -1) (#(")" 0 1 (fontified t)) . -1161) (undo-tree-id181 . -1) 1162 (1112 . 1124) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1112) (undo-tree-id182 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1113) (undo-tree-id183 . -1) 1114 (1105 . 1114) (1084 . 1105) (1079 . 1084) (#(" " 0 1 (fontified t)) . -1079) (undo-tree-id184 . -1) (#("w" 0 1 (fontified t)) . -1080) (undo-tree-id185 . -1) 1081 (1080 . 1081) (#("t" 0 1 (fontified t)) . -1080) (undo-tree-id186 . -1) (#("o" 0 1 (fontified t)) . -1081) (undo-tree-id187 . -1) (#("d" 0 1 (fontified t)) . -1082) (undo-tree-id188 . -1) (#("o" 0 1 (fontified t)) . -1083) (undo-tree-id189 . -1) (#("!" 0 1 (fontified t)) . -1084) (undo-tree-id190 . -1) (#("(" 0 1 (fontified t)) . -1085) (undo-tree-id191 . -1) (#(")" 0 1 (fontified t)) . -1086) (undo-tree-id192 . -1) 1087 (1041 . 1046) (1020 . 1041) (1016 . 1020) (1012 . 1016) (#(" " 0 1 (fontified nil)) . 1011) (undo-tree-id193 . -1) (1012 . 1013) (#("t" 0 1 (fontified t)) . -1012) (undo-tree-id194 . -1) (#("o" 0 1 (fontified t)) . -1013) (undo-tree-id195 . -1) (#("d" 0 1 (fontified t)) . -1014) (undo-tree-id196 . -1) (#("o" 0 1 (fontified t)) . -1015) (undo-tree-id197 . -1) (#("!" 0 1 (fontified t)) . -1016) (undo-tree-id198 . -1) (#("(" 0 1 (fontified t)) . -1017) (undo-tree-id199 . -1) (#(")" 0 1 (fontified t)) . -1018) (undo-tree-id200 . -1) 1019 (987 . 988) (966 . 987) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -966) (undo-tree-id201 . -1) 967 (961 . 967) (#("t" 0 1 (fontified t)) . -961) (undo-tree-id202 . -1) (#("i" 0 1 (fontified t)) . -962) (undo-tree-id203 . -1) (#("e" 0 1 (fontified t)) . -963) (undo-tree-id204 . -1) 964 (961 . 964) (959 . 961) (955 . 959) (#(" " 0 1 (fontified nil)) . 954) (undo-tree-id205 . -1) (955 . 956) (#("t" 0 1 (fontified t)) . -955) (undo-tree-id206 . -1) (#("o" 0 1 (fontified t)) . -956) (undo-tree-id207 . -1) (#("d" 0 1 (fontified t)) . -957) (undo-tree-id208 . -1) (#("o" 0 1 (fontified t)) . -958) (undo-tree-id209 . -1) (#("!" 0 1 (fontified t)) . -959) (undo-tree-id210 . -1) (#("(" 0 1 (fontified t)) . -960) (undo-tree-id211 . -1) (#(")" 0 1 (fontified t)) . -961) (undo-tree-id212 . -1) 962 (916 . 932) (905 . 916) (901 . 905) (#(" " 0 1 (fontified nil)) . 900) (undo-tree-id213 . -1) (901 . 902) (#("t" 0 1 (fontified t)) . -901) (undo-tree-id214 . -1) (#("o" 0 1 (fontified t)) . -902) (undo-tree-id215 . -1) (#("d" 0 1 (fontified t)) . -903) (undo-tree-id216 . -1) (#("o" 0 1 (fontified t)) . -904) (undo-tree-id217 . -1) (#("!" 0 1 (fontified t)) . -905) (undo-tree-id218 . -1) (#("(" 0 1 (fontified t)) . -906) (undo-tree-id219 . -1) (#(")" 0 1 (fontified t)) . -907) (undo-tree-id220 . -1) 908 (840 . 843) (876 . 877) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -876) (undo-tree-id221 . -1) (#(")" 0 1 (face font-lock-string-face fontified t)) . -877) (undo-tree-id222 . -1) 878 (862 . 878) (861 . 862) (860 . 861) (829 . 833) (#(" " 0 1 (fontified nil)) . 829) (828 . 829) (823 . 824) (849 . 855) (828 . 849) (813 . 823) (#("_" 0 1 (fontified t)) . -813) (undo-tree-id223 . -1) 814 (#("t" 0 1 (fontified t)) . -819) (undo-tree-id224 . -1) (#("o" 0 1 (fontified t)) . -820) (undo-tree-id225 . -1) (#("d" 0 1 (fontified t)) . -821) (undo-tree-id226 . -1) (#("o" 0 1 (fontified t)) . -822) (undo-tree-id227 . -1) (#("!" 0 1 (fontified t)) . -823) (undo-tree-id228 . -1) (#("(" 0 1 (fontified t)) . -824) (undo-tree-id229 . -1) (#(")" 0 1 (fontified t)) . -825) (undo-tree-id230 . -1) 826 (996 . 999) (#("    " 0 4 (fontified t)) . 996) 1023 (958 . 961) (#("    " 0 4 (fontified t)) . 958) 996 (917 . 920) (#("    " 0 4 (fontified t)) . 917) 953 (886 . 889) (#("    " 0 4 (fontified t)) . 886) 914 (856 . 859) (#("    " 0 4 (fontified t)) . 856) 876 (828 . 831) (#("    " 0 4 (fontified t)) . 828) 840 (792 . 795) (#("    " 0 4 (fontified t)) . 792)) nil (25815 52805 672734 439000) 0 nil])
([nil nil ((1231 . 1247) (#("i" 0 1 (face font-lock-string-face fontified t)) . -1231) (undo-tree-id148 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1232) (undo-tree-id149 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1233) (undo-tree-id150 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1234) (undo-tree-id151 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1235) (undo-tree-id152 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1236) (undo-tree-id153 . -1) 1237 (1231 . 1237) (1220 . 1231) (1215 . 1220) (#(" " 0 1 (fontified t)) . -1215) (undo-tree-id154 . -1) (#("t" 0 1 (fontified t)) . -1216) (undo-tree-id155 . -1) (#("o" 0 1 (fontified t)) . -1217) (undo-tree-id156 . -1) (#("d" 0 1 (fontified t)) . -1218) (undo-tree-id157 . -1) (#("o" 0 1 (fontified t)) . -1219) (undo-tree-id158 . -1) (#("!" 0 1 (fontified t)) . -1220) (undo-tree-id159 . -1) (#("(" 0 1 (fontified t)) . -1221) (undo-tree-id160 . -1) (#(")" 0 1 (fontified t)) . -1222) (undo-tree-id161 . -1) 1223) nil (25815 52805 672377 953000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1248) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1249) (undo-tree-id237 . -1) (undo-tree-id238 . -1) 1250 (1248 . 1250) (t 25815 52805 680359 736000)) nil (25815 53944 252661 18000) 0 nil])
([nil nil ((1229 . 1232) (1215 . 1229) (1210 . 1215) (1207 . 1210) (apply yas--snippet-revive 1201 1207 #s(yas--snippet nil (#s(yas--field 1 1205 1206 nil nil nil t #s(yas--exit 1207 nil))) #s(yas--exit 1207 nil) 113 nil #s(yas--field 1 1205 1206 nil nil nil t #s(yas--exit 1207 nil)) nil nil)) (1205 . 1206) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1205 1206 nil nil nil t #s(yas--exit 1207 nil))) #s(yas--exit 1207 nil) 113 nil #s(yas--field 1 1205 1206 nil nil nil t #s(yas--exit 1207 nil)) nil nil)) (1201 . 1206) (#("Log($1)$0" 0 9 (fontified nil)) . 1201) (1201 . 1210) (#("Log" 0 3 (fontified nil)) . 1201) (1201 . 1204) (#("Log(â€¦)" 0 6 (fontified nil)) . -1201) (1201 . 1207) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -1201) (undo-tree-id239 . -3) 1204 (1201 . 1204) (1197 . 1201) (t 25815 53944 252985 963000)) nil (25815 53968 729331 299000) 0 nil])
([nil nil ((642 . 643) (#("s" 0 1 (face font-lock-string-face fontified t)) . 642) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (t 25815 53968 729641 72000)) nil (25815 53981 817673 570000) 0 nil])
([nil nil ((721 . 727) (#("e" 0 1 (face rust-string-interpolation fontified t)) . -721) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) 722 (709 . 722) (688 . 709) (apply yas--snippet-revive 670 688 #s(yas--snippet nil (#s(yas--field 1 684 687 nil nil nil t #s(yas--exit 688 nil))) #s(yas--exit 688 nil) 114 nil #s(yas--field 1 684 687 nil nil nil t #s(yas--exit 688 nil)) nil nil)) (684 . 687) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 684 687 nil nil nil t #s(yas--exit 688 nil))) #s(yas--exit 688 nil) 114 nil #s(yas--field 1 684 687 nil nil nil t #s(yas--exit 688 nil)) nil nil)) (670 . 685) (#("DatabaseError($1)$0" 0 19 (fontified nil)) . 670) (670 . 689) (#("Datab" 0 5 (fontified nil)) . 670) (670 . 675) (#("DatabaseError(â€¦)" 0 16 (fontified nil)) . -670) (670 . 686) (#("Datab" 0 5 (face font-lock-type-face fontified t)) . -670) (undo-tree-id251 . -5) 675 (670 . 675) (666 . 670) (665 . 666) (t 25815 53981 826301 636000)) nil (25815 54001 622140 263000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -590) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -591) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) 592 (590 . 592) (t 25815 54001 626292 512000)) nil (25817 9567 979826 213000) 0 nil])
([nil nil ((764 . 778) (762 . 764) (759 . 762) (#("B" 0 1 (face font-lock-string-face fontified t)) . -759) (undo-tree-id9 . -1) (#("B" 0 1 (face font-lock-string-face fontified t)) . -760) (undo-tree-id10 . -1) 761 (758 . 761) (739 . 758) (731 . 739) (#("Bb8" 0 3 (fontified nil)) . 731) (731 . 734) (#("Bb8Error" 0 8 (fontified nil)) . -731) (731 . 739) (#("Bb8" 0 3 (face font-lock-type-face fontified t)) . -731) (undo-tree-id11 . -3) 734 (732 . 734) (#("B" 0 1 (face font-lock-type-face fontified t)) . -732) (undo-tree-id12 . -1) 733 (731 . 733) (#("N" 0 1 (face font-lock-type-face fontified t)) . -731) (undo-tree-id13 . -1) 732 (731 . 732) (727 . 731) (#("
" 0 1 (fontified t)) . -727) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("
" 0 1 (fontified t)) . -728) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("	" 0 1 (fontified t)) . -729) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("	" 0 1 (fontified t)) . -730) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("	" 0 1 (fontified t)) . -731) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 732 (729 . 732) (#("			" 0 3 (fontified nil)) . 728) (undo-tree-id24 . -3) (727 . 732) (t 25817 9567 994004 312000)) nil (25817 9621 329848 917000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 783 nil) 8 nil nil nil nil)) (778 . 822) (#("
			$0InvalidByteADiscordIDFormat => todo!()," 0 35 (fontified nil) 35 36 (syntax-table (1) fontified nil) 36 45 (fontified nil)) . 778) (779 . 782) (#("    " 0 4 (fontified nil)) . 779) (778 . 824) 601 (t 25817 9621 340448 848000)) nil (25817 9653 29587 779000) 0 nil])
([nil nil ((apply yas--snippet-revive 778 822 #s(yas--snippet nil nil #s(yas--exit 783 nil) 8 nil nil nil nil))) nil (25817 9653 29583 880000) 0 nil])
([nil nil ((845 . 857) (824 . 845) (#("I" 0 1 (face font-lock-string-face fontified t)) . -824) (undo-tree-id25 . -1) 825 (813 . 825) (#("t" 0 1 (fontified t)) . -813) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("o" 0 1 (fontified t)) . -814) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("d" 0 1 (fontified t)) . -815) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("o" 0 1 (fontified t)) . -816) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("!" 0 1 (fontified t)) . -817) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("(" 0 1 (fontified t)) . -818) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#(")" 0 1 (fontified t)) . -819) (undo-tree-id38 . -1) 820 (779 . 782) (#("    " 0 4 (fontified t)) . 779) (undo-tree-id39 . -4) (undo-tree-id40 . -4) 783) nil (25817 9653 29575 216000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 481 482 nil nil nil nil nil)) nil 0 nil nil nil nil)) (460 . 534) (#("
            Webhook(${0:_}) => todo!(),
            Replication(_) => todo!()," 0 30 (fontified nil) 30 31 (syntax-table (1) fontified nil) 31 69 (fontified nil) 69 70 (syntax-table (1) fontified nil) 70 79 (fontified nil)) . 460) (460 . 539) 415 (t 25817 9653 33653 319000)) nil (25826 35568 831142 368000) 0 nil])
([nil nil ((apply yas--snippet-revive 460 534 #s(yas--snippet nil (#s(yas--field 0 481 482 nil nil nil nil nil)) nil 0 nil nil nil nil))) nil (25826 35568 831139 744000) 0 nil])
([nil nil ((481 . 488) (#("_" 0 1 (fontified t)) . -481) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 482) nil (25826 35568 831136 910000) 0 nil])
([nil current ((552 . 573) (#("t" 0 1 (fontified t)) . -552) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("o" 0 1 (fontified t)) . -553) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("d" 0 1 (fontified t)) . -554) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("o" 0 1 (fontified t)) . -555) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("!" 0 1 (fontified t)) . -556) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("(" 0 1 (fontified t)) . -557) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#(")" 0 1 (fontified t)) . -558) (undo-tree-id12 . -1) 559 (546 . 547) (541 . 546) (#("_" 0 1 (fontified t)) . -541) (undo-tree-id13 . -1) (undo-tree-id14 . -1) 542 (514 . 515) (493 . 514) (#("t" 0 1 (fontified t)) . -493) (undo-tree-id15 . -1) (#("o" 0 1 (fontified t)) . -494) (undo-tree-id16 . -1) (#("d" 0 1 (fontified t)) . -495) (undo-tree-id17 . -1) (#("o" 0 1 (fontified t)) . -496) (undo-tree-id18 . -1) (#("!" 0 1 (fontified t)) . -497) (undo-tree-id19 . -1) (#("(" 0 1 (fontified t)) . -498) (undo-tree-id20 . -1) (#(")" 0 1 (fontified t)) . -499) (undo-tree-id21 . -1) 500) nil (25826 35568 831121 480000) 0 nil])
nil
