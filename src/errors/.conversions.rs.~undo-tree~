(undo-tree-save-format-version . 1)
"6a61fafd4eeb8287b6c920af9584ebf09ecdfa10"
[nil nil nil nil (25814 48591 862476 779000) 0 nil]
([nil nil ((#("u" 0 1 (fontified t)) . -1) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("s" 0 1 (fontified t)) . -2) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -3) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#(" " 0 1 (fontified t)) . -4) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("u" 0 1 (face font-lock-constant-face fontified t)) . -6) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("p" 0 1 (face font-lock-constant-face fontified t)) . -7) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -8) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -9) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#(":" 0 1 (fontified t)) . -10) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#(":" 0 1 (fontified t)) . -11) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) 12 (10 . 12) (#(":" 0 1 (fontified t)) . -10) (undo-tree-id124 . -1) (#(":" 0 1 (fontified t)) . -11) (undo-tree-id125 . -1) 12 (1 . 12) (t 25814 48579 443443 701000)) nil (25814 48591 862458 631000) 0 nil])
([nil nil ((44 . 46) (43 . 44) (35 . 42) (#("Contex" 0 6 (fontified nil)) . 35) (35 . 41) (#("Context" 0 7 (fontified nil)) . -35) (35 . 42) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -35) (undo-tree-id126 . -6) 41 (35 . 41) (33 . 35) (20 . 33) (#("Intern" 0 6 (fontified nil)) . 20) (20 . 26) (#("InternalError" 0 13 (fontified nil)) . -20) (20 . 33) (#("Intern" 0 6 (face font-lock-type-face fontified t)) . -20) (undo-tree-id127 . -6) 26 (20 . 26) (18 . 20) (#("," 0 1 (fontified t)) . -18) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#(" " 0 1 (fontified t)) . -19) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -20) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -21) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -22) (undo-tree-id136 . -1) (undo-tree-id137 . -1) 23 (18 . 23) (18 . 19) (12 . 12) (12 . 13) (1 . 17) (#("u" 0 1 (fontified t)) . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("s" 0 1 (fontified t)) . -2) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -3) (undo-tree-id142 . -1) (undo-tree-id143 . -1) 4 (1 . 4) (t 25814 48591 866771 722000)) nil (25814 48736 993330 279000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -143) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (144 . 145) (141 . 144) (125 . 141) (104 . 125) (97 . 104) (95 . 97) (#("	" 0 1 (fontified nil)) . -96) (undo-tree-id235 . -1) (97 . 98) (95 . 97) (89 . 95) (81 . 89) (60 . 81) (#(":" 0 1 (fontified t)) . -60) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#("s" 0 1 (fontified t)) . -61) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("e" 0 1 (fontified t)) . -62) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (#("r" 0 1 (fontified t)) . -63) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (#("e" 0 1 (fontified t)) . -64) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (#("n" 0 1 (fontified t)) . -65) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("i" 0 1 (fontified t)) . -66) (undo-tree-id248 . -1) (undo-tree-id249 . -1) 67 (61 . 67) (46 . 61) (t 25814 48737 36709 271000)) nil (25814 48934 392695 509000) 0 nil])
([nil nil ((87 . 88) (67 . 74) (56 . 61) (#("Err" 0 3 (fontified nil)) . 56) (56 . 59) (#("Error" 0 5 (fontified nil)) . -56) (56 . 61) (#("Err" 0 3 (face font-lock-type-face fontified t)) . -56) (undo-tree-id144 . -3) (undo-tree-id145 . -3) 59 (56 . 59) (#("s" 0 1 (fontified t)) . -56) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#("e" 0 1 (fontified t)) . -57) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("r" 0 1 (fontified t)) . -58) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#(":" 0 1 (fontified t)) . -59) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#(":" 0 1 (fontified t)) . -60) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -61) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -62) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -63) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -64) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -65) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -66) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -67) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -68) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -69) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -70) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -71) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -72) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -73) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) 74 (#("	fn from(err: ser::SerenityError) -> Self {
		Self::SerenityError(err)
	}" 0 1 (fontified t) 1 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-function-name-face fontified t) 8 9 (fontified t) 9 12 (face font-lock-variable-name-face fontified t) 12 14 (fontified t) 14 17 (face font-lock-constant-face fontified t) 17 19 (fontified t) 19 32 (face font-lock-type-face fontified t) 32 35 (fontified t) 35 36 (syntax-table (1) fontified t) 36 37 (fontified t) 37 41 (face font-lock-type-face fontified t) 41 44 (fontified t) 44 46 (fontified t) 46 50 (face font-lock-type-face fontified t) 50 52 (fontified t) 52 65 (face font-lock-type-face fontified t) 65 70 (fontified t) 70 71 (fontified t) 71 73 (fontified t)) . 96) (undo-tree-id200 . -72) (undo-tree-id201 . -72) (undo-tree-id202 . -72) (undo-tree-id203 . -66) (undo-tree-id204 . -73) (undo-tree-id205 . -9) (undo-tree-id206 . -9) (162 . 165) (#("(" 0 1 (fontified t)) . -162) (undo-tree-id207 . -1) (#(")" 0 1 (fontified t)) . -163) (undo-tree-id208 . -1) 164 (105 . 108) (#("v" 0 1 (face font-lock-variable-name-face fontified t)) . -105) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -106) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -107) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -108) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -109) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) 110 (apply yas--snippet-revive 144 167 #s(yas--snippet nil (#s(yas--field 1 164 166 nil nil nil nil #s(yas--exit 167 nil))) #s(yas--exit 167 nil) 86 nil #s(yas--field 1 164 166 nil nil nil nil #s(yas--exit 167 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 164 166 nil nil nil nil #s(yas--exit 167 nil))) #s(yas--exit 167 nil) 86 nil #s(yas--field 1 164 166 nil nil nil nil #s(yas--exit 167 nil)) nil nil)) (144 . 167) (#("Self::SerenityError(${1:()})$0" 0 30 (fontified nil)) . 144) (144 . 174) (#("Self" 0 4 (fontified nil)) . 144) (144 . 148) (#("Self::SerenityError(…)" 0 22 (fontified nil)) . -144) (144 . 166) (#("Self" 0 4 (face font-lock-type-face fontified t)) . -144) (undo-tree-id229 . -4) 148 (144 . 148) (141 . 144)) nil (25814 48934 392643 658000) 0 nil])
([nil nil ((93 . 94)) nil (25814 48934 392183 264000) 0 nil])
([nil nil ((196 . 205) (192 . 196) (186 . 192) (#("I" 0 1 (face font-lock-type-face fontified t)) . -186) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -187) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -188) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -189) (undo-tree-id256 . -1) (undo-tree-id257 . -1) 190 (177 . 190) (apply yas--snippet-revive 156 177 #s(yas--snippet nil (#s(yas--field 1 172 176 nil nil nil t #s(yas--exit 177 nil))) #s(yas--exit 177 nil) 87 nil #s(yas--field 1 172 176 nil nil nil t #s(yas--exit 177 nil)) nil nil)) (172 . 176) (#("e" 0 1 (fontified t)) . -172) (undo-tree-id258 . -1) (undo-tree-id259 . -1) 173 (172 . 173) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 172 176 nil nil nil t #s(yas--exit 177 nil))) #s(yas--exit 177 nil) 87 nil #s(yas--field 1 172 176 nil nil nil t #s(yas--exit 177 nil)) nil nil)) (156 . 173) (#("Error::Internal($1)$0" 0 21 (fontified nil)) . 156) (156 . 177) (#("Error" 0 5 (fontified nil)) . 156) (156 . 161) (#("Error::Internal(…)" 0 18 (fontified nil)) . -156) (156 . 174) (#("Error" 0 5 (face font-lock-type-face fontified t)) . -156) (undo-tree-id260 . -5) 161 (156 . 161) (#("E" 0 1 (face font-lock-type-face fontified t)) . -156) (undo-tree-id261 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -157) (undo-tree-id262 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -158) (undo-tree-id263 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -159) (undo-tree-id264 . -1) 160 (156 . 160) (152 . 156) (#("	" 0 1 (fontified nil)) . -155) (undo-tree-id265 . -1) (156 . 157) (152 . 156) (141 . 152) (138 . 141) (#("	" 0 1 (fontified nil)) . -140) (undo-tree-id266 . -1) (141 . 142) (138 . 141) (#(" " 0 1 (fontified t)) . -138) (undo-tree-id267 . -1) 139 (121 . 139) (100 . 121) (92 . 100) (91 . 92) (t 25814 48934 399956 794000)) nil (25814 49453 434298 687000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -256) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) 257 (#("	" 0 1 (fontified nil)) . -259) (undo-tree-id280 . -1) (260 . 261) (258 . 260) (256 . 258) (249 . 256) (#(" " 0 1 (fontified t)) . -249) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -250) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -251) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -252) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -253) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -254) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -255) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (#("a" 0 1 (face font-lock-type-face fontified nil)) . -256) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (#("l" 0 1 (face font-lock-type-face fontified nil)) . -257) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -258) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -259) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -260) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -261) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -262) (undo-tree-id307 . -1) (undo-tree-id308 . -1) 263 (250 . 263) (#("Inter" 0 5 (fontified nil)) . 250) (250 . 255) (#("InternalError" 0 13 (fontified nil)) . -250) (250 . 263) (#("Inter" 0 5 (face font-lock-type-face fontified t)) . -250) (undo-tree-id309 . -5) 255 (250 . 255) (246 . 250) (#("{" 0 1 (fontified t)) . -246) (undo-tree-id310 . -1) 247 (237 . 247) (216 . 237) (#("i" 0 1 (fontified t)) . -216) (undo-tree-id311 . -1) (#("m" 0 1 (fontified t)) . -217) (undo-tree-id312 . -1) (#("p" 0 1 (fontified t)) . -218) (undo-tree-id313 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -219) (undo-tree-id314 . -1) (#(" " 0 1 (fontified t)) . -220) (undo-tree-id315 . -1) (#("D" 0 1 (face font-lock-type-face fontified t)) . -221) (undo-tree-id316 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -222) (undo-tree-id317 . -1) 223 (216 . 223) (#("u" 0 1 (fontified t)) . -216) (undo-tree-id318 . -1) (#("n" 0 1 (fontified t)) . -217) (undo-tree-id319 . -1) (#("o" 0 1 (fontified t)) . -218) (undo-tree-id320 . -1) (#("k" 0 1 (fontified t)) . -219) (undo-tree-id321 . -1) (#(" " 0 1 (fontified t)) . -220) (undo-tree-id322 . -1) 221 (216 . 221) (215 . 216) (t 25814 49453 433061 547000)) nil (25814 50414 648600 449000) 0 nil])
([nil nil ((259 . 260)) nil (25814 50414 648546 593000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -305) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (306 . 307) (303 . 306) (294 . 303) (279 . 294) (#("s" 0 1 (fontified t)) . -279) (undo-tree-id325 . -1) 280 (273 . 280) (#(":" 0 1 (fontified t)) . -273) (undo-tree-id326 . -1) 274 (259 . 274) (257 . 259) (t 25814 50414 692393 270000)) nil (25814 50434 21636 381000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -322) (undo-tree-id346 . -1) (323 . 324) (319 . 323) (306 . 319) (303 . 306) (t 25814 50434 29048 386000)) nil (25814 50711 486065 659000) 0 nil])
([nil nil ((73 . 81) (57 . 73) (#("sereni" 0 6 (fontified nil)) . 57) (57 . 63) (#("serenity_prelude" 0 16 (fontified nil)) . -57) (57 . 73) (#("sereni" 0 6 (fontified t)) . -57) (undo-tree-id327 . -6) 63 (61 . 63) (57 . 61) (#("S" 0 1 (face font-lock-type-face fontified t)) . -57) (undo-tree-id328 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -58) (undo-tree-id329 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -59) (undo-tree-id330 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -60) (undo-tree-id331 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -61) (undo-tree-id332 . -1) 62 (46 . 62) (44 . 46) (#("
" 0 1 (fontified t)) . -44) (undo-tree-id333 . -1) (#("u" 0 1 (fontified t)) . -45) (undo-tree-id334 . -1) (#("s" 0 1 (fontified t)) . -46) (undo-tree-id335 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -47) (undo-tree-id336 . -1) (#(" " 0 1 (fontified t)) . -48) (undo-tree-id337 . -1) (#("p" 0 1 (face font-lock-constant-face fontified t)) . -49) (undo-tree-id338 . -1) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -50) (undo-tree-id339 . -1) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -51) (undo-tree-id340 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -52) (undo-tree-id341 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -53) (undo-tree-id342 . -1) (#(":" 0 1 (fontified t)) . -54) (undo-tree-id343 . -1) (#(":" 0 1 (fontified t)) . -55) (undo-tree-id344 . -1) 56 (45 . 56) (44 . 45) (336 . 339) (328 . 336) (#(")" 0 1 (fontified t)) . -328) (undo-tree-id345 . -1) 329 (323 . 329) (306 . 323) (303 . 306)) nil (25814 50711 486046 506000) 0 nil])
([nil nil ((385 . 405) (#("M" 0 1 (face font-lock-type-face fontified t)) . -385) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -386) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -387) (undo-tree-id351 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -388) (undo-tree-id352 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -389) (undo-tree-id353 . -1) 390 (388 . 390) (#("u" 0 1 (face font-lock-type-face fontified t)) . -388) (undo-tree-id354 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -389) (undo-tree-id355 . -1) 390 (376 . 390) (t 25814 50711 485555 503000)) nil (25814 50768 877780 325000) 0 nil])
([nil nil ((apply yas--snippet-revive 667 692 #s(yas--snippet nil nil #s(yas--exit 692 nil) 93 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 692 nil) 93 nil nil nil nil)) (667 . 692) (#("MessageAlreadyCrossposted$0" 0 27 (fontified nil)) . 667) (667 . 694) (#("MessageA" 0 8 (fontified nil)) . 667) (667 . 675) (#("MessageAlreadyCrossposted" 0 25 (fontified nil)) . -667) (667 . 692) (#("MessageA" 0 8 (face font-lock-type-face fontified t)) . -667) (undo-tree-id356 . -8) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -7) (undo-tree-id360 . -7) (undo-tree-id361 . -7) (undo-tree-id362 . -8) (undo-tree-id363 . -8) (undo-tree-id364 . -8) (undo-tree-id365 . -8) 675 (660 . 675) (657 . 660) (638 . 657) (633 . 638) (612 . 633) (608 . 612) (607 . 608) (apply yas--snippet-revive 592 607 #s(yas--snippet nil nil #s(yas--exit 607 nil) 92 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 607 nil) 92 nil nil nil nil)) (592 . 607) (#("ChannelNotFound$0" 0 17 (fontified nil)) . 592) (592 . 609) (#("ChannelN" 0 8 (fontified nil)) . 592) (592 . 600) (#("ChannelNotFound" 0 15 (fontified nil)) . -592) (592 . 607) (#("ChannelN" 0 8 (face font-lock-type-face fontified t)) . -592) (undo-tree-id366 . -8) 600 (594 . 600) (573 . 594) (#("O" 0 1 (face font-lock-type-face fontified t)) . -573) (undo-tree-id367 . -1) 574 (557 . 574) (547 . 557) (543 . 547) (542 . 543) (apply yas--snippet-revive 528 542 #s(yas--snippet nil nil #s(yas--exit 542 nil) 91 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 542 nil) 91 nil nil nil nil)) (528 . 542) (#("MemberNotFound$0" 0 16 (fontified nil)) . 528) (528 . 544) (#("MemberNot" 0 9 (fontified nil)) . 528) (528 . 537) (#("MemberNotFound" 0 14 (fontified nil)) . -528) (528 . 542) (#("MemberNot" 0 9 (face font-lock-type-face fontified t)) . -528) (undo-tree-id368 . -9) 537 (528 . 537) (512 . 528) (505 . 512) (484 . 505) (#("s" 0 1 (fontified t)) . -484) (undo-tree-id369 . -1) 485 (484 . 485) (480 . 484) (479 . 480) (apply yas--snippet-revive 467 479 #s(yas--snippet nil nil #s(yas--exit 479 nil) 90 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 479 nil) 90 nil nil nil nil)) (467 . 479) (#("RoleNotFound$0" 0 14 (fontified nil)) . 467) (467 . 481) (#("RoleNotFound" 0 12 (fontified nil)) . -467) (467 . 479) (452 . 467) (446 . 452) (425 . 446) (421 . 425) (t 25814 50768 885523 592000)) nil (25814 51073 152738 611000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -772) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) 773 (#("	" 0 1 (fontified t)) . -773) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (#("	" 0 1 (fontified t)) . -774) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("	" 0 1 (fontified t)) . -775) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -776) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -777) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -778) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (#(":" 0 1 (fontified t)) . -779) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#(":" 0 1 (fontified t)) . -780) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -781) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -782) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -783) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -784) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -785) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (#("(" 0 1 (fontified t)) . -786) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -787) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -788) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -789) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -790) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -791) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (#(":" 0 1 (fontified t)) . -792) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (#(":" 0 1 (fontified t)) . -793) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) 794 (776 . 794) (772 . 776) (771 . 772) (apply yas--snippet-revive 749 771 #s(yas--snippet nil nil #s(yas--exit 771 nil) 94 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 771 nil) 94 nil nil nil nil)) (749 . 771) (#("CannotCrosspostMessage$0" 0 24 (fontified nil)) . 749) (749 . 773) (#("CannotCro" 0 9 (fontified nil)) . 749) (749 . 758) (#("CannotCrosspostMessage" 0 22 (fontified nil)) . -749) (749 . 771) (#("CannotCro" 0 9 (face font-lock-type-face fontified t)) . -749) (undo-tree-id436 . -9) 758 (740 . 758) (719 . 740) (709 . 719) (#("O" 0 1 (face font-lock-type-face fontified t)) . -709) (undo-tree-id437 . -1) 710 (697 . 710) (693 . 697) (692 . 693) (#("
" 0 1 (fontified t)) . -692) (undo-tree-id438 . -1) (#("	" 0 1 (fontified t)) . -693) (undo-tree-id439 . -1) (#("	" 0 1 (fontified t)) . -694) (undo-tree-id440 . -1) (#("	" 0 1 (fontified t)) . -695) (undo-tree-id441 . -1) (#("	" 0 1 (fontified t)) . -696) (undo-tree-id442 . -1) 697 (692 . 697) (t 25814 51073 162025 495000)) nil (25815 30382 324661 845000) 0 nil])
([nil nil ((307 . 312) (298 . 307) (283 . 298) (#("Inter" 0 5 (fontified nil)) . 283) (283 . 288) (#("InternalError::" 0 15 (fontified nil)) . -283) (283 . 298) (#("Inter" 0 5 (face font-lock-type-face fontified t)) . -283) (undo-tree-id443 . -5) (undo-tree-id444 . -5) (undo-tree-id445 . -5) (undo-tree-id446 . -5) (undo-tree-id447 . -5) 288 (283 . 288) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -283) (undo-tree-id448 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -284) (undo-tree-id449 . -1) (#("l" 0 1 (face font-lock-constant-face fontified t)) . -285) (undo-tree-id450 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -286) (undo-tree-id451 . -1) (#(":" 0 1 (fontified t)) . -287) (undo-tree-id452 . -1) (#(":" 0 1 (fontified t)) . -288) (undo-tree-id453 . -1) 289 (286 . 289) (282 . 286) (#(" " 0 1 (fontified t)) . -282) (undo-tree-id454 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -283) (undo-tree-id455 . -1) (#("u" 0 1 (face font-lock-constant-face fontified t)) . -284) (undo-tree-id456 . -1) (#("p" 0 1 (face font-lock-constant-face fontified t)) . -285) (undo-tree-id457 . -1) 286 (282 . 286) (275 . 282) (273 . 275) (#("	" 0 1 (fontified nil)) . -274) (undo-tree-id458 . -1) (275 . 276) (273 . 275) (271 . 273) (258 . 271) (#("Intern" 0 6 (fontified nil)) . 258) (258 . 264) (#("InternalError" 0 13 (fontified nil)) . -258) (258 . 271) (#("Intern" 0 6 (face font-lock-type-face fontified t)) . -258) (undo-tree-id459 . -6) 264 (259 . 264) (253 . 259) (251 . 253) (t 25815 30382 335206 505000)) nil (25815 30423 734990 356000) 0 nil])
([nil nil ((#("impl InternalError {
	pub use InternalError::from as frome;
}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 18 (face font-lock-type-face fontified t) 18 21 (fontified t) 21 22 (fontified t) 22 25 (face font-lock-keyword-face fontified t) 25 26 (fontified t) 26 29 (face font-lock-keyword-face fontified t) 29 30 (fontified t) 30 43 (face font-lock-type-face fontified t) 43 50 (fontified t) 50 52 (face font-lock-keyword-face fontified t) 52 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t)) . 253) (undo-tree-id473 . 4) (undo-tree-id474 . -62) (undo-tree-id475 . -62) (undo-tree-id476 . -63) (undo-tree-id477 . -63) (undo-tree-id478 . -62) (undo-tree-id479 . -62) (undo-tree-id480 . 4) (undo-tree-id481 . -58) (undo-tree-id482 . -62) (undo-tree-id483 . -18) (undo-tree-id484 . -18) (undo-tree-id485 . -18) (undo-tree-id486 . -18) (undo-tree-id487 . -62) (undo-tree-id488 . -62) (undo-tree-id489 . -62) (undo-tree-id490 . -63) 315 (t 25815 30423 738539 376000)) nil (25815 30716 196657 897000) 0 nil])
([nil nil ((#("()" 0 2 (fontified nil)) . 827) (undo-tree-id460 . -2) (826 . 827) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 826 827 nil nil nil t #s(yas--exit 828 nil))) #s(yas--exit 828 nil) 96 nil #s(yas--field 1 826 827 nil nil nil t #s(yas--exit 828 nil)) #s(yas--field 1 797 828 nil nil nil t #s(yas--exit 829 nil)) nil)) (797 . 829) (#("InternalError::SerenityError(${1:()})$0" 0 39 (fontified nil)) . 797) (undo-tree-id461 . -39) (797 . 836) (#("Inter" 0 5 (fontified nil)) . 797) (undo-tree-id462 . -5) (797 . 802) (#("InternalError::SerenityError(…)" 0 31 (fontified nil)) . -797) (undo-tree-id463 . -31) (797 . 828) (#("Inter" 0 5 (face font-lock-type-face fontified t)) . -797) (undo-tree-id464 . -5) (undo-tree-id465 . -5) (undo-tree-id466 . -5) (undo-tree-id467 . -5) (undo-tree-id468 . -5) (undo-tree-id469 . -5) (undo-tree-id470 . -5) 802 (798 . 802) (#("()" 0 2 (fontified nil)) . 798) (undo-tree-id471 . -2) (797 . 798) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 797 828 nil nil nil t #s(yas--exit 829 nil))) #s(yas--exit 829 nil) 95 nil #s(yas--field 1 797 828 nil nil nil t #s(yas--exit 829 nil)) nil nil)) (788 . 800) (#("Internal(${1:()})$0" 0 19 (fontified nil)) . 788) (788 . 807) (#("Internal(…)" 0 11 (fontified nil)) . -788) (788 . 799) (776 . 788) (772 . 776) (#("," 0 1 (fontified t)) . -772) (undo-tree-id472 . -1) 773 (772 . 773)) nil (25815 30716 196570 176000) 0 nil])
([nil nil ((apply yas--snippet-revive 788 829 #s(yas--snippet nil (#s(yas--field 1 797 828 nil nil nil t #s(yas--exit 829 nil))) #s(yas--exit 829 nil) 95 nil #s(yas--field 1 797 828 nil nil nil t #s(yas--exit 829 nil)) nil nil)) (apply yas--snippet-revive 797 828 #s(yas--snippet nil (#s(yas--field 1 826 827 nil nil nil t #s(yas--exit 828 nil))) #s(yas--exit 828 nil) 96 nil #s(yas--field 1 826 827 nil nil nil t #s(yas--exit 828 nil)) #s(yas--field 1 797 828 nil nil nil t #s(yas--exit 829 nil)) nil))) nil (25815 30977 556894 446000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -135) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (136 . 137) (134 . 136) (117 . 134) (115 . 116) (42 . 52) (apply yas--snippet-revive 96 106 #s(yas--snippet nil nil #s(yas--exit 105 nil) 99 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 105 nil) 99 nil nil nil nil)) (96 . 106) (#("OptError<$0>" 0 12 (fontified nil)) . 96) (96 . 108) (#("OptErro" 0 7 (fontified nil)) . 96) (96 . 103) (#("OptError<…> (use super::OptError)" 0 33 (fontified nil)) . -96) (96 . 129) (#("OptErro" 0 7 (face font-lock-type-face fontified t)) . -96) (undo-tree-id495 . -7) (undo-tree-id496 . -7) 103 (91 . 103) (#("O" 0 1 (face font-lock-type-face fontified t)) . -91) (undo-tree-id497 . -1) 92 (90 . 92) (#(">" 0 1 (syntax-table (1) fontified t)) . -90) (undo-tree-id498 . -1) 91 (83 . 91) (82 . 84) (#("A" 0 1 (face font-lock-type-face fontified t)) . -82) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (#("
" 0 1 (fontified t)) . -83) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (#("	" 0 1 (fontified t)) . -84) (undo-tree-id503 . -1) (undo-tree-id504 . -1) 85 (83 . 85) (82 . 83) (772 . 776) (t 25815 30716 198622 4000)) nil (25815 30977 556883 958000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 185 192 nil nil nil nil nil)) nil 100 nil nil nil nil)) (134 . 198) (#("
    fn from(value: OptError<T>) -> Self {
        ${0:todo!()}
    }" 0 34 (fontified nil) 34 35 (syntax-table (1) fontified nil) 35 69 (fontified nil)) . 134) (134 . 203) 108 (t 25815 30977 568715 60000)) nil (25815 30992 528832 167000) 0 nil])
([nil nil ((apply yas--snippet-revive 134 198 #s(yas--snippet nil (#s(yas--field 0 185 192 nil nil nil nil nil)) nil 100 nil nil nil nil))) nil (25815 30992 528830 241000) 0 nil])
([nil nil ((191 . 192) (#("0" 0 1 (fontified nil)) . -191) (191 . 192) (185 . 191) (#("todo!()" 0 5 (face font-lock-preprocessor-face fontified t) 5 7 (fontified t)) . 185) (undo-tree-id505 . -6) (undo-tree-id506 . -6) (undo-tree-id507 . -6) (undo-tree-id508 . -7) (undo-tree-id509 . -7)) nil (25815 30992 528826 291000) 0 nil])
([nil nil ((292 . 297) (#("value" 0 5 (fontified nil)) . 292) (undo-tree-id510 . -5) (292 . 297) (#("value" 0 5 (fontified t)) . -292) (undo-tree-id511 . -5) (undo-tree-id512 . -5) (undo-tree-id513 . -5) (undo-tree-id514 . -5) (undo-tree-id515 . -5) (undo-tree-id516 . -5) (undo-tree-id517 . -5) (undo-tree-id518 . -5) 297 (293 . 297) (#("()" 0 2 (fontified nil)) . 293) (undo-tree-id519 . -2) (292 . 293) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 292 297 nil nil nil t #s(yas--exit 298 nil))) #s(yas--exit 298 nil) 102 nil #s(yas--field 1 292 297 nil nil nil t #s(yas--exit 298 nil)) nil nil)) (283 . 295) (#("OptError(${1:()})$0" 0 19 (fontified nil)) . 283) (283 . 302) (#("Opt" 0 3 (fontified nil)) . 283) (283 . 286) (#("OptError(…)" 0 11 (fontified nil)) . -283) (283 . 294) (#("Opt" 0 3 (face font-lock-type-face fontified t)) . -283) (undo-tree-id520 . -3) (undo-tree-id521 . -3) (undo-tree-id522 . -3) (undo-tree-id523 . -3) 286 (283 . 286) (280 . 283) (#("	" 0 1 (fontified nil)) . -282) (undo-tree-id524 . -1) (283 . 284) (280 . 283) (270 . 280) (267 . 270) (#("_" 0 1 (fontified t)) . -267) (undo-tree-id525 . -1) (#(">" 0 1 (fontified t)) . -268) (undo-tree-id526 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -269) (undo-tree-id527 . -1) 270 (269 . 270) (260 . 269) (#("Option" 0 6 (fontified nil)) . 260) (260 . 266) (#("Option<_>" 0 9 (fontified nil)) . -260) (260 . 269) (#("Option" 0 6 (face font-lock-type-face fontified t)) . -260) (undo-tree-id528 . -6) 266 (246 . 266) (#("r" 0 1 (fontified t)) . -246) (undo-tree-id529 . -1) (#("o" 0 1 (fontified t)) . -247) (undo-tree-id530 . -1) (#("m" 0 1 (fontified t)) . -248) (undo-tree-id531 . -1) (#(" " 0 1 (fontified t)) . -249) (undo-tree-id532 . -1) (#("f" 0 1 (fontified t)) . -250) (undo-tree-id533 . -1) 251 (245 . 251) (243 . 245) (#("	" 0 1 (fontified nil)) . -244) (undo-tree-id534 . -1) (245 . 246) (243 . 245) (241 . 243) (239 . 240) (apply yas--snippet-revive 230 240 #s(yas--snippet nil nil #s(yas--exit 239 nil) 101 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 239 nil) 101 nil nil nil nil)) (230 . 240) (#("OptError<$0>" 0 12 (fontified nil)) . 230) (230 . 242) (#("OptE" 0 4 (fontified nil)) . 230) (230 . 234) (#("OptError<…>" 0 11 (fontified nil)) . -230) (230 . 241) (#("OptE" 0 4 (face font-lock-type-face fontified t)) . -230) (undo-tree-id535 . -4) 234 (231 . 234) (210 . 231) (206 . 210) (#(" " 0 1 (fontified t)) . -206) (undo-tree-id536 . -1) 207 (202 . 207) (200 . 202) (#("/" 0 1 (fontified t)) . -198) (undo-tree-id537 . -1) 199 (198 . 199) (t 25815 30992 532052 581000)) nil (25815 31059 578838 176000) 0 nil])
([nil nil ((apply yas--snippet-revive 283 298 #s(yas--snippet nil (#s(yas--field 1 292 297 nil nil nil t #s(yas--exit 298 nil))) #s(yas--exit 298 nil) 102 nil #s(yas--field 1 292 297 nil nil nil t #s(yas--exit 298 nil)) nil nil))) nil (25815 32138 366618 361000) 0 nil])
([nil nil ((87 . 88) (#("S" 0 1 (face font-lock-type-face fontified t)) . 87)) ((87 . 88) (#("s" 0 1 (fontified t)) . 87) (t 25815 31494 682149 255000)) (25815 32140 88696 169000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -994) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (#("	" 0 1 (fontified t)) . -995) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (#("	" 0 1 (fontified t)) . -996) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (#("	" 0 1 (fontified t)) . -997) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -998) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) 999 (998 . 999) (t 25815 31494 682149 255000)) nil (25815 52822 980837 174000) 0 nil] [nil nil ((209 . 214) (207 . 209) (202 . 207) (#("Error" 0 5 (fontified nil)) . 202) (202 . 207) (#("Error" 0 5 (face font-lock-type-face fontified t)) . -202) (undo-tree-id546 . -5) (undo-tree-id547 . -5) (undo-tree-id548 . -5) (undo-tree-id549 . -5) 207 (202 . 207) (198 . 202) (#("	" 0 1 (fontified nil)) . -201) (undo-tree-id550 . -1) (202 . 203) (198 . 202) (185 . 198) (#("v" 0 1 (fontified t)) . -185) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (#("a" 0 1 (fontified t)) . -186) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (#("l" 0 1 (fontified t)) . -187) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (#("u" 0 1 (fontified t)) . -188) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (#("e" 0 1 (fontified t)) . -189) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (#("." 0 1 (fontified t)) . -190) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (#("0" 0 1 (fontified t)) . -191) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) 192 (t 25815 31494 682149 255000)) ((185 . 192) (#("match value {" 0 5 (face font-lock-keyword-face fontified nil) 5 13 (fontified nil)) . 185) (undo-tree-id572 . -13) (undo-tree-id573 . -13) (undo-tree-id574 . -13) (undo-tree-id575 . -13) (undo-tree-id576 . -13) (#("
			" 0 1 (fontified nil) 1 3 (fontified nil) 3 4 (fontified nil)) . 198) (undo-tree-id577 . 4) (undo-tree-id578 . 4) (#("}" 0 1 (fontified nil)) . 202) (201 . 202) (#("
			" 0 1 (fontified t) 1 4 (fontified nil)) . 198) (undo-tree-id579 . -4) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (undo-tree-id582 . -1) (undo-tree-id583 . -4) (#("Error" 0 5 (face font-lock-type-face fontified nil)) . 202) (undo-tree-id584 . -5) (undo-tree-id585 . -5) (undo-tree-id586 . -5) (202 . 207) (#("Error" 0 5 (fontified nil)) . 202) (202 . 207) (#("Error" 0 5 (face font-lock-type-face fontified nil)) . 202) (undo-tree-id587 . -5) (undo-tree-id588 . -5) (#("(e" 0 2 (fontified nil)) . 207) (undo-tree-id589 . -2) (undo-tree-id590 . -2) (#(") => " 0 3 (fontified t) 3 4 (syntax-table (1) fontified t) 4 5 (fontified t)) . 209) (undo-tree-id591 . -4) (undo-tree-id592 . -4)) (25815 32137 878405 826000) 0 nil])
([nil nil ((485 . 486) (472 . 481) (461 . 462) (442 . 451) (328 . 334) (#("E" 0 1 (face font-lock-type-face fontified t)) . -328) (undo-tree-id632 . -1) 329 (328 . 329) (#("t" 0 1 (face font-lock-type-face fontified t)) . -328) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -329) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -330) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -331) (undo-tree-id639 . -1) 332 (513 . 520) (511 . 513) (#("	" 0 1 (fontified nil)) . -512) (undo-tree-id640 . -1) (513 . 514) (511 . 513) (505 . 511) (504 . 505) (#("I" 0 1 (face font-lock-type-face fontified t)) . -504) (undo-tree-id641 . -1) 505 (496 . 505) (475 . 496) (474 . 476) (1178 . 1190) (1176 . 1178) (apply yas--snippet-revive 1154 1171 #s(yas--snippet nil (#s(yas--field 1 1165 1170 nil nil nil t #s(yas--exit 1171 nil))) #s(yas--exit 1171 nil) 109 nil #s(yas--field 1 1165 1170 nil nil nil t #s(yas--exit 1171 nil)) nil nil)) (1165 . 1170) (#("value" 0 5 (fontified nil)) . 1165) (1165 . 1170) (#("value" 0 5 (fontified t)) . -1165) (undo-tree-id642 . -5) (undo-tree-id643 . -5) 1170 (1166 . 1170) (#("()" 0 2 (fontified nil)) . 1166) (1165 . 1166) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1165 1170 nil nil nil t #s(yas--exit 1171 nil))) #s(yas--exit 1171 nil) 109 nil #s(yas--field 1 1165 1170 nil nil nil t #s(yas--exit 1171 nil)) nil nil)) (1154 . 1168) (#("Error::Log(${1:()})$0" 0 21 (fontified nil)) . 1154) (1154 . 1175) (#("Error" 0 5 (fontified nil)) . 1154) (1154 . 1159) (#("Error::Log(…)" 0 13 (fontified nil)) . -1154) (1154 . 1167) (#("Error" 0 5 (face font-lock-type-face fontified t)) . -1154) (undo-tree-id644 . -5) (undo-tree-id645 . -5) 1159 (1154 . 1159) (1151 . 1154) (#("	" 0 1 (fontified nil)) . -1153) (undo-tree-id646 . -1) (1154 . 1155) (1151 . 1154) (1140 . 1151) (1127 . 1140) (#("Seren" 0 5 (fontified nil)) . 1127) (1127 . 1132) (#("SerenityError" 0 13 (fontified nil)) . -1127) (1127 . 1140) (#("Seren" 0 5 (face font-lock-type-face fontified t)) . -1127) (undo-tree-id647 . -5) 1132 (1124 . 1132) (1107 . 1124) (1105 . 1107) (#("	" 0 1 (fontified nil)) . -1106) (undo-tree-id648 . -1) (1107 . 1108) (1105 . 1107) (1096 . 1105) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -1096) (undo-tree-id649 . -1) (undo-tree-id650 . -1) 1097 (1094 . 1097) (1092 . 1094) (1084 . 1092) (#("LogError" 0 8 (fontified nil)) . -1084) (1084 . 1092) (1073 . 1084) (1072 . 1073) (#("s" 0 1 (fontified t)) . -1072) (undo-tree-id651 . -1) 1073 (1072 . 1073) (#("l" 0 1 (fontified t)) . -1072) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("o" 0 1 (fontified t)) . -1073) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (#("g" 0 1 (fontified t)) . -1074) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (#(":" 0 1 (fontified t)) . -1075) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (#(":" 0 1 (fontified t)) . -1076) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (#("L" 0 1 (face font-lock-type-face fontified t)) . -1077) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1078) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -1079) (undo-tree-id666 . -1) (undo-tree-id667 . -1) 1080 (1075 . 1080) (1072 . 1075) (#("log" 0 3 (fontified nil)) . 1072) (1072 . 1075) (#("log" 0 3 (fontified t)) . -1072) (undo-tree-id668 . -3) (undo-tree-id669 . -3) 1075 (1074 . 1075) (#("g" 0 1 (fontified t)) . -1074) (undo-tree-id670 . -1) (#(":" 0 1 (fontified t)) . -1075) (undo-tree-id671 . -1) (#(":" 0 1 (fontified t)) . -1076) (undo-tree-id672 . -1) 1077 (1072 . 1077) (1062 . 1072) (1061 . 1062) (t 25815 52822 980356 339000)) nil (25815 53476 658430 411000) 0 nil])
nil
([nil nil ((1261 . 1262)) nil (25815 53476 658254 765000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -590) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (591 . 592) (587 . 591) (576 . 587) (573 . 576) (#("	" 0 1 (fontified nil)) . -575) (undo-tree-id718 . -1) (576 . 577) (573 . 576) (563 . 573) (542 . 563) (#("*" 0 1 (fontified t)) . -542) (undo-tree-id719 . -1) (#("e" 0 1 (fontified t)) . -543) (undo-tree-id720 . -1) (#("r" 0 1 (fontified t)) . -544) (undo-tree-id721 . -1) (#("r" 0 1 (fontified t)) . -545) (undo-tree-id722 . -1) (#(":" 0 1 (fontified t)) . -546) (undo-tree-id723 . -1) 547 (542 . 547) (t 25815 53476 663260 949000)) nil (25815 53758 940183 277000) 0 nil])
([nil nil ((#("		match err {
" 0 2 (fontified t) 2 7 (face font-lock-keyword-face fontified t) 7 14 (fontified t)) . 574) (undo-tree-id701 . -13) (undo-tree-id702 . -2) (undo-tree-id703 . -7) (undo-tree-id704 . 1) (undo-tree-id705 . -2) (undo-tree-id706 . -2) (undo-tree-id707 . -2) (undo-tree-id708 . -14) 576) nil (25815 53758 940168 689000) 0 nil])
([nil nil ((#("		}
" 0 3 (fontified t) 3 4 (fontified t)) . 574) (undo-tree-id675 . 1) (undo-tree-id676 . -3) (undo-tree-id677 . -2) (undo-tree-id678 . -2) (undo-tree-id679 . 4) (undo-tree-id680 . -2) (undo-tree-id681 . -2) (undo-tree-id682 . -2) (undo-tree-id683 . -2) (undo-tree-id684 . -2) (undo-tree-id685 . -2) (undo-tree-id686 . -3) (undo-tree-id687 . -3) (undo-tree-id688 . -2) (undo-tree-id689 . -2) (undo-tree-id690 . -2) (undo-tree-id691 . -2) (undo-tree-id692 . -3) (undo-tree-id693 . -2) (undo-tree-id694 . -2) (undo-tree-id695 . -2) (undo-tree-id696 . -2) (undo-tree-id697 . -2) (undo-tree-id698 . -2) (undo-tree-id699 . -2) (undo-tree-id700 . -4) 576) nil (25815 53758 940160 888000) 0 nil])
([nil nil ((apply yas--snippet-revive 583 596 #s(yas--snippet nil (#s(yas--field 1 592 595 nil nil nil t #s(yas--exit 596 nil))) #s(yas--exit 596 nil) 110 nil #s(yas--field 1 592 595 nil nil nil t #s(yas--exit 596 nil)) nil nil)) (593 . 595) (#("()" 0 2 (fontified nil)) . 593) (undo-tree-id673 . -2) (592 . 593) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 592 595 nil nil nil t #s(yas--exit 596 nil))) #s(yas--exit 596 nil) 110 nil #s(yas--field 1 592 595 nil nil nil t #s(yas--exit 596 nil)) nil nil)) (583 . 595) (#("Internal(${1:()})$0" 0 19 (fontified nil)) . 583) (583 . 602) (#("Inter" 0 5 (fontified nil)) . 583) (583 . 588) (#("Internal(…)" 0 11 (fontified nil)) . -583) (583 . 594) (#("Inter" 0 5 (face font-lock-type-face fontified t)) . -583) (undo-tree-id674 . -5) 588 (576 . 588) (573 . 576)) nil (25815 53758 940138 443000) 0 nil])
([nil nil ((1322 . 1327) (#("value" 0 5 (fontified nil)) . 1322) (undo-tree-id724 . -5) (1322 . 1327) (#("value" 0 5 (fontified t)) . -1322) (undo-tree-id725 . -5) (undo-tree-id726 . -5) (undo-tree-id727 . -5) (undo-tree-id728 . -5) (undo-tree-id729 . -5) (undo-tree-id730 . -5) (undo-tree-id731 . -5) (undo-tree-id732 . -5) 1327 (1323 . 1327) (#("()" 0 2 (fontified nil)) . 1323) (undo-tree-id733 . -2) (1322 . 1323) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1322 1327 nil nil nil t #s(yas--exit 1328 nil))) #s(yas--exit 1328 nil) 112 nil #s(yas--field 1 1322 1327 nil nil nil t #s(yas--exit 1328 nil)) #s(yas--field 1 1293 1328 nil nil nil t #s(yas--exit 1329 nil)) nil)) (1293 . 1325) (#("InternalError::DatabaseError(${1:()})$0" 0 39 (fontified nil)) . 1293) (undo-tree-id734 . -39) (1293 . 1332) (#("Internal" 0 8 (fontified nil)) . 1293) (undo-tree-id735 . -8) (1293 . 1301) (#("InternalError::DatabaseError(…)" 0 31 (fontified nil)) . -1293) (undo-tree-id736 . -31) (1293 . 1324) (#("Internal" 0 8 (face font-lock-type-face fontified t)) . -1293) (undo-tree-id737 . -8) (undo-tree-id738 . -8) (undo-tree-id739 . -8) 1301 (1294 . 1301) (#("()" 0 2 (fontified nil)) . 1294) (undo-tree-id740 . -2) (1293 . 1294) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1293 1328 nil nil nil t #s(yas--exit 1329 nil))) #s(yas--exit 1329 nil) 111 nil #s(yas--field 1 1293 1328 nil nil nil t #s(yas--exit 1329 nil)) nil nil)) (1284 . 1296) (#("Internal(${1:()})$0" 0 19 (fontified nil)) . 1284) (1284 . 1303) (#("Internal(…)" 0 11 (fontified nil)) . -1284) (1284 . 1295) (1277 . 1284) (#("p" 0 1 (fontified t)) . -1277) (undo-tree-id741 . -1) (#("g" 0 1 (fontified t)) . -1278) (undo-tree-id742 . -1) (#(":" 0 1 (fontified t)) . -1279) (undo-tree-id743 . -1) (#(":" 0 1 (fontified t)) . -1280) (undo-tree-id744 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1281) (undo-tree-id745 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1282) (undo-tree-id746 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1283) (undo-tree-id747 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1284) (undo-tree-id748 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1285) (undo-tree-id749 . -1) 1286 (1277 . 1286) (1274 . 1277) (#("	" 0 1 (fontified nil)) . -1276) (undo-tree-id750 . -1) (1277 . 1278) (1274 . 1277) (1262 . 1274) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1262) (undo-tree-id751 . -1) 1263 (1252 . 1263) (1239 . 1252) (1237 . 1239) (#("	" 0 1 (fontified nil)) . -1238) (undo-tree-id752 . -1) (1239 . 1240) (1237 . 1239) (1218 . 1237) (#(":" 0 1 (fontified t)) . -1218) (undo-tree-id753 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1219) (undo-tree-id754 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1220) (undo-tree-id755 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1221) (undo-tree-id756 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1222) (undo-tree-id757 . -1) 1223 (1220 . 1223) (1215 . 1220) (55 . 69) (54 . 55) (#("g" 0 1 (fontified t)) . -1200) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (#("p" 0 1 (fontified t)) . -1201) (undo-tree-id760 . -1) (undo-tree-id761 . -1) 1202 (1190 . 1202) (1188 . 1190) (#("i" 0 1 (fontified t)) . -1306) (undo-tree-id762 . -1) (#("m" 0 1 (fontified t)) . -1307) (undo-tree-id763 . -1) (#("p" 0 1 (fontified t)) . -1308) (undo-tree-id764 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -1309) (undo-tree-id765 . -1) (#(" " 0 1 (fontified t)) . -1310) (undo-tree-id766 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1311) (undo-tree-id767 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1312) (undo-tree-id768 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1313) (undo-tree-id769 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -1314) (undo-tree-id770 . -1) (#("<" 0 1 (fontified t)) . -1315) (undo-tree-id771 . -1) (#("c" 0 1 (fontified nil)) . -1316) (undo-tree-id772 . -1) (#("r" 0 1 (fontified t)) . -1317) (undo-tree-id773 . -1) (#("a" 0 1 (fontified t)) . -1318) (undo-tree-id774 . -1) (#("t" 0 1 (fontified t)) . -1319) (undo-tree-id775 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -1320) (undo-tree-id776 . -1) (#(":" 0 1 (fontified t)) . -1321) (undo-tree-id777 . -1) (#(":" 0 1 (fontified t)) . -1322) (undo-tree-id778 . -1) 1323 (1319 . 1323) (1318 . 1319) (t 25815 53758 939747 595000)) nil (25815 53866 26512 169000) 0 nil])
([nil nil ((apply yas--snippet-revive 1284 1329 #s(yas--snippet nil (#s(yas--field 1 1293 1328 nil nil nil t #s(yas--exit 1329 nil))) #s(yas--exit 1329 nil) 111 nil #s(yas--field 1 1293 1328 nil nil nil t #s(yas--exit 1329 nil)) nil nil)) (apply yas--snippet-revive 1293 1328 #s(yas--snippet nil (#s(yas--field 1 1322 1327 nil nil nil t #s(yas--exit 1328 nil))) #s(yas--exit 1328 nil) 112 nil #s(yas--field 1 1322 1327 nil nil nil t #s(yas--exit 1328 nil)) #s(yas--field 1 1293 1328 nil nil nil t #s(yas--exit 1329 nil)) nil))) nil (25815 53883 549979 734000) 0 nil])
([nil nil ((1408 . 1416) (#("LogEr" 0 5 (fontified nil)) . 1408) (1408 . 1413) (#("LogError" 0 8 (fontified nil)) . -1408) (1408 . 1416) (#("LogEr" 0 5 (face font-lock-type-face fontified t)) . -1408) (undo-tree-id779 . -5) (undo-tree-id780 . -5) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -4) (undo-tree-id784 . -4) (undo-tree-id785 . -4) (undo-tree-id786 . -4) (undo-tree-id787 . -4) (undo-tree-id788 . -5) (undo-tree-id789 . -5) (undo-tree-id790 . -5) (undo-tree-id791 . -5) (undo-tree-id792 . -5) (undo-tree-id793 . -5) 1413 (1396 . 1413) (#("s" 0 1 (fontified t)) . -1396) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (#("e" 0 1 (fontified t)) . -1397) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (#("r" 0 1 (fontified t)) . -1398) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (#(":" 0 1 (fontified t)) . -1399) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (#(":" 0 1 (fontified t)) . -1400) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1401) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1402) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1403) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1404) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1405) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1406) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1407) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -1408) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1409) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1410) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1411) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1412) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1413) (undo-tree-id839 . -1) (undo-tree-id840 . -1) 1414 (t 25815 53866 26357 668000)) nil (25815 53883 549962 722000) 0 nil])
([nil nil ((394 . 399) (#("i" 0 1 (face font-lock-type-face fontified t)) . -394) (undo-tree-id841 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -395) (undo-tree-id842 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -396) (undo-tree-id843 . -1) 397 (t 25815 53883 559682 200000)) nil (25815 53897 757892 54000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-type-face fontified t)) . 398) (undo-tree-id844 . 1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (t 25815 53897 769675 155000)) nil (25815 53907 418980 316000) 0 nil])
([nil nil ((398 . 399) (t 25815 53907 419670 414000)) nil (25815 53910 326740 554000) 0 nil])
([nil nil ((1480 . 1485) (#("value" 0 5 (fontified nil)) . 1480) (undo-tree-id847 . -5) (1480 . 1485) (#("value" 0 5 (fontified t)) . -1480) (undo-tree-id848 . -5) (undo-tree-id849 . -5) (undo-tree-id850 . -5) (undo-tree-id851 . -5) (undo-tree-id852 . -5) (undo-tree-id853 . -5) (undo-tree-id854 . -5) (undo-tree-id855 . -5) 1485 (1481 . 1485) (#("()" 0 2 (fontified nil)) . 1481) (undo-tree-id856 . -2) (1480 . 1481) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1480 1485 nil nil nil t #s(yas--exit 1486 nil))) #s(yas--exit 1486 nil) 125 nil #s(yas--field 1 1480 1485 nil nil nil t #s(yas--exit 1486 nil)) #s(yas--field 1 1456 1486 nil nil nil t #s(yas--exit 1487 nil)) nil)) (1456 . 1483) (#("InternalError::Bb8Error(${1:()})$0" 0 34 (fontified nil)) . 1456) (undo-tree-id857 . -34) (1456 . 1490) (#("InternalError" 0 13 (fontified nil)) . 1456) (undo-tree-id858 . -13) (1456 . 1469) (#("InternalError::Bb8Error(…)" 0 26 (fontified nil)) . -1456) (undo-tree-id859 . -26) (1456 . 1482) (#("InternalError" 0 13 (face font-lock-type-face fontified t)) . -1456) (undo-tree-id860 . -13) (undo-tree-id861 . -13) (undo-tree-id862 . -13) 1469 (1457 . 1469) (#("()" 0 2 (fontified nil)) . 1457) (undo-tree-id863 . -2) (1456 . 1457) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1456 1486 nil nil nil t #s(yas--exit 1487 nil))) #s(yas--exit 1487 nil) 124 nil #s(yas--field 1 1456 1486 nil nil nil t #s(yas--exit 1487 nil)) nil nil)) (1447 . 1459) (#("Internal(${1:()})$0" 0 19 (fontified nil)) . 1447) (1447 . 1466) (#("Intern" 0 6 (fontified nil)) . 1447) (1447 . 1453) (#("Internal(…)" 0 11 (fontified nil)) . -1447) (1447 . 1458) (#("Intern" 0 6 (face font-lock-type-face fontified t)) . -1447) (undo-tree-id864 . -6) 1453 (1440 . 1453) (1437 . 1440) (#("	" 0 1 (fontified nil)) . -1439) (undo-tree-id865 . -1) (1440 . 1441) (1437 . 1440) (1426 . 1437) (#(">" 0 1 (syntax-table (1) fontified t)) . -1426) (undo-tree-id866 . -1) 1427 (1426 . 1427) (1416 . 1425) (apply yas--snippet-revive 1407 1417 #s(yas--snippet nil nil #s(yas--exit 1416 nil) 123 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1416 nil) 123 nil nil nil nil)) (1407 . 1417) (#("RunError<$0>" 0 12 (fontified nil)) . 1407) (1407 . 1419) (#("RunEr" 0 5 (fontified nil)) . 1407) (1407 . 1412) (#("RunError<…>" 0 11 (fontified nil)) . -1407) (1407 . 1418) (#("RunEr" 0 5 (face font-lock-type-face fontified t)) . -1407) (undo-tree-id867 . -5) 1412 (1408 . 1412) (1387 . 1408) (1385 . 1387) (#("	" 0 1 (fontified nil)) . -1386) (undo-tree-id868 . -1) (1387 . 1388) (1385 . 1387) (1384 . 1385) (1372 . 1384) (1362 . 1371) (apply yas--snippet-revive 1353 1363 #s(yas--snippet nil nil #s(yas--exit 1362 nil) 122 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1362 nil) 122 nil nil nil nil)) (1353 . 1363) (#("RunError<$0>" 0 12 (fontified nil)) . 1353) (1353 . 1365) (#("Run" 0 3 (fontified nil)) . 1353) (1353 . 1356) (#("RunError<…>" 0 11 (fontified nil)) . -1353) (1353 . 1364) (#("Run" 0 3 (face font-lock-type-face fontified t)) . -1353) (undo-tree-id869 . -3) (undo-tree-id870 . -3) 1356 (1338 . 1356) (1336 . 1338) (t 25815 53910 333002 323000)) nil (25815 55762 656367 222000) 0 nil])
([nil nil ((apply yas--snippet-revive 1447 1487 #s(yas--snippet nil (#s(yas--field 1 1456 1486 nil nil nil t #s(yas--exit 1487 nil))) #s(yas--exit 1487 nil) 124 nil #s(yas--field 1 1456 1486 nil nil nil t #s(yas--exit 1487 nil)) nil nil)) (apply yas--snippet-revive 1456 1486 #s(yas--snippet nil (#s(yas--field 1 1480 1485 nil nil nil t #s(yas--exit 1486 nil))) #s(yas--exit 1486 nil) 125 nil #s(yas--field 1 1480 1485 nil nil nil t #s(yas--exit 1486 nil)) #s(yas--field 1 1456 1486 nil nil nil t #s(yas--exit 1487 nil)) nil))) nil (25815 55897 299541 352000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -1387) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) 1388 (1387 . 1388) (t 25815 55762 655809 636000)) nil (25815 55897 299537 395000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1680) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (1681 . 1682) (1679 . 1681) (1677 . 1679) (1671 . 1676) (#("Err" 0 3 (fontified nil)) . 1671) (1671 . 1674) (#("Error" 0 5 (fontified nil)) . -1671) (1671 . 1676) (#("Err" 0 3 (face font-lock-type-face fontified t)) . -1671) (undo-tree-id879 . -3) (undo-tree-id880 . -3) 1674 (1671 . 1674) (52 . 65) (apply yas--snippet-revive 1646 1659 #s(yas--snippet nil nil #s(yas--exit 1658 nil) 127 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1658 nil) 127 nil nil nil nil)) (1646 . 1659) (#("WithContext<$0>" 0 15 (fontified nil)) . 1646) (1646 . 1661) (#("WithC" 0 5 (fontified nil)) . 1646) (1646 . 1651) (#("WithContext<…> (use super::WithContext)" 0 39 (fontified nil)) . -1646) (1646 . 1685) (#("WithC" 0 5 (face font-lock-type-face fontified t)) . -1646) (undo-tree-id881 . -5) 1651 (1642 . 1651) (1633 . 1642) (1619 . 1633) (#(">" 0 1 (fontified t)) . -1619) (undo-tree-id882 . -1) (#(" " 0 1 (fontified t)) . -1620) (undo-tree-id883 . -1) 1621 (1619 . 1621) (#(":" 0 1 (fontified t)) . -1619) (undo-tree-id884 . -1) (#(" " 0 1 (fontified t)) . -1620) (undo-tree-id885 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -1621) (undo-tree-id886 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1622) (undo-tree-id887 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1623) (undo-tree-id888 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1624) (undo-tree-id889 . -1) 1625 (1621 . 1625) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1621) (undo-tree-id890 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1622) (undo-tree-id891 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1623) (undo-tree-id892 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -1624) (undo-tree-id893 . -1) 1625 (1613 . 1625) (1611 . 1613) (t 25815 55897 309116 131000)) nil (25815 56025 619386 904000) 0 nil])
([nil nil ((1682 . 1684) (1626 . 1628) (t 25815 56025 619088 464000)) nil (25815 56164 227707 495000) 0 nil])
([nil nil ((#("
//impl<T: Into<Error>> From<T> for WithContext<Error> {
//}

" 0 1 (fontified t) 1 3 (face font-lock-comment-delimiter-face fontified t) 3 7 (face font-lock-comment-face fontified t) 7 8 (face font-lock-comment-face syntax-table (1) fontified t) 8 9 (face font-lock-comment-face fontified t) 9 11 (face font-lock-comment-face fontified t) 11 15 (face font-lock-comment-face fontified t) 15 16 (face font-lock-comment-face syntax-table (1) fontified t) 16 21 (face font-lock-comment-face fontified t) 21 22 (face font-lock-comment-face syntax-table (1) fontified t) 22 23 (face font-lock-comment-face syntax-table (1) fontified t) 23 24 (face font-lock-comment-face fontified t) 24 28 (face font-lock-comment-face fontified t) 28 29 (face font-lock-comment-face syntax-table (1) fontified t) 29 30 (face font-lock-comment-face fontified t) 30 31 (face font-lock-comment-face syntax-table (1) fontified t) 31 32 (face font-lock-comment-face fontified t) 32 35 (face font-lock-comment-face fontified t) 35 36 (face font-lock-comment-face fontified t) 36 47 (face font-lock-comment-face fontified t) 47 48 (face font-lock-comment-face syntax-table (1) fontified t) 48 53 (face font-lock-comment-face fontified t) 53 54 (face font-lock-comment-face syntax-table (1) fontified t) 54 57 (face font-lock-comment-face fontified t) 57 59 (face font-lock-comment-delimiter-face fontified t) 59 60 (face font-lock-comment-face fontified t) 60 61 (face font-lock-comment-face fontified t) 61 62 (fontified t)) . 1625) (undo-tree-id894 . 3) (undo-tree-id895 . -61) (undo-tree-id896 . -17) (undo-tree-id897 . -61) (undo-tree-id898 . -61) (undo-tree-id899 . -62) (undo-tree-id900 . -62) (undo-tree-id901 . -55) (undo-tree-id902 . -62) (t 25815 56164 232390 167000)) nil (25815 56238 655440 598000) 0 nil])
([nil nil ((415 . 424) (414 . 415) (389 . 393) (#(" " 0 1 (fontified t)) . -389) (undo-tree-id0 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -390) (undo-tree-id1 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -391) (undo-tree-id2 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -392) (undo-tree-id3 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -393) (undo-tree-id4 . -1) 394 (383 . 388) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -383) (undo-tree-id5 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -384) (undo-tree-id6 . -1) (#("v" 0 1 (face font-lock-variable-name-face fontified t)) . -385) (undo-tree-id7 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -386) (undo-tree-id8 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -387) (undo-tree-id9 . -1) 388 (390 . 397) (403 . 408) (400 . 403) (379 . 400) (374 . 379) (#("	" 0 1 (fontified nil)) . -378) (undo-tree-id10 . -1) (379 . 380) (374 . 379) (359 . 374) (351 . 359) (#("n" 0 1 (fontified t)) . -351) (undo-tree-id11 . -1) (#("o" 0 1 (fontified t)) . -352) (undo-tree-id12 . -1) (#("c" 0 1 (fontified t)) . -353) (undo-tree-id13 . -1) (#("t" 0 1 (fontified t)) . -354) (undo-tree-id14 . -1) (#("x" 0 1 (face font-lock-variable-name-face fontified nil)) . -355) (undo-tree-id15 . -1) (#(":" 0 1 (fontified t)) . -356) (undo-tree-id16 . -1) (#(" " 0 1 (fontified t)) . -357) (undo-tree-id17 . -1) 358 (346 . 358) (#(" " 0 1 (fontified t)) . -346) (undo-tree-id18 . -1) 347 (343 . 347) (339 . 343) (#("	" 0 1 (fontified nil)) . -342) (undo-tree-id19 . -1) (343 . 344) (339 . 343) (330 . 339) (326 . 330) (305 . 326) (300 . 305) (298 . 300) (#("		" 0 2 (fontified nil)) . 297) (undo-tree-id20 . -2) (296 . 300) (286 . 287) (280 . 281) (278 . 285) (#("f" 0 1 (fontified t)) . -278) (undo-tree-id21 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -279) (undo-tree-id22 . -1) (#(" " 0 1 (fontified t)) . -280) (undo-tree-id23 . -1) (#("f" 0 1 (face font-lock-function-name-face fontified t)) . -281) (undo-tree-id24 . -1) (#("r" 0 1 (face font-lock-function-name-face fontified t)) . -282) (undo-tree-id25 . -1) (#("o" 0 1 (face font-lock-function-name-face fontified t)) . -283) (undo-tree-id26 . -1) (#("m" 0 1 (face font-lock-function-name-face fontified t)) . -284) (undo-tree-id27 . -1) 285 (278 . 285) (273 . 278) (#("	" 0 1 (fontified nil)) . -277) (undo-tree-id28 . -1) (278 . 279) (273 . 278) (272 . 273) (257 . 272) (#("S" 0 1 (face font-lock-type-face fontified t)) . -257) (undo-tree-id29 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -258) (undo-tree-id30 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -259) (undo-tree-id31 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -260) (undo-tree-id32 . -1) 261 (257 . 261) (#("$" 0 1 (fontified t)) . -257) (undo-tree-id33 . -1) (#("f" 0 1 (fontified t)) . -258) (undo-tree-id34 . -1) (#("r" 0 1 (fontified t)) . -259) (undo-tree-id35 . -1) (#("o" 0 1 (fontified t)) . -260) (undo-tree-id36 . -1) (#("m" 0 1 (fontified t)) . -261) (undo-tree-id37 . -1) 262 (258 . 262) (244 . 258) (242 . 244) (238 . 242) (#("	" 0 1 (fontified nil)) . -241) (undo-tree-id38 . -1) (242 . 243) (238 . 242) (223 . 238) (217 . 223) (#("$" 0 1 (fontified t)) . -217) (undo-tree-id39 . -1) 218 (212 . 218) (209 . 212) (#("	" 0 1 (fontified nil)) . -211) (undo-tree-id40 . -1) (212 . 213) (209 . 212) (208 . 209) (196 . 208) (#(" " 0 1 (fontified t)) . -196) (undo-tree-id41 . -1) 197 (194 . 197) (191 . 194) (#("t" 0 1 (fontified t)) . -191) (undo-tree-id42 . -1) (#("t" 0 1 (fontified t)) . -192) (undo-tree-id43 . -1) 193 (190 . 193) (188 . 190) (186 . 188) (183 . 186) (#(" " 0 1 (fontified t)) . -183) (undo-tree-id44 . -1) 184 (179 . 184) (176 . 179) (#("r" 0 1 (fontified t)) . -176) (undo-tree-id45 . -1) 177 (176 . 177) (163 . 174) (163 . 164) (#(":" 0 1 (fontified t)) . -164) (undo-tree-id46 . -1) (#(" " 0 1 (fontified t)) . -165) (undo-tree-id47 . -1) (#("4" 0 1 (fontified t)) . -166) (undo-tree-id48 . -1) 167 (164 . 167) (158 . 164) (#(" " 0 1 (fontified t)) . -158) (undo-tree-id49 . -1) 159 (152 . 159) (149 . 152) (147 . 149) (#("	" 0 1 (fontified nil)) . -148) (undo-tree-id50 . -1) (149 . 150) (147 . 149) (145 . 147) (#("s" 0 1 (fontified t)) . -145) (undo-tree-id51 . -1) 146 (141 . 146) (121 . 141) (#("c" 0 1 (fontified t)) . -121) (undo-tree-id52 . -1) 122 (121 . 122) (120 . 122) (#("
" 0 1 (fontified t)) . -84) (undo-tree-id53 . -1) 85 (84 . 85) (t 25815 56238 655705 996000)) nil (25817 6673 335262 752000) 0 nil])
([nil nil ((414 . 419) (#("$" 0 1 (fontified t)) . -414) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("t" 0 1 (fontified t)) . -415) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("o" 0 1 (fontified t)) . -416) (undo-tree-id60 . -1) 417 (489 . 493) (482 . 489) (465 . 482) (464 . 465) (449 . 464) (#(" " 0 1 (fontified t)) . -449) (undo-tree-id61 . -1) 450 (440 . 450) (439 . 440) (#("	" 0 1 (fontified nil)) . 438) (undo-tree-id62 . -1) (437 . 440) (436 . 437) (t 25817 6673 397241 366000)) nil (25817 6874 352757 869000) 0 nil])
([nil nil ((495 . 501) (t 25817 6874 360441 264000)) nil (25817 6935 234200 143000) 0 nil])
([nil nil ((#("	{ ($name:ident : $from:ty) -> $to:ty { $($body:tt)+ } } => 
" 0 4 (fontified t) 4 9 (face font-lock-variable-name-face fontified t) 9 11 (fontified t) 11 15 (face font-lock-variable-name-face fontified t) 15 18 (fontified t) 18 23 (face font-lock-variable-name-face fontified t) 23 29 (fontified t) 29 30 (syntax-table (1) fontified t) 30 31 (fontified t) 31 34 (face font-lock-variable-name-face fontified t) 34 42 (fontified t) 42 47 (face font-lock-variable-name-face fontified t) 47 58 (fontified t) 58 59 (syntax-table (1) fontified t) 59 61 (fontified t)) . 441) (undo-tree-id65 . -54) (undo-tree-id66 . 1) (undo-tree-id67 . -60) (undo-tree-id68 . -53) (undo-tree-id69 . -59) (undo-tree-id70 . -57) (undo-tree-id71 . -57) (undo-tree-id72 . -59) (undo-tree-id73 . -59) (undo-tree-id74 . -59) (undo-tree-id75 . -60) (undo-tree-id76 . -60) (undo-tree-id77 . -59) (undo-tree-id78 . -59) (undo-tree-id79 . -59) (undo-tree-id80 . -59) (undo-tree-id81 . -59) (undo-tree-id82 . -59) (undo-tree-id83 . -59) (undo-tree-id84 . -61) 500) nil (25817 6935 234196 122000) 0 nil])
([nil nil ((463 . 464) (#("	" 0 1 (fontified t)) . -462) 464 (463 . 464) (459 . 463) (457 . 458) 458 (452 . 453) 453 (435 . 436) 443 (399 . 400) 403 (362 . 363) 366 (318 . 319) 322 (312 . 315) (309 . 310) 310 (304 . 305) 305 (290 . 291) 292 (253 . 254) 255 (222 . 223) 224 (217 . 219) (214 . 217) (204 . 207) (151 . 153) (#("," 0 1 (fontified t)) . -438) (undo-tree-id63 . -1) (#("
" 0 1 (fontified t)) . -439) (undo-tree-id64 . -1) 440) nil (25817 6935 234160 164000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -486) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (487 . 488) (485 . 487) (483 . 485) (#("(" 0 1 (fontified t)) . -483) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (#("$" 0 1 (fontified t)) . -484) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (#("0" 0 1 (fontified t)) . -485) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#(")" 0 1 (fontified t)) . -486) (undo-tree-id95 . -1) (undo-tree-id96 . -1) 487 (471 . 487) (#("conver" 0 6 (fontified nil)) . 471) (471 . 477) (#("conversions!(…)" 0 15 (fontified nil)) . -471) (471 . 486) (#("conver" 0 6 (fontified t)) . -471) (undo-tree-id97 . -6) (undo-tree-id98 . -6) (undo-tree-id99 . -6) (undo-tree-id100 . -6) (undo-tree-id101 . -6) 477 (471 . 477) (469 . 471) (t 25817 6935 246817 187000)) nil (25817 6961 633114 496000) 0 nil])
([nil nil ((526 . 533) (523 . 526) (#("	" 0 1 (fontified nil)) . -525) (undo-tree-id102 . -1) (526 . 527) (523 . 526) (522 . 523) (513 . 522) (511 . 513) (490 . 511) (488 . 490) (#("O" 0 1 (face font-lock-type-face fontified t)) . -488) (undo-tree-id103 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -489) (undo-tree-id104 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -490) (undo-tree-id105 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -491) (undo-tree-id106 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -492) (undo-tree-id107 . -1) (#("r" 0 1 (face font-lock-type-face fontified nil)) . -493) (undo-tree-id108 . -1) (#("o" 0 1 (face font-lock-type-face fontified nil)) . -494) (undo-tree-id109 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -495) (undo-tree-id110 . -1) (#("<" 0 1 (syntax-table (1) fontified t)) . -496) (undo-tree-id111 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -497) (undo-tree-id112 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -498) (undo-tree-id113 . -1) 499 (487 . 499) (485 . 487) (t 25817 6961 646515 459000)) nil (25817 7019 867343 930000) 0 nil])
([nil nil ((392 . 393) (391 . 392) (377 . 379) (272 . 274) (258 . 260) (175 . 176) (382 . 386) (371 . 382) (#("g" 0 1 (fontified t)) . -371) (undo-tree-id114 . -1) (#("e" 0 1 (fontified t)) . -372) (undo-tree-id115 . -1) 373 (371 . 373) (368 . 369) (253 . 254) (367 . 369) (257 . 271) (255 . 257) (#("g" 0 1 (fontified t)) . -255) (undo-tree-id116 . -1) (#("e" 0 1 (fontified t)) . -256) (undo-tree-id117 . -1) (#("n" 0 1 (fontified t)) . -257) (undo-tree-id118 . -1) (#("e" 0 1 (fontified t)) . -258) (undo-tree-id119 . -1) (#("r" 0 1 (fontified t)) . -259) (undo-tree-id120 . -1) (#("i" 0 1 (fontified t)) . -260) (undo-tree-id121 . -1) (#("c" 0 1 (fontified t)) . -261) (undo-tree-id122 . -1) (#("s" 0 1 (fontified t)) . -262) (undo-tree-id123 . -1) 263 (253 . 263) (163 . 175) (#("t" 0 1 (fontified t)) . -163) (undo-tree-id124 . -1) (#("t" 0 1 (fontified t)) . -164) (undo-tree-id125 . -1) (#(":" 0 1 (fontified t)) . -165) (undo-tree-id126 . -1) 166 (160 . 166) (159 . 161) (158 . 159) (155 . 158) (156 . 157) (153 . 157) (t 25817 7019 879224 725000)) nil (25817 7331 153313 624000) 0 nil])
([nil nil ((612 . 614) (#("o" 0 1 (fontified t)) . -612) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) 613 (606 . 613) (#("v" 0 1 (fontified t)) . -606) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("a" 0 1 (fontified t)) . -607) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("l" 0 1 (fontified t)) . -608) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("u" 0 1 (fontified t)) . -609) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("e" 0 1 (fontified t)) . -610) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("." 0 1 (fontified t)) . -611) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#("0" 0 1 (fontified t)) . -612) (undo-tree-id147 . -1) (undo-tree-id148 . -1) 613 (562 . 567) (559 . 562) (t 25817 7331 166645 650000)) nil (25817 7350 418144 81000) 0 nil])
([nil nil ((395 . 396) (t 25817 7350 433185 188000)) nil (25817 7361 541952 395000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 269) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (t 25817 7361 553113 177000)) nil (25817 7390 538936 363000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 269) (undo-tree-id151 . -1) (undo-tree-id152 . -1)) nil (25817 7390 538930 889000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 269) (undo-tree-id149 . -1) (undo-tree-id150 . -1)) nil (25817 7390 538921 800000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 385) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (t 25817 7390 552929 903000)) nil (25817 7394 292858 425000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 385) (undo-tree-id157 . -1) (undo-tree-id158 . -1)) nil (25817 7394 292852 891000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 385) (undo-tree-id155 . -1) (undo-tree-id156 . -1)) nil (25817 7394 292843 48000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -537) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) 538 (537 . 538) (t 25817 7394 306239 980000)) nil (25817 7425 636175 919000) 0 nil])
([nil nil ((#("impl<T> From<OptError<T>> for Option<T> {
    fn from(value: OptError<T>) -> Self {
        value.0
    }
}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 21 (face font-lock-type-face fontified t) 21 22 (fontified t) 22 23 (face font-lock-type-face fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 29 (face font-lock-keyword-face fontified t) 29 30 (fontified t) 30 36 (face font-lock-type-face fontified t) 36 37 (fontified t) 37 38 (face font-lock-type-face fontified t) 38 39 (fontified t) 39 46 (fontified t) 46 48 (face font-lock-keyword-face fontified t) 48 49 (fontified t) 49 53 (face font-lock-function-name-face fontified t) 53 54 (fontified t) 54 59 (face font-lock-variable-name-face fontified t) 59 61 (fontified t) 61 69 (face font-lock-type-face fontified t) 69 70 (fontified t) 70 71 (face font-lock-type-face fontified t) 71 72 (fontified t) 72 75 (fontified t) 75 76 (fontified t syntax-table (1)) 76 77 (fontified t) 77 81 (face font-lock-type-face fontified t) 81 109 (fontified t)) . 616) (undo-tree-id165 . -108) (undo-tree-id166 . -108) (undo-tree-id167 . -108) (undo-tree-id168 . -108) (undo-tree-id169 . -108) (undo-tree-id170 . -108) (undo-tree-id171 . -109) 724 (t 25817 7425 649383 90000)) nil (25817 7433 817687 403000) 0 nil])
([nil nil ((440 . 455) (427 . 440) (424 . 427) (#(" " 0 1 (fontified nil)) . 423) (undo-tree-id172 . -1) (424 . 425) (t 25817 7433 832667 895000)) nil (25817 7523 144293 213000) 0 nil])
([nil nil ((67 . 83) (#("Contex" 0 6 (fontified nil)) . 67) (67 . 73) (#("Contextualizable" 0 16 (fontified nil)) . -67) (67 . 83) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -67) (undo-tree-id173 . -6) (undo-tree-id174 . -5) (undo-tree-id175 . -6) (undo-tree-id176 . -6) (undo-tree-id177 . -6) 73 (65 . 73) (t 25817 7523 148833 139000)) nil (25817 7554 347499 300000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 250) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (t 25817 7554 362002 453000)) nil (25817 7581 883284 440000) 0 nil])
([nil nil ((715 . 720) (707 . 715) (704 . 707) (#("	" 0 1 (fontified nil)) . -706) (undo-tree-id189 . -1) (707 . 708) (704 . 707) (688 . 704) (684 . 688) (663 . 684) (662 . 663) (#("	" 0 1 (fontified nil)) . 661) (undo-tree-id190 . -1) (660 . 663) (t 25817 7581 895195 477000)) nil (25817 7638 437111 307000) 0 nil])
([nil nil ((#("impl<T> From<Option<T>> for OptError<T> {
	fn from(value: Option<T>) -> Self {
		OptError(value)
	}
}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 19 (face font-lock-type-face fontified t) 19 20 (fontified t) 20 21 (face font-lock-type-face fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 36 (face font-lock-type-face fontified t) 36 37 (fontified t) 37 38 (face font-lock-type-face fontified t) 38 39 (fontified t) 39 42 (fontified t) 42 43 (fontified t) 43 45 (face font-lock-keyword-face fontified t) 45 46 (fontified t) 46 50 (face font-lock-function-name-face fontified t) 50 51 (fontified t) 51 56 (face font-lock-variable-name-face fontified t) 56 58 (fontified t) 58 64 (face font-lock-type-face fontified t) 64 65 (fontified t) 65 66 (face font-lock-type-face fontified t) 66 67 (fontified t) 67 70 (fontified t) 70 71 (fontified t syntax-table (1)) 71 72 (fontified t) 72 76 (face font-lock-type-face fontified t) 76 81 (fontified t) 81 89 (face font-lock-type-face fontified t) 89 103 (fontified t)) . 727) (undo-tree-id182 . -102) (undo-tree-id183 . -102) (undo-tree-id184 . -102) (undo-tree-id185 . -102) (undo-tree-id186 . -102) (undo-tree-id187 . -102) (undo-tree-id188 . -103) 829) nil (25817 7638 437099 154000) 0 nil])
([nil nil ((215 . 228) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -215) (undo-tree-id191 . -1) (#("p" 0 1 (face font-lock-comment-face fontified t)) . -216) (undo-tree-id192 . -1) (#("a" 0 1 (face font-lock-comment-face fontified t)) . -217) (undo-tree-id193 . -1) (#("r" 0 1 (face font-lock-comment-face fontified t)) . -218) (undo-tree-id194 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -219) (undo-tree-id195 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -220) (undo-tree-id196 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -221) (undo-tree-id197 . -1) (#("a" 0 1 (face font-lock-comment-face fontified t)) . -222) (undo-tree-id198 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -223) (undo-tree-id199 . -1) 224 (209 . 224) (188 . 209) (167 . 188) (165 . 167) (t 25817 7638 448252 546000)) nil (25817 7664 351287 859000) 0 nil])
([nil nil ((200 . 201) (#("p" 0 1 (face font-lock-comment-face fontified t)) . 200) (undo-tree-id200 . -1) (t 25817 7664 364797 596000)) nil (25817 7691 923337 821000) 0 nil])
([nil nil ((917 . 918) (apply yas--snippet-revive 903 917 #s(yas--snippet nil (#s(yas--field 1 912 916 nil nil nil t #s(yas--exit 917 nil))) #s(yas--exit 917 nil) 2 nil #s(yas--field 1 912 916 nil nil nil t #s(yas--exit 917 nil)) nil nil)) (913 . 916) (#("()" 0 2 (fontified nil)) . 913) (undo-tree-id205 . -2) (912 . 913) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 912 916 nil nil nil t #s(yas--exit 917 nil))) #s(yas--exit 917 nil) 2 nil #s(yas--field 1 912 916 nil nil nil t #s(yas--exit 917 nil)) nil nil)) (903 . 915) (#("OptError(${1:()})$0" 0 19 (fontified nil)) . 903) (903 . 922) (#("OptEr" 0 5 (fontified nil)) . 903) (903 . 908) (#("OptError(…)" 0 11 (fontified nil)) . -903) (903 . 914) (#("OptEr" 0 5 (face font-lock-type-face fontified t)) . -903) (undo-tree-id206 . -5) 908 (898 . 908) (894 . 898) (893 . 894) (apply yas--snippet-revive 873 893 #s(yas--snippet nil (#s(yas--field 1 882 892 nil nil nil t #s(yas--exit 893 nil))) #s(yas--exit 893 nil) 1 nil #s(yas--field 1 882 892 nil nil nil t #s(yas--exit 893 nil)) nil nil)) (883 . 892) (#("()" 0 2 (fontified nil)) . 883) (882 . 883) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 882 892 nil nil nil t #s(yas--exit 893 nil))) #s(yas--exit 893 nil) 1 nil #s(yas--field 1 882 892 nil nil nil t #s(yas--exit 893 nil)) nil nil)) (873 . 885) (#("OptError(${1:()})$0" 0 19 (fontified nil)) . 873) (873 . 892) (#("OptEr" 0 5 (fontified nil)) . 873) (873 . 878) (#("OptError(…)" 0 11 (fontified nil)) . -873) (873 . 884) (#("OptEr" 0 5 (face font-lock-type-face fontified t)) . -873) (undo-tree-id207 . -5) 878 (874 . 878) (869 . 874) (apply yas--snippet-revive 855 869 #s(yas--snippet nil (#s(yas--field 1 864 868 nil nil nil t #s(yas--exit 869 nil))) #s(yas--exit 869 nil) 0 nil #s(yas--field 1 864 868 nil nil nil t #s(yas--exit 869 nil)) nil nil)) (864 . 868) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 864 868 nil nil nil t #s(yas--exit 869 nil))) #s(yas--exit 869 nil) 0 nil #s(yas--field 1 864 868 nil nil nil t #s(yas--exit 869 nil)) nil nil)) (855 . 865) (#("Internal($1)$0" 0 14 (fontified nil)) . 855) (855 . 869) (#("Inter" 0 5 (fontified nil)) . 855) (855 . 860) (#("Internal(…)" 0 11 (fontified nil)) . -855) (855 . 866) (#("Inter" 0 5 (face font-lock-type-face fontified t)) . -855) (undo-tree-id208 . -5) 860 (848 . 860) (844 . 848) (#("	" 0 1 (fontified nil)) . -847) (undo-tree-id209 . -1) (848 . 849) (844 . 848) (833 . 844) (830 . 833) (#("	" 0 1 (fontified nil)) . -832) (undo-tree-id210 . -1) (833 . 834) (831 . 833) (#(" " 0 1 (fontified nil)) . 831) (830 . 831) (828 . 830) (814 . 827) (#("T" 0 1 (face font-lock-type-face fontified t)) . -814) (undo-tree-id211 . -1) 815 (816 . 817) (813 . 816) (#("3" 0 1 (face font-lock-type-face fontified t)) . -813) (undo-tree-id212 . -1) 814 (813 . 814) (#("(" 0 1 (fontified t)) . -813) (undo-tree-id213 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -814) (undo-tree-id214 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -815) (undo-tree-id215 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -816) (undo-tree-id216 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -817) (undo-tree-id217 . -1) (#("(" 0 1 (fontified t)) . -818) (undo-tree-id218 . -1) (#("i" 0 1 (fontified t)) . -819) (undo-tree-id219 . -1) (#("e" 0 1 (fontified t)) . -820) (undo-tree-id220 . -1) (#("r" 0 1 (fontified t)) . -821) (undo-tree-id221 . -1) (#("r" 0 1 (fontified t)) . -822) (undo-tree-id222 . -1) (#(")" 0 1 (fontified t)) . -823) (undo-tree-id223 . -1) 824 (818 . 824) (810 . 818) (789 . 810) (788 . 789) (#("	" 0 1 (fontified nil)) . 787) (undo-tree-id224 . -1) (786 . 789) (t 25817 7678 414732 896000)) nil (25817 8253 521854 700000) 0 nil] [nil nil ((nil rear-nonsticky nil 303 . 304) (nil fontified nil 201 . 304) (201 . 304) 200 (t 25817 7678 414732 896000)) ((#("impl<T> From<Option<T>> for OptError<T> {
	fn from(value: Option<T>) -> Self {
		OptError(value)
	}
}

" 0 4 (face font-lock-comment-face fontified nil) 4 5 (face font-lock-comment-face syntax-table (1) fontified nil) 5 6 (face font-lock-comment-face fontified nil) 6 7 (face font-lock-comment-face syntax-table (1) fontified nil) 7 12 (face font-lock-comment-face fontified nil) 12 13 (face font-lock-comment-face syntax-table (1) fontified nil) 13 19 (face font-lock-comment-face fontified nil) 19 20 (face font-lock-comment-face syntax-table (1) fontified nil) 20 21 (face font-lock-comment-face fontified nil) 21 22 (face font-lock-comment-face syntax-table (1) fontified nil) 22 23 (face font-lock-comment-face syntax-table (1) fontified nil) 23 36 (face font-lock-comment-face fontified nil) 36 37 (face font-lock-comment-face syntax-table (1) fontified nil) 37 38 (face font-lock-comment-face fontified nil) 38 39 (face font-lock-comment-face syntax-table (1) fontified nil) 39 42 (face font-lock-comment-face fontified nil) 42 43 (fontified nil) 43 45 (face font-lock-keyword-face fontified nil) 45 46 (fontified nil) 46 50 (face font-lock-function-name-face fontified nil) 50 51 (fontified nil) 51 56 (face font-lock-variable-name-face fontified nil) 56 58 (fontified nil) 58 64 (face font-lock-type-face fontified nil) 64 65 (syntax-table (1) fontified nil) 65 66 (face font-lock-type-face fontified nil) 66 67 (syntax-table (1) fontified nil) 67 70 (fontified nil) 70 71 (syntax-table (1) fontified nil) 71 72 (fontified nil) 72 76 (face font-lock-type-face fontified nil) 76 81 (fontified nil) 81 89 (face font-lock-type-face fontified nil) 89 102 (fontified nil) 102 103 (rear-nonsticky nil fontified nil)) . 201) (undo-tree-id201 . -102) (undo-tree-id202 . -103) (undo-tree-id203 . -103) (undo-tree-id204 . -103) (nil fontified t 290 . 303) (nil fontified t 282 . 290) (nil fontified t 277 . 282) (nil fontified t 273 . 277) (nil fontified t 272 . 273) (nil fontified t 271 . 272) (nil fontified t 268 . 271) (nil fontified t 267 . 268) (nil fontified t 266 . 267) (nil fontified t 265 . 266) (nil fontified t 259 . 265) (nil fontified t 257 . 259) (nil fontified t 252 . 257) (nil fontified t 251 . 252) (nil fontified t 247 . 251) (nil fontified t 246 . 247) (nil fontified t 244 . 246) (nil fontified t 243 . 244) (nil fontified t 240 . 243) (nil fontified t 239 . 240) (nil fontified t 238 . 239) (nil fontified t 237 . 238) (nil fontified t 224 . 237) (nil fontified t 223 . 224) (nil fontified t 222 . 223) (nil fontified t 221 . 222) (nil fontified t 220 . 221) (nil fontified t 214 . 220) (nil fontified t 213 . 214) (nil fontified t 208 . 213) (nil fontified t 207 . 208) (nil fontified t 206 . 207) (nil fontified t 205 . 206) (nil fontified t 201 . 205) (nil rear-nonsticky t 303 . 304)) (25817 7691 527141 127000) 0 nil])
([nil nil ((#("impl From<Error> for OptError<InternalError> {
	fn from(err: Error) -> OptError<InternalError> {
		match err {
			Error::Internal(ierr) => OptError(Some(ierr)),
			_ => OptError(None)
		}
	}
}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 15 (face font-lock-type-face fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 29 (face font-lock-type-face fontified t) 29 30 (fontified t) 30 43 (face font-lock-type-face fontified t) 43 44 (fontified t) 44 47 (fontified t) 47 48 (fontified t) 48 50 (face font-lock-keyword-face fontified t) 50 51 (fontified t) 51 55 (face font-lock-function-name-face fontified t) 55 56 (fontified t) 56 59 (face font-lock-variable-name-face fontified t) 59 61 (fontified t) 61 66 (face font-lock-type-face fontified t) 66 69 (fontified t) 69 70 (fontified t syntax-table (1)) 70 71 (fontified t) 71 79 (face font-lock-type-face fontified t) 79 80 (fontified t) 80 93 (face font-lock-type-face fontified t) 93 94 (fontified t) 94 99 (fontified t) 99 104 (face font-lock-keyword-face fontified t) 104 114 (fontified t) 114 119 (face font-lock-type-face fontified t) 119 121 (fontified t) 121 129 (face font-lock-type-face fontified t) 129 137 (fontified t) 137 138 (fontified t syntax-table (1)) 138 139 (fontified t) 139 147 (face font-lock-type-face fontified t) 147 148 (fontified t) 148 152 (face font-lock-type-face fontified t) 152 167 (fontified t) 167 168 (fontified t syntax-table (1)) 168 169 (fontified t) 169 177 (face font-lock-type-face fontified t) 177 178 (fontified t) 178 182 (face font-lock-type-face fontified t) 182 194 (fontified t)) . 929) (undo-tree-id225 . -193) (undo-tree-id226 . -193) (undo-tree-id227 . -193) (undo-tree-id228 . -193) (undo-tree-id229 . -193) (undo-tree-id230 . -193) (undo-tree-id231 . -194) 1122 (t 25817 8253 539265 732000)) nil (25817 8260 394359 947000) 0 nil])
([nil nil ((304 . 305)) ((#("u" 0 1 (fontified t)) . 304)) (25817 7691 526531 111000) 0 nil])
([nil nil ((981 . 988) (#("e" 0 1 (fontified t)) . -981) (undo-tree-id244 . -1) 982 (965 . 982) (962 . 965) (#("	" 0 1 (fontified nil)) . -964) (undo-tree-id245 . -1) (965 . 966) (962 . 965) (948 . 962) (#("r" 0 1 (face font-lock-type-face fontified t)) . -948) (undo-tree-id246 . -1) 949 (928 . 949) (927 . 928) (#("	" 0 1 (fontified nil)) . 926) (undo-tree-id247 . -1) (925 . 928) (t 25817 8260 409244 373000)) nil (25817 8391 283019 51000) 0 nil])
nil
([nil nil ((#("impl From<InternalError> for Error {
	fn from(err: InternalError) -> Error {
		Error::Internal(err)
	}
}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 23 (face font-lock-type-face fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 28 (face font-lock-keyword-face fontified t) 28 29 (fontified t) 29 34 (face font-lock-type-face fontified t) 34 37 (fontified t) 37 38 (fontified t) 38 40 (face font-lock-keyword-face fontified t) 40 41 (fontified t) 41 45 (face font-lock-function-name-face fontified t) 45 46 (fontified t) 46 49 (face font-lock-variable-name-face fontified t) 49 51 (fontified t) 51 64 (face font-lock-type-face fontified t) 64 67 (fontified t) 67 68 (fontified t syntax-table (1)) 68 69 (fontified t) 69 74 (face font-lock-type-face fontified t) 74 79 (fontified t) 79 84 (face font-lock-type-face fontified t) 84 86 (fontified t) 86 94 (face font-lock-type-face fontified t) 94 106 (fontified t)) . 995) (undo-tree-id232 . -105) (undo-tree-id233 . -105) (undo-tree-id234 . -105) (undo-tree-id235 . -105) (undo-tree-id236 . -105) (undo-tree-id237 . -105) (undo-tree-id238 . -105) (undo-tree-id239 . -105) (undo-tree-id240 . -105) (undo-tree-id241 . -105) (undo-tree-id242 . -105) (undo-tree-id243 . -106) 1100) nil (25817 8391 283003 100000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1034) (undo-tree-id282 . -1) (1035 . 1036) (1032 . 1035) (1022 . 1032) (1015 . 1022) (994 . 1015) (993 . 994) (#("	" 0 1 (fontified nil)) . 992) (undo-tree-id283 . -1) (991 . 994) (t 25817 8391 298848 727000)) nil (25817 8576 213594 316000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -1118) (undo-tree-id274 . -1) 1119 (1118 . 1119) (1114 . 1118) (#("	" 0 1 (fontified nil)) . -1117) (undo-tree-id275 . -1) (1118 . 1119) (1114 . 1118) (1101 . 1114) (1099 . 1101) (#("		" 0 2 (fontified nil)) . 1098) (undo-tree-id276 . -2) (1097 . 1101) (1091 . 1097) (1087 . 1091) (1077 . 1087) (#("Model" 0 5 (fontified nil)) . 1077) (1077 . 1082) (#("ModelError" 0 10 (fontified nil)) . -1077) (1077 . 1087) (#("Model" 0 5 (face font-lock-type-face fontified t)) . -1077) (undo-tree-id277 . -5) 1082 (1068 . 1082) (1065 . 1068) (1061 . 1065) (#("s" 0 1 (fontified t)) . -1061) (undo-tree-id278 . -1) (#("\\" 0 1 (fontified t)) . -1062) (undo-tree-id279 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1063) (undo-tree-id280 . -1) 1064 (1062 . 1064) (1057 . 1062) (1044 . 1057) (#("Seren" 0 5 (fontified nil)) . 1044) (1044 . 1049) (#("SerenityError" 0 13 (fontified nil)) . -1044) (1044 . 1057) (#("Seren" 0 5 (face font-lock-type-face fontified t)) . -1044) (undo-tree-id281 . -5) 1049 (1035 . 1049) (1032 . 1035)) nil (25817 8576 213578 851000) 0 nil])
([nil nil ((#("match value {
			
		}" 0 5 (face font-lock-keyword-face fontified t) 5 14 (fontified t) 14 17 (fontified t) 17 18 (fontified t) 18 21 (fontified t)) . 1101) (undo-tree-id271 . -20) (undo-tree-id272 . -20) (undo-tree-id273 . -20)) nil (25817 8576 213547 852000) 0 nil])
([nil nil ((#("	match value {
			Ser::Model(Model::RoleNotFound) => Error::RoleNotFound,
			Ser::Model(Model::MemberNotFound) => Error::MemberNotFound,
			Ser::Model(Model::ChannelNotFound) => Error::ChannelNotFound,
			Ser::Model(Model::MessageAlreadyCrossposted) => Error::MessageAlreadyCrossposted,
			Ser::Model(Model::CannotCrosspostMessage) => Error::CannotCrosspostMessage,
			e => Error::Internal(InternalError::SerenityError(e))
		}
" 0 1 (fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 18 (fontified t) 18 21 (face font-lock-type-face fontified t) 21 23 (fontified t) 23 28 (face font-lock-type-face fontified t) 28 29 (fontified t) 29 34 (face font-lock-type-face fontified t) 34 36 (fontified t) 36 48 (face font-lock-type-face fontified t) 48 51 (fontified t) 51 52 (fontified t syntax-table (1)) 52 53 (fontified t) 53 58 (face font-lock-type-face fontified t) 58 60 (fontified t) 60 72 (face font-lock-type-face fontified t) 72 77 (fontified t) 77 80 (face font-lock-type-face fontified t) 80 82 (fontified t) 82 87 (face font-lock-type-face fontified t) 87 88 (fontified t) 88 93 (face font-lock-type-face fontified t) 93 95 (fontified t) 95 109 (face font-lock-type-face fontified t) 109 112 (fontified t) 112 113 (fontified t syntax-table (1)) 113 114 (fontified t) 114 119 (face font-lock-type-face fontified t) 119 121 (fontified t) 121 135 (face font-lock-type-face fontified t) 135 140 (fontified t) 140 143 (face font-lock-type-face fontified t) 143 145 (fontified t) 145 150 (face font-lock-type-face fontified t) 150 151 (fontified t) 151 156 (face font-lock-type-face fontified t) 156 158 (fontified t) 158 173 (face font-lock-type-face fontified t) 173 176 (fontified t) 176 177 (fontified t syntax-table (1)) 177 178 (fontified t) 178 183 (face font-lock-type-face fontified t) 183 185 (fontified t) 185 200 (face font-lock-type-face fontified t) 200 205 (fontified t) 205 208 (face font-lock-type-face fontified t) 208 210 (fontified t) 210 215 (face font-lock-type-face fontified t) 215 216 (fontified t) 216 221 (face font-lock-type-face fontified t) 221 223 (fontified t) 223 248 (face font-lock-type-face fontified t) 248 251 (fontified t) 251 252 (fontified t syntax-table (1)) 252 253 (fontified t) 253 258 (face font-lock-type-face fontified t) 258 260 (fontified t) 260 285 (face font-lock-type-face fontified t) 285 290 (fontified t) 290 293 (face font-lock-type-face fontified t) 293 295 (fontified t) 295 300 (face font-lock-type-face fontified t) 300 301 (fontified t) 301 306 (face font-lock-type-face fontified t) 306 308 (fontified t) 308 330 (face font-lock-type-face fontified t) 330 333 (fontified t) 333 334 (fontified t syntax-table (1)) 334 335 (fontified t) 335 340 (face font-lock-type-face fontified t) 340 342 (fontified t) 342 364 (face font-lock-type-face fontified t) 364 366 (fontified t) 366 372 (fontified t) 372 373 (fontified t syntax-table (1)) 373 374 (fontified t) 374 379 (face font-lock-type-face fontified t) 379 381 (fontified t) 381 389 (face font-lock-type-face fontified t) 389 390 (fontified t) 390 403 (face font-lock-type-face fontified t) 403 405 (fontified t) 405 418 (face font-lock-type-face fontified t) 418 427 (fontified t)) . 1262) (undo-tree-id267 . -426) (undo-tree-id268 . -426) (undo-tree-id269 . -426) (undo-tree-id270 . -426) 1688) nil (25817 8576 213538 889000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1524 . 1525) (nil fontified nil 1098 . 1525) (1098 . 1525)) nil (25817 8576 213528 277000) 0 nil])
([nil nil ((1530 . 1531) (#("	" 0 1 (fontified nil)) . 1529) (undo-tree-id256 . -1) (1528 . 1531) (#("
" 0 1 (fontified t)) . -1525) (undo-tree-id257 . -1) (#("	" 0 1 (fontified t)) . -1526) (undo-tree-id258 . -1) (#("	" 0 1 (fontified t)) . -1527) (undo-tree-id259 . -1) 1528 (#("
" 0 1 (fontified t rear-nonsticky t)) . -1525) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#("	" 0 1 (fontified t)) . -1526) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#("	" 0 1 (fontified t)) . -1527) (undo-tree-id264 . -1) (undo-tree-id265 . -1) 1528 (1523 . 1524) 1524 (1467 . 1468) 1491 (1388 . 1389) 1408 (1303 . 1304) 1319 (1238 . 1239) 1250 (1175 . 1176) 1183 (1116 . 1117) 1120 (1099 . 1100) 1103 (#("	" 0 1 (fontified t)) . -1115) (#("	" 0 1 (fontified t)) . -1174) (#("	" 0 1 (fontified t)) . -1237) (#("	" 0 1 (fontified t)) . -1302) (#("	" 0 1 (fontified t)) . -1387) (#("	" 0 1 (fontified t)) . -1466) 1465 (#("	" 0 1 (fontified t)) . -1522) (undo-tree-id266 . -1) 1523 (1525 . 1527)) nil (25817 8576 213517 315000) 0 nil])
([nil nil ((1026 . 1031) (#("Error" 0 5 (fontified nil)) . 1026) (1026 . 1031) (#("Error" 0 5 (face font-lock-type-face fontified t)) . -1026) (undo-tree-id248 . -5) (undo-tree-id249 . -5) (undo-tree-id250 . -5) (undo-tree-id251 . -5) 1031 (1026 . 1031) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1026) (undo-tree-id252 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1027) (undo-tree-id253 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1028) (undo-tree-id254 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1029) (undo-tree-id255 . -1) 1030) nil (25817 8576 213472 73000) 0 nil])
([nil nil ((1107 . 1113) (#("v" 0 1 (fontified t)) . -1107) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#("a" 0 1 (fontified t)) . -1108) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (#("l" 0 1 (fontified t)) . -1109) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#("u" 0 1 (fontified t)) . -1110) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (#("e" 0 1 (fontified t)) . -1111) (undo-tree-id296 . -1) 1112 (t 25817 8576 228319 570000)) nil (25817 8585 915149 67000) 0 nil])
([nil nil ((#("impl From<ser::SerenityError> for Error {
	fn from(value: ser::SerenityError) -> Self {
		use ser::SerenityError as Ser;
		use ser::ModelError as Model;
		}
}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 13 (face font-lock-constant-face fontified t) 13 15 (fontified t) 15 28 (face font-lock-type-face fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 33 (face font-lock-keyword-face fontified t) 33 34 (fontified t) 34 39 (face font-lock-type-face fontified t) 39 42 (fontified t) 42 43 (fontified t) 43 45 (face font-lock-keyword-face fontified t) 45 46 (fontified t) 46 50 (face font-lock-function-name-face fontified t) 50 51 (fontified t) 51 56 (face font-lock-variable-name-face fontified t) 56 58 (fontified t) 58 61 (face font-lock-constant-face fontified t) 61 63 (fontified t) 63 76 (face font-lock-type-face fontified t) 76 79 (fontified t) 79 80 (syntax-table (1) fontified t) 80 81 (fontified t) 81 85 (face font-lock-type-face fontified t) 85 90 (fontified t) 90 93 (face font-lock-keyword-face fontified t) 93 94 (fontified t) 94 97 (face font-lock-constant-face fontified t) 97 99 (fontified t) 99 112 (face font-lock-type-face fontified t) 112 113 (fontified t) 113 115 (face font-lock-keyword-face fontified t) 115 116 (fontified t) 116 119 (face font-lock-type-face fontified t) 119 123 (fontified t) 123 126 (face font-lock-keyword-face fontified t) 126 127 (fontified t) 127 130 (face font-lock-constant-face fontified t) 130 132 (fontified t) 132 142 (face font-lock-type-face fontified t) 142 143 (fontified t) 143 145 (face font-lock-keyword-face fontified t) 145 146 (fontified t) 146 151 (face font-lock-type-face fontified t) 151 153 (fontified t) 153 154 (fontified t) 154 157 (fontified t) 157 160 (fontified t)) . 1537) (undo-tree-id297 . -159) (undo-tree-id298 . -159) (undo-tree-id299 . -159) (undo-tree-id300 . -154) (undo-tree-id301 . -159) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -159) (undo-tree-id311 . -159) (undo-tree-id312 . -160) 1696 (t 25817 8585 928292 591000)) nil (25817 8590 755007 663000) 0 nil])
([nil nil ((1622 . 1623) (#("	" 0 1 (fontified nil)) . 1621) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (1620 . 1623) (apply yas--snippet-revive 1572 1617 #s(yas--snippet nil (#s(yas--field 1 1581 1616 nil nil nil t #s(yas--exit 1617 nil))) #s(yas--exit 1617 nil) 3 nil #s(yas--field 1 1581 1616 nil nil nil t #s(yas--exit 1617 nil)) nil nil)) (apply yas--snippet-revive 1596 1616 #s(yas--snippet nil (#s(yas--field 1 1610 1615 nil nil nil t #s(yas--exit 1616 nil))) #s(yas--exit 1616 nil) 4 nil #s(yas--field 1 1610 1615 nil nil nil t #s(yas--exit 1616 nil)) #s(yas--field 1 1581 1616 nil nil nil t #s(yas--exit 1617 nil)) nil)) (1611 . 1615) (#("()" 0 2 (fontified nil)) . 1611) (undo-tree-id368 . -2) (1610 . 1611) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1610 1615 nil nil nil t #s(yas--exit 1616 nil))) #s(yas--exit 1616 nil) 4 nil #s(yas--field 1 1610 1615 nil nil nil t #s(yas--exit 1616 nil)) #s(yas--field 1 1581 1616 nil nil nil t #s(yas--exit 1617 nil)) nil)) (1596 . 1613) (#("DatabaseError(${1:()})$0" 0 24 (fontified nil)) . 1596) (undo-tree-id369 . -24) (1596 . 1620) (#("DatabaseError(…)" 0 16 (fontified nil)) . -1596) (undo-tree-id370 . -16) (1596 . 1612) (1582 . 1596) (#("()" 0 2 (fontified nil)) . 1582) (undo-tree-id371 . -2) (1581 . 1582) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1581 1616 nil nil nil t #s(yas--exit 1617 nil))) #s(yas--exit 1617 nil) 3 nil #s(yas--field 1 1581 1616 nil nil nil t #s(yas--exit 1617 nil)) nil nil)) (1572 . 1584) (#("Internal(${1:()})$0" 0 19 (fontified nil)) . 1572) (1572 . 1591) (#("Intern" 0 6 (fontified nil)) . 1572) (1572 . 1578) (#("Internal(…)" 0 11 (fontified nil)) . -1572) (1572 . 1583) (#("Intern" 0 6 (face font-lock-type-face fontified t)) . -1572) (undo-tree-id372 . -6) 1578 (1570 . 1578) (1565 . 1570) (#("u" 0 1 (fontified t)) . -1565) (undo-tree-id373 . -1) (#("s" 0 1 (fontified t)) . -1566) (undo-tree-id374 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -1567) (undo-tree-id375 . -1) (#(" " 0 1 (fontified t)) . -1568) (undo-tree-id376 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -1569) (undo-tree-id377 . -1) 1570 (#("e" 0 1 (face font-lock-constant-face fontified t)) . -1570) (undo-tree-id378 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -1571) (undo-tree-id379 . -1) (#(":" 0 1 (fontified t)) . -1572) (undo-tree-id380 . -1) (#(":" 0 1 (fontified t)) . -1573) (undo-tree-id381 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1574) (undo-tree-id382 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1575) (undo-tree-id383 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1576) (undo-tree-id384 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1577) (undo-tree-id385 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1578) (undo-tree-id386 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1579) (undo-tree-id387 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1580) (undo-tree-id388 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -1581) (undo-tree-id389 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1582) (undo-tree-id390 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1583) (undo-tree-id391 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1584) (undo-tree-id392 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1585) (undo-tree-id393 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1586) (undo-tree-id394 . -1) (#(" " 0 1 (fontified t)) . -1587) (undo-tree-id395 . -1) (#("a" 0 1 (fontified t)) . -1588) (undo-tree-id396 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -1589) (undo-tree-id397 . -1) (#(" " 0 1 (fontified t)) . -1590) (undo-tree-id398 . -1) 1591 (1587 . 1591) (1574 . 1587) (#("Seren" 0 5 (fontified nil)) . 1574) (1574 . 1579) (#("SerenityError" 0 13 (fontified nil)) . -1574) (1574 . 1587) (#("Seren" 0 5 (face font-lock-type-face fontified t)) . -1574) (undo-tree-id399 . -5) 1579 (1572 . 1579) (1565 . 1572) (1562 . 1565) (#("
" 0 1 (fontified t)) . -1562) (undo-tree-id400 . -1) 1563 (#("]" 0 1 (fontified t)) . -1566) (undo-tree-id401 . -1) 1567 (1566 . 1567) (#("	" 0 1 (fontified nil)) . -1565) (undo-tree-id402 . -1) (1566 . 1567) (1564 . 1566) (#("		" 0 2 (fontified nil)) . 1563) (undo-tree-id403 . -2) (1562 . 1566) (1553 . 1562) (1533 . 1553) (t 25817 8590 771612 479000)) nil (25817 9184 754451 238000) 0 nil])
([nil nil ((#("impl From<pg::Error> for Error {
	fn from(value: pg::Error) -> Self {
		Error::Internal(InternalError::DatabaseError(value))
	}
}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 12 (face font-lock-constant-face fontified t) 12 14 (fontified t) 14 19 (face font-lock-type-face fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 24 (face font-lock-keyword-face fontified t) 24 25 (fontified t) 25 30 (face font-lock-type-face fontified t) 30 33 (fontified t) 33 34 (fontified t) 34 36 (face font-lock-keyword-face fontified t) 36 37 (fontified t) 37 39 (face font-lock-function-name-face fontified t) 39 41 (face font-lock-function-name-face fontified t) 41 42 (fontified t) 42 47 (face font-lock-variable-name-face fontified t) 47 49 (fontified t) 49 51 (face font-lock-constant-face fontified t) 51 52 (fontified t) 52 53 (fontified t) 53 58 (face font-lock-type-face fontified t) 58 61 (fontified t) 61 62 (syntax-table (1) fontified t) 62 63 (fontified t) 63 67 (face font-lock-type-face fontified t) 67 70 (fontified t) 70 72 (fontified t) 72 76 (face font-lock-type-face fontified t) 76 77 (face font-lock-type-face fontified t) 77 79 (fontified t) 79 87 (face font-lock-type-face fontified t) 87 88 (fontified t) 88 93 (face font-lock-type-face fontified t) 93 101 (face font-lock-type-face fontified t) 101 103 (fontified t) 103 105 (face font-lock-type-face fontified t) 105 109 (face font-lock-type-face fontified t) 109 111 (face font-lock-type-face fontified t) 111 116 (face font-lock-type-face fontified t) 116 125 (fontified t) 125 131 (fontified t)) . 1627) (undo-tree-id356 . -130) (undo-tree-id357 . -130) (undo-tree-id358 . -130) (undo-tree-id359 . -130) (undo-tree-id360 . -125) (undo-tree-id361 . -130) (undo-tree-id362 . -130) (undo-tree-id363 . -131) 1757) nil (25817 9184 754313 735000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1670) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (1671 . 1672) (1668 . 1671) (1667 . 1668) (1656 . 1667) (#(" " 0 1 (fontified t)) . -1656) (undo-tree-id343 . -1) (#("f" 0 1 (fontified t)) . -1657) (undo-tree-id344 . -1) (#("o" 0 1 (fontified t)) . -1658) (undo-tree-id345 . -1) 1659 (1656 . 1659) (#(">" 0 1 (syntax-table (1) fontified t)) . -1656) (undo-tree-id346 . -1) 1657 (1648 . 1657) (1627 . 1648) (1623 . 1627) (#("b" 0 1 (fontified t)) . -1623) (undo-tree-id347 . -1) (#("b" 0 1 (fontified t)) . -1624) (undo-tree-id348 . -1) 1625 (1623 . 1625) (#("(" 0 1 (fontified t)) . -1623) (undo-tree-id349 . -1) (#("l" 0 1 (fontified t)) . -1624) (undo-tree-id350 . -1) (#("o" 0 1 (fontified t)) . -1625) (undo-tree-id351 . -1) (#("g" 0 1 (fontified t)) . -1626) (undo-tree-id352 . -1) (#("e" 0 1 (fontified t)) . -1627) (undo-tree-id353 . -1) (#("r" 0 1 (fontified t)) . -1628) (undo-tree-id354 . -1) (#("r" 0 1 (fontified t)) . -1629) (undo-tree-id355 . -1) 1630 (1623 . 1630)) nil (25817 9184 754281 284000) 0 nil])
([nil nil ((1668 . 1671)) nil (25817 9184 754173 876000) 0 nil])
([nil nil ((apply yas--snippet-revive 1776 1786 #s(yas--snippet nil (#s(yas--field 1 1780 1785 nil nil nil t #s(yas--exit 1786 nil))) #s(yas--exit 1786 nil) 7 nil #s(yas--field 1 1780 1785 nil nil nil t #s(yas--exit 1786 nil)) nil nil)) (1781 . 1785) (#("()" 0 2 (fontified nil)) . 1781) (1780 . 1781) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1780 1785 nil nil nil t #s(yas--exit 1786 nil))) #s(yas--exit 1786 nil) 7 nil #s(yas--field 1 1780 1785 nil nil nil t #s(yas--exit 1786 nil)) nil nil)) (1776 . 1783) (#("Log(${1:()})$0" 0 14 (fontified nil)) . 1776) (1776 . 1790) (#("Log" 0 3 (fontified nil)) . 1776) (1776 . 1779) (#("Log(…)" 0 6 (fontified nil)) . -1776) (1776 . 1782) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -1776) (undo-tree-id313 . -3) 1779 (1777 . 1779) (1769 . 1777) (1766 . 1769) (#("	" 0 1 (fontified nil)) . -1768) (undo-tree-id314 . -1) (1769 . 1770) (1766 . 1769) (1762 . 1766) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1762) (undo-tree-id315 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1763) (undo-tree-id316 . -1) (#(" " 0 1 (fontified t)) . -1764) (undo-tree-id317 . -1) 1765 (1747 . 1765) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1747) (undo-tree-id318 . -1) 1748 (1738 . 1748) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -1738) (undo-tree-id319 . -1) (#(":" 0 1 (fontified t)) . -1739) (undo-tree-id320 . -1) 1740 (#(":" 0 1 (fontified t)) . -1740) (undo-tree-id321 . -1) (#("l" 0 1 (fontified t)) . -1741) (undo-tree-id322 . -1) (#("o" 0 1 (fontified t)) . -1742) (undo-tree-id323 . -1) (#("g" 0 1 (fontified t)) . -1743) (undo-tree-id324 . -1) 1744 (1734 . 1744) (#("c" 0 1 (fontified t)) . -1734) (undo-tree-id325 . -1) (#("r" 0 1 (fontified t)) . -1735) (undo-tree-id326 . -1) (#("a" 0 1 (fontified t)) . -1736) (undo-tree-id327 . -1) (#("t" 0 1 (fontified t)) . -1737) (undo-tree-id328 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -1738) (undo-tree-id329 . -1) (#(":" 0 1 (fontified t)) . -1739) (undo-tree-id330 . -1) 1740 (1734 . 1740) (#("L" 0 1 (face font-lock-type-face fontified t)) . -1734) (undo-tree-id331 . -1) 1735 (1725 . 1735) (1724 . 1725) (#("	" 0 1 (fontified nil)) . 1723) (undo-tree-id332 . -1) (1722 . 1725) (apply yas--snippet-revive 1678 1719 #s(yas--snippet nil (#s(yas--field 1 1687 1718 nil nil nil t #s(yas--exit 1719 nil))) #s(yas--exit 1719 nil) 5 nil #s(yas--field 1 1687 1718 nil nil nil t #s(yas--exit 1719 nil)) nil nil)) (apply yas--snippet-revive 1687 1718 #s(yas--snippet nil (#s(yas--field 1 1711 1717 nil nil nil t #s(yas--exit 1718 nil))) #s(yas--exit 1718 nil) 6 nil #s(yas--field 1 1711 1717 nil nil nil t #s(yas--exit 1718 nil)) #s(yas--field 1 1687 1718 nil nil nil t #s(yas--exit 1719 nil)) nil)) (1711 . 1717) (#("bb8err" 0 6 (fontified nil)) . 1711) (1711 . 1717) (#("bb8err" 0 6 (fontified t)) . -1711) (undo-tree-id333 . -6) (undo-tree-id334 . -6) 1717 (1712 . 1717) (#("()" 0 2 (fontified nil)) . 1712) (1711 . 1712) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1711 1717 nil nil nil t #s(yas--exit 1718 nil))) #s(yas--exit 1718 nil) 6 nil #s(yas--field 1 1711 1717 nil nil nil t #s(yas--exit 1718 nil)) #s(yas--field 1 1687 1718 nil nil nil t #s(yas--exit 1719 nil)) nil)) (1687 . 1714) (#("InternalError::Bb8Error(${1:()})$0" 0 34 (fontified nil)) . 1687) (1687 . 1721) (#("Internal" 0 8 (fontified nil)) . 1687) (1687 . 1695) (#("InternalError::Bb8Error(…)" 0 26 (fontified nil)) . -1687) (1687 . 1713) (#("Internal" 0 8 (face font-lock-type-face fontified t)) . -1687) (undo-tree-id335 . -8) (undo-tree-id336 . -8) 1695 (1688 . 1695) (#("()" 0 2 (fontified nil)) . 1688) (1687 . 1688) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1687 1718 nil nil nil t #s(yas--exit 1719 nil))) #s(yas--exit 1719 nil) 5 nil #s(yas--field 1 1687 1718 nil nil nil t #s(yas--exit 1719 nil)) nil nil)) (1678 . 1690) (#("Internal(${1:()})$0" 0 19 (fontified nil)) . 1678) (1678 . 1697) (#("Intern" 0 6 (fontified nil)) . 1678) (1678 . 1684) (#("Internal(…)" 0 11 (fontified nil)) . -1678) (1678 . 1689) (#("Intern" 0 6 (face font-lock-type-face fontified t)) . -1678) (undo-tree-id337 . -6) 1684 (1671 . 1684) (#("A" 0 1 (face font-lock-type-face fontified t)) . -1670) (undo-tree-id338 . -1) 1671 (1670 . 1671)) nil (25817 9184 754126 733000) 0 nil])
([nil nil ((#("impl From<bb8::RunError<pg::Error>> for Error {
	fn from(value: bb8::RunError<pg::Error>) -> Self {
		Error::Internal(InternalError::Bb8Error(value))
	}
}

impl From<crate::log::LogError> for Error {
	fn from(value: crate::log::LogError) -> Self {
		Error::Log(value)
	}
}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 13 (face font-lock-constant-face fontified t) 13 15 (fontified t) 15 23 (face font-lock-type-face fontified t) 23 24 (fontified t) 24 26 (face font-lock-constant-face fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 33 (face font-lock-type-face fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 38 (face font-lock-keyword-face fontified t) 38 39 (face font-lock-keyword-face fontified t) 39 40 (fontified t) 40 43 (face font-lock-type-face fontified t) 43 45 (face font-lock-type-face fontified t) 45 48 (fontified t) 48 49 (fontified t) 49 51 (face font-lock-keyword-face fontified t) 51 52 (fontified t) 52 56 (face font-lock-function-name-face fontified t) 56 57 (fontified t) 57 62 (face font-lock-variable-name-face fontified t) 62 64 (fontified t) 64 66 (face font-lock-constant-face fontified t) 66 67 (face font-lock-constant-face fontified t) 67 69 (fontified t) 69 77 (face font-lock-type-face fontified t) 77 78 (fontified t) 78 80 (face font-lock-constant-face fontified t) 80 82 (fontified t) 82 87 (face font-lock-type-face fontified t) 87 88 (fontified t) 88 89 (fontified t) 89 91 (fontified t) 91 92 (fontified t syntax-table (1)) 92 93 (fontified t) 93 97 (face font-lock-type-face fontified t) 97 100 (fontified t) 100 101 (fontified t) 101 102 (fontified t) 102 107 (face font-lock-type-face fontified t) 107 109 (fontified t) 109 117 (face font-lock-type-face fontified t) 117 118 (fontified t) 118 131 (face font-lock-type-face fontified t) 131 133 (fontified t) 133 141 (face font-lock-type-face fontified t) 141 150 (fontified t) 150 156 (fontified t) 156 160 (face font-lock-keyword-face fontified t) 160 161 (fontified t) 161 165 (face font-lock-type-face fontified t) 165 166 (fontified t) 166 167 (face font-lock-keyword-face fontified t) 167 171 (face font-lock-keyword-face fontified t) 171 173 (fontified t) 173 176 (face font-lock-constant-face fontified t) 176 178 (fontified t) 178 186 (face font-lock-type-face fontified t) 186 187 (fontified t) 187 188 (fontified t) 188 189 (face font-lock-keyword-face fontified t) 189 190 (face font-lock-keyword-face fontified t) 190 191 (face font-lock-keyword-face fontified t) 191 192 (fontified t) 192 197 (face font-lock-type-face fontified t) 197 198 (fontified t) 198 200 (fontified t) 200 201 (fontified t) 201 202 (face font-lock-keyword-face fontified t) 202 203 (face font-lock-keyword-face fontified t) 203 204 (fontified t) 204 208 (face font-lock-function-name-face fontified t) 208 209 (fontified t) 209 211 (face font-lock-variable-name-face fontified t) 211 214 (face font-lock-variable-name-face fontified t) 214 215 (fontified t) 215 216 (fontified t) 216 221 (face font-lock-keyword-face fontified t) 221 223 (fontified t) 223 226 (face font-lock-constant-face fontified t) 226 228 (fontified t) 228 236 (face font-lock-type-face fontified t) 236 239 (fontified t) 239 240 (fontified t syntax-table (1)) 240 241 (fontified t) 241 245 (face font-lock-type-face fontified t) 245 248 (fontified t) 248 250 (fontified t) 250 254 (face font-lock-type-face fontified t) 254 255 (face font-lock-type-face fontified t) 255 257 (fontified t) 257 260 (face font-lock-type-face fontified t) 260 264 (fontified t) 264 267 (fontified t) 267 268 (fontified t) 268 269 (fontified t) 269 270 (fontified t) 270 271 (fontified t) 271 274 (fontified t)) . 1793) (undo-tree-id404 . -274) (undo-tree-id405 . -273) (undo-tree-id406 . -274) (undo-tree-id407 . -272) (undo-tree-id408 . -12) (undo-tree-id409 . -274) (undo-tree-id410 . -150) (undo-tree-id411 . -150) (undo-tree-id412 . -150) (undo-tree-id413 . -150) (undo-tree-id414 . -274) (undo-tree-id415 . -274) (undo-tree-id416 . -274) (undo-tree-id417 . -274) (undo-tree-id418 . -274) (undo-tree-id419 . -274) (undo-tree-id420 . -274) 2067 (t 25817 9184 775866 627000)) nil (25817 9191 126503 689000) 0 nil])
([nil nil ((1780 . 1786) (#("v" 0 1 (fontified t)) . -1780) (undo-tree-id421 . -1) (#("l" 0 1 (fontified t)) . -1781) (undo-tree-id422 . -1) 1782 (1781 . 1782) (#("a" 0 1 (fontified t)) . -1781) (undo-tree-id423 . -1) (#("l" 0 1 (fontified t)) . -1782) (undo-tree-id424 . -1) (#("u" 0 1 (fontified t)) . -1783) (undo-tree-id425 . -1) (#("e" 0 1 (fontified t)) . -1784) (undo-tree-id426 . 1) (undo-tree-id427 . -1) 1785 (t 25817 9191 155830 571000)) nil (25817 9227 808322 880000) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-type-face fontified t)) . -35) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -36) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -37) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -38) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -39) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -40) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -41) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (#("," 0 1 (fontified t)) . -42) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (#(" " 0 1 (fontified t)) . -43) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) 44 (t 25817 9227 825627 416000)) nil (25817 10063 774671 611000) 0 nil])
([nil nil ((35 . 44) (1825 . 1832) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1825) (undo-tree-id524 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1826) (undo-tree-id525 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1827) (undo-tree-id526 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1828) (undo-tree-id527 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1829) (undo-tree-id528 . -1) 1830 (1829 . 1830) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1829) (undo-tree-id529 . -1) 1830 (1832 . 1835) (#("	" 0 1 (fontified nil)) . -1834) (undo-tree-id530 . -1) (1835 . 1836) (1832 . 1835) (1829 . 1832) (1808 . 1829) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1808) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1809) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1810) (undo-tree-id535 . -1) (undo-tree-id536 . -1) 1811 (1793 . 1811) (1789 . 1793) (1784 . 1789) (1783 . 1784) (#("	" 0 1 (fontified nil)) . 1782) (1782 . 1783) (1782 . 1783) (#("
" 0 1 (fontified t)) . -1782) (undo-tree-id537 . -1) (#("	" 0 1 (fontified t)) . -1783) (undo-tree-id538 . -1) 1784 (1783 . 1784) (#("	" 0 1 (fontified nil)) . 1782) (undo-tree-id539 . -1) (1781 . 1784) (t 25817 10063 792137 674000)) nil (25817 10633 773482 237000) 0 nil])
([nil nil ((1859 . 1865) (#("logctx" 0 6 (fontified nil)) . 1859) (undo-tree-id540 . -6) (1859 . 1865) (#("logctx" 0 6 (fontified t)) . -1859) (undo-tree-id541 . -6) (undo-tree-id542 . -6) (undo-tree-id543 . -6) (undo-tree-id544 . -6) (undo-tree-id545 . -6) (undo-tree-id546 . -6) (undo-tree-id547 . -6) (undo-tree-id548 . -6) (undo-tree-id549 . -6) (undo-tree-id550 . -6) 1865 (1860 . 1865) (#("()" 0 2 (fontified nil)) . 1860) (undo-tree-id551 . -2) (1859 . 1860) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1859 1865 nil nil nil t #s(yas--exit 1866 nil))) #s(yas--exit 1866 nil) 11 nil #s(yas--field 1 1859 1865 nil nil nil t #s(yas--exit 1866 nil)) nil nil)) (1855 . 1862) (#("Log(${1:()})$0" 0 14 (fontified nil)) . 1855) (1855 . 1869) (#("Log(…)" 0 6 (fontified nil)) . -1855) (1855 . 1861) (1846 . 1855) (t 25817 10633 790294 362000)) nil (25817 10654 808416 244000) 0 nil])
([nil nil ((apply yas--snippet-revive 1855 1866 #s(yas--snippet nil (#s(yas--field 1 1859 1865 nil nil nil t #s(yas--exit 1866 nil))) #s(yas--exit 1866 nil) 11 nil #s(yas--field 1 1859 1865 nil nil nil t #s(yas--exit 1866 nil)) nil nil))) nil (25817 10746 846803 978000) 0 nil])
([nil nil ((1986 . 1987) (1984 . 1985) (#("
" 0 1 (fontified t)) . -1984) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (#("	" 0 1 (fontified t)) . -1985) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (#("	" 0 1 (fontified t)) . -1986) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (#("
" 0 1 (fontified t)) . -1987) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (#("	" 0 1 (fontified t)) . -1988) (undo-tree-id568 . -1) (undo-tree-id569 . -1) 1989 (#("		" 0 2 (fontified nil)) . -2012) (undo-tree-id570 . -2) (undo-tree-id571 . -2) (undo-tree-id572 . -2) (undo-tree-id573 . -2) (2014 . 2015) (2011 . 2014) (1989 . 1990) (2009 . 2010) (1984 . 1987) (1973 . 1984) (1958 . 1973) (#("Log" 0 3 (fontified nil)) . 1958) (1958 . 1961) (#("LogErrorContext" 0 15 (fontified nil)) . -1958) (1958 . 1973) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -1958) (undo-tree-id574 . -3) 1961 (1942 . 1961) (1930 . 1942) (1928 . 1930) (1932 . 1950) (1930 . 1932) (1928 . 1930) (#("	" 0 1 (fontified nil)) . -1929) (undo-tree-id575 . -1) (1930 . 1931) (1928 . 1930) (1913 . 1928) (1898 . 1913) (#("Log" 0 3 (fontified nil)) . 1898) (1898 . 1901) (#("LogErrorContext" 0 15 (fontified nil)) . -1898) (1898 . 1913) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -1898) (undo-tree-id576 . -3) (undo-tree-id577 . -3) 1901 (1888 . 1901) (1885 . 1888) (#(">" 0 1 (syntax-table (1) fontified t)) . -1885) (undo-tree-id578 . -1) (undo-tree-id579 . -1) 1886 (1881 . 1886) (1873 . 1881) (t 25817 10654 826895 898000)) nil (25817 10746 846768 697000) 0 nil])
([nil nil ((2012 . 2013)) nil (25817 10746 846617 222000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -1877) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) 1878 (#("<" 0 1 (fontified t)) . -1877) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1878) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) 1879 (t 25817 10746 863279 115000)) nil (25817 10758 567349 709000) 0 nil])
([nil nil ((#("(logctx: crate::log::LogErrorContext) -> Context {
		Context::Log(logctx)
	}
" 0 1 (fontified t) 1 7 (face font-lock-variable-name-face fontified t) 7 9 (fontified t) 9 14 (face font-lock-keyword-face fontified t) 14 16 (fontified t) 16 19 (face font-lock-constant-face fontified t) 19 21 (fontified t) 21 36 (face font-lock-type-face fontified t) 36 39 (fontified t) 39 40 (fontified t syntax-table (1)) 40 41 (fontified t) 41 48 (face font-lock-type-face fontified t) 48 51 (fontified t) 51 53 (fontified t) 53 60 (face font-lock-type-face fontified t) 60 62 (fontified t) 62 65 (face font-lock-type-face fontified t) 65 66 (fontified t) 66 72 (fontified t) 72 73 (fontified t) 73 74 (fontified t) 74 76 (fontified t) 76 77 (fontified t)) . 1793) (undo-tree-id657 . -76) (undo-tree-id658 . -76) (undo-tree-id659 . -76) (undo-tree-id660 . -9) (undo-tree-id661 . -76) 1869 (t 25817 10758 583243 183000)) nil (25817 10789 693582 859000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1790) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (#("
" 0 1 (fontified t)) . -1791) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (#("	" 0 1 (fontified t)) . -1792) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("}" 0 1 (fontified t)) . -1793) (undo-tree-id654 . 1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) 1794) nil (25817 10789 693564 848000) 0 nil])
([nil nil ((1792 . 1793) (1791 . 1792) (t 25817 10789 749814 456000)) nil (25817 12756 180463 429000) 0 nil])
([nil nil ((2076 . 2083) (#("webh" 0 4 (fontified nil)) . 2076) (undo-tree-id0 . -4) (2076 . 2080) (#("webhctx" 0 7 (fontified nil)) . -2076) (undo-tree-id1 . -7) (2076 . 2083) (#("webh" 0 4 (fontified t)) . -2076) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) 2080 (2077 . 2080) (#("()" 0 2 (fontified nil)) . 2077) (undo-tree-id5 . -2) (2076 . 2077) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2076 2083 nil nil nil t #s(yas--exit 2084 nil))) #s(yas--exit 2084 nil) 1 nil #s(yas--field 1 2076 2083 nil nil nil t #s(yas--exit 2084 nil)) nil nil)) (2059 . 2079) (#("Context::Webhook(${1:()})$0" 0 27 (fontified nil)) . 2059) (2059 . 2086) (#("Contex" 0 6 (fontified nil)) . 2059) (2059 . 2065) (#("Context::Webhook(…)" 0 19 (fontified nil)) . -2059) (2059 . 2078) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -2059) (undo-tree-id6 . -6) 2065 (2059 . 2065) (#("A" 0 1 (face font-lock-type-face fontified t)) . -2059) (undo-tree-id7 . -1) (undo-tree-id8 . -1) 2060 (2059 . 2060) (2056 . 2059) (#("	" 0 1 (fontified nil)) . -2058) (undo-tree-id9 . -1) (2059 . 2060) (2056 . 2059) (2046 . 2056) (2045 . 2046) (2026 . 2045) (#("Web" 0 3 (fontified nil)) . 2026) (2026 . 2029) (#("WebhookErrorContext" 0 19 (fontified nil)) . -2026) (2026 . 2045) (#("Web" 0 3 (face font-lock-type-face fontified t)) . -2026) (undo-tree-id10 . -3) 2029 (2024 . 2029) (2017 . 2024) (#("web" 0 3 (fontified nil)) . 2017) (2017 . 2020) (#("webhook" 0 7 (fontified nil)) . -2017) (2017 . 2024) (#("web" 0 3 (fontified t)) . -2017) (undo-tree-id11 . -3) 2020 (2017 . 2020) (#("l" 0 1 (fontified t)) . -2017) (undo-tree-id12 . -1) (#("o" 0 1 (fontified t)) . -2018) (undo-tree-id13 . -1) (#("g" 0 1 (fontified t)) . -2019) (undo-tree-id14 . -1) (#(":" 0 1 (fontified t)) . -2020) (undo-tree-id15 . -1) (#(":" 0 1 (fontified t)) . -2021) (undo-tree-id16 . -1) 2022 (2010 . 2022) (#(" " 0 1 (fontified t)) . -2010) (undo-tree-id17 . -1) 2011 (2008 . 2011) (1994 . 2008) (1992 . 1994) (#("	" 0 1 (fontified nil)) . -1993) (undo-tree-id18 . -1) (1994 . 1995) (1992 . 1994) (1990 . 1992) (1983 . 1990) (#("Contex" 0 6 (fontified nil)) . 1983) (1983 . 1989) (#("Context" 0 7 (fontified nil)) . -1983) (1983 . 1990) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -1983) (undo-tree-id19 . -6) 1989 (1978 . 1989) (1977 . 1978) (1958 . 1977) (#("WebhookErrorContext" 0 19 (fontified nil)) . -1958) (1958 . 1977) (1956 . 1958) (1949 . 1956) (#("webh" 0 4 (fontified nil)) . 1949) (1949 . 1953) (#("webhook" 0 7 (fontified nil)) . -1949) (1949 . 1956) (#("webh" 0 4 (fontified t)) . -1949) (undo-tree-id20 . -4) (undo-tree-id21 . -4) 1953 (1932 . 1953) (1931 . 1932) (t 25817 12756 194738 772000)) nil (25817 24817 991029 580000) 0 nil])
([nil nil ((2089 . 2090)) nil (25817 24817 990932 686000) 0 nil])
([nil nil ((apply yas--snippet-revive 2059 2084 #s(yas--snippet nil (#s(yas--field 1 2076 2083 nil nil nil t #s(yas--exit 2084 nil))) #s(yas--exit 2084 nil) 1 nil #s(yas--field 1 2076 2083 nil nil nil t #s(yas--exit 2084 nil)) nil nil))) nil (25817 24821 517106 137000) 0 nil])
([nil nil ((2010 . 2011) (t 25817 24818 795 137000)) nil (25817 24821 517097 168000) 0 nil])
([nil nil ((2242 . 2249) (2239 . 2242) (#("	" 0 1 (fontified nil)) . -2241) (undo-tree-id27 . -1) (2242 . 2243) (2239 . 2242) (2237 . 2239) (2216 . 2237) (2205 . 2216) (#("m" 0 1 (fontified t)) . -2205) (undo-tree-id28 . -1) (#("s" 0 1 (fontified t)) . -2206) (undo-tree-id29 . -1) 2207 (2189 . 2207) (#("e" 0 1 (fontified t)) . -2189) (undo-tree-id30 . -1) 2190 (2179 . 2190) (2165 . 2179) (2163 . 2165) (#("	" 0 1 (fontified nil)) . -2164) (undo-tree-id31 . -1) (2165 . 2166) (2163 . 2165) (2151 . 2163) (#("r" 0 1 (fontified t)) . -2151) (undo-tree-id32 . -1) (#("o" 0 1 (fontified t)) . -2152) (undo-tree-id33 . -1) 2153 (2151 . 2153) (2130 . 2151) (2109 . 2130) (#("w" 0 1 (fontified t)) . -2109) (undo-tree-id34 . -1) (#("e" 0 1 (fontified t)) . -2110) (undo-tree-id35 . -1) (#("b" 0 1 (fontified t)) . -2111) (undo-tree-id36 . -1) (#("h" 0 1 (fontified t)) . -2112) (undo-tree-id37 . -1) (#("o" 0 1 (fontified t)) . -2113) (undo-tree-id38 . -1) (#("o" 0 1 (fontified t)) . -2114) (undo-tree-id39 . -1) (#("k" 0 1 (fontified t)) . -2115) (undo-tree-id40 . -1) 2116 (2113 . 2116) (2092 . 2113) (2091 . 2092) (t 25817 24821 527461 631000)) nil (25818 32788 179099 787000) 0 nil])
([nil nil ((2263 . 2271) (#("replct" 0 6 (fontified nil)) . 2263) (2263 . 2269) (#("replctx" 0 7 (fontified nil)) . 2263) (2263 . 2270) (#("replct" 0 1 (fontified nil) 1 6 (fontified nil)) . 2263) (2262 . 2269) (#("(${1:()})$0" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 2262) (2251 . 2273) (#("Replication(…)" 0 14 (fontified nil)) . 2251) (2249 . 2265)) ((#("::" 0 2 (fontified nil)) . 2249) (#("Replication(…)" 0 14 (fontified nil)) . 2251) (2251 . 2265) (#("Replication(${1:()})$0" 0 11 (face font-lock-type-face fontified nil) 11 12 (fontified nil) 12 13 (fontified nil) 13 14 (fontified nil) 14 15 (fontified nil) 15 16 (fontified nil) 16 17 (fontified nil) 17 18 (fontified nil) 18 19 (fontified nil) 19 20 (fontified nil) 20 21 (fontified nil) 21 22 (fontified nil)) . 2251) (2262 . 2273) (#("(r" 0 1 (fontified nil) 1 2 (fontified nil)) . 2262) (#("eplct" 0 5 (fontified nil)) . 2264) (2263 . 2269) (#("replctx" 0 7 (fontified nil)) . 2263) (2263 . 2270) (#("replct" 0 6 (fontified nil)) . 2263) (2263 . 2269) (#("replctx" 0 7 (fontified nil)) . 2263) (#(")" 0 1 (fontified t)) . 2270)) (25818 32790 241880 701000) 0 nil])
([nil nil ((2276 . 2277)) nil (25818 32791 536538 358000) 0 nil] [nil nil ((2276 . 2277)) (("
" . 2276) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1)) (25818 32787 559194 836000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1854) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (1855 . 1856) (1853 . 1855) (1850 . 1853) (1836 . 1849) (#("Inter" 0 5 (fontified nil)) . 1836) (1836 . 1841) (#("InternalError" 0 13 (fontified nil)) . -1836) (1836 . 1849) (#("Inter" 0 5 (face font-lock-type-face fontified t)) . -1836) (undo-tree-id1508 . -5) (undo-tree-id1509 . -5) (undo-tree-id1510 . -5) (undo-tree-id1511 . -5) (undo-tree-id1512 . -5) (undo-tree-id1513 . -5) 1841 (1836 . 1841) (1827 . 1835) (#("OptEr" 0 5 (fontified nil)) . 1827) (1827 . 1832) (#("OptError" 0 8 (fontified nil)) . -1827) (1827 . 1835) (#("OptEr" 0 5 (face font-lock-type-face fontified t)) . -1827) (undo-tree-id1514 . -5) (undo-tree-id1515 . -5) 1832 (1826 . 1832) (1815 . 1826) (#("WithConOptError" 0 7 (fontified nil) 7 15 (face font-lock-type-face fontified nil)) . 1815) (undo-tree-id1516 . -15) (1815 . 1822) (#("WithContext" 0 11 (fontified nil)) . -1815) (1815 . 1826) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -1815) (undo-tree-id1517 . -7) 1822 (1815 . 1822) (#("W" 0 1 (face font-lock-type-face fontified t)) . -1824) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1825) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1826) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -1827) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) 1828 (1824 . 1828) (apply yas--snippet-revive 1815 1825 #s(yas--snippet nil nil #s(yas--exit 1824 nil) 72 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1824 nil) 72 nil nil nil nil)) (1815 . 1825) (#("OptError<$0>" 0 12 (fontified nil)) . 1815) (1815 . 1827) (#("OptEr" 0 5 (fontified nil)) . 1815) (1815 . 1820) (#("OptError<…>" 0 11 (fontified nil)) . -1815) (1815 . 1826) (#("OptEr" 0 5 (face font-lock-type-face fontified t)) . -1815) (undo-tree-id1526 . -5) 1820 (1804 . 1820) (#("c" 0 1 (fontified t)) . -1804) (undo-tree-id1527 . -1) (#("r" 0 1 (fontified t)) . -1805) (undo-tree-id1528 . -1) (#("a" 0 1 (fontified t)) . -1806) (undo-tree-id1529 . -1) (#("t" 0 1 (fontified t)) . -1807) (undo-tree-id1530 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -1808) (undo-tree-id1531 . -1) (#(":" 0 1 (fontified t)) . -1809) (undo-tree-id1532 . -1) (#(":" 0 1 (fontified t)) . -1810) (undo-tree-id1533 . -1) (#("e" 0 1 (fontified t)) . -1811) (undo-tree-id1534 . -1) (#("r" 0 1 (fontified t)) . -1812) (undo-tree-id1535 . -1) (#("r" 0 1 (fontified t)) . -1813) (undo-tree-id1536 . -1) 1814 (#("o" 0 1 (fontified t)) . -1814) (undo-tree-id1537 . -1) 1815 (1804 . 1815) (#("c" 0 1 (fontified t)) . -1804) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (#("r" 0 1 (fontified t)) . -1805) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (#("a" 0 1 (fontified t)) . -1806) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (#("t" 0 1 (fontified t)) . -1807) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -1808) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (#(":" 0 1 (fontified t)) . -1809) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (#(":" 0 1 (fontified t)) . -1810) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (#("l" 0 1 (fontified t)) . -1811) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (#("o" 0 1 (fontified t)) . -1812) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (#("g" 0 1 (fontified t)) . -1813) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) 1814 (1808 . 1814) (1807 . 1808) (1794 . 1807) (1794 . 1795) (1793 . 1794) (t 25818 32791 552832 772000)) nil (25818 33150 298573 845000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -260) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id449 . -1) (undo-tree-id451 . -1) (#("$" 0 1 (fontified t)) . -261) (undo-tree-id453 . -1) (undo-tree-id455 . -1) (undo-tree-id457 . -1) (#("(" 0 1 (fontified t)) . -262) (undo-tree-id459 . -1) (undo-tree-id461 . -1) (undo-tree-id463 . -1) (#("d" 0 1 (fontified t)) . -263) (undo-tree-id465 . -1) (undo-tree-id467 . -1) (undo-tree-id469 . -1) (#("e" 0 1 (fontified t)) . -264) (undo-tree-id471 . -1) (undo-tree-id473 . -1) (undo-tree-id475 . -1) (#("r" 0 1 (fontified t)) . -265) (undo-tree-id477 . -1) (undo-tree-id479 . -1) (undo-tree-id481 . -1) (#("i" 0 1 (fontified t)) . -266) (undo-tree-id483 . -1) (undo-tree-id485 . -1) (undo-tree-id487 . -1) (#("v" 0 1 (fontified t)) . -267) (undo-tree-id489 . -1) (undo-tree-id491 . -1) (undo-tree-id493 . -1) (#("e" 0 1 (fontified t)) . -268) (undo-tree-id495 . -1) (undo-tree-id497 . -1) (undo-tree-id499 . -1) (#(" " 0 1 (fontified t)) . -269) (undo-tree-id501 . -1) (undo-tree-id503 . -1) (undo-tree-id505 . -1) (#(")" 0 1 (fontified t)) . -270) (undo-tree-id507 . -1) (undo-tree-id509 . -1) (undo-tree-id511 . -1) (undo-tree-id513 . -1) (#("?" 0 1 (face rust-question-mark fontified t)) . -271) (undo-tree-id514 . -1) (undo-tree-id516 . -1) 272 (269 . 270) (270 . 271) (261 . 262) (262 . 268) (262 . 264) (#(" " 0 1 (fontified t)) . -262) (undo-tree-id518 . -1) 263 (#(")" 0 1 (fontified t)) . 263) (262 . 263) (261 . 263) (t 25818 30130 615590 934000)) ((#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 261) (undo-tree-id1418 . -1) (#(" " 0 1 (fontified nil)) . 262) (262 . 264) (#(") " 0 1 (fontified nil) 1 2 (fontified nil)) . 262) (undo-tree-id1419 . -2) (#("derive" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 262) (#("$" 0 1 (fontified nil)) . 261) (#("?" 0 1 (face rust-question-mark fontified nil)) . 270) (#(" " 0 1 (fontified nil)) . 269) (260 . 272)) (25818 32787 542750 766000) 0 nil] [nil nil ((#("W" 0 1 (face font-lock-type-face fontified t)) . -520) (undo-tree-id56 . -1) (undo-tree-id58 . -1) (undo-tree-id60 . -1) (undo-tree-id62 . -1) (undo-tree-id64 . -1) 521 (#("i" 0 1 (face font-lock-type-face fontified t)) . -521) (undo-tree-id65 . -1) (undo-tree-id67 . -1) (undo-tree-id69 . -1) (undo-tree-id71 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -522) (undo-tree-id73 . -1) (undo-tree-id75 . -1) (undo-tree-id77 . -1) (undo-tree-id79 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -523) (undo-tree-id81 . -1) (undo-tree-id83 . -1) (undo-tree-id85 . -1) (undo-tree-id87 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -524) (undo-tree-id89 . -1) (undo-tree-id91 . -1) (undo-tree-id93 . -1) (undo-tree-id95 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -525) (undo-tree-id97 . -1) (undo-tree-id99 . -1) (undo-tree-id101 . -1) (undo-tree-id103 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -526) (undo-tree-id105 . -1) (undo-tree-id107 . -1) (undo-tree-id109 . -1) (undo-tree-id111 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -527) (undo-tree-id113 . -1) (undo-tree-id115 . -1) (undo-tree-id117 . -1) (undo-tree-id119 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -528) (undo-tree-id121 . -1) (undo-tree-id123 . -1) (undo-tree-id125 . -1) (undo-tree-id127 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -529) (undo-tree-id129 . -1) (undo-tree-id131 . -1) (undo-tree-id133 . -1) (undo-tree-id135 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -530) (undo-tree-id137 . -1) (undo-tree-id139 . -1) (undo-tree-id141 . -1) (undo-tree-id143 . -1) (#("<" 0 1 (syntax-table (1) fontified t)) . -531) (undo-tree-id145 . -1) (undo-tree-id147 . -1) (undo-tree-id149 . -1) (undo-tree-id151 . -1) (#("$" 0 1 (fontified t)) . -532) (undo-tree-id153 . -1) (undo-tree-id155 . -1) (undo-tree-id157 . -1) (undo-tree-id159 . -1) (#("t" 0 1 (fontified t)) . -533) (undo-tree-id161 . -1) (undo-tree-id163 . -1) (undo-tree-id165 . -1) (undo-tree-id167 . -1) (#("o" 0 1 (fontified t)) . -534) (undo-tree-id169 . -1) (undo-tree-id171 . -1) (undo-tree-id173 . -1) (undo-tree-id175 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -535) (undo-tree-id177 . -1) (undo-tree-id179 . -1) (undo-tree-id181 . -1) 536 (510 . 520) (508 . 510) (487 . 508) (t 25818 29379 542329 6000)) ((#("<$to as Contextualiza" 0 1 (syntax-table (1) fontified nil) 1 5 (fontified nil) 5 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 21 (face font-lock-type-face fontified nil)) . 487) (undo-tree-id430 . -21) (undo-tree-id431 . -21) (undo-tree-id432 . -21) (undo-tree-id433 . -21) (undo-tree-id434 . -21) (#("bl" 0 2 (face font-lock-type-face fontified nil)) . 508) (undo-tree-id435 . -2) (undo-tree-id436 . -2) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -2) (#("e>::Output" 0 1 (face font-lock-type-face fontified nil) 1 2 (syntax-table (1) fontified nil) 2 4 (fontified nil) 4 10 (face font-lock-type-face fontified nil)) . 510) (undo-tree-id440 . -9) (undo-tree-id441 . -9) (undo-tree-id442 . -9) (undo-tree-id443 . -9) (undo-tree-id444 . -9) (520 . 536)) (25818 30129 50648 278000) 0 nil] [nil nil ((649 . 659) (#("c" 0 1 (face font-lock-preprocessor-face fontified t)) . 649) (651 . 657) (#("nve" 0 3 (face font-lock-preprocessor-face fontified t)) . 651) (655 . 656) (#("si" 0 2 (face font-lock-preprocessor-face fontified t)) . 655) (658 . 662) (#("ns!" 0 3 (face font-lock-preprocessor-face fontified t)) . 658) (662 . 663) (#("{
	" 0 3 (fontified t)) . 662) (undo-tree-id41 . -3) (undo-tree-id42 . -3) (undo-tree-id43 . -3) (669 . 676) (#("[" 0 1 (fontified t)) . 669) (671 . 678) (#("]" 0 1 (fontified t)) . 671) (673 . 677) (#(" " 0 1 (fontified t)) . 681) (696 . 779) (697 . 702) (708 . 726) (710 . 717) (#("		" 0 2 (fontified t)) . 710) (713 . 722) (715 . 716) (#("e" 0 1 (fontified t)) . 715) (718 . 767) (719 . 726) (#("0" 0 1 (fontified t)) . 719) (721 . 740) (#("	" 0 1 (fontified t)) . 721) (725 . 753) (#("	" 0 1 (fontified t)) . 725) (730 . 739) (#("[" 0 1 (fontified t)) . 730) (732 . 735) (#("]" 0 1 (fontified t)) . 732) (734 . 742) (#(" " 0 1 (fontified t)) . 739) (753 . 761) (754 . 757) (758 . 759) (759 . 760) (760 . 848) (761 . 784) (762 . 777) (765 . 766) (766 . 774) (768 . 782) (#("		" 0 2 (fontified t)) . 768) (778 . 795) (779 . 787) (780 . 786) (#("p" 0 1 (fontified t)) . 780) (782 . 784) (784 . 786) (#("	" 0 1 (fontified t)) . 784) (#("	(err:" 0 2 (fontified t) 2 5 (face font-lock-variable-name-face fontified t) 5 6 (fontified t)) . 788) (795 . 808) (#(") -" 0 3 (fontified t)) . 800) (804 . 807) (822 . 844) (827 . 830) (828 . 833) (831 . 835) (#("		" 0 2 (fontified t)) . 831) (845 . 851) (#("			" 0 3 (fontified t)) . 845) (895 . 901) (#("			" 0 3 (fontified t)) . 895) (919 . 930) (#("		" 0 2 (fontified t)) . 919) (923 . 925) (#("	" 0 1 (fontified t)) . 923) (927 . 931) (#("	(" 0 2 (fontified t)) . 927) (930 . 955) (933 . 940) (935 . 959) (#(":" 0 1 (fontified t)) . 935) (937 . 946) (941 . 949) (942 . 947) (943 . 948) (945 . 970) (953 . 1066) (954 . 957) (963 . 1009) (#("		" 0 2 (fontified t)) . 963) (989 . 991) (#("	" 0 1 (fontified t)) . 989) (993 . 1070) (#("	(s" 0 2 (fontified t) 2 3 (face font-lock-variable-name-face fontified t)) . 993) (997 . 1006) (998 . 1005) (999 . 1009) (1001 . 1028) (1002 . 1009) (1003 . 1053) (#(") -" 0 3 (fontified t)) . 1021) (1025 . 1028) (1034 . 1085) (#("		" 0 2 (fontified t)) . 1034) (1067 . 1071) (#("		" 0 2 (fontified t)) . 1067) (1099 . 1103) (#("		" 0 2 (fontified t)) . 1099) (1116 . 1122) (#("			" 0 3 (fontified t)) . 1116) (1175 . 1181) (#("			" 0 3 (fontified t)) . 1175) (1238 . 1244) (#("			" 0 3 (fontified t)) . 1238) (1303 . 1309) (#("			" 0 3 (fontified t)) . 1303) (1388 . 1394) (#("			" 0 3 (fontified t)) . 1388) (1467 . 1473) (#("			" 0 3 (fontified t)) . 1467) (1524 . 1535) (#("		" 0 2 (fontified t)) . 1524) (1528 . 1530) (#("	" 0 1 (fontified t)) . 1528) (1532 . 1538) (#("	(" 0 2 (fontified t)) . 1532) (1535 . 1550) (#("g" 0 1 (face font-lock-variable-name-face fontified t)) . 1535) (1537 . 1543) (1538 . 1539) (1539 . 1573) (1540 . 1556) (1541 . 1558) (#("pg" 0 2 (face font-lock-constant-face fontified t)) . 1541) (1544 . 1547) (1545 . 1554) (1553 . 1643) (1554 . 1557) (1563 . 1604) (#("		" 0 2 (fontified t)) . 1563) (1618 . 1620) (#("	" 0 1 (fontified t)) . 1618) (1622 . 1693) (#("	(b" 0 2 (fontified t) 2 3 (face font-lock-variable-name-face fontified t)) . 1622) (1626 . 1645) (#("8" 0 1 (face font-lock-variable-name-face fontified t)) . 1626) (1628 . 1634) (1629 . 1631) (1630 . 1655) (1631 . 1670) (1632 . 1650) (#(")" 0 1 (fontified t)) . 1656) (#("-" 0 1 (fontified t)) . 1658) (1660 . 1663) (1669 . 1694) (#("		" 0 2 (fontified t)) . 1669) (1676 . 1679) (1678 . 1707) (1720 . 1722) (#("	" 0 1 (fontified t)) . 1720) (1724 . 1826) (#("	" 0 1 (fontified t)) . 1724) (1726 . 1728) (1727 . 1741) (1728 . 1731) (1729 . 1754) (1730 . 1740) (1731 . 1732) (1732 . 1791) (1733 . 1750) (1734 . 1759) (1758 . 1763) (1759 . 1765) (1764 . 1778) (1765 . 1767) (#("{" 0 1 (fontified t)) . 1765) (1767 . 1778) (#("		Er" 0 2 (fontified t) 2 4 (face font-lock-type-face fontified t)) . 1767) (1773 . 1776) (1774 . 1777) (1776 . 1781) (1779 . 1847) (1780 . 1793) (1783 . 1810) (1784 . 1793) (1785 . 1787) (1786 . 1800) (1787 . 1788) (1788 . 1807) (#("	" 0 1 (fontified t)) . 1788) (1790 . 1791) (1791 . 1793) 651 (t 25818 9921 87137 357000)) ((#("  " 0 2 (fontified t)) . 1791) (#("
" 0 1 (fontified nil)) . 1790) (1788 . 1789) (#("    noctx.into()
  " 0 19 (fontified t)) . 1788) (#(";" 0 1 (fontified nil)) . 1787) (#(" = value.into(" 0 14 (fontified nil)) . 1786) (#("ro" 0 2 (face font-lock-type-face fontified nil)) . 1785) (#("t noctx:E" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (fontified nil) 2 7 (face font-lock-variable-name-face fontified nil) 7 8 (fontified nil) 8 9 (face font-lock-type-face fontified nil)) . 1784) (#("::LogError) -> Self {
    l" 0 2 (fontified nil) 2 10 (face font-lock-type-face fontified nil) 10 13 (fontified nil) 13 14 (fontified nil syntax-table (1)) 14 15 (fontified nil) 15 17 (face font-lock-type-face fontified nil) 17 19 (fontified nil face font-lock-type-face) 19 22 (fontified nil) 22 26 (fontified t) 26 27 (face font-lock-keyword-face fontified t)) . 1783) (#("value:crate::" 0 5 (face font-lock-variable-name-face fontified nil) 5 6 (fontified nil) 6 11 (face font-lock-keyword-face fontified nil) 11 13 (fontified nil)) . 1780) (#("Error>for WithContext<Error>where Error:Contextualizable {
  fn from" 0 5 (face font-lock-type-face fontified nil) 5 6 (fontified nil) 6 9 (face font-lock-keyword-face fontified nil) 9 10 (fontified nil) 10 21 (face font-lock-type-face fontified nil) 21 22 (fontified nil) 22 27 (face font-lock-type-face fontified nil) 27 28 (fontified nil) 28 33 (face font-lock-keyword-face fontified nil) 33 34 (fontified nil) 34 39 (face font-lock-variable-name-face fontified nil) 39 40 (fontified nil) 40 56 (face font-lock-type-face fontified nil) 56 59 (fontified nil) 59 61 (fontified t) 61 63 (face font-lock-keyword-face fontified t) 63 64 (fontified t) 64 68 (face font-lock-function-name-face fontified t)) . 1779) (#("log::" 0 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil)) . 1776) (#("ate" 0 3 (face font-lock-keyword-face fontified nil)) . 1774) (#("m<c" 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-keyword-face fontified nil)) . 1773) (1767 . 1771) (#("
  }
impl F" 0 5 (fontified t) 5 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 11 (face font-lock-type-face fontified t)) . 1767) (1765 . 1766) (#(" }" 0 2 (fontified nil)) . 1765) (#("::Log(logerr)
" 0 2 (fontified nil) 2 5 (face font-lock-type-face fontified nil) 5 14 (fontified nil)) . 1764) (#("{
    " 0 2 (fontified nil) 2 6 (fontified t)) . 1759) (#(" Self" 0 1 (fontified nil) 1 5 (face font-lock-type-face fontified nil)) . 1758) (#("Error {
  fn from(logerr:" 0 5 (face font-lock-type-face fontified nil) 5 8 (fontified nil) 8 10 (fontified t) 10 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 17 (face font-lock-function-name-face fontified t) 17 18 (fontified t) 18 24 (face font-lock-variable-name-face fontified t) 24 25 (fontified t)) . 1734) (#("log::LogError>for" 0 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil) 5 13 (face font-lock-type-face fontified nil) 13 14 (fontified nil) 14 17 (face font-lock-keyword-face fontified nil)) . 1733) (#(" = value.into();
    noctx.into()
  }

  }
impl From<crate:" 0 17 (fontified nil) 17 43 (fontified t) 43 47 (face font-lock-keyword-face fontified t) 47 48 (fontified t) 48 52 (face font-lock-type-face fontified t) 52 53 (fontified t) 53 58 (face font-lock-keyword-face fontified t) 58 59 (fontified t)) . 1732) (#("o" 0 1 (face font-lock-type-face fontified nil)) . 1731) (#("t noctx:Er" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (fontified nil) 2 7 (face font-lock-variable-name-face fontified nil) 7 8 (fontified nil) 8 10 (face font-lock-type-face fontified nil)) . 1730) (#("::Error>) -> Self {
    l" 0 2 (fontified nil) 2 7 (face font-lock-type-face fontified nil) 7 11 (fontified nil) 11 12 (fontified nil syntax-table (1)) 12 13 (fontified nil) 13 17 (face font-lock-type-face fontified nil) 17 20 (fontified nil) 20 24 (fontified t) 24 25 (face font-lock-keyword-face fontified t)) . 1729) (#("r<p" 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-constant-face fontified nil)) . 1728) (#("ue:bb8::RunErr" 0 2 (face font-lock-variable-name-face fontified nil) 2 3 (fontified nil) 3 6 (face font-lock-constant-face fontified nil) 6 8 (fontified nil) 8 14 (face font-lock-type-face fontified nil)) . 1727) (#("va" 0 2 (face font-lock-variable-name-face fontified nil)) . 1726) (1724 . 1725) (#("  }
impl From<bb8::RunError<pg::Error> >for WithContext<Error>where Error:Contextualizable {
  fn from" 0 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 17 (face font-lock-constant-face fontified t) 17 19 (fontified t) 19 27 (face font-lock-type-face fontified t) 27 28 (fontified t) 28 30 (face font-lock-constant-face fontified t) 30 32 (fontified t) 32 37 (face font-lock-type-face fontified t) 37 40 (fontified t) 40 43 (face font-lock-keyword-face fontified t) 43 44 (fontified t) 44 55 (face font-lock-type-face fontified t) 55 56 (fontified t) 56 61 (face font-lock-type-face fontified t) 61 62 (fontified t) 62 67 (face font-lock-keyword-face fontified t) 67 68 (fontified t) 68 73 (face font-lock-variable-name-face fontified t) 73 74 (fontified t) 74 90 (face font-lock-type-face fontified t) 90 95 (fontified t) 95 97 (face font-lock-keyword-face fontified t) 97 98 (fontified t) 98 102 (face font-lock-function-name-face fontified t)) . 1724) (1720 . 1721) (#("  " 0 2 (fontified t)) . 1720) (#("Error>) -> Self {
    Error::" 0 5 (face font-lock-type-face fontified nil) 5 9 (fontified nil) 9 10 (fontified nil syntax-table (1)) 10 11 (fontified nil) 11 15 (face font-lock-type-face fontified nil) 15 18 (fontified nil) 18 22 (fontified t) 22 27 (face font-lock-type-face fontified t) 27 29 (fontified t)) . 1678) (#("<pg" 0 1 (fontified nil) 1 3 (face font-lock-constant-face fontified nil)) . 1676) (1669 . 1671) (#("  fn from(bb8err:bb8::Run" 0 2 (fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-function-name-face fontified t) 9 10 (fontified t) 10 16 (face font-lock-variable-name-face fontified t) 16 17 (fontified t) 17 20 (face font-lock-constant-face fontified t) 20 22 (fontified t) 22 25 (face font-lock-type-face fontified t)) . 1669) (#("for" 0 3 (face font-lock-keyword-face fontified nil)) . 1660) (1658 . 1659) (1656 . 1657) (#(" }

  }
impl From<" 0 3 (fontified nil) 3 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 17 (face font-lock-type-face fontified t) 17 18 (fontified t)) . 1632) (#("Error = value.into();
    noctx.into()
" 0 5 (face font-lock-type-face fontified nil) 5 22 (fontified nil) 22 39 (fontified t)) . 1631) (#(") -> Self {
    let noctx" 0 3 (fontified nil) 3 4 (fontified nil syntax-table (1)) 4 5 (fontified nil) 5 9 (face font-lock-type-face fontified nil) 9 12 (fontified nil) 12 16 (fontified t) 16 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t) 20 25 (face font-lock-variable-name-face fontified t)) . 1630) (#("ro" 0 2 (face font-lock-type-face fontified nil)) . 1629) (#(":pg::E" 0 1 (fontified nil) 1 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil) 5 6 (face font-lock-type-face fontified nil)) . 1628) (1626 . 1627) (#("le {
  fn from(valu" 0 2 (face font-lock-type-face fontified nil) 2 5 (fontified nil) 5 7 (fontified t) 7 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 14 (face font-lock-function-name-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-variable-name-face fontified t)) . 1626) (1622 . 1625) (#("  }
impl From<pg::Error>for WithContext<Error>where Error:Contextualiza" 0 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 16 (face font-lock-constant-face fontified t) 16 18 (fontified t) 18 23 (face font-lock-type-face fontified t) 23 24 (fontified t) 24 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 39 (face font-lock-type-face fontified t) 39 40 (fontified t) 40 45 (face font-lock-type-face fontified t) 45 46 (fontified t) 46 51 (face font-lock-keyword-face fontified t) 51 52 (fontified t) 52 57 (face font-lock-variable-name-face fontified t) 57 58 (fontified t) 58 71 (face font-lock-type-face fontified t)) . 1622) (1618 . 1619) (#("  " 0 2 (fontified t)) . 1618) (1563 . 1565) (#("  fn from(pgerr:pg::Error) -> Self {
    " 0 2 (fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-function-name-face fontified t) 9 10 (fontified t) 10 15 (face font-lock-variable-name-face fontified t) 15 16 (fontified t) 16 18 (face font-lock-constant-face fontified t) 18 20 (fontified t) 20 25 (face font-lock-type-face fontified t) 25 28 (fontified t) 28 29 (fontified t syntax-table (1)) 29 30 (fontified t) 30 34 (face font-lock-type-face fontified t) 34 41 (fontified t)) . 1563) (#("for" 0 3 (face font-lock-keyword-face fontified nil)) . 1554) (#("> Self {
    let noctx:Error = value.into();
    noctx.into()
  }

  }
impl From<pg::Error" 0 1 (fontified nil syntax-table (1)) 1 2 (fontified nil) 2 6 (face font-lock-type-face fontified nil) 6 9 (fontified nil) 9 13 (fontified t) 13 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 22 (face font-lock-variable-name-face fontified t) 22 23 (fontified t) 23 28 (face font-lock-type-face fontified t) 28 71 (fontified t) 71 75 (face font-lock-keyword-face fontified t) 75 76 (fontified t) 76 80 (face font-lock-type-face fontified t) 80 81 (fontified t) 81 83 (face font-lock-constant-face fontified t) 83 85 (fontified t) 85 90 (face font-lock-type-face fontified t)) . 1553) (#(":Serenity" 0 1 (fontified nil) 1 9 (face font-lock-type-face fontified nil)) . 1545) (#("ser" 0 3 (face font-lock-constant-face fontified nil)) . 1544) (1541 . 1543) (#("{
  fn from(value" 0 2 (fontified nil) 2 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 11 (face font-lock-function-name-face fontified t) 11 12 (fontified t) 12 17 (face font-lock-variable-name-face fontified t)) . 1541) (#("Contextualizable" 0 16 (face font-lock-type-face fontified nil)) . 1540) (#(">for WithContext<Error>where Error" 0 1 (fontified nil) 1 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 16 (face font-lock-type-face fontified nil) 16 17 (fontified nil) 17 22 (face font-lock-type-face fontified nil) 22 23 (fontified nil) 23 28 (face font-lock-keyword-face fontified nil) 28 29 (fontified nil) 29 34 (face font-lock-variable-name-face fontified nil)) . 1539) (#("o" 0 1 (face font-lock-type-face fontified nil)) . 1538) (#("nityEr" 0 6 (face font-lock-type-face fontified nil)) . 1537) (1535 . 1536) (#("l From<ser::Ser" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (fontified nil) 2 6 (face font-lock-type-face fontified nil) 6 7 (fontified nil) 7 10 (face font-lock-constant-face fontified nil) 10 12 (fontified nil) 12 15 (face font-lock-type-face fontified nil)) . 1535) (1532 . 1534) (#("  }
im" 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t)) . 1532) (1528 . 1529) (#("  " 0 2 (fontified t)) . 1528) (1524 . 1526) (#("    
      " 0 11 (fontified t)) . 1524) (1467 . 1470) (#("      " 0 6 (fontified t)) . 1467) (1388 . 1391) (#("      " 0 6 (fontified t)) . 1388) (1303 . 1306) (#("      " 0 6 (fontified t)) . 1303) (1238 . 1241) (#("      " 0 6 (fontified t)) . 1238) (1175 . 1178) (#("      " 0 6 (fontified t)) . 1175) (1116 . 1119) (#("      " 0 6 (fontified t)) . 1116) (1099 . 1101) (#("    " 0 4 (fontified t)) . 1099) (1067 . 1069) (#("    " 0 4 (fontified t)) . 1067) (1034 . 1036) (#("  fn from(sererr:ser::SerenityError) -> Self {
    " 0 2 (fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-function-name-face fontified t) 9 10 (fontified t) 10 16 (face font-lock-variable-name-face fontified t) 16 17 (fontified t) 17 20 (face font-lock-constant-face fontified t) 20 22 (fontified t) 22 35 (face font-lock-type-face fontified t) 35 38 (fontified t) 38 39 (syntax-table (1) fontified t) 39 40 (fontified t) 40 44 (face font-lock-type-face fontified t) 44 51 (fontified t)) . 1034) (#("for" 0 3 (face font-lock-keyword-face fontified nil)) . 1025) (1021 . 1024) (#("value.into();
    noctx.into()
  }

  }
impl From<" 0 14 (fontified nil) 14 40 (fontified t) 40 44 (face font-lock-keyword-face fontified t) 44 45 (fontified t) 45 49 (face font-lock-type-face fontified t) 49 50 (fontified t)) . 1003) (#("Error =" 0 5 (face font-lock-type-face fontified nil) 5 7 (fontified nil)) . 1002) (#("or) -> Self {
    let noctx" 0 2 (face font-lock-type-face fontified nil) 2 5 (fontified nil) 5 6 (syntax-table (1) fontified nil) 6 7 (fontified nil) 7 11 (face font-lock-type-face fontified nil) 11 14 (fontified nil) 14 18 (fontified t) 18 21 (face font-lock-keyword-face fontified t) 21 22 (fontified t) 22 27 (face font-lock-variable-name-face fontified t)) . 1001) (#(":InternalE" 0 1 (fontified nil) 1 10 (face font-lock-type-face fontified nil)) . 999) (#("om(valu" 0 2 (face font-lock-function-name-face fontified nil) 2 3 (fontified nil) 3 7 (face font-lock-variable-name-face fontified nil)) . 998) (#(" {
  fn f" 0 3 (fontified nil) 3 5 (fontified t) 5 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face font-lock-function-name-face fontified t)) . 997) (993 . 996) (#("  }
impl From<InternalError>for WithContext<Error>where Error:Contextualizabl" 0 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 27 (face font-lock-type-face fontified t) 27 28 (fontified t) 28 31 (face font-lock-keyword-face fontified t) 31 32 (fontified t) 32 43 (face font-lock-type-face fontified t) 43 44 (fontified t) 44 49 (face font-lock-type-face fontified t) 49 50 (fontified t) 50 55 (face font-lock-keyword-face fontified t) 55 56 (fontified t) 56 61 (face font-lock-variable-name-face fontified t) 61 62 (fontified t) 62 77 (face font-lock-type-face fontified t)) . 993) (989 . 990) (#("  " 0 2 (fontified t)) . 989) (963 . 965) (#("  fn from(interr:InternalError) -> Self {
    " 0 2 (fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-function-name-face fontified t) 9 10 (fontified t) 10 16 (face font-lock-variable-name-face fontified t) 16 17 (fontified t) 17 30 (face font-lock-type-face fontified t) 30 33 (fontified t) 33 34 (syntax-table (1) fontified t) 34 35 (fontified t) 35 39 (face font-lock-type-face fontified t) 39 46 (fontified t)) . 963) (undo-tree-id44 . -42) (undo-tree-id45 . -42) (undo-tree-id46 . -42) (undo-tree-id47 . -42) (undo-tree-id48 . -42) (undo-tree-id49 . -42) (undo-tree-id50 . -42) (undo-tree-id51 . -42) (undo-tree-id52 . -42) (undo-tree-id53 . -42) (undo-tree-id54 . -42) (undo-tree-id55 . -42) (#("for" 0 3 (face font-lock-keyword-face fontified nil)) . 954) (#("> Self {
    let noctx:OptError<InternalError>  = value.into();
    noctx.into()
  }

  }
impl From<InternalError" 0 1 (syntax-table (1) fontified nil) 1 2 (fontified nil) 2 6 (face font-lock-type-face fontified nil) 6 9 (fontified nil) 9 13 (fontified t) 13 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 22 (face font-lock-variable-name-face fontified t) 22 23 (fontified t) 23 31 (face font-lock-type-face fontified t) 31 32 (fontified t) 32 45 (face font-lock-type-face fontified t) 45 90 (fontified t) 90 94 (face font-lock-keyword-face fontified t) 94 95 (fontified t) 95 99 (face font-lock-type-face fontified t) 99 100 (fontified t) 100 113 (face font-lock-type-face fontified t)) . 953) (#("izable {
  fn from(value:" 0 6 (face font-lock-type-face fontified nil) 6 9 (fontified nil) 9 11 (fontified t) 11 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 18 (face font-lock-function-name-face fontified t) 18 19 (fontified t) 19 24 (face font-lock-variable-name-face fontified t) 24 25 (fontified t)) . 945) (#("textu" 0 5 (face font-lock-type-face fontified nil)) . 943) (#("> :Co" 0 3 (fontified nil) 3 5 (face font-lock-type-face fontified nil)) . 942) (#("rnalErro" 0 8 (face font-lock-type-face fontified nil)) . 941) (#("OptError<" 0 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil)) . 937) (935 . 936) (#("or<InternalError> >where" 0 2 (face font-lock-type-face fontified nil) 2 3 (fontified nil) 3 16 (face font-lock-type-face fontified nil) 16 19 (fontified nil) 19 24 (face font-lock-keyword-face fontified nil)) . 935) (#("xt<OptE" 0 2 (face font-lock-type-face fontified nil) 2 3 (fontified nil) 3 7 (face font-lock-type-face fontified nil)) . 933) (#("mpl From<Error>for WithCo" 0 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil) 9 14 (face font-lock-type-face fontified nil) 14 15 (fontified nil) 15 18 (face font-lock-keyword-face fontified nil) 18 19 (fontified nil) 19 25 (face font-lock-type-face fontified nil)) . 930) (927 . 929) (#("  }
" 0 4 (fontified t)) . 927) (923 . 924) (#("  " 0 2 (fontified t)) . 923) (919 . 921) (#("    
      " 0 11 (fontified t)) . 919) (895 . 898) (#("      " 0 6 (fontified t)) . 895) (845 . 848) (#("      " 0 6 (fontified t)) . 845) (831 . 833) (#("    " 0 4 (fontified t)) . 831) (#(" Self" 0 1 (fontified nil) 1 5 (face font-lock-type-face fontified nil)) . 828) (#(") -" 0 3 (fontified nil)) . 827) (#("Error>{
  fn from(err:" 0 5 (face font-lock-type-face fontified nil) 5 8 (fontified nil) 8 10 (fontified t) 10 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 17 (face font-lock-function-name-face fontified t) 17 18 (fontified t) 18 21 (face font-lock-variable-name-face fontified t) 21 22 (fontified t)) . 822) (#("for" 0 3 (face font-lock-keyword-face fontified nil)) . 804) (800 . 803) (#(" }
impl From<" 0 3 (fontified nil) 3 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 12 (face font-lock-type-face fontified t) 12 13 (fontified t)) . 795) (788 . 794) (784 . 785) (#("  " 0 2 (fontified t)) . 784) (#("o(" 0 2 (fontified nil)) . 782) (780 . 781) (#("ctx.in" 0 6 (fontified nil)) . 780) (#(");
    n" 0 3 (fontified nil) 3 8 (fontified t)) . 779) (#("<T>  = value.into" 0 1 (fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 17 (fontified nil)) . 778) (768 . 770) (#("    let noctx:" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 13 (face font-lock-variable-name-face fontified t) 13 14 (fontified t)) . 768) (#("-> Self " 0 1 (fontified nil) 1 2 (syntax-table (1) fontified nil) 2 3 (fontified nil) 3 7 (face font-lock-type-face fontified nil) 7 8 (fontified nil)) . 766) (#(")" 0 1 (fontified nil)) . 765) (#("om(value:Option" 0 2 (face font-lock-function-name-face fontified nil) 2 3 (fontified nil) 3 8 (face font-lock-variable-name-face fontified nil) 8 9 (fontified nil) 9 15 (face font-lock-type-face fontified nil)) . 762) (#("ntextualizable {
  fn f" 0 14 (face font-lock-type-face fontified nil) 14 17 (fontified nil) 17 19 (fontified t) 19 21 (face font-lock-keyword-face fontified t) 21 22 (fontified t) 22 23 (face font-lock-function-name-face fontified t)) . 761) (#("(opt)
  }

  }
impl <T>From<Option<T> >for WithContext<OptError<T> >where OptError<T> :C" 0 6 (fontified nil) 6 15 (fontified t) 15 19 (face font-lock-keyword-face fontified t) 19 21 (fontified t) 21 22 (face font-lock-type-face fontified t) 22 23 (fontified t) 23 27 (face font-lock-type-face fontified t) 27 28 (fontified t) 28 34 (face font-lock-type-face fontified t) 34 35 (fontified t) 35 36 (face font-lock-type-face fontified t) 36 39 (fontified t) 39 42 (face font-lock-keyword-face fontified t) 42 43 (fontified t) 43 54 (face font-lock-type-face fontified t) 54 55 (fontified t) 55 63 (face font-lock-type-face fontified t) 63 64 (fontified t) 64 65 (face font-lock-type-face fontified t) 65 68 (fontified t) 68 73 (face font-lock-keyword-face fontified t) 73 74 (fontified t) 74 82 (face font-lock-type-face fontified t) 82 83 (fontified t) 83 84 (face font-lock-type-face fontified t) 84 87 (fontified t) 87 88 (face font-lock-type-face fontified t)) . 760) (#("o" 0 1 (face font-lock-type-face fontified nil)) . 759) (#("r" 0 1 (face font-lock-type-face fontified nil)) . 758) (#("   " 0 3 (fontified nil)) . 754) (#(" Self {
" 0 1 (fontified nil) 1 5 (face font-lock-type-face fontified nil) 5 8 (fontified nil)) . 753) (739 . 740) (#(" fn from" 0 1 (fontified nil) 1 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 8 (face font-lock-function-name-face fontified nil)) . 734) (732 . 733) (#(">{
" 0 3 (fontified nil)) . 732) (730 . 731) (#("OptError<" 0 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil)) . 730) (725 . 726) (#("  }
impl <T>From<Option<T> >" 0 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 10 (fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (fontified t) 12 16 (face font-lock-type-face fontified t) 16 17 (fontified t) 17 23 (face font-lock-type-face fontified t) 23 24 (fontified t) 24 25 (face font-lock-type-face fontified t) 25 28 (fontified t)) . 725) (721 . 722) (#("    noctx.into()
  " 0 19 (fontified t)) . 721) (719 . 720) (#("into();" 0 7 (fontified nil)) . 719) (#("or<T>) -> Self {
    let noctx:Option<T>  = value" 0 2 (face font-lock-type-face fontified nil) 2 3 (fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 8 (fontified nil) 8 9 (syntax-table (1) fontified nil) 9 10 (fontified nil) 10 14 (face font-lock-type-face fontified nil) 14 17 (fontified nil) 17 21 (fontified t) 21 24 (face font-lock-keyword-face fontified t) 24 25 (fontified t) 25 30 (face font-lock-variable-name-face fontified t) 30 31 (fontified t) 31 37 (face font-lock-type-face fontified t) 37 38 (fontified t) 38 39 (face font-lock-type-face fontified t) 39 49 (fontified t)) . 718) (715 . 716) (#("E" 0 1 (face font-lock-type-face fontified nil)) . 715) (#("m(value:O" 0 1 (face font-lock-function-name-face fontified nil) 1 2 (fontified nil) 2 7 (face font-lock-variable-name-face fontified nil) 7 8 (fontified nil) 8 9 (face font-lock-type-face fontified nil)) . 713) (710 . 712) (#("  fn fr" 0 2 (fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 7 (face font-lock-function-name-face fontified t)) . 710) (#(":Contextualizable " 0 1 (fontified nil) 1 17 (face font-lock-type-face fontified nil) 17 18 (fontified nil)) . 708) (#("where" 0 5 (face font-lock-keyword-face fontified nil)) . 697) (#("> Self {
    opterr.0
  }

  }
impl <T>From<OptError<T> >for WithContext<Option<T> " 0 1 (syntax-table (1) fontified nil) 1 2 (fontified nil) 2 6 (face font-lock-type-face fontified nil) 6 9 (fontified nil) 9 31 (fontified t) 31 35 (face font-lock-keyword-face fontified t) 35 37 (fontified t) 37 38 (face font-lock-type-face fontified t) 38 39 (fontified t) 39 43 (face font-lock-type-face fontified t) 43 44 (fontified t) 44 52 (face font-lock-type-face fontified t) 52 53 (fontified t) 53 54 (face font-lock-type-face fontified t) 54 57 (fontified t) 57 60 (face font-lock-keyword-face fontified t) 60 61 (fontified t) 61 72 (face font-lock-type-face fontified t) 72 73 (fontified t) 73 79 (face font-lock-type-face fontified t) 79 80 (fontified t) 80 81 (face font-lock-type-face fontified t) 81 83 (fontified t)) . 696) (681 . 682) (#("from" 0 4 (face font-lock-function-name-face fontified nil)) . 673) (671 . 672) (#(">{
  fn" 0 3 (fontified nil) 3 5 (fontified t) 5 7 (face font-lock-keyword-face fontified t)) . 671) (669 . 670) (#("Option<" 0 6 (face font-lock-type-face fontified nil) 6 7 (fontified nil)) . 669) (662 . 665) (#(">" 0 1 (fontified nil)) . 662) (658 . 661) (#("r<T>" 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (fontified nil)) . 658) (655 . 657) (#("r" 0 1 (face font-lock-type-face fontified nil)) . 655) (651 . 654) (#("m<OptE" 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil) 2 6 (face font-lock-type-face fontified nil)) . 651) (649 . 650) (#("impl <T>Fr" 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-type-face fontified t)) . 649) (t 25818 29302 479002 989000)) (25818 29302 476046 883000) 0 nil])
([nil nil ((1824 . 1835) (#("WithCon" 0 7 (fontified nil)) . 1824) (1824 . 1831) (#("WithContext" 0 11 (fontified nil)) . -1824) (1824 . 1835) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -1824) (undo-tree-id1422 . -7) (undo-tree-id1423 . -5) (undo-tree-id1424 . -5) (undo-tree-id1425 . -6) (undo-tree-id1426 . -7) (undo-tree-id1427 . -7) 1831 (1828 . 1831) (1824 . 1828) (1823 . 1824) (1815 . 1823) (#("OptEWithContext" 0 4 (fontified nil) 4 15 (face font-lock-type-face fontified nil)) . 1815) (undo-tree-id1428 . 11) (1815 . 1819) (#("OptError" 0 8 (fontified nil)) . -1815) (1815 . 1823) (#("OptE" 0 4 (face font-lock-type-face fontified t)) . -1815) (undo-tree-id1429 . -4) 1819 (1815 . 1819) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1827) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1828) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1829) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1830) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1831) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1832) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1833) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1834) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (#("<" 0 1 (fontified t)) . -1835) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) 1836 (1943 . 1946) (1942 . 1943) (apply yas--snippet-revive 1936 1942 #s(yas--snippet nil nil #s(yas--exit 1942 nil) 75 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1942 nil) 75 nil nil nil nil)) (1936 . 1942) (#("into()$0" 0 8 (fontified nil)) . 1936) (1936 . 1944) (#("into() (as Into)" 0 16 (fontified nil)) . -1936) (1936 . 1952) (1935 . 1936) (#(";" 0 1 (fontified t)) . -1935) (undo-tree-id1484 . -1) 1936 (1929 . 1936) (1915 . 1928) (#("Intern" 0 6 (fontified nil)) . 1915) (1915 . 1921) (#("InternalError" 0 13 (fontified nil)) . -1915) (1915 . 1928) (#("Intern" 0 6 (face font-lock-type-face fontified t)) . -1915) (undo-tree-id1485 . -6) (undo-tree-id1486 . -6) 1921 (1915 . 1921) (apply yas--snippet-revive 1906 1916 #s(yas--snippet nil nil #s(yas--exit 1915 nil) 74 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1915 nil) 74 nil nil nil nil)) (1906 . 1916) (#("OptError<$0>" 0 12 (fontified nil)) . 1906) (1906 . 1918) (#("Opt" 0 3 (fontified nil)) . 1906) (1906 . 1909) (#("OptError<…>" 0 11 (fontified nil)) . -1906) (1906 . 1917) (#("Opt" 0 3 (face font-lock-type-face fontified t)) . -1906) (undo-tree-id1487 . -3) 1909 (1898 . 1909) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -1898) (undo-tree-id1488 . -1) 1899 (1894 . 1899) (1891 . 1894) (#("	" 0 1 (fontified nil)) . -1893) (undo-tree-id1489 . -1) (1894 . 1895) (1891 . 1894) (1889 . 1891) (1887 . 1888) (apply yas--snippet-revive 1878 1888 #s(yas--snippet nil nil #s(yas--exit 1887 nil) 73 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1887 nil) 73 nil nil nil nil)) (1878 . 1888) (#("OptError<$0>" 0 12 (fontified nil)) . 1878) (1878 . 1890) (#("Opt" 0 3 (fontified nil)) . 1878) (1878 . 1881) (#("OptError<…>" 0 11 (fontified nil)) . -1878) (1878 . 1889) (#("Opt" 0 3 (face font-lock-type-face fontified t)) . -1878) (undo-tree-id1490 . -3) 1881 (1873 . 1881) (1868 . 1873) (1863 . 1868) (#("i" 0 1 (fontified t)) . -1863) (undo-tree-id1491 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -1864) (undo-tree-id1492 . -1) (#("t" 0 1 (fontified t)) . -1865) (undo-tree-id1493 . -1) (#("e" 0 1 (fontified t)) . -1866) (undo-tree-id1494 . -1) (#("r" 0 1 (fontified t)) . -1867) (undo-tree-id1495 . -1) (#("r" 0 1 (fontified t)) . -1868) (undo-tree-id1496 . -1) (#(":" 0 1 (fontified t)) . -1869) (undo-tree-id1497 . -1) (#(" " 0 1 (fontified t)) . -1870) (undo-tree-id1498 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1871) (undo-tree-id1499 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1872) (undo-tree-id1500 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1873) (undo-tree-id1501 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1874) (undo-tree-id1502 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1875) (undo-tree-id1503 . -1) 1876 (1855 . 1876) (1853 . 1855)) nil (25818 33150 298437 920000) 0 nil])
([nil nil ((507 . 514) (487 . 507) (t 25818 30281 169032 523000)) ((#("<$to as Contextualiz" 0 1 (syntax-table (1) fontified nil) 1 5 (fontified nil) 5 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 20 (face font-lock-type-face fontified nil)) . 487) (undo-tree-id1417 . -4) (#("able>::" 0 4 (face font-lock-type-face fontified t) 4 5 (syntax-table (1) fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 507)) (25818 32787 493763 249000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -520) (undo-tree-id183 . -1) (undo-tree-id185 . -1) (undo-tree-id187 . -1) (#("	" 0 1 (fontified t)) . -521) (undo-tree-id188 . -1) (undo-tree-id190 . -1) (#("	" 0 1 (fontified t)) . -522) (undo-tree-id192 . -1) (undo-tree-id194 . -1) (#("	" 0 1 (fontified t)) . -523) (undo-tree-id196 . -1) (undo-tree-id198 . -1) (#("	" 0 1 (fontified t)) . -524) (undo-tree-id200 . -1) (undo-tree-id202 . -1) 525 (520 . 525) (t 25818 29588 2309 197000) 519) ((#("
				" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 520) (520 . 525) (t 25818 30126 285591 346000)) (25818 30124 548277 595000) 0 nil])
nil
([nil nil ((1878 . 1882) (#("Self" 0 4 (fontified nil)) . 1878) (1878 . 1882) (#("Self" 0 4 (face font-lock-type-face fontified t)) . -1878) (undo-tree-id1578 . -4) 1882 (1878 . 1882) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1878) (undo-tree-id1579 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1879) (undo-tree-id1580 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1880) (undo-tree-id1581 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1881) (undo-tree-id1582 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1882) (undo-tree-id1583 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1883) (undo-tree-id1584 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1884) (undo-tree-id1585 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1885) (undo-tree-id1586 . -1) (#("<" 0 1 (fontified t)) . -1886) (undo-tree-id1587 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1887) (undo-tree-id1588 . -1) (#(">" 0 1 (fontified t)) . -1888) (undo-tree-id1589 . -1) 1889 (t 25818 33150 316108 80000)) nil (25818 33159 572080 144000) 0 nil])
([nil nil ((513 . 520) (#(":" 0 1 (fontified t)) . -513) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (#("<" 0 1 (syntax-table (1) fontified t)) . -514) (undo-tree-id523 . 1) (undo-tree-id524 . 1) (undo-tree-id526 . -1) (#("$" 0 1 (fontified t)) . -515) (undo-tree-id527 . -1) (#("t" 0 1 (fontified t)) . -516) (undo-tree-id528 . -1) (#("o" 0 1 (fontified t)) . -517) (undo-tree-id529 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -518) (undo-tree-id530 . -1) 519 (#("W" 0 1 (face font-lock-type-face fontified t)) . -514) (undo-tree-id531 . 1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id536 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -515) (undo-tree-id537 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -516) (undo-tree-id538 . 1) (undo-tree-id539 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -517) (undo-tree-id540 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -518) (undo-tree-id541 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -519) (undo-tree-id542 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -520) (undo-tree-id543 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -521) (undo-tree-id544 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -522) (undo-tree-id545 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -523) (undo-tree-id546 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -524) (undo-tree-id547 . -1) 525 (t 25818 30338 465760 917000)) ((514 . 525) (513 . 519) (#(":Output" 0 1 (fontified t) 1 7 (face font-lock-type-face fontified t)) . 513)) (25818 32787 443596 649000) 0 nil])
([nil nil ((#("	for [T] (opterr: OptError<T>) -> Option<T> {
		opterr.0
	}

	for [T] (opt: Option<T>) -> OptError<T> {
		OptError(opt)
	}

" 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 16 (face font-lock-variable-name-face fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 26 (face font-lock-type-face fontified t) 26 27 (syntax-table (1) fontified t) 27 28 (face font-lock-type-face fontified t) 28 29 (syntax-table (1) fontified t) 29 32 (fontified t) 32 33 (syntax-table (1) fontified t) 33 34 (fontified t) 34 40 (face font-lock-type-face fontified t) 40 41 (syntax-table (1) fontified t) 41 42 (face font-lock-type-face fontified t) 42 43 (syntax-table (1) fontified t) 43 44 (fontified t) 44 46 (fontified t) 46 48 (fontified t) 48 49 (fontified t) 49 51 (fontified t) 51 52 (fontified t) 52 54 (fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 58 (fontified t) 58 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 65 (face font-lock-keyword-face fontified t) 65 66 (fontified t) 66 67 (fontified t) 67 68 (face font-lock-type-face fontified t) 68 69 (fontified t) 69 70 (fontified t) 70 71 (fontified t) 71 74 (face font-lock-variable-name-face fontified t) 74 75 (fontified t) 75 76 (fontified t) 76 82 (face font-lock-type-face fontified t) 82 83 (fontified t syntax-table (1)) 83 84 (face font-lock-type-face fontified t) 84 85 (fontified t syntax-table (1)) 85 88 (fontified t) 88 89 (fontified t syntax-table (1)) 89 90 (fontified t) 90 94 (face font-lock-type-face fontified t) 94 95 (face font-lock-type-face fontified t) 95 96 (face font-lock-type-face fontified t) 96 97 (face font-lock-type-face fontified t) 97 98 (face font-lock-type-face fontified t) 98 99 (fontified t syntax-table (1)) 99 100 (face font-lock-type-face fontified t) 100 101 (fontified t syntax-table (1)) 101 102 (fontified t) 102 104 (fontified t) 104 106 (fontified t) 106 114 (face font-lock-type-face fontified t) 114 115 (fontified t) 115 116 (fontified t) 116 117 (fontified t) 117 118 (fontified t) 118 120 (fontified t) 120 121 (fontified t) 121 123 (fontified t) 123 124 (fontified t)) . 681) (undo-tree-id292 . -123) (undo-tree-id293 . -123) (undo-tree-id294 . -123) (undo-tree-id295 . -123) 804 (t 25818 29688 772299 599000)) ((681 . 805) (t 25818 30106 985593 180000)) (25818 30105 129142 773000) 0 nil] [nil nil ((666 . 676) (#("c" 0 1 (face font-lock-preprocessor-face fontified t)) . 666) (668 . 674) (#("nve" 0 3 (face font-lock-preprocessor-face fontified t)) . 668) (672 . 673) (#("si" 0 2 (face font-lock-preprocessor-face fontified t)) . 672) (675 . 679) (#("ns!" 0 3 (face font-lock-preprocessor-face fontified t)) . 675) (679 . 680) (#("{
	" 0 3 (fontified t)) . 679) (undo-tree-id204 . -3) (undo-tree-id205 . -3) (undo-tree-id206 . -3) (686 . 693) (#("[" 0 1 (fontified t)) . 686) (688 . 691) (#("]" 0 1 (fontified t)) . 688) (690 . 698) (#(" " 0 1 (fontified t)) . 698) (714 . 811) (715 . 721) (725 . 743) (727 . 734) (#("		" 0 2 (fontified t)) . 727) (730 . 739) (732 . 733) (#("e" 0 1 (fontified t)) . 732) (735 . 784) (736 . 743) (#("0" 0 1 (fontified t)) . 736) (738 . 757) (#("	" 0 1 (fontified t)) . 738) (742 . 770) (#("	" 0 1 (fontified t)) . 742) (747 . 756) (#("[" 0 1 (fontified t)) . 747) (749 . 756) (#("]" 0 1 (fontified t)) . 749) (751 . 755) (#(" " 0 1 (fontified t)) . 756) (771 . 782) (779 . 799) (782 . 859) (783 . 801) (785 . 836) (#("		" 0 2 (fontified t)) . 785) (795 . 812) (796 . 804) (797 . 803) (#("p" 0 1 (fontified t)) . 797) (799 . 801) (801 . 803) (#("	" 0 1 (fontified t)) . 801) (805 . 813) (#("	(err:" 0 2 (fontified t) 2 5 (face font-lock-variable-name-face fontified t) 5 6 (fontified t)) . 805) (812 . 817) (#(") -" 0 3 (fontified t)) . 817) (821 . 824) (839 . 861) (844 . 847) (846 . 851) (848 . 852) (#("		" 0 2 (fontified t)) . 848) (862 . 868) (#("			" 0 3 (fontified t)) . 862) (912 . 918) (#("			" 0 3 (fontified t)) . 912) (936 . 947) (#("		" 0 2 (fontified t)) . 936) (940 . 942) (#("	" 0 1 (fontified t)) . 940) (944 . 948) (#("	(" 0 2 (fontified t)) . 944) (947 . 976) (951 . 955) (952 . 977) (953 . 959) (954 . 969) (958 . 966) (959 . 964) (960 . 987) (962 . 965) (971 . 986) (972 . 981) (977 . 1040) (978 . 1007) (980 . 1026) (#("		" 0 2 (fontified t)) . 980) (1006 . 1008) (#("	" 0 1 (fontified t)) . 1006) (1010 . 1049) (#("	(" 0 2 (fontified t)) . 1010) (1013 . 1042) (1016 . 1018) (1017 . 1019) (1019 . 1100) (1020 . 1070) (#(") -" 0 3 (fontified t)) . 1038) (1042 . 1045) (1051 . 1102) (#("		" 0 2 (fontified t)) . 1051) (1084 . 1088) (#("		" 0 2 (fontified t)) . 1084) (1116 . 1120) (#("		" 0 2 (fontified t)) . 1116) (1133 . 1139) (#("			" 0 3 (fontified t)) . 1133) (1192 . 1198) (#("			" 0 3 (fontified t)) . 1192) (1255 . 1261) (#("			" 0 3 (fontified t)) . 1255) (1320 . 1326) (#("			" 0 3 (fontified t)) . 1320) (1405 . 1411) (#("			" 0 3 (fontified t)) . 1405) (1484 . 1490) (#("			" 0 3 (fontified t)) . 1484) (1541 . 1552) (#("		" 0 2 (fontified t)) . 1541) (1545 . 1547) (#("	" 0 1 (fontified t)) . 1545) (1549 . 1555) (#("	(" 0 2 (fontified t)) . 1549) (1552 . 1555) (#("ge" 0 1 (face font-lock-variable-name-face fontified t) 1 2 (face font-lock-variable-name-face fontified t)) . 1552) (1555 . 1560) (1556 . 1557) (1557 . 1583) (1558 . 1580) (1559 . 1573) (#("g" 0 1 (face font-lock-constant-face fontified t)) . 1559) (1561 . 1599) (1562 . 1571) (1571 . 1586) (1572 . 1578) (1577 . 1594) (1578 . 1633) (1580 . 1600) (#("		" 0 2 (fontified t)) . 1580) (1587 . 1608) (1635 . 1637) (#("	" 0 1 (fontified t)) . 1635) (1639 . 1689) (#("	(" 0 2 (fontified t)) . 1639) (1642 . 1679) (1643 . 1662) (#("8" 0 1 (face font-lock-variable-name-face fontified t)) . 1643) (1645 . 1651) (1647 . 1674) (1648 . 1692) (1649 . 1662) (#(")" 0 1 (fontified t)) . 1673) (#("-" 0 1 (fontified t)) . 1675) (1677 . 1680) (1686 . 1743) (#("		" 0 2 (fontified t)) . 1686) (1737 . 1739) (#("	" 0 1 (fontified t)) . 1737) (1741 . 1860) (#("	" 0 1 (fontified t)) . 1741) (1743 . 1745) (1744 . 1758) (1745 . 1748) (1746 . 1792) (1747 . 1788) (1748 . 1752) (1749 . 1753) (1750 . 1767) (1751 . 1776) (1775 . 1783) (1776 . 1779) (1781 . 1795) (1782 . 1784) (#("{" 0 1 (fontified t)) . 1782) (1784 . 1795) (#("		Er" 0 2 (fontified t) 2 4 (face font-lock-type-face fontified t)) . 1784) (1790 . 1793) (1791 . 1795) (1792 . 1795) (1793 . 1794) (1796 . 1881) (1797 . 1810) (1798 . 1803) (1800 . 1822) (1801 . 1810) (1803 . 1819) (1804 . 1805) (1805 . 1824) (#("	" 0 1 (fontified t)) . 1805) (1807 . 1808) (1808 . 1810) 672 (t 25818 29638 575637 709000)) (("  " . 1808) (#("
" 0 1 (fontified nil)) . 1807) (1805 . 1806) ("    noctx.into()
  " . 1805) (#(";" 0 1 (fontified nil)) . 1804) (#("or = value.into(" 0 16 (fontified nil)) . 1803) (#("t noctx:E" 0 9 (fontified nil)) . 1801) (#("Error) -> Self {
    l" 0 8 (fontified nil) 8 9 (fontified nil syntax-table (1)) 9 17 (fontified nil)) . 1800) (#("og::L" 0 5 (fontified nil)) . 1798) (#("value:crate::" 0 13 (fontified nil)) . 1797) (#("Error>for<Error as Contextualizable>::Output where Error:Contextualizable {
  fn from" 0 76 (fontified nil)) . 1796) (#(":" 0 1 (fontified nil)) . 1793) (#("log" 0 3 (fontified nil)) . 1792) (#("ate:" 0 4 (fontified nil)) . 1791) (#("m<c" 0 3 (fontified nil)) . 1790) (1784 . 1788) ("
  }
impl F" . 1784) (1782 . 1783) (#(" }" 0 2 (fontified nil)) . 1782) (#("::Log(logerr)
" 0 2 (fontified nil) 2 5 (face font-lock-type-face fontified nil) 5 14 (fontified nil)) . 1781) (#("   " 0 3 (fontified nil)) . 1776) (#(" Self {
" 0 1 (fontified nil) 1 5 (face font-lock-type-face fontified nil) 5 8 (fontified nil)) . 1775) (#("Error {
  fn from(logerr:" 0 5 (face font-lock-type-face fontified nil) 5 8 (fontified nil) 8 10 (fontified t) 10 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 17 (face font-lock-function-name-face fontified t) 17 18 (fontified t) 18 24 (face font-lock-variable-name-face fontified t) 24 25 (fontified t)) . 1751) (#("log::LogError>for" 0 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil) 5 13 (face font-lock-type-face fontified nil) 13 14 (fontified nil) 14 17 (face font-lock-keyword-face fontified nil)) . 1750) (#("ate:" 0 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil)) . 1749) (#("om<c" 0 2 (face font-lock-type-face fontified nil) 2 3 (fontified nil) 3 4 (face font-lock-keyword-face fontified nil)) . 1748) (#(".into();
    noctx.into()
  }

  }
impl F" 0 9 (fontified nil) 9 35 (fontified t) 35 39 (face font-lock-keyword-face fontified t) 39 40 (fontified t) 40 41 (face font-lock-type-face fontified t)) . 1747) (#("::Error>) -> Self {
    let noctx:Error = valu" 0 2 (fontified nil) 2 7 (face font-lock-type-face fontified nil) 7 11 (fontified nil) 11 12 (fontified nil syntax-table (1)) 12 13 (fontified nil) 13 17 (face font-lock-type-face fontified nil) 17 20 (fontified nil) 20 24 (fontified t) 24 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 33 (face font-lock-variable-name-face fontified t) 33 34 (fontified t) 34 39 (face font-lock-type-face fontified t) 39 46 (fontified t)) . 1746) (#("r<p" 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-constant-face fontified nil)) . 1745) (#("ue:bb8::RunErr" 0 2 (face font-lock-variable-name-face fontified nil) 2 3 (fontified nil) 3 6 (face font-lock-constant-face fontified nil) 6 8 (fontified nil) 8 14 (face font-lock-type-face fontified nil)) . 1744) (#("va" 0 2 (face font-lock-variable-name-face fontified nil)) . 1743) (1741 . 1742) (#("  }
impl From<bb8::RunError<pg::Error> >for<Error as Contextualizable>::Output where Error:Contextualizable {
  fn from" 0 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 17 (face font-lock-constant-face fontified t) 17 19 (fontified t) 19 27 (face font-lock-type-face fontified t) 27 28 (fontified t) 28 30 (face font-lock-constant-face fontified t) 30 32 (fontified t) 32 37 (face font-lock-type-face fontified t) 37 40 (fontified t) 40 43 (face font-lock-keyword-face fontified t) 43 44 (fontified t) 44 49 (face font-lock-type-face fontified t) 49 50 (fontified t) 50 52 (face font-lock-keyword-face fontified t) 52 53 (fontified t) 53 69 (face font-lock-type-face fontified t) 69 72 (fontified t) 72 78 (face font-lock-type-face fontified t) 78 79 (fontified t) 79 84 (face font-lock-keyword-face fontified t) 84 85 (fontified t) 85 90 (face font-lock-variable-name-face fontified t) 90 91 (fontified t) 91 107 (face font-lock-type-face fontified t) 107 112 (fontified t) 112 114 (face font-lock-keyword-face fontified t) 114 115 (fontified t) 115 119 (face font-lock-function-name-face fontified t)) . 1741) (1737 . 1738) (#("  " 0 2 (fontified t)) . 1737) (1686 . 1688) (#("  fn from(bb8err:bb8::RunError<pg::Error>) -> Self {
    " 0 2 (fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-function-name-face fontified t) 9 10 (fontified t) 10 16 (face font-lock-variable-name-face fontified t) 16 17 (fontified t) 17 20 (face font-lock-constant-face fontified t) 20 22 (fontified t) 22 30 (face font-lock-type-face fontified t) 30 31 (fontified t) 31 33 (face font-lock-constant-face fontified t) 33 35 (fontified t) 35 40 (face font-lock-type-face fontified t) 40 44 (fontified t) 44 45 (fontified t syntax-table (1)) 45 46 (fontified t) 46 50 (face font-lock-type-face fontified t) 50 57 (fontified t)) . 1686) (#("for" 0 3 (face font-lock-keyword-face fontified nil)) . 1677) (1675 . 1676) (1673 . 1674) (#(" }
impl From<" 0 3 (fontified nil) 3 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 12 (face font-lock-type-face fontified t) 12 13 (fontified t)) . 1649) (#("Error = value.into();
    noctx.into()
  }

" 0 5 (face font-lock-type-face fontified nil) 5 22 (fontified nil) 22 44 (fontified t)) . 1648) (#("or) -> Self {
    let noctx" 0 2 (face font-lock-type-face fontified nil) 2 5 (fontified nil) 5 6 (fontified nil syntax-table (1)) 6 7 (fontified nil) 7 11 (face font-lock-type-face fontified nil) 11 14 (fontified nil) 14 18 (fontified t) 18 21 (face font-lock-keyword-face fontified t) 21 22 (fontified t) 22 27 (face font-lock-variable-name-face fontified t)) . 1647) (#(":pg::E" 0 1 (fontified nil) 1 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil) 5 6 (face font-lock-type-face fontified nil)) . 1645) (1643 . 1644) (#("le {
  fn from(valu" 0 2 (face font-lock-type-face fontified nil) 2 5 (fontified nil) 5 7 (fontified t) 7 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 14 (face font-lock-function-name-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-variable-name-face fontified t)) . 1643) (#("le>::Output where Error:Contextualiza" 0 2 (face font-lock-type-face fontified nil) 2 5 (fontified nil) 5 11 (face font-lock-type-face fontified nil) 11 12 (fontified nil) 12 17 (face font-lock-keyword-face fontified nil) 17 18 (fontified nil) 18 23 (face font-lock-variable-name-face fontified nil) 23 24 (fontified nil) 24 37 (face font-lock-type-face fontified nil)) . 1642) (1639 . 1641) (#("  }
impl From<pg::Error>for<Error as Contextualiza" 0 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 16 (face font-lock-constant-face fontified t) 16 18 (fontified t) 18 23 (face font-lock-type-face fontified t) 23 24 (fontified t) 24 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 33 (face font-lock-type-face fontified t) 33 34 (fontified t) 34 36 (face font-lock-keyword-face fontified t) 36 37 (fontified t) 37 50 (face font-lock-type-face fontified t)) . 1639) (1635 . 1636) (#("  " 0 2 (fontified t)) . 1635) (#(") -> Self {
    Error" 0 3 (fontified nil) 3 4 (fontified nil syntax-table (1)) 4 5 (fontified nil) 5 9 (face font-lock-type-face fontified nil) 9 12 (fontified nil) 12 16 (fontified t) 16 21 (face font-lock-type-face fontified t)) . 1587) (1580 . 1582) (#("  fn from(pgerr:pg::" 0 2 (fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-function-name-face fontified t) 9 10 (fontified t) 10 15 (face font-lock-variable-name-face fontified t) 15 16 (fontified t) 16 18 (face font-lock-constant-face fontified t) 18 20 (fontified t)) . 1580) (#("   noctx.into()
  }

  }
impl From<pg::Error>for Error " 0 16 (fontified nil) 16 25 (fontified t) 25 29 (face font-lock-keyword-face fontified t) 29 30 (fontified t) 30 34 (face font-lock-type-face fontified t) 34 35 (fontified t) 35 37 (face font-lock-constant-face fontified t) 37 39 (fontified t) 39 44 (face font-lock-type-face fontified t) 44 45 (fontified t) 45 48 (face font-lock-keyword-face fontified t) 48 49 (fontified t) 49 54 (face font-lock-type-face fontified t) 54 55 (fontified t)) . 1578) (#(" = value.into();
" 0 17 (fontified nil)) . 1577) (#("noctx:" 0 5 (face font-lock-variable-name-face fontified nil) 5 6 (fontified nil)) . 1572) (#(" Self {
    let" 0 1 (fontified nil) 1 5 (face font-lock-type-face fontified nil) 5 8 (fontified nil) 8 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t)) . 1571) (#(":Serenity" 0 1 (fontified nil) 1 9 (face font-lock-type-face fontified nil)) . 1562) (#("Contextualizable {
  fn from(value:ser" 0 16 (face font-lock-type-face fontified nil) 16 19 (fontified nil) 19 21 (fontified t) 21 23 (face font-lock-keyword-face fontified t) 23 24 (fontified t) 24 28 (face font-lock-function-name-face fontified t) 28 29 (fontified t) 29 34 (face font-lock-variable-name-face fontified t) 34 35 (fontified t) 35 38 (face font-lock-constant-face fontified t)) . 1561) (1559 . 1560) (#("ut where Error" 0 2 (face font-lock-type-face fontified nil) 2 3 (fontified nil) 3 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 14 (face font-lock-variable-name-face fontified nil)) . 1559) (#("Contextualizable>::Out" 0 16 (face font-lock-type-face fontified nil) 16 19 (fontified nil) 19 22 (face font-lock-type-face fontified nil)) . 1558) (#("SerenityError>for<Error as" 0 13 (face font-lock-type-face fontified nil) 13 14 (fontified nil) 14 17 (face font-lock-keyword-face fontified nil) 17 18 (fontified nil) 18 23 (face font-lock-type-face fontified nil) 23 24 (fontified nil) 24 26 (face font-lock-keyword-face fontified nil)) . 1557) (#(":" 0 1 (fontified nil)) . 1556) (#("om<se" 0 2 (face font-lock-type-face fontified nil) 2 3 (fontified nil) 3 5 (face font-lock-constant-face fontified nil)) . 1555) (1552 . 1554) (#("l F" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-type-face fontified nil)) . 1552) (1549 . 1551) (#("  }
im" 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t)) . 1549) (1545 . 1546) (#("  " 0 2 (fontified t)) . 1545) (1541 . 1543) (#("    
      " 0 11 (fontified t)) . 1541) (1484 . 1487) (#("      " 0 6 (fontified t)) . 1484) (1405 . 1408) (#("      " 0 6 (fontified t)) . 1405) (1320 . 1323) (#("      " 0 6 (fontified t)) . 1320) (1255 . 1258) (#("      " 0 6 (fontified t)) . 1255) (1192 . 1195) (#("      " 0 6 (fontified t)) . 1192) (1133 . 1136) (#("      " 0 6 (fontified t)) . 1133) (1116 . 1118) (#("    " 0 4 (fontified t)) . 1116) (1084 . 1086) (#("    " 0 4 (fontified t)) . 1084) (1051 . 1053) (#("  fn from(sererr:ser::SerenityError) -> Self {
    " 0 2 (fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-function-name-face fontified t) 9 10 (fontified t) 10 16 (face font-lock-variable-name-face fontified t) 16 17 (fontified t) 17 20 (face font-lock-constant-face fontified t) 20 22 (fontified t) 22 35 (face font-lock-type-face fontified t) 35 38 (fontified t) 38 39 (syntax-table (1) fontified t) 39 40 (fontified t) 40 44 (face font-lock-type-face fontified t) 44 51 (fontified t)) . 1051) (#("for" 0 3 (face font-lock-keyword-face fontified nil)) . 1042) (1038 . 1041) (#("value.into();
    noctx.into()
  }

  }
impl From<" 0 14 (fontified nil) 14 40 (fontified t) 40 44 (face font-lock-keyword-face fontified t) 44 45 (fontified t) 45 49 (face font-lock-type-face fontified t) 49 50 (fontified t)) . 1020) (#("Contextualizable {
  fn from(value:InternalError) -> Self {
    let noctx:Error =" 0 16 (face font-lock-type-face fontified nil) 16 19 (fontified nil) 19 21 (fontified t) 21 23 (face font-lock-keyword-face fontified t) 23 24 (fontified t) 24 28 (face font-lock-function-name-face fontified t) 28 29 (fontified t) 29 34 (face font-lock-variable-name-face fontified t) 34 35 (fontified t) 35 48 (face font-lock-type-face fontified t) 48 51 (fontified t) 51 52 (syntax-table (1) fontified t) 52 53 (fontified t) 53 57 (face font-lock-type-face fontified t) 57 64 (fontified t) 64 67 (face font-lock-keyword-face fontified t) 67 68 (fontified t) 68 73 (face font-lock-variable-name-face fontified t) 73 74 (fontified t) 74 79 (face font-lock-type-face fontified t) 79 81 (fontified t)) . 1019) (#("ro" 0 2 (face font-lock-variable-name-face fontified nil)) . 1017) (#(" E" 0 1 (fontified nil) 1 2 (face font-lock-variable-name-face fontified nil)) . 1016) (#(" Contextualizable>::Output wh" 0 1 (fontified nil) 1 17 (face font-lock-type-face fontified nil) 17 20 (fontified nil) 20 26 (face font-lock-type-face fontified nil) 26 27 (fontified nil) 27 29 (face font-lock-keyword-face fontified nil)) . 1013) (1010 . 1012) (#("  }
impl From<InternalError>for<Error a" 0 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 27 (face font-lock-type-face fontified t) 27 28 (fontified t) 28 31 (face font-lock-keyword-face fontified t) 31 32 (fontified t) 32 37 (face font-lock-type-face fontified t) 37 38 (fontified t) 38 39 (face font-lock-keyword-face fontified t)) . 1010) (1006 . 1007) (#("  " 0 2 (fontified t)) . 1006) (980 . 982) (#("  fn from(interr:InternalError) -> Self {
    " 0 2 (fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-function-name-face fontified t) 9 10 (fontified t) 10 16 (face font-lock-variable-name-face fontified t) 16 17 (fontified t) 17 30 (face font-lock-type-face fontified t) 30 33 (fontified t) 33 34 (syntax-table (1) fontified t) 34 35 (fontified t) 35 39 (face font-lock-type-face fontified t) 39 46 (fontified t)) . 980) (#("From<InternalError>for Error " 0 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil) 5 18 (face font-lock-type-face fontified nil) 18 19 (fontified nil) 19 22 (face font-lock-keyword-face fontified nil) 22 23 (fontified nil) 23 28 (face font-lock-type-face fontified nil) 28 29 (fontified nil)) . 978) (#("<InternalError>  = value.into();
    noctx.into()
  }

  }
impl" 0 1 (fontified nil) 1 14 (face font-lock-type-face fontified nil) 14 33 (fontified nil) 33 59 (fontified t) 59 63 (face font-lock-keyword-face fontified t)) . 977) (#("noctx:Opt" 0 5 (face font-lock-variable-name-face fontified nil) 5 6 (fontified nil) 6 9 (face font-lock-type-face fontified nil)) . 972) (#(" Self {
    let" 0 1 (fontified nil) 1 5 (face font-lock-type-face fontified nil) 5 8 (fontified nil) 8 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t)) . 971) (#("ue:" 0 2 (face font-lock-variable-name-face fontified nil) 2 3 (fontified nil)) . 962) (#("textualizable {
  fn from(v" 0 13 (face font-lock-type-face fontified nil) 13 16 (fontified nil) 16 18 (fontified t) 18 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 25 (face font-lock-function-name-face fontified t) 25 26 (fontified t) 26 27 (face font-lock-variable-name-face fontified t)) . 960) (#("> :Co" 0 3 (fontified nil) 3 5 (face font-lock-type-face fontified nil)) . 959) (#("rnalErro" 0 8 (face font-lock-type-face fontified nil)) . 958) (#("where OptError<" 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil) 6 14 (face font-lock-type-face fontified nil) 14 15 (fontified nil)) . 954) (#("Output" 0 6 (face font-lock-type-face fontified nil)) . 953) (#("ror>as Contextualizable>:" 0 3 (face font-lock-type-face fontified nil) 3 4 (fontified nil) 4 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil) 7 23 (face font-lock-type-face fontified nil) 23 25 (fontified nil)) . 952) (#("nalE" 0 4 (face font-lock-type-face fontified nil)) . 951) (#("mpl From<Error>for<OptError<I" 0 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil) 9 14 (face font-lock-type-face fontified nil) 14 15 (fontified nil) 15 18 (face font-lock-keyword-face fontified nil) 18 19 (fontified nil) 19 27 (face font-lock-type-face fontified nil) 27 28 (fontified nil) 28 29 (face font-lock-type-face fontified nil)) . 947) (944 . 946) (#("  }
" 0 4 (fontified t)) . 944) (940 . 941) (#("  " 0 2 (fontified t)) . 940) (936 . 938) (#("    
      " 0 11 (fontified t)) . 936) (912 . 915) (#("      " 0 6 (fontified t)) . 912) (862 . 865) (#("      " 0 6 (fontified t)) . 862) (848 . 850) (#("    " 0 4 (fontified t)) . 848) (#("Self " 0 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil)) . 846) (#(") -" 0 3 (fontified nil)) . 844) (#("Error>{
  fn from(err:" 0 5 (face font-lock-type-face fontified nil) 5 8 (fontified nil) 8 10 (fontified t) 10 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 17 (face font-lock-function-name-face fontified t) 17 18 (fontified t) 18 21 (face font-lock-variable-name-face fontified t) 21 22 (fontified t)) . 839) (#("for" 0 3 (face font-lock-keyword-face fontified nil)) . 821) (817 . 820) (#("From<" 0 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil)) . 812) (805 . 811) (#("  }
impl" 0 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t)) . 805) (801 . 802) (#("  " 0 2 (fontified t)) . 801) (#("o(" 0 2 (fontified nil)) . 799) (797 . 798) (#("ctx.in" 0 6 (fontified nil)) . 797) (#(");
    n" 0 3 (fontified nil) 3 8 (fontified t)) . 796) (#("<T>  = value.into" 0 1 (fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 17 (fontified nil)) . 795) (785 . 787) (#("  fn from(value:Option<T>) -> Self {
    let noctx:" 0 2 (fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-function-name-face fontified t) 9 10 (fontified t) 10 15 (face font-lock-variable-name-face fontified t) 15 16 (fontified t) 16 22 (face font-lock-type-face fontified t) 22 23 (fontified t) 23 24 (face font-lock-type-face fontified t) 24 28 (fontified t) 28 29 (syntax-table (1) fontified t) 29 30 (fontified t) 30 34 (face font-lock-type-face fontified t) 34 41 (fontified t) 41 44 (face font-lock-keyword-face fontified t) 44 45 (fontified t) 45 50 (face font-lock-variable-name-face fontified t) 50 51 (fontified t)) . 785) (#(":Contextualizable " 0 1 (fontified nil) 1 17 (face font-lock-type-face fontified nil) 17 18 (fontified nil)) . 783) (#("From<Option<T> >for<OptError<T>as Contextualizable>::Output where OptError<T>" 0 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil) 5 11 (face font-lock-type-face fontified nil) 11 12 (fontified nil) 12 13 (face font-lock-type-face fontified nil) 13 16 (fontified nil) 16 19 (face font-lock-keyword-face fontified nil) 19 20 (fontified nil) 20 28 (face font-lock-type-face fontified nil) 28 29 (fontified nil) 29 30 (face font-lock-type-face fontified nil) 30 31 (fontified nil) 31 33 (face font-lock-keyword-face fontified nil) 33 34 (fontified nil) 34 50 (face font-lock-type-face fontified nil) 50 53 (fontified nil) 53 59 (face font-lock-type-face fontified nil) 59 60 (fontified nil) 60 65 (face font-lock-keyword-face fontified nil) 65 66 (fontified nil) 66 74 (face font-lock-type-face fontified nil) 74 75 (fontified nil) 75 76 (face font-lock-type-face fontified nil) 76 77 (fontified nil)) . 782) (#("(opt)
  }

  }
impl " 0 6 (fontified nil) 6 15 (fontified t) 15 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t)) . 779) (#("Self {
    " 0 4 (face font-lock-type-face fontified nil) 4 7 (fontified nil) 7 11 (fontified t)) . 771) (756 . 757) (#("from" 0 4 (face font-lock-function-name-face fontified nil)) . 751) (749 . 750) (#(">{
  fn" 0 3 (fontified nil) 3 5 (fontified t) 5 7 (face font-lock-keyword-face fontified t)) . 749) (747 . 748) (#("OptError<" 0 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil)) . 747) (742 . 743) (#("  }
impl <T>From<Option<T> >" 0 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 10 (fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (fontified t) 12 16 (face font-lock-type-face fontified t) 16 17 (fontified t) 17 23 (face font-lock-type-face fontified t) 23 24 (fontified t) 24 25 (face font-lock-type-face fontified t) 25 28 (fontified t)) . 742) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (undo-tree-id212 . -4) (undo-tree-id213 . -4) (undo-tree-id214 . -4) (738 . 739) (#("    noctx.into()
  " 0 19 (fontified t)) . 738) (736 . 737) (#("into();" 0 7 (fontified nil)) . 736) (#("or<T>) -> Self {
    let noctx:Option<T>  = value" 0 2 (face font-lock-type-face fontified nil) 2 3 (fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 8 (fontified nil) 8 9 (syntax-table (1) fontified nil) 9 10 (fontified nil) 10 14 (face font-lock-type-face fontified nil) 14 17 (fontified nil) 17 21 (fontified t) 21 24 (face font-lock-keyword-face fontified t) 24 25 (fontified t) 25 30 (face font-lock-variable-name-face fontified t) 30 31 (fontified t) 31 37 (face font-lock-type-face fontified t) 37 38 (fontified t) 38 39 (face font-lock-type-face fontified t) 39 49 (fontified t)) . 735) (732 . 733) (#("E" 0 1 (face font-lock-type-face fontified nil)) . 732) (#("m(value:O" 0 1 (face font-lock-function-name-face fontified nil) 1 2 (fontified nil) 2 7 (face font-lock-variable-name-face fontified nil) 7 8 (fontified nil) 8 9 (face font-lock-type-face fontified nil)) . 730) (727 . 729) (#("  fn fr" 0 2 (fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 7 (face font-lock-function-name-face fontified t)) . 727) (#(":Contextualizable " 0 1 (fontified nil) 1 17 (face font-lock-type-face fontified nil) 17 18 (fontified nil)) . 725) (#("where " 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil)) . 715) (#(" Self {
    opterr.0
  }

  }
impl <T>From<OptError<T> >for<Option<T>as Contextualizable>::Output" 0 1 (fontified nil) 1 5 (face font-lock-type-face fontified nil) 5 8 (fontified nil) 8 30 (fontified t) 30 34 (face font-lock-keyword-face fontified t) 34 36 (fontified t) 36 37 (face font-lock-type-face fontified t) 37 38 (fontified t) 38 42 (face font-lock-type-face fontified t) 42 43 (fontified t) 43 51 (face font-lock-type-face fontified t) 51 52 (fontified t) 52 53 (face font-lock-type-face fontified t) 53 56 (fontified t) 56 59 (face font-lock-keyword-face fontified t) 59 60 (fontified t) 60 66 (face font-lock-type-face fontified t) 66 67 (fontified t) 67 68 (face font-lock-type-face fontified t) 68 69 (fontified t) 69 71 (face font-lock-keyword-face fontified t) 71 72 (fontified t) 72 88 (face font-lock-type-face fontified t) 88 91 (fontified t) 91 97 (face font-lock-type-face fontified t)) . 714) (698 . 699) (#(" fn from" 0 1 (fontified nil) 1 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 8 (face font-lock-function-name-face fontified nil)) . 690) (688 . 689) (#(">{
" 0 3 (fontified nil)) . 688) (686 . 687) (#("Option<" 0 6 (face font-lock-type-face fontified nil) 6 7 (fontified nil)) . 686) (679 . 682) (#(">" 0 1 (fontified nil)) . 679) (675 . 678) (#("r<T>" 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (fontified nil)) . 675) (672 . 674) (#("r" 0 1 (face font-lock-type-face fontified nil)) . 672) (668 . 671) (#("m<OptE" 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil) 2 6 (face font-lock-type-face fontified nil)) . 668) (666 . 667) (#("impl <T>Fr" 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-type-face fontified t)) . 666) (t 25818 29665 38968 524000)) (25818 29665 35800 585000) 0 nil])
([nil nil ((apply yas--snippet-revive 1946 1952 #s(yas--snippet nil nil #s(yas--exit 1952 nil) 76 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1952 nil) 76 nil nil nil nil)) (1946 . 1952) (#("into()$0" 0 8 (fontified nil)) . 1946) (1946 . 1954) (#("into() (as Into)" 0 16 (fontified nil)) . -1946) (1946 . 1962) (1939 . 1946) (t 25818 33159 589440 396000)) nil (25818 33164 564318 678000) 0 nil])
([nil nil ((299 . 300) (291 . 298) (289 . 292) (285 . 290) (#("!" 0 1 (fontified t)) . -285) (undo-tree-id548 . -1) (undo-tree-id550 . -1) 286 (273 . 286) (#("d" 0 1 (fontified t)) . -273) (undo-tree-id552 . -1) 274 (273 . 274) (#("$" 0 1 (fontified t)) . -273) (undo-tree-id554 . -1) (#("n" 0 1 (fontified t)) . -274) (undo-tree-id556 . -1) (#("a" 0 1 (fontified t)) . -275) (undo-tree-id557 . -1) (#("m" 0 1 (fontified t)) . -276) (undo-tree-id558 . -1) (#("e" 0 1 (fontified t)) . -277) (undo-tree-id559 . -1) (#(":" 0 1 (fontified t)) . -278) (undo-tree-id560 . -1) 279 (273 . 279) (271 . 274) (#("c" 0 1 (fontified t)) . -271) (undo-tree-id561 . -1) (#("t" 0 1 (fontified t)) . -272) (undo-tree-id562 . -1) (#("x" 0 1 (fontified t)) . -273) (undo-tree-id563 . -1) 274 (271 . 274) (263 . 272) (264 . 265) (261 . 262) (261 . 264) (t 25818 30352 572441 833000)) ((#("() " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 261) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (#("$" 0 1 (fontified nil)) . 261) (#("?" 0 1 (face rust-question-mark fontified nil)) . 264) (#("derive []" 0 8 (fontified nil) 8 9 (fontified nil)) . 263) (undo-tree-id1414 . -8) (undo-tree-id1415 . -8) (#("ctx" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 271) (271 . 274) (#("$()" 0 2 (fontified nil) 2 3 (fontified nil)) . 271) (undo-tree-id1416 . -3) (#("$name:" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 273) (273 . 279) (#("d" 0 1 (fontified nil)) . 273) (273 . 274) (#("$dname:ident!" 0 6 (face font-lock-variable-name-face fontified nil) 6 12 (fontified nil) 12 13 (fontified nil)) . 273) (285 . 286) (#(" ! ()" 0 4 (fontified nil) 4 5 (fontified nil)) . 285) (#("$()" 0 2 (fontified nil) 2 3 (fontified nil)) . 289) (#("$arg:tt" 0 4 (face font-lock-variable-name-face fontified nil) 4 7 (fontified nil)) . 291) (#("*" 0 1 (fontified nil)) . 299)) (25818 32787 441365 951000) 0 nil])
([nil nil ((1686 . 1688)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 1686) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1)) (25818 30104 175439 665000) 0 nil])
nil
([nil nil ((1945 . 1961) (#("." 0 1 (fontified t)) . -1945) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (#("i" 0 1 (fontified t)) . -1946) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -1947) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (#("t" 0 1 (fontified t)) . -1948) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (#("o" 0 1 (fontified t)) . -1949) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (#("(" 0 1 (fontified t)) . -1950) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (#(")" 0 1 (fontified t)) . -1951) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) 1952 (t 25818 33164 586106 523000)) nil (25818 33212 414371 606000) 0 nil])
([nil nil ((302 . 303) (t 25818 30577 662627 228000)) ((#("+" 0 1 (fontified t)) . 302)) (25818 32787 427759 895000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1810 . 1811) (nil fontified nil 1687 . 1811) (1687 . 1811)) ((#("	for [T] (opterr: OptError<T>) -> Option<T> {
		opterr.0
	}

	for [T] (opt: Option<T>) -> OptError<T> {
		OptError(opt)
	}

" 0 1 (fontified nil) 1 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (face font-lock-variable-name-face fontified nil) 11 12 (face font-lock-variable-name-face fontified nil) 12 13 (face font-lock-variable-name-face fontified nil) 13 14 (face font-lock-variable-name-face fontified nil) 14 15 (face font-lock-variable-name-face fontified nil) 15 16 (face font-lock-variable-name-face fontified nil) 16 17 (fontified nil) 17 18 (fontified nil) 18 19 (face font-lock-type-face fontified nil) 19 20 (face font-lock-type-face fontified nil) 20 21 (face font-lock-type-face fontified nil) 21 22 (face font-lock-type-face fontified nil) 22 23 (face font-lock-type-face fontified nil) 23 24 (face font-lock-type-face fontified nil) 24 25 (face font-lock-type-face fontified nil) 25 26 (face font-lock-type-face fontified nil) 26 27 (fontified nil) 27 28 (face font-lock-type-face fontified nil) 28 29 (fontified nil) 29 30 (fontified nil) 30 31 (fontified nil) 31 32 (fontified nil) 32 33 (syntax-table (1) fontified nil) 33 34 (fontified nil) 34 35 (face font-lock-type-face fontified nil) 35 36 (face font-lock-type-face fontified nil) 36 37 (face font-lock-type-face fontified nil) 37 38 (face font-lock-type-face fontified nil) 38 39 (face font-lock-type-face fontified nil) 39 40 (face font-lock-type-face fontified nil) 40 41 (fontified nil) 41 42 (face font-lock-type-face fontified nil) 42 43 (fontified nil) 43 45 (fontified nil) 45 46 (fontified nil) 46 47 (fontified nil) 47 48 (fontified nil) 48 56 (fontified nil) 56 57 (fontified nil) 57 58 (fontified nil) 58 59 (fontified nil) 59 60 (fontified nil) 60 61 (fontified nil) 61 62 (fontified nil) 62 65 (face font-lock-keyword-face fontified nil) 65 67 (fontified nil) 67 68 (face font-lock-type-face fontified nil) 68 71 (fontified nil) 71 74 (face font-lock-variable-name-face fontified nil) 74 76 (fontified nil) 76 82 (face font-lock-type-face fontified nil) 82 83 (fontified nil) 83 84 (face font-lock-type-face fontified nil) 84 88 (fontified nil) 88 89 (syntax-table (1) fontified nil) 89 90 (fontified nil) 90 98 (face font-lock-type-face fontified nil) 98 99 (fontified nil) 99 100 (face font-lock-type-face fontified nil) 100 104 (fontified nil) 104 105 (fontified nil) 105 106 (fontified nil) 106 114 (face font-lock-type-face fontified nil) 114 120 (fontified nil) 120 121 (fontified nil) 121 123 (fontified nil) 123 124 (fontified nil rear-nonsticky nil)) . 1687) (undo-tree-id400 . -59) (undo-tree-id401 . -81) (undo-tree-id402 . -1) (undo-tree-id403 . -59) (undo-tree-id404 . -45) (undo-tree-id405 . -45) (undo-tree-id406 . -44) (undo-tree-id407 . -44) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (nil fontified t 1808 . 1810) (nil fontified t 1807 . 1808) (nil fontified t 1801 . 1807) (nil fontified t 1793 . 1801) (nil fontified t 1792 . 1793) (nil fontified t 1791 . 1792) (nil fontified t 1787 . 1791) (nil fontified t 1786 . 1787) (nil fontified t 1785 . 1786) (nil fontified t 1777 . 1785) (nil fontified t 1776 . 1777) (nil fontified t 1775 . 1776) (nil fontified t 1771 . 1775) (nil fontified t 1770 . 1771) (nil fontified t 1769 . 1770) (nil fontified t 1763 . 1769) (nil fontified t 1761 . 1763) (nil fontified t 1758 . 1761) (nil fontified t 1755 . 1758) (nil fontified t 1754 . 1755) (nil fontified t 1752 . 1754) (nil fontified t 1749 . 1752) (nil fontified t 1748 . 1749) (nil fontified t 1747 . 1748) (nil fontified t 1746 . 1747) (nil fontified t 1745 . 1746) (nil fontified t 1744 . 1745) (nil fontified t 1743 . 1744) (nil fontified t 1735 . 1743) (nil fontified t 1734 . 1735) (nil fontified t 1733 . 1734) (nil fontified t 1732 . 1733) (nil fontified t 1730 . 1732) (nil fontified t 1729 . 1730) (nil fontified t 1728 . 1729) (nil fontified t 1727 . 1728) (nil fontified t 1726 . 1727) (nil fontified t 1725 . 1726) (nil fontified t 1724 . 1725) (nil fontified t 1723 . 1724) (nil fontified t 1722 . 1723) (nil fontified t 1721 . 1722) (nil fontified t 1720 . 1721) (nil fontified t 1719 . 1720) (nil fontified t 1718 . 1719) (nil fontified t 1717 . 1718) (nil fontified t 1716 . 1717) (nil fontified t 1715 . 1716) (nil fontified t 1714 . 1715) (nil fontified t 1713 . 1714) (nil fontified t 1712 . 1713) (nil fontified t 1711 . 1712) (nil fontified t 1710 . 1711) (nil fontified t 1709 . 1710) (nil fontified t 1708 . 1709) (nil fontified t 1707 . 1708) (nil fontified t 1706 . 1707) (nil fontified t 1705 . 1706) (nil fontified t 1704 . 1705) (nil fontified t 1703 . 1704) (nil fontified t 1702 . 1703) (nil fontified t 1701 . 1702) (nil fontified t 1700 . 1701) (nil fontified t 1699 . 1700) (nil fontified t 1698 . 1699) (nil fontified t 1697 . 1698) (nil fontified t 1696 . 1697) (nil fontified t 1695 . 1696) (nil fontified t 1694 . 1695) (nil fontified t 1693 . 1694) (nil fontified t 1692 . 1693) (nil fontified t 1691 . 1692) (nil fontified t 1688 . 1691) (nil fontified t 1687 . 1688) (nil rear-nonsticky t 1810 . 1811)) (25818 30103 662643 289000) 0 nil])
([nil nil ((apply yas--snippet-revive 1976 1982 #s(yas--snippet nil nil #s(yas--exit 1982 nil) 77 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1982 nil) 77 nil nil nil nil)) (1976 . 1982) (#("into()$0" 0 8 (fontified nil)) . 1976) (1976 . 1984) (#("into" 0 4 (fontified nil)) . 1976) (1976 . 1980) (#("into() (as Into)" 0 16 (fontified nil)) . -1976) (1976 . 1992) (#("into" 0 4 (fontified t)) . -1976) (undo-tree-id1610 . -4) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -4) (undo-tree-id1614 . -4) (undo-tree-id1615 . -4) (undo-tree-id1616 . -4) (undo-tree-id1617 . -4) 1980 (1975 . 1980) (1958 . 1959) (#("." 0 1 (fontified t)) . -1958) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (#("i" 0 1 (fontified t)) . -1959) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -1960) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (#("t" 0 1 (fontified t)) . -1961) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (#("o" 0 1 (fontified t)) . -1962) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (#("(" 0 1 (fontified t)) . -1963) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (#(")" 0 1 (fontified t)) . -1964) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) 1965 (1939 . 1952) (1950 . 1952) (1945 . 1950) (t 25818 33212 422768 283000)) nil (25818 33281 811724 772000) 0 nil])
([nil nil ((449 . 461) (444 . 449) (437 . 444) (#("n" 0 1 (fontified t)) . -437) (undo-tree-id564 . -1) 438 (428 . 438) (353 . 354) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -353) (undo-tree-id565 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -354) (undo-tree-id566 . -1) (#("g" 0 1 (face font-lock-variable-name-face fontified t)) . -355) (undo-tree-id567 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -356) (undo-tree-id568 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -357) (undo-tree-id569 . -1) 358 (353 . 358) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -353) (undo-tree-id570 . -1) 354 (414 . 428) (409 . 414) (#("	" 0 1 (fontified nil)) . -413) (undo-tree-id571 . -1) (414 . 415) (409 . 414) (391 . 409) (378 . 391) (366 . 373) (345 . 366) (343 . 345) (#(" " 0 1 (fontified nil)) . 343) (342 . 343) (344 . 348) (#("	" 0 1 (fontified nil)) . -347) (undo-tree-id572 . -1) (348 . 349) (344 . 348) (335 . 344) (280 . 292) (#("$" 0 1 (face font-lock-variable-name-face fontified t)) . -323) (undo-tree-id573 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -324) (undo-tree-id574 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -325) (undo-tree-id575 . -1) 326 (314 . 326) (304 . 314) (#(":" 0 1 (fontified t)) . -304) (undo-tree-id576 . -1) (#("t" 0 1 (fontified t)) . -305) (undo-tree-id577 . -1) (#("t" 0 1 (fontified t)) . -306) (undo-tree-id578 . -1) 307 (302 . 307) (293 . 302) (#("$" 0 1 (fontified t)) . -293) (undo-tree-id579 . -1) (#("(" 0 1 (fontified t)) . -294) (undo-tree-id580 . -1) 295 (293 . 295) (#(" " 0 1 (fontified t)) . -293) (undo-tree-id581 . -1) 294 (259 . 262) (244 . 245) (#("$" 0 1 (fontified t)) . -244) (undo-tree-id582 . -1) (#("(" 0 1 (fontified t)) . -245) (undo-tree-id583 . -1) (#("(" 0 1 (fontified t)) . -246) (undo-tree-id584 . -1) 247 (246 . 247) (244 . 248) (284 . 288) (283 . 284) (280 . 283) (#("	" 0 1 (fontified nil)) . -282) (undo-tree-id585 . -1) (283 . 284) (280 . 283) (274 . 280) (236 . 239) (221 . 236) (245 . 256) (225 . 245) (223 . 225) (221 . 223) (188 . 190) (#("i" 0 1 (fontified t)) . -188) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (#("d" 0 1 (fontified t)) . -189) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (#("e" 0 1 (fontified t)) . -190) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (#("n" 0 1 (fontified t)) . -191) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (#("t" 0 1 (fontified t)) . -192) (undo-tree-id594 . -1) (undo-tree-id595 . -1) 193 (180 . 182) (#("i" 0 1 (fontified t)) . -180) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (#("=" 0 1 (fontified t)) . -181) (undo-tree-id599 . -1) 182 (181 . 182) (#("d" 0 1 (fontified t)) . -181) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (#("e" 0 1 (fontified t)) . -182) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (#("n" 0 1 (fontified t)) . -183) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (#("t" 0 1 (fontified t)) . -184) (undo-tree-id609 . -1) 185 (220 . 227) (#("k" 0 1 (fontified t)) . -220) (undo-tree-id610 . -1) 221 (217 . 221) (206 . 217) (160 . 172) (#("(" 0 1 (fontified t)) . -160) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (#("$" 0 1 (fontified t)) . -161) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (#("(" 0 1 (fontified t)) . -162) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (#("$" 0 1 (fontified t)) . -163) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (#("g" 0 1 (fontified t)) . -164) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (#("e" 0 1 (fontified t)) . -165) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (#("n" 0 1 (fontified t)) . -166) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (#("e" 0 1 (fontified t)) . -167) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (#("r" 0 1 (fontified t)) . -168) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (#("i" 0 1 (fontified t)) . -169) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (#("c" 0 1 (fontified t)) . -170) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (#("s" 0 1 (fontified t)) . -171) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (#(":" 0 1 (fontified t)) . -172) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (#("t" 0 1 (fontified t)) . -173) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (#("t" 0 1 (fontified t)) . -174) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (#(")" 0 1 (fontified t)) . -175) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (#("*" 0 1 (fontified t)) . -176) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (#(")" 0 1 (fontified t)) . -177) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) 178 (211 . 212) (#("(" 0 1 (fontified t)) . -211) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (#("W" 0 1 (face font-lock-type-face fontified t)) . -212) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -213) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -214) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -215) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -216) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -217) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -218) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -219) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -220) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -221) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -222) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (#("<" 0 1 (syntax-table (1) fontified t)) . -223) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) 224 (200 . 202) (179 . 200) (178 . 179) (176 . 177) (161 . 176) (#("g" 0 1 (fontified t)) . -161) (undo-tree-id704 . -1) (#("e" 0 1 (fontified t)) . -162) (undo-tree-id705 . -1) (#("n" 0 1 (fontified t)) . -163) (undo-tree-id706 . -1) (#("e" 0 1 (fontified t)) . -164) (undo-tree-id707 . -1) 165 (161 . 165) (160 . 162) (170 . 182) (#("n" 0 1 (fontified t)) . -170) (undo-tree-id708 . -1) (#("a" 0 1 (fontified t)) . -171) (undo-tree-id709 . -1) (#("m" 0 1 (fontified t)) . -172) (undo-tree-id710 . -1) (#("e" 0 1 (fontified t)) . -173) (undo-tree-id711 . -1) 174 (171 . 174) (159 . 171) (157 . 159) (#("	" 0 1 (fontified nil)) . -158) (undo-tree-id712 . -1) (159 . 160) (157 . 159) (144 . 157) (#("_" 0 1 (fontified t)) . -144) (undo-tree-id713 . -1) (#("r" 0 1 (fontified t)) . -145) (undo-tree-id714 . -1) (#("u" 0 1 (fontified t)) . -146) (undo-tree-id715 . -1) (#("l" 0 1 (fontified t)) . -147) (undo-tree-id716 . -1) (#("e" 0 1 (fontified t)) . -148) (undo-tree-id717 . -1) (#("s" 0 1 (fontified t)) . -149) (undo-tree-id718 . -1) (#("!" 0 1 (fontified t)) . -150) (undo-tree-id719 . -1) (#(" " 0 1 (fontified t)) . -151) (undo-tree-id720 . -1) (#("c" 0 1 (fontified t)) . -152) (undo-tree-id721 . -1) (#("t" 0 1 (fontified t)) . -153) (undo-tree-id722 . -1) (#("x" 0 1 (fontified t)) . -154) (undo-tree-id723 . -1) 155 (150 . 155) (146 . 150) (#("l" 0 1 (fontified t)) . -146) (undo-tree-id724 . -1) 147 (139 . 147) (138 . 140) (t 25818 30649 469339 438000)) ((#("

" 0 1 (fontified t) 1 2 (fontified nil)) . 138) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (#("macro_rl" 0 5 (face font-lock-preprocessor-face fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 139) (undo-tree-id1374 . -5) (undo-tree-id1375 . -5) (undo-tree-id1376 . -5) (undo-tree-id1377 . -5) (undo-tree-id1378 . -8) (undo-tree-id1379 . -5) (undo-tree-id1380 . -5) (146 . 147) (#("ules" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 146) (undo-tree-id1381 . -4) (#("! ctx" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 150) (undo-tree-id1382 . -5) (144 . 155) (#("_rules! ctx {" 0 7 (face font-lock-preprocessor-face fontified nil) 7 13 (fontified nil)) . 144) (undo-tree-id1383 . -13) (undo-tree-id1384 . -13) (undo-tree-id1385 . -13) (undo-tree-id1386 . -13) (undo-tree-id1387 . -13) (undo-tree-id1388 . -13) (undo-tree-id1389 . -13) (#("
	" 0 1 (fontified nil) 1 2 (fontified nil)) . 157) (#("}" 0 1 (fontified nil)) . 159) (158 . 159) (#("
	" 0 1 (fontified t) 1 2 (fontified nil)) . 157) (undo-tree-id1390 . -2) (undo-tree-id1391 . -2) (undo-tree-id1392 . -2) (undo-tree-id1393 . -2) (undo-tree-id1394 . -2) (undo-tree-id1395 . -1) (undo-tree-id1396 . -2) (#("() => ctx!(n" 0 1 (fontified nil) 1 4 (fontified nil) 4 5 (syntax-table (1) fontified nil) 5 6 (fontified nil) 6 10 (face font-lock-preprocessor-face fontified nil) 10 11 (fontified nil) 11 12 (fontified nil)) . 159) (undo-tree-id1397 . -1) (undo-tree-id1398 . -11) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -6) (undo-tree-id1402 . -6) (#("ame" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 171) (170 . 174) (#("WithContext<" 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (face font-lock-type-face fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (face font-lock-type-face fontified nil) 8 9 (face font-lock-type-face fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (face font-lock-type-face fontified nil) 11 12 (syntax-table (1) fontified nil)) . 170) (undo-tree-id1403 . -12) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 160) (undo-tree-id1404 . -2) (undo-tree-id1405 . -2) (undo-tree-id1406 . -2) (#("gene" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 161) (161 . 165) (#("$($generics:tt)" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil) 13 14 (fontified nil) 14 15 (fontified nil)) . 161) (#("*" 0 1 (fontified nil)) . 176) (#("," 0 1 (fontified nil)) . 178) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (#(" $from:ident, $to:ide" 0 1 (fontified nil) 1 6 (face font-lock-variable-name-face fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 14 (fontified nil) 14 17 (face font-lock-variable-name-face fontified nil) 17 18 (fontified nil) 18 19 (fontified nil) 19 20 (fontified nil) 20 21 (fontified nil)) . 179) (undo-tree-id1409 . -21) (undo-tree-id1410 . -11) (#("nt" 0 1 (fontified nil) 1 2 (fontified nil)) . 200) (undo-tree-id1411 . -2) (211 . 224) (#("(" 0 1 (fontified nil)) . 211) (160 . 178) (#("$generics:tt" 0 9 (face font-lock-variable-name-face fontified nil) 9 12 (fontified nil)) . 160) (#("$generics, " 0 11 (fontified nil)) . 206) (#("$frk" 0 3 (fontified nil) 3 4 (fontified nil)) . 217) (220 . 221) (#("om, $to" 0 7 (fontified nil)) . 220) (181 . 185) (#("=" 0 1 (fontified nil)) . 181) (180 . 182) (#("ty" 0 2 (fontified nil)) . 180) (188 . 193) (#("ty" 0 2 (fontified nil)) . 188) (#(")," 0 1 (fontified nil) 1 2 (fontified nil)) . 221) (#("
	" 0 1 (fontified nil) 1 2 (fontified nil)) . 223) (#("($generics:tt, $from" 0 1 (fontified nil) 1 10 (face font-lock-variable-name-face fontified nil) 10 15 (fontified nil) 15 20 (face font-lock-variable-name-face fontified nil)) . 225) (#(":ty, $to:ty" 0 5 (fontified nil) 5 8 (face font-lock-variable-name-face fontified nil) 8 11 (fontified nil)) . 245) (#(", WithContext<$" 0 2 (fontified nil) 2 13 (face font-lock-type-face fontified nil) 13 14 (syntax-table (1) fontified nil) 14 15 (fontified nil)) . 221) (#("to>" 0 2 (fontified t) 2 3 (syntax-table (1) fontified t)) . 236) (#(") => {" 0 3 (fontified nil) 3 4 (syntax-table (1) fontified nil) 4 6 (fontified nil)) . 274) (#("
		" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 280) (#("}" 0 1 (fontified nil)) . 283) (282 . 283) (#("
		" 0 1 (fontified nil) 1 3 (fontified nil)) . 280) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . 283) (#("mpl " 0 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil)) . 284) (#("$($(" 0 1 (fontified nil) 1 2 (fontified nil) 2 4 (fontified nil)) . 244) (#("(" 0 1 (fontified nil)) . 246) (244 . 247) (#("(" 0 1 (fontified nil)) . 244) (#(")*)" 0 3 (fontified nil)) . 259) (293 . 294) (#("$(" 0 1 (fontified nil) 1 2 (fontified nil)) . 293) (293 . 295) (#(" $(generi" 0 3 (fontified nil) 3 9 (fontified nil)) . 293) (#("cs:tt" 0 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 302) (304 . 307) (#(")* From<$f" 0 3 (fontified nil) 3 7 (face font-lock-type-face fontified nil) 7 8 (syntax-table (1) fontified nil) 8 10 (fontified nil)) . 304) (#("rom> for $to" 0 3 (fontified nil) 3 4 (syntax-table (1) fontified nil) 4 5 (fontified nil) 5 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 10 (face font-lock-variable-name-face fontified nil) 10 11 (face font-lock-variable-name-face fontified nil) 11 12 (face font-lock-variable-name-face fontified nil)) . 314) (323 . 326) (#(", $target:ty" 0 2 (fontified t) 2 9 (face font-lock-variable-name-face fontified t) 9 12 (fontified t)) . 280) (#("$target {" 0 7 (face font-lock-variable-name-face fontified nil) 7 8 (fontified nil) 8 9 (fontified nil)) . 335) (#("
			" 0 1 (fontified nil) 1 3 (fontified nil) 3 4 (fontified nil)) . 344) (#("}" 0 1 (fontified nil)) . 348) (347 . 348) (#("
			" 0 1 (fontified nil) 1 4 (fontified nil)) . 344) (#("
" 0 1 (fontified t)) . 342) (343 . 344) (#("		" 0 2 (fontified nil)) . 343) (#("where $to: Contextual" 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil) 6 8 (face font-lock-variable-name-face fontified nil) 8 9 (face font-lock-variable-name-face fontified nil) 9 11 (fontified nil) 11 21 (face font-lock-type-face fontified nil)) . 345) (#("izable " 0 6 (face font-lock-type-face fontified nil) 6 7 (fontified nil)) . 366) (#("fn from(value" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 7 (face font-lock-function-name-face fontified nil) 7 8 (fontified nil) 8 13 (face font-lock-variable-name-face fontified nil)) . 378) (#(": $from) -> Self {" 0 10 (fontified nil) 10 11 (syntax-table (1) fontified nil) 11 12 (fontified nil) 12 16 (face font-lock-type-face fontified nil) 16 18 (fontified nil)) . 391) (#("
				" 0 1 (fontified nil) 1 4 (fontified nil) 4 5 (fontified nil)) . 409) (#("}" 0 1 (fontified nil)) . 414) (413 . 414) (#("
				" 0 1 (fontified t) 1 5 (fontified nil)) . 409) (#("let noctx: $to" 0 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 9 (face font-lock-variable-name-face fontified nil) 9 14 (fontified nil)) . 414) (353 . 354) (#("arget" 0 1 (face font-lock-variable-name-face fontified nil) 1 2 (face font-lock-variable-name-face fontified nil) 2 3 (face font-lock-variable-name-face fontified nil) 3 4 (face font-lock-variable-name-face fontified nil) 4 5 (face font-lock-variable-name-face fontified nil)) . 353) (353 . 358) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . 353) (#(" = value.n" 0 9 (fontified nil) 9 10 (fontified nil)) . 428) (437 . 438) (#("into();" 0 7 (fontified nil)) . 437) (#("
				" 0 1 (fontified t) 1 5 (fontified nil)) . 444) (#("noctx.into()" 0 6 (fontified t) 6 12 (fontified t)) . 449)) (25818 32787 315967 218000) 0 nil])
([nil nil ((1711 . 1720) (#(">" 0 1 (syntax-table (1) fontified t)) . -1711) (undo-tree-id235 . -1) (#(" " 0 1 (fontified t)) . -1712) (undo-tree-id236 . -1) (#("[" 0 1 (fontified t)) . -1713) (undo-tree-id237 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1714) (undo-tree-id238 . -1) (#("]" 0 1 (fontified t)) . -1715) (undo-tree-id239 . -1) (#(" " 0 1 (fontified t)) . -1716) (undo-tree-id240 . -1) (#("(" 0 1 (fontified t)) . -1717) (undo-tree-id241 . -1) (#("o" 0 1 (fontified t)) . -1718) (undo-tree-id242 . -1) (#("p" 0 1 (fontified t)) . -1719) (undo-tree-id243 . -1) (#("t" 0 1 (fontified t)) . -1720) (undo-tree-id244 . -1) (#("e" 0 1 (fontified t)) . -1721) (undo-tree-id245 . -1) (#("r" 0 1 (fontified t)) . -1722) (undo-tree-id246 . -1) (#("r" 0 1 (fontified t)) . -1723) (undo-tree-id247 . -1) (#(":" 0 1 (fontified t)) . -1724) (undo-tree-id248 . -1) (#(" " 0 1 (fontified t)) . -1725) (undo-tree-id249 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1726) (undo-tree-id250 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1727) (undo-tree-id251 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1728) (undo-tree-id252 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1729) (undo-tree-id253 . -1) 1730 (#("r" 0 1 (face font-lock-type-face fontified t)) . -1730) (undo-tree-id254 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1731) (undo-tree-id255 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1732) (undo-tree-id256 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1733) (undo-tree-id257 . -1) (#("<" 0 1 (fontified t)) . -1734) (undo-tree-id258 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1735) (undo-tree-id259 . -1) (#(">" 0 1 (fontified t)) . -1736) (undo-tree-id260 . -1) (#(")" 0 1 (fontified t)) . -1737) (undo-tree-id261 . -1) (#(" " 0 1 (fontified t)) . -1738) (undo-tree-id262 . -1) (#("-" 0 1 (fontified t)) . -1739) (undo-tree-id263 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -1740) (undo-tree-id264 . -1) (#(" " 0 1 (fontified t)) . -1741) (undo-tree-id265 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1742) (undo-tree-id266 . -1) (#("p" 0 1 (face font-lock-type-face fontified nil)) . -1743) (undo-tree-id267 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1744) (undo-tree-id268 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1745) (undo-tree-id269 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1746) (undo-tree-id270 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1747) (undo-tree-id271 . -1) (#("<" 0 1 (fontified t)) . -1748) (undo-tree-id272 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1749) (undo-tree-id273 . -1) (#(">" 0 1 (fontified t)) . -1750) (undo-tree-id274 . -1) 1751 (1704 . 1711) (apply yas--snippet-revive 1695 1705 #s(yas--snippet nil nil #s(yas--exit #<marker at 1793 in conversions.rs> nil) 68 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 1793 in conversions.rs> nil) 68 nil nil nil nil)) (1695 . 1705) (#("OptError<$0>" 0 12 (fontified nil)) . 1695) (1695 . 1707) (#("Optfor" 0 3 (fontified nil) 3 6 (face font-lock-type-face fontified nil)) . 1695) (1695 . 1698) (#("OptError<…>" 0 11 (fontified nil)) . -1695) (1695 . 1706) (#("Opt" 0 3 (face font-lock-type-face fontified t)) . -1695) (undo-tree-id275 . -3) 1698 (1691 . 1698) (#(" " 0 1 (fontified t)) . -1691) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -1692) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1693) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1694) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -1695) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("<" 0 1 (fontified t)) . -1696) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1697) (undo-tree-id288 . -1) (undo-tree-id289 . -1) 1698 (1687 . 1698) (#("	" 0 1 (fontified t)) . -1802) (undo-tree-id290 . -1) 1803 (#("	" 0 1 (fontified t)) . -1788) 1787 (#("	" 0 1 (fontified t)) . -1745) (#("	" 0 1 (fontified t)) . -1742) (undo-tree-id291 . -1) 1743 (#("	" 0 1 (fontified t)) . -1733) 1732 (#("	" 0 1 (fontified t)) . -1687)) ((1687 . 1688) (1733 . 1734) (1742 . 1743) (1745 . 1746) (1788 . 1789) (1802 . 1803) (#("impl From<O" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (face font-lock-type-face fontified nil) 8 9 (face font-lock-type-face fontified nil) 9 10 (fontified nil) 10 11 (face font-lock-type-face fontified nil)) . 1687) (undo-tree-id395 . -4) (undo-tree-id396 . -4) (1691 . 1698) (#("<T> Opt" 0 1 (fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 4 (fontified nil) 4 7 (face font-lock-type-face fontified nil)) . 1691) (undo-tree-id397 . -4) (undo-tree-id398 . -4) (1695 . 1698) (#("OptError<…>" 0 11 (fontified nil)) . 1695) (1695 . 1706) (#("Opt" 0 3 (fontified nil)) . 1695) (1695 . 1701) (#("OptError<$0>" 0 12 (fontified nil)) . 1695) (1695 . 1707) (#("OptError<>" 0 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil) 9 10 (syntax-table (1) fontified nil)) . 1695) (undo-tree-id399 . -9) (#("T> for " 0 1 (face font-lock-type-face fontified nil) 1 3 (fontified nil) 3 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil)) . 1704) (1711 . 1751) (#("Option<T>" 0 6 (face font-lock-type-face fontified t) 6 7 (fontified t) 7 8 (face font-lock-type-face fontified t) 8 9 (fontified t)) . 1711)) (25818 30103 123204 922000) 0 nil])
([nil nil ((1961 . 1962) (1948 . 1961) (#("Interna" 0 7 (fontified nil)) . 1948) (1948 . 1955) (#("InternalError" 0 13 (fontified nil)) . -1948) (1948 . 1961) (#("Interna" 0 7 (face font-lock-type-face fontified t)) . -1948) (undo-tree-id1632 . -7) (undo-tree-id1633 . -7) (undo-tree-id1634 . -7) (undo-tree-id1635 . -7) 1955 (1945 . 1955) (t 25818 33281 819428 622000)) nil (25818 33291 167368 129000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -246) (undo-tree-id725 . -2) (undo-tree-id727 . -2) (248 . 249) (244 . 248) (196 . 199) (195 . 196) (t 25818 31227 69566 246000)) ((#("{" 0 1 (fontified nil)) . 195) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (#("
		" 0 1 (fontified t) 1 3 (fontified nil)) . 196) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (#("
			" 0 1 (fontified t) 1 2 (fontified nil) 2 4 (fontified nil)) . 244) (undo-tree-id1362 . -4) (undo-tree-id1363 . -2) (undo-tree-id1364 . -2) (undo-tree-id1365 . -1) (#("}" 0 1 (fontified nil)) . 248) (undo-tree-id1366 . -1) (246 . 248)) (25818 32786 715981 410000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -1782) (undo-tree-id226 . -2) (1784 . 1785) (1781 . 1784) (1771 . 1772) (1779 . 1780) (1758 . 1769) (1711 . 1712) (1695 . 1700) (1749 . 1751) (apply yas--snippet-revive 1740 1750 #s(yas--snippet nil nil #s(yas--exit #<marker at 1793 in conversions.rs> nil) 69 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 1793 in conversions.rs> nil) 69 nil nil nil nil)) (1740 . 1750) (#("OptError<$0>" 0 12 (fontified nil)) . 1740) (1740 . 1752) (#("OptE" 0 4 (fontified nil)) . 1740) (1740 . 1744) (#("OptError<…>" 0 11 (fontified nil)) . -1740) (1740 . 1751) (#("OptE" 0 4 (face font-lock-type-face fontified t)) . -1740) (undo-tree-id227 . -4) 1744 (1740 . 1744) (#("c" 0 1 (fontified t)) . -1740) (undo-tree-id228 . -1) (#("r" 0 1 (fontified t)) . -1741) (undo-tree-id229 . -1) (#("a" 0 1 (fontified t)) . -1742) (undo-tree-id230 . -1) (#("t" 0 1 (fontified t)) . -1743) (undo-tree-id231 . -1) 1744 (1742 . 1744) (#("a" 0 1 (fontified t)) . -1742) (undo-tree-id232 . -1) (#("t" 0 1 (fontified t)) . -1743) (undo-tree-id233 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -1744) (undo-tree-id234 . -1) 1745 (1732 . 1745) (1724 . 1732) (1722 . 1724)) ((#("
	" 0 1 (fontified nil) 1 2 (fontified nil)) . 1722) (undo-tree-id391 . -2) (#("fn from(" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 7 (face font-lock-function-name-face fontified nil) 7 8 (fontified nil)) . 1724) (undo-tree-id392 . -8) (#("opterr: crate" 0 6 (face font-lock-variable-name-face fontified nil) 6 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (face font-lock-keyword-face fontified nil)) . 1732) (undo-tree-id393 . -8) (1742 . 1745) (#("at" 0 1 (fontified nil) 1 2 (fontified nil)) . 1742) (1740 . 1744) (#("OptE" 0 4 (face font-lock-type-face fontified nil)) . 1740) (1740 . 1744) (#("OptError<…>" 0 11 (fontified nil)) . 1740) (1740 . 1751) (#("OptE" 0 4 (fontified nil)) . 1740) (1740 . 1744) (#("OptError<$0>" 0 12 (fontified nil)) . 1740) (1740 . 1752) (#("OptError<>" 0 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil) 9 10 (fontified nil syntax-table (1))) . 1740) (undo-tree-id394 . -9) (#("T>" 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil)) . 1749) (#("From<" 0 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil)) . 1695) (#(">" 0 1 (fontified t)) . 1711) (#(") -> Self {" 0 3 (fontified t) 3 4 (fontified t syntax-table (1)) 4 5 (fontified t) 5 9 (face font-lock-type-face fontified t) 9 11 (fontified t)) . 1758) (#("
" 0 1 (fontified nil)) . 1779) (#("	" 0 1 (fontified t)) . 1771) (#("			" 0 1 (fontified nil) 1 3 (fontified nil)) . 1781) (#("}" 0 1 (fontified nil)) . 1784) (1782 . 1784)) (25818 30102 322978 745000) 0 nil])
([nil nil ((2234 . 2236) (#("_" 0 1 (fontified t)) . -2234) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (#("i" 0 1 (fontified t)) . -2235) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (#("t" 0 1 (fontified t)) . -2236) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (#("e" 0 1 (fontified t)) . -2237) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (#("r" 0 1 (fontified t)) . -2238) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (#("(" 0 1 (fontified t)) . -2239) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (#(")" 0 1 (fontified t)) . -2240) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) 2241 (apply yas--snippet-revive 2230 2241 #s(yas--snippet nil nil #s(yas--exit 2241 nil) 106 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2241 nil) 106 nil nil nil nil)) (2230 . 2241) (#("into_iter()$0" 0 13 (fontified nil)) . 2230) (2230 . 2243) (#("into" 0 4 (fontified nil)) . 2230) (2230 . 2234) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -2230) (2230 . 2259) (#("into" 0 4 (fontified t)) . -2230) (undo-tree-id1678 . -4) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -4) (undo-tree-id1682 . -4) (undo-tree-id1683 . -4) (undo-tree-id1684 . -4) 2234 (2217 . 2234) (#("O" 0 1 (face font-lock-type-face fontified t)) . -2217) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -2218) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2219) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -2220) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2221) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2222) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -2223) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2224) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (#("(" 0 1 (fontified t)) . -2225) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (#("(" 0 1 (fontified t)) . -2226) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (#(")" 0 1 (fontified t)) . -2227) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (#(")" 0 1 (fontified t)) . -2228) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) 2229 (apply yas--snippet-revive 2217 2229 #s(yas--snippet nil (#s(yas--field 1 2226 2228 nil nil nil nil #s(yas--exit 2229 nil))) #s(yas--exit 2229 nil) 105 nil #s(yas--field 1 2226 2228 nil nil nil nil #s(yas--exit 2229 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2226 2228 nil nil nil nil #s(yas--exit 2229 nil))) #s(yas--exit 2229 nil) 105 nil #s(yas--field 1 2226 2228 nil nil nil nil #s(yas--exit 2229 nil)) nil nil)) (2217 . 2229) (#("OptError(${1:()})$0" 0 19 (fontified nil)) . 2217) (2217 . 2236) (#("Opt" 0 3 (fontified nil)) . 2217) (2217 . 2220) (#("OptError(…)" 0 11 (fontified nil)) . -2217) (2217 . 2228) (#("Opt" 0 3 (face font-lock-type-face fontified t)) . -2217) (undo-tree-id1709 . -3) 2220 (2217 . 2220) (2214 . 2217) (2213 . 2214) (apply yas--snippet-revive 2174 2213 #s(yas--snippet nil (#s(yas--field 1 2193 2212 nil nil nil t #s(yas--exit 2213 nil))) #s(yas--exit 2213 nil) 104 nil #s(yas--field 1 2193 2212 nil nil nil t #s(yas--exit 2213 nil)) nil nil)) (2206 . 2212) (2193 . 2206) (#("Internal" 0 8 (fontified nil)) . 2193) (2193 . 2201) (#("InternalError" 0 13 (fontified nil)) . -2193) (2193 . 2206) (#("Internal" 0 8 (face font-lock-type-face fontified t)) . -2193) (undo-tree-id1710 . -8) (undo-tree-id1711 . -8) 2201 (2194 . 2201) (#("f" 0 1 (fontified nil)) . 2194) (2193 . 2194) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2193 2212 nil nil nil t #s(yas--exit 2213 nil))) #s(yas--exit 2213 nil) 104 nil #s(yas--field 1 2193 2212 nil nil nil t #s(yas--exit 2213 nil)) nil nil)) (2174 . 2195) (#("map_contextualized(${1:f})$0" 0 28 (fontified nil)) . 2174) (2174 . 2202) (#("map" 0 3 (fontified nil)) . 2174) (2174 . 2177) (#("map_contextualized(…) (as Contextualizable)" 0 43 (fontified nil)) . -2174) (2174 . 2217) (#("map" 0 3 (fontified t)) . -2174) (undo-tree-id1712 . -3) 2177 (2173 . 2177) (#("." 0 1 (fontified t)) . -2173) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (#("m" 0 1 (fontified t)) . -2174) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (#("a" 0 1 (fontified t)) . -2175) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (#("p" 0 1 (fontified t)) . -2176) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) 2177 (2173 . 2177) (#("." 0 1 (fontified t)) . -2173) (undo-tree-id1725 . -1) 2174 (2166 . 2174) (#("]" 0 1 (fontified t)) . -2166) (undo-tree-id1726 . -1) (#(" " 0 1 (fontified t)) . -2167) (undo-tree-id1727 . -1) 2168 (2165 . 2168) (2151 . 2164) (#("Intern" 0 6 (fontified nil)) . 2151) (2151 . 2157) (#("InternalError" 0 13 (fontified nil)) . -2151) (2151 . 2164) (#("Intern" 0 6 (face font-lock-type-face fontified t)) . -2151) (undo-tree-id1728 . -6) (undo-tree-id1729 . -6) 2157 (2151 . 2157) (apply yas--snippet-revive 2139 2152 #s(yas--snippet nil nil #s(yas--exit 2151 nil) 101 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2151 nil) 101 nil nil nil nil)) (2139 . 2152) (#("WithContext<$0>" 0 15 (fontified nil)) . 2139) (2139 . 2154) (#("WithC" 0 5 (fontified nil)) . 2139) (2139 . 2144) (#("WithContext<…>" 0 14 (fontified nil)) . -2139) (2139 . 2153) (#("WithC" 0 5 (face font-lock-type-face fontified t)) . -2139) (undo-tree-id1730 . -5) 2144 (2132 . 2144) (2127 . 2132) (2124 . 2127) (#("	" 0 1 (fontified nil)) . -2126) (undo-tree-id1731 . -1) (2127 . 2128) (2124 . 2127) (2113 . 2124) (2107 . 2112) (#("Err" 0 3 (fontified nil)) . 2107) (2107 . 2110) (#("Error" 0 5 (fontified nil)) . -2107) (2107 . 2112) (#("Err" 0 3 (face font-lock-type-face fontified t)) . -2107) (undo-tree-id1732 . -3) (undo-tree-id1733 . -3) 2110 (2107 . 2110) (apply yas--snippet-revive 2095 2108 #s(yas--snippet nil nil #s(yas--exit 2107 nil) 100 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2107 nil) 100 nil nil nil nil)) (2095 . 2108) (#("WithContext<$0>" 0 15 (fontified nil)) . 2095) (2095 . 2110) (#("WithCon" 0 7 (fontified nil)) . 2095) (2095 . 2102) (#("WithContext<…>" 0 14 (fontified nil)) . -2095) (2095 . 2109) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -2095) (undo-tree-id1734 . -7) 2102 (2101 . 2102) (2080 . 2101) (2078 . 2080) (#("	" 0 1 (fontified nil)) . -2079) (undo-tree-id1735 . -1) (2080 . 2081) (2078 . 2080) (2076 . 2078) (2061 . 2074) (#("Inter" 0 5 (fontified nil)) . 2061) (2061 . 2066) (#("InternalError" 0 13 (fontified nil)) . -2061) (2061 . 2074) (#("Inter" 0 5 (face font-lock-type-face fontified t)) . -2061) (undo-tree-id1736 . -5) (undo-tree-id1737 . -5) 2066 (2061 . 2066) (apply yas--snippet-revive 2049 2062 #s(yas--snippet nil nil #s(yas--exit 2061 nil) 99 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2061 nil) 99 nil nil nil nil)) (2049 . 2062) (#("WithContext<$0>" 0 15 (fontified nil)) . 2049) (2049 . 2064) (#("WithC" 0 5 (fontified nil)) . 2049) (2049 . 2054) (#("WithContext<…>" 0 14 (fontified nil)) . -2049) (2049 . 2063) (#("WithC" 0 5 (face font-lock-type-face fontified t)) . -2049) (undo-tree-id1738 . -5) (undo-tree-id1739 . -5) 2054 (2049 . 2054) (apply yas--snippet-revive 2040 2050 #s(yas--snippet nil nil #s(yas--exit 2049 nil) 98 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2049 nil) 98 nil nil nil nil)) (2040 . 2050) (#("OptError<$0>" 0 12 (fontified nil)) . 2040) (2040 . 2052) (#("OptE" 0 4 (fontified nil)) . 2040) (2040 . 2044) (#("OptError<…>" 0 11 (fontified nil)) . -2040) (2040 . 2051) (#("OptE" 0 4 (face font-lock-type-face fontified t)) . -2040) (undo-tree-id1740 . -4) 2044 (2040 . 2044) (2028 . 2033) (#("Err" 0 3 (fontified nil)) . 2028) (2028 . 2031) (#("Error" 0 5 (fontified nil)) . -2028) (2028 . 2033) (#("Err" 0 3 (face font-lock-type-face fontified t)) . -2028) (undo-tree-id1741 . -3) (undo-tree-id1742 . -3) 2031 (2028 . 2031) (apply yas--snippet-revive 2016 2029 #s(yas--snippet nil nil #s(yas--exit 2028 nil) 97 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2028 nil) 97 nil nil nil nil)) (2016 . 2029) (#("WithContext<$0>" 0 15 (fontified nil)) . 2016) (2016 . 2031) (#("WithCError" 0 5 (fontified nil) 5 10 (face font-lock-type-face fontified nil)) . 2016) (2016 . 2021) (#("WithContext<…>" 0 14 (fontified nil)) . -2016) (2016 . 2030) (#("WithC" 0 5 (face font-lock-type-face fontified t)) . -2016) (undo-tree-id1743 . -5) 2021 (2016 . 2021) (2006 . 2027) (2004 . 2006) (t 25818 33291 192761 167000)) nil (25818 40175 466498 100000) 0 nil])
([nil nil ((244 . 245) (t 25818 31256 106240 101000)) ((#(";" 0 1 (fontified t)) . 244) (undo-tree-id1353 . -1)) (25818 32786 574812 707000) 0 nil])
([nil nil ((1876 . 1878) (#("()" 0 2 (fontified nil)) . 1876) (1875 . 1876) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1875 1875 nil nil nil t #s(yas--exit 1878 nil))) #s(yas--exit 1878 nil) 71 nil #s(yas--field 1 1875 1875 nil nil nil t #s(yas--exit 1878 nil)) nil nil)) (1866 . 1878) (#("OptError(${1:()})$0" 0 19 (fontified nil)) . 1866) (1866 . 1885) (#("OptEr" 0 5 (fontified nil)) . 1866) (1866 . 1871) (#("OptError(…)" 0 11 (fontified nil)) . -1866) (1866 . 1877) (#("OptEr" 0 5 (face font-lock-type-face fontified t)) . -1866) (undo-tree-id216 . -5) 1871 (1869 . 1871) (1866 . 1869) (1863 . 1866) (#("	" 0 1 (fontified nil)) . -1865) (undo-tree-id217 . -1) (1866 . 1867) (1863 . 1866) (1851 . 1863) (1830 . 1851) (1828 . 1830) (#("	" 0 1 (fontified nil)) . -1829) (undo-tree-id218 . -1) (1830 . 1831) (1828 . 1830) (1827 . 1828) (1826 . 1827) (1824 . 1825) (apply yas--snippet-revive 1815 1825 #s(yas--snippet nil nil #s(yas--exit #<marker at 1793 in conversions.rs> nil) 70 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 1793 in conversions.rs> nil) 70 nil nil nil nil)) (1815 . 1825) (#("OptError<$0>" 0 12 (fontified nil)) . 1815) (1815 . 1827) (#("Opt" 0 3 (fontified nil)) . 1815) (1815 . 1818) (#("OptError<…>" 0 11 (fontified nil)) . -1815) (1815 . 1826) (#("Opt" 0 3 (face font-lock-type-face fontified t)) . -1815) (undo-tree-id219 . -3) 1818 (1800 . 1818) (#("o" 0 1 (fontified t)) . -1800) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("t" 0 1 (fontified t)) . -1801) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("p" 0 1 (fontified t)) . -1802) (undo-tree-id224 . -1) (undo-tree-id225 . -1) 1803 (1787 . 1803) (1785 . 1787)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 1785) (undo-tree-id340 . -2) (undo-tree-id341 . -2) (undo-tree-id342 . -2) (undo-tree-id343 . -2) (undo-tree-id344 . -2) (#("impl<T> From<otp" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 8 (fontified nil) 8 12 (face font-lock-type-face fontified nil) 12 13 (fontified nil) 13 14 (fontified nil) 14 15 (fontified nil) 15 16 (fontified nil)) . 1787) (undo-tree-id345 . -13) (undo-tree-id346 . -16) (undo-tree-id347 . -13) (undo-tree-id348 . -13) (undo-tree-id349 . -13) (1800 . 1803) (#("Option<T>> for Opt" 0 6 (face font-lock-type-face fontified nil) 6 7 (fontified nil) 7 8 (face font-lock-type-face fontified nil) 8 11 (fontified nil) 11 14 (face font-lock-keyword-face fontified nil) 14 15 (fontified nil) 15 18 (face font-lock-type-face fontified nil)) . 1800) (undo-tree-id350 . -15) (undo-tree-id351 . -18) (undo-tree-id352 . -15) (undo-tree-id353 . -15) (undo-tree-id354 . -15) (1815 . 1818) (#("OptError<…>" 0 11 (fontified nil)) . 1815) (1815 . 1826) (#("Opt" 0 3 (fontified nil)) . 1815) (1815 . 1818) (#("OptError<$0>" 0 12 (fontified nil)) . 1815) (1815 . 1827) (#("OptError<>" 0 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil) 9 10 (fontified nil)) . 1815) (undo-tree-id355 . -10) (undo-tree-id356 . -10) (undo-tree-id357 . -10) (undo-tree-id358 . -10) (undo-tree-id359 . -9) (#("T" 0 1 (face font-lock-type-face fontified nil)) . 1824) (#(" " 0 1 (fontified nil)) . 1826) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#("{" 0 1 (fontified nil)) . 1827) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (#("
	" 0 1 (fontified nil) 1 2 (fontified nil)) . 1828) (#("}" 0 1 (fontified nil)) . 1830) (1829 . 1830) (#("
	" 0 1 (fontified t) 1 2 (fontified nil)) . 1828) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) (#("fn from(opt: Option<T" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 7 (face font-lock-function-name-face fontified nil) 7 8 (fontified nil) 8 11 (face font-lock-variable-name-face fontified nil) 11 13 (fontified nil) 13 19 (face font-lock-type-face fontified nil) 19 20 (fontified nil) 20 21 (face font-lock-type-face fontified nil)) . 1830) (undo-tree-id372 . -21) (undo-tree-id373 . -21) (undo-tree-id374 . -21) (undo-tree-id375 . -21) (#(">) -> Self {" 0 4 (fontified nil) 4 5 (fontified nil syntax-table (1)) 5 6 (fontified nil) 6 10 (face font-lock-type-face fontified nil) 10 12 (fontified nil)) . 1851) (undo-tree-id376 . -12) (undo-tree-id377 . -12) (undo-tree-id378 . -12) (undo-tree-id379 . -12) (#("
		" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1863) (#("}" 0 1 (fontified nil)) . 1866) (1865 . 1866) (#("
		" 0 1 (fontified t) 1 3 (fontified nil)) . 1863) (undo-tree-id380 . -3) (undo-tree-id381 . -3) (undo-tree-id382 . -1) (undo-tree-id383 . -3) (#("Opt" 0 3 (face font-lock-type-face fontified nil)) . 1866) (undo-tree-id384 . -3) (#("Er" 0 2 (face font-lock-type-face fontified nil)) . 1869) (undo-tree-id385 . -2) (1866 . 1871) (#("OptError(…)" 0 11 (fontified nil)) . 1866) (1866 . 1877) (#("OptEr" 0 5 (fontified nil)) . 1866) (1866 . 1871) (#("OptError(${1:()})$0" 0 19 (fontified nil)) . 1866) (1866 . 1885) (#("OptError(())" 0 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil) 9 11 (fontified nil) 11 12 (fontified nil)) . 1866) (undo-tree-id386 . -9) (undo-tree-id387 . -9) (undo-tree-id388 . -9) (apply yas--snippet-revive 1866 1878 #s(yas--snippet nil (#s(yas--field 1 1875 1875 nil nil nil t #s(yas--exit 1878 nil))) #s(yas--exit 1878 nil) 71 nil #s(yas--field 1 1875 1875 nil nil nil t #s(yas--exit 1878 nil)) nil nil)) (#("o" 0 1 (fontified nil)) . 1875) (undo-tree-id389 . -1) (1876 . 1878) (#("pt" 0 2 (fontified t)) . 1876) (undo-tree-id390 . -2)) (25818 30101 911638 197000) 0 nil])
([nil current ((#("impl From<Error> for OptError<WithContext<InternalError>> {
	fn from(err: Error) -> Self {
		let opterr: OptError<InternalError> = err.into();
		Option::<InternalError>::from(opterr).map(Into::into).into()
	}
}

impl From<WithContext<Error>> for OptError<WithContext<InternalError>> {
	fn from(wcerr: WithContext<Error>) -> Self {
		let opterr: WithContext<InternalError> = wcerr.map_contextualized(InternalError::from);
		Some(opterr).into()
	}
}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 15 (face font-lock-type-face fontified t) 15 17 (fontified t) 17 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 29 (face font-lock-type-face fontified t) 29 30 (fontified t) 30 41 (face font-lock-type-face fontified t) 41 42 (fontified t) 42 55 (face font-lock-type-face fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 60 (fontified t) 60 61 (fontified t) 61 63 (face font-lock-keyword-face fontified t) 63 64 (fontified t) 64 68 (face font-lock-function-name-face fontified t) 68 69 (fontified t) 69 72 (face font-lock-variable-name-face fontified t) 72 74 (fontified t) 74 79 (face font-lock-type-face fontified t) 79 82 (fontified t) 82 83 (syntax-table (1) fontified t) 83 84 (fontified t) 84 88 (face font-lock-type-face fontified t) 88 91 (fontified t) 91 93 (fontified t) 93 96 (face font-lock-keyword-face fontified t) 96 97 (fontified t) 97 103 (face font-lock-variable-name-face fontified t) 103 105 (fontified t) 105 113 (face font-lock-type-face fontified t) 113 114 (fontified t) 114 127 (face font-lock-type-face fontified t) 127 135 (fontified t) 135 143 (fontified t) 143 145 (fontified t) 145 151 (face font-lock-type-face fontified t) 151 154 (fontified t) 154 167 (face font-lock-type-face fontified t) 167 168 (fontified t) 168 182 (fontified t) 182 187 (fontified t) 187 191 (face font-lock-type-face fontified t) 191 193 (fontified t) 193 199 (fontified t) 199 205 (fontified t) 205 206 (fontified t) 206 208 (fontified t) 208 209 (fontified t) 209 211 (fontified t) 211 212 (fontified t) 212 216 (face font-lock-keyword-face fontified t) 216 217 (fontified t) 217 221 (face font-lock-type-face fontified t) 221 222 (fontified t) 222 233 (face font-lock-type-face fontified t) 233 234 (fontified t) 234 239 (face font-lock-type-face fontified t) 239 240 (fontified t) 240 242 (fontified t) 242 245 (face font-lock-keyword-face fontified t) 245 246 (fontified t) 246 254 (face font-lock-type-face fontified t) 254 255 (fontified t) 255 266 (face font-lock-type-face fontified t) 266 267 (fontified t) 267 280 (face font-lock-type-face fontified t) 280 281 (fontified t) 281 285 (fontified t) 285 286 (fontified t) 286 288 (face font-lock-keyword-face fontified t) 288 289 (fontified t) 289 293 (face font-lock-function-name-face fontified t) 293 294 (fontified t) 294 299 (face font-lock-variable-name-face fontified t) 299 301 (fontified t) 301 312 (face font-lock-type-face fontified t) 312 313 (fontified t) 313 318 (face font-lock-type-face fontified t) 318 322 (fontified t) 322 323 (syntax-table (1) fontified t) 323 324 (fontified t) 324 328 (face font-lock-type-face fontified t) 328 331 (fontified t) 331 333 (fontified t) 333 336 (face font-lock-keyword-face fontified t) 336 337 (fontified t) 337 343 (face font-lock-variable-name-face fontified t) 343 345 (fontified t) 345 356 (face font-lock-type-face fontified t) 356 357 (fontified t) 357 370 (face font-lock-type-face fontified t) 370 380 (fontified t) 380 399 (fontified t) 399 412 (face font-lock-type-face fontified t) 412 418 (fontified t) 418 421 (fontified t) 421 423 (fontified t) 423 427 (face font-lock-type-face fontified t) 427 436 (fontified t) 436 442 (fontified t) 442 443 (fontified t) 443 445 (fontified t) 445 446 (fontified t) 446 447 (fontified t) 447 448 (fontified t) 448 449 (fontified t)) . 1794) (undo-tree-id1744 . -448) (undo-tree-id1745 . 7) (undo-tree-id1746 . -448) (undo-tree-id1747 . -448) (undo-tree-id1748 . -402) (undo-tree-id1749 . -42) (undo-tree-id1750 . -8) (undo-tree-id1751 . -448) (undo-tree-id1752 . -8) (undo-tree-id1753 . -8) (undo-tree-id1754 . -8) (undo-tree-id1755 . -8) (undo-tree-id1756 . -8) (undo-tree-id1757 . -8) (undo-tree-id1758 . -8) (undo-tree-id1759 . -8) (undo-tree-id1760 . -8) (undo-tree-id1761 . -8) (undo-tree-id1762 . -8) (undo-tree-id1763 . -8) (undo-tree-id1764 . -8) (undo-tree-id1765 . -8) (undo-tree-id1766 . -8) (undo-tree-id1767 . -8) (undo-tree-id1768 . -60) (undo-tree-id1769 . -60) (undo-tree-id1770 . -60) (undo-tree-id1771 . -60) (undo-tree-id1772 . -448) (undo-tree-id1773 . -448) (undo-tree-id1774 . -448) (undo-tree-id1775 . -449) 2242 (t 25818 40175 474488 675000)) nil (25818 44197 424978 814000) 0 nil])
([nil nil ((248 . 249) (#("," 0 1 (fontified t)) . -248) (undo-tree-id729 . -1) (undo-tree-id731 . -1) (undo-tree-id733 . -1) (undo-tree-id735 . -1) (undo-tree-id737 . -1) (#("," 0 1 (fontified t)) . -249) (undo-tree-id739 . -1) (undo-tree-id741 . -1) (undo-tree-id743 . -1) (undo-tree-id745 . -1) 250 (249 . 250) (t 25818 31349 36261 449000)) ((#("," 0 1 (fontified nil)) . 249) (248 . 250) (#("," 0 1 (fontified t)) . 248) (undo-tree-id1352 . -1)) (25818 32786 420287 259000) 0 nil])
([nil nil ((apply yas--snippet-revive 1866 1879 #s(yas--snippet nil (#s(yas--field 1 1875 1875 nil nil nil t #s(yas--exit 1878 nil))) #s(yas--exit 1878 nil) 71 nil #s(yas--field 1 1875 1875 nil nil nil t #s(yas--exit 1878 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1875 1875 nil nil nil t #s(yas--exit 1878 nil))) #s(yas--exit 1878 nil) 71 nil #s(yas--field 1 1875 1875 nil nil nil t #s(yas--exit 1878 nil)) nil nil))) (25818 30101 129866 795000) 0 nil])
nil
([nil nil ((244 . 245) (t 25818 31354 402929 278000)) ((#(")" 0 1 (fontified t)) . 244)) (25818 32786 275364 256000) 0 nil])
([nil nil ((#("for [T] (opt: Option<T>) -> OptError<T> {
	OptError(opt)
}
" 0 3 (face font-lock-keyword-face fontified t) 3 5 (fontified t) 5 6 (face font-lock-type-face fontified t) 6 9 (fontified t) 9 12 (face font-lock-variable-name-face fontified t) 12 14 (fontified t) 14 20 (face font-lock-type-face fontified t) 20 21 (fontified t) 21 22 (face font-lock-type-face fontified t) 22 26 (fontified t) 26 27 (fontified t syntax-table (1)) 27 28 (fontified t) 28 36 (face font-lock-type-face fontified t) 36 37 (fontified t) 37 38 (face font-lock-type-face fontified t) 38 42 (fontified t) 42 43 (fontified t) 43 51 (face font-lock-type-face fontified t) 51 57 (fontified t) 57 59 (fontified t)) . 1886) (undo-tree-id296 . -58) (undo-tree-id297 . -19) 1905 (t 25818 29825 322286 622000)) ((1886 . 1945)) (25818 30100 551258 358000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 244) (undo-tree-id748 . -1) (t 25818 31559 686302 271000)) ((244 . 245)) (25818 32786 124234 990000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1884) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id301 . -1) (undo-tree-id303 . -1) (undo-tree-id305 . -1) (undo-tree-id307 . -1) (#("
" 0 1 (fontified t)) . -1885) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id312 . -1) (undo-tree-id314 . -1) (undo-tree-id316 . -1) (undo-tree-id318 . -1) 1886 (t 25818 29828 332286 336000)) ((1884 . 1886)) (25818 30099 215300 573000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -244) (undo-tree-id749 . 1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id753 . -1) 245 (t 25818 31563 979636 347000)) ((244 . 245)) (25818 32785 984361 615000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . 1757) (undo-tree-id320 . -1) (t 25818 29830 715619 443000)) ((1757 . 1758) (t 25818 29835 395618 999000)) (25818 30098 883522 435000) 0 nil])
([nil nil ((#("		ctx!($generics, $from, $to, WithContext<$to>)
" 0 2 (fontified t) 2 6 (face font-lock-preprocessor-face fontified t) 6 30 (fontified t) 30 41 (face font-lock-type-face fontified t) 41 42 (syntax-table (1) fontified t) 42 45 (fontified t) 45 46 (syntax-table (1) fontified t) 46 48 (fontified t)) . 197) (undo-tree-id755 . -6) (undo-tree-id756 . 1) (undo-tree-id757 . -47) (undo-tree-id758 . -6) (undo-tree-id760 . -47) (undo-tree-id761 . -46) (undo-tree-id762 . -46) (undo-tree-id764 . -46) (undo-tree-id766 . -46) (undo-tree-id768 . -46) (undo-tree-id770 . -46) (undo-tree-id772 . -46) (undo-tree-id774 . -46) 243 (t 25818 31568 142970 398000)) ((197 . 245)) (25818 32785 827972 976000) 0 nil])
([nil nil ((276 . 277) (261 . 262) (270 . 273) (269 . 271) (262 . 269) (261 . 264) (#("w" 0 1 (fontified t)) . -261) (undo-tree-id321 . -1) (#("i" 0 1 (fontified t)) . -262) (undo-tree-id322 . -1) (#("t" 0 1 (fontified t)) . -263) (undo-tree-id323 . -1) (#("h" 0 1 (fontified t)) . -264) (undo-tree-id324 . -1) (#(" " 0 1 (fontified t)) . -265) (undo-tree-id325 . -1) 266 (261 . 266) (#(" " 0 1 (fontified t)) . -295) (undo-tree-id326 . -1) 296 (295 . 296) (t 25818 29835 395618 999000)) ((#(" " 0 1 (fontified nil)) . 295) (295 . 296) (#("with " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 261) (undo-tree-id327 . -5) (261 . 266) (#("() " 0 2 (fontified nil) 2 3 (fontified nil)) . 261) (undo-tree-id328 . 2) (undo-tree-id329 . -1) (undo-tree-id330 . 2) (undo-tree-id331 . -1) (#("derive " 0 7 (fontified nil)) . 262) (undo-tree-id332 . -7) (undo-tree-id333 . -7) (#("[]" 0 2 (fontified nil)) . 269) (undo-tree-id334 . 1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (#("$()" 0 3 (fontified nil)) . 270) (undo-tree-id337 . 1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (#("$" 0 1 (fontified nil)) . 261) (#("?" 0 1 (face rust-question-mark fontified t)) . 276)) (25818 30098 881626 295000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -196) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id779 . -1) (undo-tree-id781 . -1) (undo-tree-id783 . -1) (undo-tree-id785 . -1) (undo-tree-id787 . -1) (undo-tree-id789 . -1) (undo-tree-id791 . -1) (undo-tree-id793 . -1) (#("	" 0 1 (fontified t)) . -197) (undo-tree-id795 . 1) (undo-tree-id796 . -1) 198 (t 25818 31570 566304 148000)) ((196 . 198)) (25818 32785 677071 908000) 0 nil])
nil
([nil nil ((#("," 0 1 (fontified t)) . -197) (undo-tree-id798 . -1) (undo-tree-id800 . -1) 198 (t 25818 31575 359638 301000)) ((197 . 198)) (25818 32785 526234 265000) 0 nil])
([nil nil ((#("	($generics:tt, $from:ty, $to:ty) => {}
" 0 2 (fontified t) 2 11 (face font-lock-variable-name-face fontified t) 11 14 (fontified t) 14 16 (fontified t) 16 21 (face font-lock-variable-name-face fontified t) 21 26 (fontified t) 26 29 (face font-lock-variable-name-face fontified t) 29 35 (fontified t) 35 36 (syntax-table (1) fontified t) 36 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t)) . 158) (undo-tree-id802 . -38) (undo-tree-id803 . 1) (undo-tree-id804 . -39) (undo-tree-id805 . -30) (undo-tree-id806 . -38) (undo-tree-id807 . -2) (undo-tree-id808 . -22) (undo-tree-id810 . -39) (undo-tree-id811 . -38) (undo-tree-id812 . -38) (undo-tree-id814 . -38) (undo-tree-id816 . -38) (undo-tree-id818 . -38) (undo-tree-id820 . -38) (undo-tree-id822 . -38) (undo-tree-id824 . -38) (undo-tree-id826 . -38) 196 (t 25818 31581 236305 970000)) ((158 . 198)) (25818 32785 376631 594000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -180) (undo-tree-id828 . -1) (undo-tree-id830 . -1) (181 . 182) (178 . 181) (173 . 178) (159 . 173) (157 . 159) (t 25818 31596 322975 180000)) ((#("
	" 0 1 (fontified t) 1 2 (fontified nil)) . 157) (undo-tree-id1312 . -2) (undo-tree-id1313 . -2) (undo-tree-id1314 . -2) (undo-tree-id1315 . -1) (undo-tree-id1316 . -2) (undo-tree-id1317 . -2) (undo-tree-id1318 . -2) (undo-tree-id1319 . -2) (undo-tree-id1320 . -2) (undo-tree-id1321 . -2) (undo-tree-id1322 . -2) (#("($generics:tt)" 0 1 (fontified nil) 1 10 (face font-lock-variable-name-face fontified nil) 10 13 (fontified nil) 13 14 (fontified nil)) . 159) (undo-tree-id1323 . -14) (undo-tree-id1324 . -14) (undo-tree-id1325 . -14) (undo-tree-id1326 . -14) (undo-tree-id1327 . -14) (undo-tree-id1328 . -14) (undo-tree-id1329 . -14) (undo-tree-id1330 . -14) (undo-tree-id1331 . -14) (undo-tree-id1332 . -14) (#(" => {" 0 2 (fontified nil) 2 3 (syntax-table (1) fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 173) (undo-tree-id1333 . -5) (undo-tree-id1334 . -4) (undo-tree-id1335 . -4) (undo-tree-id1336 . -5) (undo-tree-id1337 . -5) (undo-tree-id1338 . -5) (undo-tree-id1339 . -5) (undo-tree-id1340 . -5) (undo-tree-id1341 . -5) (undo-tree-id1342 . -5) (#("
		" 0 1 (fontified t) 1 2 (fontified nil) 2 3 (fontified nil)) . 178) (undo-tree-id1343 . -3) (undo-tree-id1344 . -1) (undo-tree-id1345 . -3) (undo-tree-id1346 . -1) (undo-tree-id1347 . -3) (undo-tree-id1348 . -1) (undo-tree-id1349 . -2) (#("}" 0 1 (fontified nil)) . 181) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (180 . 181)) (25818 32785 208610 224000) 0 nil])
([nil nil ((181 . 182) (t 25818 31607 986310 457000)) ((#("," 0 1 (fontified t)) . 181) (undo-tree-id1311 . -1)) (25818 32785 51937 370000) 0 nil])
([nil nil ((181 . 182) (#("," 0 1 (fontified t)) . -181) (undo-tree-id832 . -1) (undo-tree-id834 . -1) 182 (t 25818 31611 959644 447000)) ((181 . 182) (#(";" 0 1 (fontified t)) . 181)) (25818 32784 883765 809000) 0 nil])
([nil nil ((200 . 202) (#(" " 0 1 (fontified t)) . -200) (undo-tree-id847 . -1) (#("t" 0 1 (fontified t)) . -201) (undo-tree-id848 . -1) 202 (193 . 202) (181 . 193) (#("o" 0 1 (fontified t)) . -181) (undo-tree-id849 . -1) 182 (172 . 182) (178 . 181) (t 25818 31624 359646 483000)) ((#("
		" 0 1 (fontified nil) 1 3 (fontified t)) . 178) (#(", $from:to" 0 2 (fontified nil) 2 7 (face font-lock-variable-name-face fontified nil) 7 9 (fontified nil) 9 10 (fontified nil)) . 172) (181 . 182) (#("y, $to:ty, $" 0 3 (fontified nil) 3 6 (face font-lock-variable-name-face fontified nil) 6 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (face font-lock-variable-name-face fontified nil)) . 181) (#("target: t" 0 1 (face font-lock-variable-name-face fontified nil) 1 2 (face font-lock-variable-name-face fontified nil) 2 3 (face font-lock-variable-name-face fontified nil) 3 4 (face font-lock-variable-name-face fontified nil) 4 5 (face font-lock-variable-name-face fontified nil) 5 6 (face font-lock-variable-name-face fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil)) . 193) (200 . 202) (#("ty" 0 1 (fontified t) 1 2 (fontified t)) . 200)) (25818 32784 677011 531000) 0 nil])
([nil nil ((#("{
		
	}" 0 2 (fontified t) 2 5 (fontified t) 5 7 (fontified t)) . 207) (undo-tree-id836 . -6) (undo-tree-id837 . -6) (undo-tree-id838 . -6) (undo-tree-id839 . -4) (undo-tree-id841 . -6) (undo-tree-id843 . -1) (undo-tree-id845 . -1)) ((207 . 214)) (25818 32784 423047 763000) 0 nil])
([nil nil ((241 . 252) (220 . 241) (207 . 220)) ((#("ctx!($generic" 0 4 (face font-lock-preprocessor-face fontified nil) 4 13 (fontified nil)) . 207) (#("s, $from, $to, WithCo" 0 15 (fontified nil) 15 21 (face font-lock-type-face fontified nil)) . 220) (#("ntext<$to>)" 0 5 (face font-lock-type-face fontified t) 5 6 (syntax-table (1) fontified t) 6 9 (fontified t) 9 10 (syntax-table (1) fontified t) 10 11 (fontified t)) . 241)) (25818 32783 950284 213000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -258) (undo-tree-id850 . -2) (undo-tree-id852 . -2) (260 . 261) (256 . 260) (208 . 211) (207 . 208) (t 25818 31656 149651 596000)) ((#("{" 0 1 (fontified nil)) . 207) (#("
		" 0 1 (fontified t) 1 3 (fontified nil)) . 208) (#("
			" 0 1 (fontified t) 1 2 (fontified nil) 2 4 (fontified nil)) . 256) (#("}" 0 1 (fontified nil)) . 260) (258 . 260)) (25818 32783 666626 883000) 0 nil])
([nil nil ((#("		impl $(<$($generics)+>)? From<$from> for <$to as Contextualizable>::Output
			where $to: Contextualizable {
				fn from(value: $from) -> Self {
					let noctx: $to = value.into();
					noctx.into()
				}
			}
" 0 2 (fontified t) 2 6 (face font-lock-keyword-face fontified t) 6 9 (fontified t) 9 10 (syntax-table (1) fontified t) 10 23 (fontified t) 23 24 (syntax-table (1) fontified t) 24 25 (fontified t) 25 26 (face rust-question-mark fontified t) 26 27 (fontified t) 27 31 (face font-lock-type-face fontified t) 31 32 (syntax-table (1) fontified t) 32 37 (fontified t) 37 38 (syntax-table (1) fontified t) 38 39 (fontified t) 39 42 (face font-lock-keyword-face fontified t) 42 43 (fontified t) 43 44 (syntax-table (1) fontified t) 44 48 (fontified t) 48 50 (face font-lock-keyword-face fontified t) 50 51 (fontified t) 51 67 (face font-lock-type-face fontified t) 67 68 (syntax-table (1) fontified t) 68 70 (fontified t) 70 76 (face font-lock-type-face fontified t) 76 77 (fontified t) 77 80 (fontified t) 80 85 (face font-lock-keyword-face fontified t) 85 86 (fontified t) 86 89 (face font-lock-variable-name-face fontified t) 89 91 (fontified t) 91 107 (face font-lock-type-face fontified t) 107 114 (fontified t) 114 116 (face font-lock-keyword-face fontified t) 116 117 (fontified t) 117 121 (face font-lock-function-name-face fontified t) 121 122 (fontified t) 122 127 (face font-lock-variable-name-face fontified t) 127 137 (fontified t) 137 138 (syntax-table (1) fontified t) 138 139 (fontified t) 139 143 (face font-lock-type-face fontified t) 143 151 (fontified t) 151 154 (face font-lock-keyword-face fontified t) 154 155 (fontified t) 155 160 (face font-lock-variable-name-face fontified t) 160 206 (fontified t) 206 211 (fontified t)) . 847) (undo-tree-id866 . -210) (undo-tree-id867 . -210) (undo-tree-id868 . -210) (undo-tree-id869 . -43) (undo-tree-id870 . -43) (undo-tree-id871 . -43) (undo-tree-id872 . -27) (undo-tree-id873 . -47) (undo-tree-id874 . -210) 1057 (t 25818 31666 256319 859000)) ((847 . 1058)) (25818 32783 502606 309000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -846) (undo-tree-id854 . -1) (#("(" 0 1 (fontified t)) . -847) (undo-tree-id855 . -1) 848 (868 . 869) (860 . 867) (858 . 861) (#(" " 0 1 (fontified t)) . -857) (undo-tree-id856 . -1) 858 (#(":" 0 1 (fontified t)) . -856) (undo-tree-id857 . -1) (#("i" 0 1 (face font-lock-preprocessor-face fontified t)) . -857) (undo-tree-id858 . -1) (#("d" 0 1 (face font-lock-preprocessor-face fontified t)) . -858) (undo-tree-id859 . -1) (#("e" 0 1 (face font-lock-preprocessor-face fontified t)) . -859) (undo-tree-id860 . -1) (#("n" 0 1 (face font-lock-preprocessor-face fontified t)) . -860) (undo-tree-id861 . -1) (#("t" 0 1 (face font-lock-preprocessor-face fontified t)) . -861) (undo-tree-id862 . -1) (#(" " 0 1 (fontified t)) . -862) (undo-tree-id863 . -1) 863 (850 . 866) (849 . 851) (848 . 849) (846 . 850) (#("	" 0 1 (fontified t)) . -849) (undo-tree-id864 . -1) 850 (843 . 846) (#("			" 0 3 (fontified nil)) . 842) (undo-tree-id865 . -3) (845 . 846)) ((#("
" 0 1 (fontified nil)) . 845) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (842 . 845) (#("			" 0 3 (fontified nil)) . 843) (undo-tree-id1278 . -3) (undo-tree-id1279 . -3) (undo-tree-id1280 . -3) (undo-tree-id1281 . -3) (undo-tree-id1282 . -3) (undo-tree-id1283 . -3) (undo-tree-id1284 . -3) (849 . 850) (#("$()?" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (face rust-question-mark fontified nil)) . 846) (undo-tree-id1285 . -2) (undo-tree-id1286 . -2) (undo-tree-id1287 . -2) (undo-tree-id1288 . 2) (undo-tree-id1289 . -2) (undo-tree-id1290 . -2) (undo-tree-id1291 . -2) (undo-tree-id1292 . -2) (#("$" 0 1 (fontified nil)) . 848) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 849) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . 1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (#("$dname:ident ! (" 0 6 (face font-lock-preprocessor-face fontified nil) 6 7 (fontified nil) 7 8 (face font-lock-preprocessor-face fontified nil) 8 9 (face font-lock-preprocessor-face fontified nil) 9 10 (face font-lock-preprocessor-face fontified nil) 10 11 (face font-lock-preprocessor-face fontified nil) 11 12 (face font-lock-preprocessor-face fontified nil) 12 13 (fontified nil) 13 14 (face font-lock-preprocessor-face fontified nil) 14 15 (fontified nil) 15 16 (fontified nil)) . 850) (undo-tree-id1307 . -16) (undo-tree-id1308 . -16) (undo-tree-id1309 . -16) (856 . 863) (857 . 858) (#("$()" 0 2 (fontified nil) 2 3 (fontified nil)) . 858) (undo-tree-id1310 . 3) (#("$arg:tt" 0 4 (face font-lock-variable-name-face fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil)) . 860) (#("*" 0 1 (fontified nil)) . 868) (846 . 848)) (25818 32783 318106 395000) 0 nil])
([nil nil ((870 . 872) (848 . 850) (t 25818 31824 283009 836000)) ((#("$(" 0 2 (fontified nil)) . 848) (#(")+" 0 2 (fontified t)) . 870)) (25818 32783 142000 652000) 0 nil])
([nil nil ((1060 . 1075) (1039 . 1060) (1035 . 1042) (1026 . 1035) (t 25818 31844 103012 566000)) ((#("derive [c" 0 3 (fontified nil) 3 4 (fontified nil) 4 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (face font-lock-preprocessor-face fontified nil)) . 1026) (#("tx!()] " 0 3 (face font-lock-preprocessor-face fontified nil) 3 4 (fontified nil) 4 6 (fontified nil) 6 7 (fontified nil)) . 1035) (#("OptError<WithContext<" 0 8 (face font-lock-type-face fontified nil) 8 9 (syntax-table (1) fontified nil) 9 20 (face font-lock-type-face fontified nil) 20 21 (syntax-table (1) fontified nil)) . 1039) (#("InternalError>>" 0 13 (face font-lock-type-face fontified t) 13 14 (syntax-table (1) fontified t) 14 15 (syntax-table (1) fontified t)) . 1060)) (25818 32782 951006 426000) 0 nil])
([nil nil ((870 . 871) (t 25818 31887 593018 425000)) ((#(";" 0 1 (fontified t)) . 870)) (25818 32782 750975 286000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -864) (undo-tree-id875 . -1) (undo-tree-id877 . -1) (undo-tree-id879 . -1) (#("t" 0 1 (fontified t)) . -865) (undo-tree-id880 . -1) (undo-tree-id882 . -1) (undo-tree-id884 . -1) (#("t" 0 1 (fontified t)) . -866) (undo-tree-id885 . -1) (undo-tree-id887 . -1) 867 (t 25818 31920 696356 105000)) ((864 . 867)) (25818 32782 484035 540000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -190) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (#(" " 0 1 (fontified t)) . -191) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (#("$" 0 1 (fontified t)) . -192) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (#("t" 0 1 (fontified t)) . -193) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (#("a" 0 1 (fontified t)) . -194) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (#("r" 0 1 (fontified t)) . -195) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (#("g" 0 1 (fontified t)) . -196) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (#("e" 0 1 (fontified t)) . -197) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (#("t" 0 1 (fontified t)) . -198) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (#(":" 0 1 (fontified t)) . -199) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (#("t" 0 1 (fontified t)) . -200) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (#("y" 0 1 (fontified t)) . -201) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) 202 (t 25818 31925 46356 669000)) ((190 . 202)) (25818 32781 198462 611000) 0 nil])
([nil nil ((867 . 881) (865 . 866) (862 . 864) (849 . 862) (847 . 850) (846 . 848) (t 25818 31948 786359 721000)) ((#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 846) (undo-tree-id1266 . -1) (#("$()" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 847) (undo-tree-id1267 . -3) (#("<$($generics)" 0 1 (syntax-table (1) fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil)) . 849) (#("+>" 0 1 (fontified nil) 1 2 (syntax-table (1) fontified nil)) . 862) (#("?" 0 1 (face rust-question-mark fontified nil)) . 865) (undo-tree-id1268 . -1) (#(", $from, $to, " 0 14 (fontified t)) . 867) (undo-tree-id1269 . 14)) (25818 32781 29460 195000) 0 nil] [nil nil ((872 . 882) (#("c" 0 1 (face font-lock-preprocessor-face fontified t)) . 872) (874 . 880) (#("nve" 0 3 (face font-lock-preprocessor-face fontified t)) . 874) (undo-tree-id935 . -3) (undo-tree-id936 . -3) (undo-tree-id937 . -3) (878 . 879) (#("si" 0 2 (face font-lock-preprocessor-face fontified t)) . 878) (881 . 885) (#("ns!" 0 3 (face font-lock-preprocessor-face fontified t)) . 881) (885 . 886) (#("{
	" 0 2 (fontified t) 2 3 (fontified t)) . 885) (892 . 899) (#("[" 0 1 (fontified t)) . 892) (894 . 898) (#("]" 0 1 (fontified t)) . 894) (896 . 903) (#(" " 0 1 (fontified t)) . 904) (921 . 925) (#("Option<T>" 0 6 (face font-lock-type-face fontified t) 6 7 (syntax-table (1) fontified t) 7 8 (face font-lock-type-face fontified t) 8 9 (syntax-table (1) fontified t)) . 921) (933 . 937) (#("		" 0 2 (fontified t)) . 933) (944 . 946) (#("	" 0 1 (fontified t)) . 944) (#("	for" 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t)) . 948) (#("[T]" 0 1 (fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (fontified t)) . 953) (957 . 961) (#("(o" 0 1 (fontified t) 1 2 (face font-lock-variable-name-face fontified t)) . 957) (960 . 961) (#("t:" 0 1 (face font-lock-variable-name-face fontified t) 1 2 (fontified t)) . 960) (963 . 971) (#(")" 0 1 (fontified t)) . 972) (#("-" 0 1 (fontified t)) . 974) (976 . 979) (984 . 996) (985 . 998) (988 . 997) (991 . 995) (#("		" 0 2 (fontified t)) . 991) (1007 . 1009) (#("	" 0 1 (fontified t)) . 1007) (1011 . 1015) (#("	der" 0 4 (fontified t)) . 1011) (1016 . 1019) (#("ve" 0 2 (fontified t)) . 1016) (1019 . 1034) (#("[ctx!(" 0 1 (fontified t) 1 5 (face font-lock-preprocessor-face fontified t) 5 6 (fontified t)) . 1019) (#("<WithContext" 0 1 (syntax-table (1) fontified t) 1 12 (face font-lock-type-face fontified t)) . 1033) (#(">" 0 1 (syntax-table (1) fontified t)) . 1059) (1061 . 1067) (#(")]" 0 2 (fontified t)) . 1061) (undo-tree-id938 . 2) (1064 . 1068) (#(" " 0 1 (fontified t)) . 1069) (1080 . 1081) (#("OptError<Int" 0 8 (face font-lock-type-face fontified t) 8 9 (syntax-table (1) fontified t) 9 12 (face font-lock-type-face fontified t)) . 1080) (#("rna" 0 3 (face font-lock-type-face fontified t)) . 1093) (1097 . 1098) (#("Error>" 0 5 (face font-lock-type-face fontified t) 5 6 (syntax-table (1) fontified t)) . 1097) (1106 . 1110) (#("		" 0 2 (fontified t)) . 1106) (1120 . 1126) (#("			" 0 3 (fontified t)) . 1120) (1170 . 1176) (#("			" 0 3 (fontified t)) . 1170) (1194 . 1205) (#("		" 0 2 (fontified t)) . 1194) (1198 . 1200) (#("	" 0 1 (fontified t)) . 1198) (1202 . 1210) (#("	" 0 1 (fontified t)) . 1202) (1204 . 1214) (1205 . 1216) (1208 . 1213) (1210 . 1221) (#(":" 0 1 (fontified t)) . 1210) (1212 . 1217) (#(") -" 0 3 (fontified t)) . 1225) (1229 . 1232) (1238 . 1263) (#("		" 0 2 (fontified t)) . 1238) (1245 . 1266) (1264 . 1266) (#("	" 0 1 (fontified t)) . 1264) (1268 . 1322) (#("	" 0 1 (fontified t)) . 1268) (#(" " 0 1 (fontified t)) . 1277) (1301 . 1305) (#("Error" 0 5 (face font-lock-type-face fontified t)) . 1301) (1309 . 1313) (#("		" 0 2 (fontified t)) . 1309) (1342 . 1346) (#("		" 0 2 (fontified t)) . 1342) (1374 . 1378) (#("		" 0 2 (fontified t)) . 1374) (1391 . 1397) (#("			" 0 3 (fontified t)) . 1391) (1450 . 1456) (#("			" 0 3 (fontified t)) . 1450) (1513 . 1519) (#("			" 0 3 (fontified t)) . 1513) (1578 . 1584) (#("			" 0 3 (fontified t)) . 1578) (1663 . 1669) (#("			" 0 3 (fontified t)) . 1663) (1742 . 1748) ("			" . 1742) (1799 . 1810) ("		" . 1799) (1803 . 1805) ("	" . 1803) (1807 . 1852) ("	" . 1807) (" " . 1815) (1830 . 1834) (#("Error" 0 5 (face font-lock-type-face)) . 1830) (1838 . 1842) ("		" . 1838) (1893 . 1895) ("	" . 1893) (1897 . 1958) ("	" . 1897) (" " . 1906) (1936 . 1940) (#("Error" 0 5 (face font-lock-type-face)) . 1936) (1944 . 1948) ("		" . 1944) (1995 . 1997) ("	" . 1995) (1999 . 2055) ("	" . 1999) (" " . 2008) (2034 . 2038) (#("Error" 0 5 (face font-lock-type-face)) . 2034) (2042 . 2046) ("		" . 2042) (2063 . 2065) ("	" . 2063) (2065 . 2066) (2066 . 2068) 877 (t 25818 31948 786359 721000)) (("  " . 2066) (#("
" 0 1 (fontified nil)) . 2065) (2063 . 2064) ("  " . 2063) (2042 . 2044) ("    " . 2042) (2034 . 2039) (#("Self" 0 4 (fontified nil)) . 2034) (2008 . 2009) (1999 . 2000) (#("  }
impl From<crate::log::LogError>for Error {
  fn from" 0 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 19 (face font-lock-keyword-face fontified t) 19 21 (fontified t) 21 23 (face font-lock-constant-face fontified t) 23 24 (face font-lock-constant-face fontified t) 24 26 (fontified t) 26 34 (face font-lock-type-face fontified t) 34 35 (fontified t) 35 38 (face font-lock-keyword-face fontified t) 38 39 (fontified t) 39 44 (face font-lock-type-face fontified t) 44 47 (fontified t)) . 1999) (1995 . 1996) (#("  " 0 2 (fontified t)) . 1995) (1944 . 1946) (#("    " 0 4 (fontified t)) . 1944) (1936 . 1941) (#("Self" 0 4 (face font-lock-type-face fontified nil)) . 1936) (1906 . 1907) (1897 . 1898) (#("  }
impl From<bb8::RunError<pg::Error> >for Error {
  fn from" 0 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 17 (face font-lock-constant-face fontified t) 17 19 (fontified t) 19 27 (face font-lock-type-face fontified t) 27 28 (fontified t) 28 30 (face font-lock-constant-face fontified t) 30 32 (fontified t) 32 37 (face font-lock-type-face fontified t) 37 40 (fontified t) 40 43 (face font-lock-keyword-face fontified t) 43 44 (fontified t) 44 49 (face font-lock-type-face fontified t) 49 54 (fontified t) 54 56 (face font-lock-keyword-face fontified t) 56 57 (fontified t) 57 61 (face font-lock-function-name-face fontified t)) . 1897) (1893 . 1894) (#("  " 0 2 (fontified t)) . 1893) (1838 . 1840) (#("    " 0 4 (fontified t)) . 1838) (1830 . 1835) (#("Self" 0 4 (face font-lock-type-face fontified nil)) . 1830) (1815 . 1816) (1807 . 1808) (#("  }
impl From<pg::Error>for Error {
  fn from" 0 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 16 (face font-lock-constant-face fontified t) 16 18 (fontified t) 18 23 (face font-lock-type-face fontified t) 23 24 (fontified t) 24 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 33 (face font-lock-type-face fontified t) 33 38 (fontified t) 38 40 (face font-lock-keyword-face fontified t) 40 41 (fontified t) 41 45 (face font-lock-function-name-face fontified t)) . 1807) (1803 . 1804) (#("  " 0 2 (fontified t)) . 1803) (1799 . 1801) (#("    
      " 0 11 (fontified t)) . 1799) (1742 . 1745) (#("      " 0 6 (fontified t)) . 1742) (1663 . 1666) (#("      " 0 6 (fontified t)) . 1663) (1578 . 1581) (#("      " 0 6 (fontified t)) . 1578) (1513 . 1516) (#("      " 0 6 (fontified t)) . 1513) (1450 . 1453) (#("      " 0 6 (fontified t)) . 1450) (1391 . 1394) (#("      " 0 6 (fontified t)) . 1391) (1374 . 1376) (#("    " 0 4 (fontified t)) . 1374) (1342 . 1344) (#("    " 0 4 (fontified t)) . 1342) (1309 . 1311) (#("    " 0 4 (fontified t)) . 1309) (1301 . 1306) (#("Self" 0 4 (face font-lock-type-face fontified nil)) . 1301) (1277 . 1278) (1268 . 1269) (#("  }
impl From<ser::SerenityError>for Error {
  fn from" 0 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 17 (face font-lock-constant-face fontified t) 17 19 (fontified t) 19 32 (face font-lock-type-face fontified t) 32 33 (fontified t) 33 36 (face font-lock-keyword-face fontified t) 36 37 (fontified t) 37 42 (face font-lock-type-face fontified t) 42 47 (fontified t) 47 49 (face font-lock-keyword-face fontified t) 49 50 (fontified t) 50 54 (face font-lock-function-name-face fontified t)) . 1268) (1264 . 1265) (#("  " 0 2 (fontified t)) . 1264) (#(") -> Self {
    Error" 0 3 (fontified nil) 3 4 (syntax-table (1) fontified nil) 4 5 (fontified nil) 5 9 (face font-lock-type-face fontified nil) 9 12 (fontified nil) 12 16 (fontified t) 16 21 (face font-lock-type-face fontified t)) . 1245) (1238 . 1240) (#("  fn from(interr:Internal" 0 2 (fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-function-name-face fontified t) 9 10 (fontified t) 10 16 (face font-lock-variable-name-face fontified t) 16 17 (fontified t) 17 25 (face font-lock-type-face fontified t)) . 1238) (#("for" 0 3 (face font-lock-keyword-face fontified nil)) . 1229) (1225 . 1228) (#("From<" 0 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil)) . 1212) (1210 . 1211) (#("or>>);
impl" 0 2 (face font-lock-type-face fontified nil) 2 3 (syntax-table (1) fontified nil) 3 4 (syntax-table (1) fontified nil) 4 7 (fontified nil) 7 11 (face font-lock-keyword-face fontified t)) . 1210) (#("rnalE" 0 5 (face font-lock-type-face fontified nil)) . 1208) (#("thContext<I" 0 9 (face font-lock-type-face fontified nil) 9 10 (syntax-table (1) fontified nil) 10 11 (face font-lock-type-face fontified nil)) . 1205) (#("OptError<W" 0 8 (face font-lock-type-face fontified nil) 8 9 (syntax-table (1) fontified nil) 9 10 (face font-lock-type-face fontified nil)) . 1204) (1202 . 1203) (#("  }
ctx!" 0 4 (fontified t) 4 8 (face font-lock-preprocessor-face fontified t)) . 1202) (1198 . 1199) (#("  " 0 2 (fontified t)) . 1198) (1194 . 1196) (#("    
      " 0 11 (fontified t)) . 1194) (1170 . 1173) (#("      " 0 6 (fontified t)) . 1170) (1120 . 1123) (#("      " 0 6 (fontified t)) . 1120) (1106 . 1108) (#("    " 0 4 (fontified t)) . 1106) (1097 . 1103) (#("f" 0 1 (face font-lock-type-face fontified nil)) . 1097) (1093 . 1096) (1080 . 1092) (#("S" 0 1 (face font-lock-type-face fontified nil)) . 1080) (1069 . 1070) (#("from" 0 4 (face font-lock-function-name-face fontified nil)) . 1064) (1061 . 1063) (#("{
  fn" 0 2 (fontified nil) 2 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t)) . 1061) (1059 . 1060) (1033 . 1045) (1019 . 1025) (#("From<Error>for " 0 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil) 5 10 (face font-lock-type-face fontified nil) 10 11 (fontified nil) 11 14 (face font-lock-keyword-face fontified nil) 14 15 (fontified nil)) . 1019) (1016 . 1018) (#("mpl" 0 3 (face font-lock-keyword-face fontified nil)) . 1016) (1011 . 1015) (#("  }
" 0 4 (fontified t)) . 1011) (1007 . 1008) (#("  " 0 2 (fontified t)) . 1007) (991 . 993) (#("    " 0 4 (fontified t)) . 991) (#(") -> Self" 0 3 (fontified nil) 3 4 (syntax-table (1) fontified nil) 4 5 (fontified nil) 5 9 (face font-lock-type-face fontified nil)) . 988) (#("om(opt:Option" 0 2 (face font-lock-function-name-face fontified nil) 2 3 (fontified nil) 3 6 (face font-lock-variable-name-face fontified nil) 6 7 (fontified nil) 7 13 (face font-lock-type-face fontified nil)) . 985) (#("r<T>{
  fn f" 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 6 (fontified nil) 6 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 12 (face font-lock-function-name-face fontified t)) . 984) (#("for" 0 3 (face font-lock-keyword-face fontified nil)) . 976) (974 . 975) (972 . 973) (#("<T>From<" 0 1 (fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (fontified nil) 3 7 (face font-lock-type-face fontified nil) 7 8 (fontified nil)) . 963) (960 . 962) (#("l" 0 1 (face font-lock-keyword-face fontified nil)) . 960) (957 . 959) (#("}
im" 0 2 (fontified nil) 2 4 (face font-lock-keyword-face fontified t)) . 957) (953 . 956) (948 . 952) (944 . 945) (#("  " 0 2 (fontified t)) . 944) (933 . 935) (#("    " 0 4 (fontified t)) . 933) (921 . 930) (#("Self" 0 4 (face font-lock-type-face fontified nil)) . 921) (904 . 905) (#("fn from" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 7 (face font-lock-function-name-face fontified nil)) . 896) (894 . 895) (#(">{
 " 0 3 (fontified nil) 3 4 (fontified t)) . 894) (892 . 893) (#("Option<" 0 6 (face font-lock-type-face fontified nil) 6 7 (fontified nil)) . 892) (885 . 888) (#(">" 0 1 (fontified nil)) . 885) (881 . 884) (#("r<T>" 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (fontified nil)) . 881) (878 . 880) (#("r" 0 1 (face font-lock-type-face fontified nil)) . 878) (874 . 877) (#("m<OptE" 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil) 2 6 (face font-lock-type-face fontified nil)) . 874) (872 . 873) (#("impl <T>Fr" 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-type-face fontified t)) . 872)) (25818 31965 377852 697000) 0 nil])
([nil nil ((219 . 221) (#("{" 0 1 (fontified t)) . -219) (undo-tree-id939 . -1) (undo-tree-id941 . -1) (undo-tree-id943 . -1) (undo-tree-id945 . -1) (undo-tree-id947 . -1) (#("}" 0 1 (fontified t)) . -220) (undo-tree-id948 . -1) (undo-tree-id950 . -1) (undo-tree-id952 . -1) (undo-tree-id954 . -1) (undo-tree-id956 . -1) 221 (219 . 221) (#("(" 0 1 (fontified t)) . -219) (undo-tree-id957 . -1) (#(")" 0 1 (fontified t)) . -220) (undo-tree-id958 . -1) 221 (219 . 221) (#("{" 0 1 (fontified t)) . -219) (undo-tree-id959 . -1) (#("}" 0 1 (fontified t)) . -220) (undo-tree-id960 . -1) 221 (213 . 221) (211 . 213) (210 . 211) (#("," 0 1 (fontified t)) . -210) (undo-tree-id961 . -1) (#("
" 0 1 (fontified t)) . -211) (undo-tree-id962 . -1) (#("	" 0 1 (fontified t)) . -212) (undo-tree-id963 . -1) 213 (211 . 213) (210 . 211) (190 . 191) (205 . 209) (190 . 205) (186 . 187) (168 . 169) (#("/" 0 1 (fontified t)) . -188) (undo-tree-id964 . -1) 189 (188 . 189) (169 . 188) (168 . 169) (166 . 168) (#("	" 0 1 (fontified nil)) . -167) (undo-tree-id965 . -1) (168 . 169) (166 . 168) (160 . 166) (139 . 160) (#("f" 0 1 (fontified t)) . -139) (undo-tree-id966 . -1) (#("m" 0 1 (fontified t)) . -140) (undo-tree-id967 . -1) 141 (139 . 141) (138 . 139) (t 25818 32011 83034 193000)) ((#("
" 0 1 (fontified t)) . 138) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (#("fm" 0 1 (fontified nil) 1 2 (fontified nil)) . 139) (undo-tree-id1234 . -2) (139 . 141) (#("macro_rules! fmt_gene" 0 12 (face font-lock-preprocessor-face fontified nil) 12 21 (fontified nil)) . 139) (undo-tree-id1235 . -21) (undo-tree-id1236 . -21) (undo-tree-id1237 . -21) (undo-tree-id1238 . -21) (undo-tree-id1239 . -21) (undo-tree-id1240 . -21) (#("rics {" 0 6 (fontified nil)) . 160) (undo-tree-id1241 . -6) (undo-tree-id1242 . -6) (undo-tree-id1243 . -6) (undo-tree-id1244 . -6) (undo-tree-id1245 . -6) (undo-tree-id1246 . -6) (#("
	" 0 1 (fontified nil) 1 2 (fontified nil)) . 166) (#("}" 0 1 (fontified nil)) . 168) (167 . 168) (#("
	" 0 1 (fontified t) 1 2 (fontified nil)) . 166) (undo-tree-id1247 . -2) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -2) (undo-tree-id1251 . -2) (undo-tree-id1252 . -2) (#("[" 0 1 (fontified nil)) . 168) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (#("$(generics:tt)+] =>" 0 2 (fontified nil) 2 10 (face font-lock-variable-name-face fontified nil) 10 18 (fontified nil) 18 19 (syntax-table (1) fontified nil)) . 169) (undo-tree-id1257 . -19) (undo-tree-id1258 . -19) (undo-tree-id1259 . -19) (undo-tree-id1260 . -19) (#("/" 0 1 (fontified nil)) . 188) (undo-tree-id1261 . -1) (188 . 189) (#("(" 0 1 (fontified nil)) . 168) (#(")" 0 1 (fontified nil)) . 186) (#("$(<$($generics)" 0 2 (fontified nil) 2 3 (syntax-table (1) fontified nil) 3 15 (fontified nil)) . 190) (#("+>)?" 0 1 (fontified nil) 1 2 (syntax-table (1) fontified nil) 2 3 (fontified nil) 3 4 (face rust-question-mark fontified nil)) . 205) (#(" " 0 1 (fontified nil)) . 190) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (#("," 0 1 (fontified nil)) . 210) (#("
	" 0 1 (fontified nil) 1 2 (fontified nil)) . 211) (210 . 213) (#(";" 0 1 (fontified nil)) . 210) (#("
	" 0 1 (fontified t) 1 2 (fontified nil)) . 211) (#("() => {}" 0 4 (fontified nil) 4 5 (syntax-table (1) fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 213) (219 . 221) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 219) (219 . 221) (#("{}" 0 1 (fontified nil) 1 2 (fontified nil)) . 219) (219 . 221) (#("()" 0 2 (fontified t)) . 219)) (25818 32780 886272 531000) 0 nil])
nil
([nil nil ((211 . 212) (191 . 192) (t 25818 32315 726344 582000)) ((#("(" 0 1 (fontified nil)) . 191) (#(")" 0 1 (fontified t)) . 211)) (25818 32780 743707 384000) 0 nil])
([nil nil ((932 . 941) (#("(" 0 1 (fontified t)) . -932) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id972 . -1) (undo-tree-id974 . -1) (undo-tree-id976 . -1) (#(")" 0 1 (fontified t)) . -933) (undo-tree-id978 . -1) (undo-tree-id980 . -1) 934 (#("$" 0 1 (fontified t)) . -933) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id986 . -1) (#("(" 0 1 (fontified t)) . -934) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (#("<" 0 1 (syntax-table (1) fontified t)) . -935) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (#("$" 0 1 (fontified t)) . -936) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (#("(" 0 1 (fontified t)) . -937) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (#("$" 0 1 (fontified t)) . -938) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (#("g" 0 1 (fontified t)) . -939) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (#("e" 0 1 (fontified t)) . -940) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (#("n" 0 1 (fontified t)) . -941) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (#("e" 0 1 (fontified t)) . -942) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (#("r" 0 1 (fontified t)) . -943) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (#("i" 0 1 (fontified t)) . -944) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (#("c" 0 1 (fontified t)) . -945) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (#("s" 0 1 (fontified t)) . -946) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (#(")" 0 1 (fontified t)) . -947) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (#("+" 0 1 (fontified t)) . -948) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -949) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (#(")" 0 1 (fontified t)) . -950) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (#("?" 0 1 (face rust-question-mark fontified t)) . -951) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) 952 (821 . 830) (807 . 822) (#("$" 0 1 (fontified t)) . -807) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (#("(" 0 1 (fontified t)) . -808) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (#("<" 0 1 (syntax-table (1) fontified t)) . -809) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (#("$" 0 1 (fontified t)) . -810) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (#("(" 0 1 (fontified nil)) . -811) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (#("$" 0 1 (fontified t)) . -812) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (#("g" 0 1 (fontified t)) . -813) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (#("e" 0 1 (fontified t)) . -814) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (#("n" 0 1 (fontified t)) . -815) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (#("e" 0 1 (fontified t)) . -816) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (#("r" 0 1 (fontified t)) . -817) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (#("i" 0 1 (fontified t)) . -818) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (#("c" 0 1 (fontified t)) . -819) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (#("s" 0 1 (fontified t)) . -820) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (#(")" 0 1 (fontified t)) . -821) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (#("+" 0 1 (fontified t)) . -822) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -823) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (#(")" 0 1 (fontified t)) . -824) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (#("?" 0 1 (face rust-question-mark fontified t)) . -825) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) 826 (671 . 684) (#(" " 0 1 (fontified t)) . -671) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (#("[" 0 1 (fontified t)) . -672) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (#("$" 0 1 (fontified t)) . -673) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (#("(" 0 1 (fontified t)) . -674) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (#("$" 0 1 (fontified t)) . -675) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (#("g" 0 1 (fontified t)) . -676) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (#("e" 0 1 (fontified nil)) . -677) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (#("n" 0 1 (fontified t)) . -678) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (#("e" 0 1 (fontified t)) . -679) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (#("r" 0 1 (fontified t)) . -680) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (#("i" 0 1 (fontified t)) . -681) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (#("c" 0 1 (fontified t)) . -682) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (#("s" 0 1 (fontified t)) . -683) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (#(":" 0 1 (fontified t)) . -684) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (#("t" 0 1 (fontified t)) . -685) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (#("t" 0 1 (fontified t)) . -686) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (#(")" 0 1 (fontified t)) . -687) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (#("+" 0 1 (fontified t)) . -688) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (#("]" 0 1 (fontified t)) . -689) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) 690 (t 25818 32323 96340 355000)) ((671 . 690) (#(" $generics:tt" 0 1 (fontified t) 1 10 (face font-lock-variable-name-face fontified t) 10 13 (fontified t)) . 671) (807 . 826) (#("fmt_generics!()" 0 13 (face font-lock-preprocessor-face fontified nil) 13 14 (fontified nil) 14 15 (fontified nil)) . 807) (undo-tree-id1224 . -14) (undo-tree-id1225 . -14) (undo-tree-id1226 . -14) (#("$generics" 0 9 (fontified t)) . 821) (933 . 952) (932 . 934) (#("$generics" 0 9 (fontified t)) . 932) (undo-tree-id1227 . 9)) (25818 32780 552080 581000) 0 nil])
([nil nil ((832 . 834) (821 . 823) (t 25818 32385 489640 252000)) ((#("$(" 0 2 (fontified nil)) . 821) (#(")?" 0 1 (fontified t) 1 2 (face rust-question-mark fontified t)) . 832)) (25818 32780 374998 594000) 0 nil])
([nil nil ((947 . 949) (936 . 938) (t 25818 32409 636295 41000)) ((#("$(" 0 2 (fontified nil)) . 936) (undo-tree-id1223 . 2) (#(")?" 0 1 (fontified t) 1 2 (face rust-question-mark fontified t)) . 947)) (25818 32780 146651 853000) 0 nil])
([nil nil ((950 . 951) (936 . 937) (t 25818 32419 892956 829000)) ((#("(" 0 1 (fontified nil)) . 936) (#(")" 0 1 (fontified t)) . 950)) (25818 32779 876324 49000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1005) (undo-tree-id1213 . -1) (undo-tree-id1215 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1006) (undo-tree-id1216 . -1) 1007 (1005 . 1007) (t 25818 32431 949617 886000)) ((#("//" 0 1 (fontified nil) 1 2 (face font-lock-comment-delimiter-face fontified nil)) . 1005) (1005 . 1007) (t 25818 32746 652843 392000)) (25818 32769 549020 89000) 0 nil])
([nil nil ((#("conversions! {
	for [T] (opterr: OptError<T>) -> Option<T> {
		opterr.0
	}

	for [T] (opt: Option<T>) -> OptError<T> {
		OptError(opt)
	}

	derive [ctx!(OptError<WithContext<InternalError>>)] (err: Error) -> OptError<InternalError> {
		match err {
			Error::Internal(ierr) => OptError(Some(ierr)),
			_ => OptError(None),
		}
	}

	(interr: InternalError) -> Error {
		Error::Internal(interr)
	}

	(sererr: ser::SerenityError) -> Error {
		use ser::SerenityError as Ser;
		use ser::ModelError as Model;
		match sererr {
			Ser::Model(Model::RoleNotFound) => Error::RoleNotFound,
			Ser::Model(Model::MemberNotFound) => Error::MemberNotFound,
			Ser::Model(Model::ChannelNotFound) => Error::ChannelNotFound,
			Ser::Model(Model::MessageAlreadyCrossposted) => Error::MessageAlreadyCrossposted,
			Ser::Model(Model::CannotCrosspostMessage) => Error::CannotCrosspostMessage,
			e => Error::Internal(InternalError::SerenityError(e))
		}
	}

	(pgerr: pg::Error) -> Error {
		Error::Internal(InternalError::DatabaseError(pgerr))
	}

	(bb8err: bb8::RunError<pg::Error>) -> Error {
		Error::Internal(InternalError::Bb8Error(bb8err))
	}

	(logerr: crate::log::LogError) -> Error {
		Error::Log(logerr)
	}
}" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face font-lock-preprocessor-face fontified t) 2 5 (face font-lock-preprocessor-face fontified t) 5 6 (face font-lock-preprocessor-face fontified t) 6 8 (face font-lock-preprocessor-face fontified t) 8 9 (face font-lock-preprocessor-face fontified t) 9 12 (face font-lock-preprocessor-face fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (face font-lock-type-face fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 31 (face font-lock-variable-name-face fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 41 (face font-lock-type-face fontified t) 41 42 (fontified t syntax-table (1)) 42 43 (face font-lock-type-face fontified t) 43 44 (fontified t syntax-table (1)) 44 47 (fontified t) 47 48 (fontified t syntax-table (1)) 48 49 (fontified t) 49 55 (face font-lock-type-face fontified t) 55 56 (fontified t syntax-table (1)) 56 57 (face font-lock-type-face fontified t) 57 58 (fontified t syntax-table (1)) 58 59 (fontified t) 59 61 (fontified t) 61 63 (fontified t) 63 64 (fontified t) 64 66 (fontified t) 66 67 (fontified t) 67 69 (fontified t) 69 70 (fontified t) 70 71 (fontified t) 71 72 (fontified t) 72 73 (fontified t) 73 75 (fontified t) 75 76 (fontified t) 76 77 (fontified t) 77 80 (face font-lock-keyword-face fontified t) 80 81 (fontified t) 81 82 (fontified t) 82 83 (face font-lock-type-face fontified t) 83 84 (fontified t) 84 85 (fontified t) 85 86 (fontified t) 86 87 (face font-lock-variable-name-face fontified t) 87 88 (face font-lock-variable-name-face fontified t) 88 89 (face font-lock-variable-name-face fontified t) 89 90 (fontified t) 90 91 (fontified t) 91 97 (face font-lock-type-face fontified t) 97 98 (fontified t syntax-table (1)) 98 99 (face font-lock-type-face fontified t) 99 100 (fontified t syntax-table (1)) 100 101 (fontified t) 101 102 (fontified t) 102 103 (fontified t) 103 104 (fontified t syntax-table (1)) 104 105 (fontified t) 105 109 (face font-lock-type-face fontified t) 109 110 (face font-lock-type-face fontified t) 110 111 (face font-lock-type-face fontified t) 111 112 (face font-lock-type-face fontified t) 112 113 (face font-lock-type-face fontified t) 113 114 (fontified t syntax-table (1)) 114 115 (face font-lock-type-face fontified t) 115 116 (fontified t syntax-table (1)) 116 117 (fontified t) 117 119 (fontified t) 119 121 (fontified t) 121 129 (face font-lock-type-face fontified t) 129 130 (fontified t) 130 131 (fontified t) 131 132 (fontified t) 132 133 (fontified t) 133 135 (fontified t) 135 136 (fontified t) 136 138 (fontified t) 138 139 (fontified t) 139 143 (fontified t) 143 144 (fontified t) 144 146 (fontified t) 146 147 (fontified t) 147 148 (fontified t) 148 152 (face font-lock-preprocessor-face fontified t) 152 153 (fontified t) 153 161 (face font-lock-type-face fontified t) 161 162 (fontified t syntax-table (1)) 162 173 (face font-lock-type-face fontified t) 173 174 (fontified t syntax-table (1)) 174 187 (face font-lock-type-face fontified t) 187 188 (fontified t syntax-table (1)) 188 189 (fontified t syntax-table (1)) 189 191 (fontified t) 191 192 (fontified t) 192 193 (fontified t) 193 196 (face font-lock-variable-name-face fontified t) 196 197 (fontified t) 197 198 (fontified t) 198 203 (face font-lock-type-face fontified t) 203 206 (fontified t) 206 207 (fontified t syntax-table (1)) 207 208 (fontified t) 208 216 (face font-lock-type-face fontified t) 216 217 (fontified t syntax-table (1)) 217 220 (face font-lock-type-face fontified t) 220 221 (face font-lock-type-face fontified t) 221 224 (face font-lock-type-face fontified t) 224 225 (face font-lock-type-face fontified t) 225 230 (face font-lock-type-face fontified t) 230 231 (fontified t syntax-table (1)) 231 232 (fontified t) 232 234 (fontified t) 234 236 (fontified t) 236 241 (face font-lock-keyword-face fontified t) 241 248 (fontified t) 248 251 (fontified t) 251 256 (face font-lock-type-face fontified t) 256 258 (fontified t) 258 266 (face font-lock-type-face fontified t) 266 274 (fontified t) 274 275 (fontified t syntax-table (1)) 275 276 (fontified t) 276 284 (face font-lock-type-face fontified t) 284 285 (fontified t) 285 289 (face font-lock-type-face fontified t) 289 298 (fontified t) 298 301 (fontified t) 301 304 (fontified t) 304 305 (fontified t syntax-table (1)) 305 306 (fontified t) 306 314 (face font-lock-type-face fontified t) 314 315 (fontified t) 315 319 (face font-lock-type-face fontified t) 319 322 (fontified t) 322 324 (fontified t) 324 326 (fontified t) 326 327 (fontified t) 327 329 (fontified t) 329 330 (fontified t) 330 331 (fontified t) 331 332 (fontified t) 332 333 (face font-lock-variable-name-face fontified t) 333 336 (face font-lock-variable-name-face fontified t) 336 337 (face font-lock-variable-name-face fontified t) 337 338 (face font-lock-variable-name-face fontified t) 338 339 (fontified t) 339 340 (fontified t) 340 344 (face font-lock-type-face fontified t) 344 345 (face font-lock-type-face fontified t) 345 346 (face font-lock-type-face fontified t) 346 348 (face font-lock-type-face fontified t) 348 353 (face font-lock-type-face fontified t) 353 356 (fontified t) 356 357 (fontified t syntax-table (1)) 357 358 (fontified t) 358 363 (face font-lock-type-face fontified t) 363 364 (fontified t) 364 366 (fontified t) 366 368 (fontified t) 368 373 (face font-lock-type-face fontified t) 373 375 (fontified t) 375 383 (face font-lock-type-face fontified t) 383 392 (fontified t) 392 393 (fontified t) 393 395 (fontified t) 395 396 (fontified t) 396 397 (fontified t) 397 398 (fontified t) 398 399 (face font-lock-variable-name-face fontified t) 399 400 (face font-lock-variable-name-face fontified t) 400 401 (face font-lock-variable-name-face fontified t) 401 402 (face font-lock-variable-name-face fontified t) 402 403 (face font-lock-variable-name-face fontified t) 403 404 (face font-lock-variable-name-face fontified t) 404 405 (fontified t) 405 406 (fontified t) 406 409 (face font-lock-constant-face fontified t) 409 411 (fontified t) 411 424 (face font-lock-type-face fontified t) 424 427 (fontified t) 427 428 (fontified t syntax-table (1)) 428 429 (fontified t) 429 434 (face font-lock-type-face fontified t) 434 437 (fontified t) 437 439 (fontified t) 439 442 (face font-lock-keyword-face fontified t) 442 443 (fontified t) 443 446 (face font-lock-constant-face fontified t) 446 448 (fontified t) 448 461 (face font-lock-type-face fontified t) 461 462 (fontified t) 462 464 (face font-lock-keyword-face fontified t) 464 465 (fontified t) 465 468 (face font-lock-type-face fontified t) 468 470 (fontified t) 470 472 (fontified t) 472 475 (face font-lock-keyword-face fontified t) 475 476 (fontified t) 476 479 (face font-lock-constant-face fontified t) 479 481 (fontified t) 481 491 (face font-lock-type-face fontified t) 491 492 (fontified t) 492 494 (face font-lock-keyword-face fontified t) 494 495 (fontified t) 495 500 (face font-lock-type-face fontified t) 500 502 (fontified t) 502 504 (fontified t) 504 509 (face font-lock-keyword-face fontified t) 509 519 (fontified t) 519 522 (fontified t) 522 525 (face font-lock-type-face fontified t) 525 527 (fontified t) 527 532 (face font-lock-type-face fontified t) 532 533 (fontified t) 533 538 (face font-lock-type-face fontified t) 538 540 (fontified t) 540 552 (face font-lock-type-face fontified t) 552 555 (fontified t) 555 556 (fontified t syntax-table (1)) 556 557 (fontified t) 557 562 (face font-lock-type-face fontified t) 562 564 (fontified t) 564 576 (face font-lock-type-face fontified t) 576 578 (fontified t) 578 581 (fontified t) 581 584 (face font-lock-type-face fontified t) 584 586 (fontified t) 586 591 (face font-lock-type-face fontified t) 591 592 (fontified t) 592 597 (face font-lock-type-face fontified t) 597 599 (fontified t) 599 613 (face font-lock-type-face fontified t) 613 616 (fontified t) 616 617 (fontified t syntax-table (1)) 617 618 (fontified t) 618 623 (face font-lock-type-face fontified t) 623 625 (fontified t) 625 639 (face font-lock-type-face fontified t) 639 641 (fontified t) 641 644 (fontified t) 644 647 (face font-lock-type-face fontified t) 647 649 (fontified t) 649 654 (face font-lock-type-face fontified t) 654 655 (fontified t) 655 660 (face font-lock-type-face fontified t) 660 662 (fontified t) 662 671 (face font-lock-type-face fontified t) 671 677 (face font-lock-type-face fontified t) 677 680 (fontified t) 680 681 (fontified t syntax-table (1)) 681 682 (fontified t) 682 687 (face font-lock-type-face fontified t) 687 689 (fontified t) 689 704 (face font-lock-type-face fontified t) 704 706 (fontified t) 706 709 (fontified t) 709 712 (face font-lock-type-face fontified t) 712 714 (fontified t) 714 719 (face font-lock-type-face fontified t) 719 720 (fontified t) 720 725 (face font-lock-type-face fontified t) 725 727 (fontified t) 727 730 (face font-lock-type-face fontified t) 730 732 (face font-lock-type-face fontified t) 732 737 (face font-lock-type-face fontified t) 737 740 (face font-lock-type-face fontified t) 740 744 (face font-lock-type-face fontified t) 744 752 (face font-lock-type-face fontified t) 752 755 (fontified t) 755 756 (fontified t syntax-table (1)) 756 757 (fontified t) 757 762 (face font-lock-type-face fontified t) 762 764 (fontified t) 764 789 (face font-lock-type-face fontified t) 789 791 (fontified t) 791 794 (fontified t) 794 797 (face font-lock-type-face fontified t) 797 799 (fontified t) 799 800 (face font-lock-type-face fontified t) 800 801 (face font-lock-type-face fontified t) 801 804 (face font-lock-type-face fontified t) 804 805 (fontified t) 805 810 (face font-lock-type-face fontified t) 810 812 (fontified t) 812 825 (face font-lock-type-face fontified t) 825 834 (face font-lock-type-face fontified t) 834 837 (fontified t) 837 838 (fontified t syntax-table (1)) 838 839 (fontified t) 839 844 (face font-lock-type-face fontified t) 844 846 (fontified t) 846 868 (face font-lock-type-face fontified t) 868 870 (fontified t) 870 873 (fontified t) 873 876 (fontified t) 876 877 (fontified t syntax-table (1)) 877 878 (fontified t) 878 883 (face font-lock-type-face fontified t) 883 885 (fontified t) 885 893 (face font-lock-type-face fontified t) 893 894 (fontified t) 894 904 (face font-lock-type-face fontified t) 904 907 (face font-lock-type-face fontified t) 907 909 (fontified t) 909 910 (face font-lock-type-face fontified t) 910 922 (face font-lock-type-face fontified t) 922 927 (fontified t) 927 929 (fontified t) 929 931 (fontified t) 931 932 (fontified t) 932 934 (fontified t) 934 935 (fontified t) 935 936 (fontified t) 936 937 (fontified t) 937 938 (face font-lock-variable-name-face fontified t) 938 939 (face font-lock-variable-name-face fontified t) 939 940 (face font-lock-variable-name-face fontified t) 940 941 (face font-lock-variable-name-face fontified t) 941 942 (face font-lock-variable-name-face fontified t) 942 943 (fontified t) 943 944 (fontified t) 944 945 (face font-lock-constant-face fontified t) 945 946 (face font-lock-constant-face fontified t) 946 947 (fontified t) 947 948 (fontified t) 948 953 (face font-lock-type-face fontified t) 953 956 (fontified t) 956 957 (fontified t syntax-table (1)) 957 958 (fontified t) 958 963 (face font-lock-type-face fontified t) 963 964 (fontified t) 964 965 (fontified t) 965 966 (fontified t) 966 968 (fontified t) 968 969 (face font-lock-type-face fontified t) 969 973 (face font-lock-type-face fontified t) 973 975 (fontified t) 975 976 (face font-lock-type-face fontified t) 976 978 (face font-lock-type-face fontified t) 978 979 (face font-lock-type-face fontified t) 979 983 (face font-lock-type-face fontified t) 983 984 (fontified t) 984 997 (face font-lock-type-face fontified t) 997 999 (fontified t) 999 1012 (face font-lock-type-face fontified t) 1012 1021 (fontified t) 1021 1022 (fontified t) 1022 1024 (fontified t) 1024 1025 (fontified t) 1025 1026 (fontified t) 1026 1027 (fontified t) 1027 1028 (face font-lock-variable-name-face fontified t) 1028 1029 (face font-lock-variable-name-face fontified t) 1029 1030 (face font-lock-variable-name-face fontified t) 1030 1031 (face font-lock-variable-name-face fontified t) 1031 1032 (face font-lock-variable-name-face fontified t) 1032 1033 (face font-lock-variable-name-face fontified t) 1033 1034 (fontified t) 1034 1035 (fontified t) 1035 1038 (face font-lock-constant-face fontified t) 1038 1040 (fontified t) 1040 1048 (face font-lock-type-face fontified t) 1048 1049 (fontified t) 1049 1051 (face font-lock-constant-face fontified t) 1051 1053 (fontified t) 1053 1058 (face font-lock-type-face fontified t) 1058 1059 (fontified t) 1059 1060 (fontified t) 1060 1061 (fontified t) 1061 1062 (fontified t) 1062 1063 (fontified t syntax-table (1)) 1063 1064 (fontified t) 1064 1069 (face font-lock-type-face fontified t) 1069 1072 (fontified t) 1072 1074 (fontified t) 1074 1079 (face font-lock-type-face fontified t) 1079 1081 (fontified t) 1081 1089 (face font-lock-type-face fontified t) 1089 1090 (fontified t) 1090 1103 (face font-lock-type-face fontified t) 1103 1105 (fontified t) 1105 1113 (face font-lock-type-face fontified t) 1113 1123 (fontified t) 1123 1124 (fontified t) 1124 1126 (fontified t) 1126 1127 (fontified t) 1127 1128 (fontified t) 1128 1129 (fontified t) 1129 1130 (face font-lock-variable-name-face fontified t) 1130 1131 (face font-lock-variable-name-face fontified t) 1131 1132 (face font-lock-variable-name-face fontified t) 1132 1133 (face font-lock-variable-name-face fontified t) 1133 1134 (face font-lock-variable-name-face fontified t) 1134 1135 (face font-lock-variable-name-face fontified t) 1135 1136 (fontified t) 1136 1137 (fontified t) 1137 1142 (face font-lock-keyword-face fontified t) 1142 1144 (fontified t) 1144 1147 (face font-lock-constant-face fontified t) 1147 1149 (fontified t) 1149 1157 (face font-lock-type-face fontified t) 1157 1160 (fontified t) 1160 1161 (fontified t syntax-table (1)) 1161 1162 (fontified t) 1162 1167 (face font-lock-type-face fontified t) 1167 1168 (fontified t) 1168 1169 (fontified t) 1169 1170 (fontified t) 1170 1172 (fontified t) 1172 1174 (face font-lock-type-face fontified t) 1174 1176 (face font-lock-type-face fontified t) 1176 1177 (face font-lock-type-face fontified t) 1177 1178 (fontified t) 1178 1179 (fontified t) 1179 1182 (face font-lock-type-face fontified t) 1182 1183 (fontified t) 1183 1184 (fontified t) 1184 1186 (fontified t) 1186 1187 (fontified t) 1187 1188 (fontified t) 1188 1189 (fontified t) 1189 1190 (fontified t) 1190 1191 (fontified t) 1191 1192 (fontified t) 1192 1193 (fontified t) 1193 1194 (fontified t) 1194 1195 (fontified t)) . 991) (undo-tree-id1218 . -2) (undo-tree-id1219 . 1181) (undo-tree-id1220 . -1021) (undo-tree-id1221 . -870) (undo-tree-id1222 . -2) 993 (t 25818 32746 652843 392000)) ((991 . 2186)) (25818 32769 548263 472000) 0 nil])
nil
