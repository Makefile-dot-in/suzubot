(undo-tree-save-format-version . 1)
"1d57389a97d1d4052c05c81ddb88f9bf25e291a6"
[nil nil nil nil (25814 32366 634230 572000) 0 nil]
([nil nil ((nil rear-nonsticky nil 1158 . 1159) (nil fontified nil 1 . 1159) (1 . 1159) (t 25814 32222 565803 175000)) nil (25814 32366 634226 164000) 0 nil])
([nil nil ((19 . 20) (12 . 19) (#("Context" 0 7 (fontified nil)) . -12) (12 . 19) (1 . 12) (1 . 3) (t 25814 32366 645565 382000)) nil (25814 32379 53788 388000) 0 nil])
([nil nil ((#("impl DefaultContextualizable for InternalError {}
impl DefaultContextualizable for Error {}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 28 (face font-lock-type-face fontified t) 28 29 (fontified t) 29 32 (face font-lock-keyword-face fontified t) 32 33 (fontified t) 33 46 (face font-lock-type-face fontified t) 46 50 (fontified t) 50 54 (face font-lock-keyword-face fontified t) 54 55 (fontified t) 55 78 (face font-lock-type-face fontified t) 78 79 (fontified t) 79 82 (face font-lock-keyword-face fontified t) 82 83 (fontified t) 83 88 (face font-lock-type-face fontified t) 88 92 (fontified t)) . 666) (undo-tree-id0 . -6) (undo-tree-id1 . -91) (undo-tree-id2 . -6) (t 25814 32379 58879 426000)) nil (25814 32409 954307 630000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -747) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -748) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -749) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 750 (#("S" 0 1 (face font-lock-type-face fontified t)) . -717) (undo-tree-id12 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -718) (undo-tree-id13 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -719) (undo-tree-id14 . -1) 720 (t 25814 32409 962165 470000)) nil (25814 32433 348503 63000) 0 nil])
([nil nil ((233 . 235) (227 . 233) (216 . 227) (215 . 216) (212 . 215) (#("w" 0 1 (face font-lock-doc-face fontified t)) . -212) (undo-tree-id15 . -1) 213 (195 . 213) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -195) (undo-tree-id16 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -196) (undo-tree-id17 . -1) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -197) (undo-tree-id18 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -198) (undo-tree-id19 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -199) (undo-tree-id20 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -200) (undo-tree-id21 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -201) (undo-tree-id22 . -1) (#("x" 0 1 (face font-lock-doc-face fontified t)) . -202) (undo-tree-id23 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -203) (undo-tree-id24 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -204) (undo-tree-id25 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -205) (undo-tree-id26 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -206) (undo-tree-id27 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -207) (undo-tree-id28 . -1) 208 (192 . 208) (171 . 192) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -171) (undo-tree-id29 . -1) 172 (171 . 172) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -171) (undo-tree-id30 . -1) (#("p" 0 1 (face font-lock-doc-face fontified t)) . -172) (undo-tree-id31 . -1) (#("u" 0 1 (face font-lock-doc-face fontified t)) . -173) (undo-tree-id32 . -1) 174 (160 . 174) (158 . 160) (137 . 158) (136 . 137) (42 . 51) (22 . 42) (21 . 22) (t 25814 32433 355463 667000)) nil (25814 32560 758285 663000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -347) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("/" 0 1 (fontified t)) . -348) (undo-tree-id36 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -349) (undo-tree-id37 . -1) (#("/" 0 1 (face font-lock-doc-face fontified t)) . -350) (undo-tree-id38 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -351) (undo-tree-id39 . -1) 352 (348 . 352) (347 . 348) (t 25814 32560 755281 245000)) nil (25814 32619 598995 617000) 0 nil])
([nil nil ((541 . 545) (t 25814 32619 605201 421000)) nil (25814 32624 554000 59000) 0 nil])
([nil nil ((764 . 766) (748 . 750) (#("`" 0 1 (face font-lock-doc-face fontified t)) . -748) (undo-tree-id42 . -1) 749 (748 . 749) (#("`" 0 1 (face font-lock-doc-face fontified t)) . -748) (undo-tree-id43 . -1) 749 (748 . 749) (739 . 742) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -739) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("y" 0 1 (face font-lock-doc-face fontified t)) . -740) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("p" 0 1 (face font-lock-doc-face fontified t)) . -741) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -742) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) 743 (759 . 763) (738 . 759) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -738) (undo-tree-id56 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -739) (undo-tree-id57 . -1) 740 (738 . 740) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -738) (undo-tree-id58 . -1) 739 (727 . 739) (725 . 727) (678 . 688) (620 . 626) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -620) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -621) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) 622 (#("q" 0 1 (face font-lock-doc-face fontified t)) . -622) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("u" 0 1 (face font-lock-doc-face fontified t)) . -623) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -624) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -625) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -626) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -627) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -628) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -629) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -630) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -631) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -632) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -633) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) 634 (680 . 686) (659 . 680) (638 . 659) (637 . 638) (616 . 637) (615 . 616) (#("/" 0 1 (face font-lock-doc-face fontified t)) . -615) (undo-tree-id101 . -1) 616 (615 . 616) (611 . 615) (590 . 611) (589 . 590) (568 . 589) (563 . 568) (545 . 563) (#("y" 0 1 (face font-lock-doc-face fontified t)) . -545) (undo-tree-id102 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -546) (undo-tree-id103 . -1) (#("u" 0 1 (face font-lock-doc-face fontified t)) . -547) (undo-tree-id104 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -548) (undo-tree-id105 . -1) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -549) (undo-tree-id106 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -550) (undo-tree-id107 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -551) (undo-tree-id108 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -552) (undo-tree-id109 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -553) (undo-tree-id110 . -1) 554 (545 . 554) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -545) (undo-tree-id111 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -546) (undo-tree-id112 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -547) (undo-tree-id113 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -548) (undo-tree-id114 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -549) (undo-tree-id115 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -550) (undo-tree-id116 . -1) 551 (545 . 551) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -545) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -546) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -547) (undo-tree-id121 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -548) (undo-tree-id122 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -549) (undo-tree-id123 . -1) (#("C" 0 1 (face font-lock-doc-face fontified t)) . -550) (undo-tree-id124 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -551) (undo-tree-id125 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -552) (undo-tree-id126 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -553) (undo-tree-id127 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -554) (undo-tree-id128 . -1) (#("x" 0 1 (face font-lock-doc-face fontified t)) . -555) (undo-tree-id129 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -556) (undo-tree-id130 . -1) (#("u" 0 1 (face font-lock-doc-face fontified t)) . -557) (undo-tree-id131 . -1) 558 (#("a" 0 1 (face font-lock-doc-face fontified t)) . -558) (undo-tree-id132 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -559) (undo-tree-id133 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -560) (undo-tree-id134 . -1) (#("z" 0 1 (face font-lock-doc-face fontified t)) . -561) (undo-tree-id135 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -562) (undo-tree-id136 . -1) (#("b" 0 1 (face font-lock-doc-face fontified t)) . -563) (undo-tree-id137 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -564) (undo-tree-id138 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -565) (undo-tree-id139 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -566) (undo-tree-id140 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -567) (undo-tree-id141 . -1) (#("u" 0 1 (face font-lock-doc-face fontified t)) . -568) (undo-tree-id142 . -1) (#("p" 0 1 (face font-lock-doc-face fontified t)) . -569) (undo-tree-id143 . -1) (#("p" 0 1 (face font-lock-doc-face fontified t)) . -570) (undo-tree-id144 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -571) (undo-tree-id145 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -572) (undo-tree-id146 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -573) (undo-tree-id147 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -574) (undo-tree-id148 . -1) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -575) (undo-tree-id149 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -576) (undo-tree-id150 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -577) (undo-tree-id151 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -578) (undo-tree-id152 . -1) 579 (575 . 579) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -575) (undo-tree-id153 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -576) (undo-tree-id154 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -577) (undo-tree-id155 . -1) 578 (568 . 578) (547 . 568) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -547) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -548) (undo-tree-id158 . -1) (undo-tree-id159 . -1) 549 (548 . 549) (541 . 548) (540 . 541) (t 25814 32624 558528 148000)) nil (25814 32764 609449 706000) 0 nil])
([nil nil ((762 . 763) (#("E" 0 1 (face font-lock-doc-face fontified t)) . -762) (undo-tree-id40 . -1) 763 (762 . 763) (#("T" 0 1 (face font-lock-doc-face fontified t)) . -762) (undo-tree-id41 . -1) 763) nil (25814 32764 609294 593000) 0 nil])
([nil nil ((#(":" 0 1 (face font-lock-doc-face fontified t)) . -743) (undo-tree-id160 . -1) 744 (737 . 744) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -737) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -738) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#("`" 0 1 (face font-lock-doc-face fontified t)) . -739) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("T" 0 1 (face font-lock-doc-face fontified t)) . -740) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("`" 0 1 (face font-lock-doc-face fontified t)) . -741) (undo-tree-id175 . -1) 742 (#("<" 0 1 (face font-lock-doc-face syntax-table (1) fontified t)) . -761) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("T" 0 1 (face font-lock-doc-face fontified t)) . -762) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#(">" 0 1 (face font-lock-doc-face syntax-table (1) fontified t)) . -763) (undo-tree-id188 . -1) (undo-tree-id189 . 1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) 764 (t 25814 32764 615014 391000)) nil (25814 32781 434656 752000) 0 nil])
([nil nil ((1032 . 1039) (1011 . 1032) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -1011) (undo-tree-id195 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -1012) (undo-tree-id196 . -1) 1013 (1006 . 1013) (991 . 1006) (#("`" 0 1 (face font-lock-doc-face fontified t)) . -991) (undo-tree-id197 . -1) 992 (991 . 992) (#("E" 0 1 (face font-lock-doc-face fontified t)) . -991) (undo-tree-id198 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -992) (undo-tree-id199 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -993) (undo-tree-id200 . -1) (#("(" 0 1 (face font-lock-doc-face fontified t)) . -994) (undo-tree-id201 . -1) 995 (991 . 995) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -991) (undo-tree-id202 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -992) (undo-tree-id203 . -1) 993 (991 . 993) (#("w" 0 1 (face font-lock-doc-face fontified t)) . -991) (undo-tree-id204 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -992) (undo-tree-id205 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -993) (undo-tree-id206 . -1) (#("p" 0 1 (face font-lock-doc-face fontified t)) . -994) (undo-tree-id207 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -995) (undo-tree-id208 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -996) (undo-tree-id209 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -997) (undo-tree-id210 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -998) (undo-tree-id211 . -1) 999 (987 . 999) (986 . 987) (t 25814 32781 441660 125000)) nil (25814 32843 771259 199000) 0 nil])
([nil nil ((1330 . 1338) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -1330) (undo-tree-id212 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -1331) (undo-tree-id213 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -1332) (undo-tree-id214 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -1333) (undo-tree-id215 . -1) (#("p" 0 1 (face font-lock-doc-face fontified t)) . -1334) (undo-tree-id216 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -1335) (undo-tree-id217 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -1336) (undo-tree-id218 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -1337) (undo-tree-id219 . -1) 1338 (1319 . 1338) (1308 . 1319) (1307 . 1308) (1302 . 1307) (1281 . 1302) (1279 . 1281) (1258 . 1279) (#("m" 0 1 (face font-lock-doc-face fontified t)) . -1258) (undo-tree-id220 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -1259) (undo-tree-id221 . -1) (#("p" 0 1 (face font-lock-doc-face fontified t)) . -1260) (undo-tree-id222 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -1261) (undo-tree-id223 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -1262) (undo-tree-id224 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -1263) (undo-tree-id225 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -1264) (undo-tree-id226 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -1265) (undo-tree-id227 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -1266) (undo-tree-id228 . -1) (#("[" 0 1 (face font-lock-doc-face fontified t)) . -1267) (undo-tree-id229 . -1) (#("`" 0 1 (face font-lock-doc-face fontified t)) . -1268) (undo-tree-id230 . -1) (#("O" 0 1 (face font-lock-doc-face fontified t)) . -1269) (undo-tree-id231 . -1) (#("p" 0 1 (face font-lock-doc-face fontified t)) . -1270) (undo-tree-id232 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -1271) (undo-tree-id233 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -1272) (undo-tree-id234 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -1273) (undo-tree-id235 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -1274) (undo-tree-id236 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -1275) (undo-tree-id237 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -1276) (undo-tree-id238 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -1277) (undo-tree-id239 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -1278) (undo-tree-id240 . -1) 1279 (1267 . 1269) (1258 . 1277) (1254 . 1258) (#("
" 0 1 (fontified t)) . -1254) (undo-tree-id241 . -1) (undo-tree-id242 . -1) 1255 (1254 . 1255) (1253 . 1254) (t 25814 32843 778250 450000)) nil (25814 32962 570939 677000) 0 nil])
([nil nil ((267 . 268) (#("T" 0 1 (face font-lock-doc-face fontified t)) . -267) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) 268 (221 . 222) (#("T" 0 1 (face font-lock-doc-face fontified t)) . -221) (undo-tree-id251 . -1) 222 (276 . 277) (#("T" 0 1 (face font-lock-variable-name-face fontified t)) . -276) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) 277 (#("	" 0 1 (fontified nil)) . -326) (undo-tree-id255 . -1) (327 . 328) (325 . 327) (323 . 325) (321 . 322) (apply yas--snippet-revive 309 322 #s(yas--snippet nil nil #s(yas--exit 321 nil) 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 321 nil) 24 nil nil nil nil)) (309 . 322) (#("WithContext<$0>" 0 15 (fontified nil)) . 309) (309 . 324) (#("WithCon" 0 7 (fontified nil)) . 309) (309 . 316) (#("WithContext<…>" 0 14 (fontified nil)) . -309) (309 . 323) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -309) (undo-tree-id256 . -7) 316 (309 . 316) (295 . 309) (279 . 295) (#("Contex" 0 6 (fontified nil)) . 279) (279 . 285) (#("Contextualizable" 0 16 (fontified nil)) . -279) (279 . 295) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -279) (undo-tree-id257 . -6) 285 (271 . 285) (270 . 271) (254 . 270) (#("[" 0 1 (face font-lock-doc-face fontified t)) . -254) (undo-tree-id258 . -1) (#("`" 0 1 (face font-lock-doc-face fontified t)) . -255) (undo-tree-id259 . -1) (#("W" 0 1 (face font-lock-doc-face fontified t)) . -256) (undo-tree-id260 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -257) (undo-tree-id261 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -258) (undo-tree-id262 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -259) (undo-tree-id263 . -1) (#("C" 0 1 (face font-lock-doc-face fontified t)) . -260) (undo-tree-id264 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -261) (undo-tree-id265 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -262) (undo-tree-id266 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -263) (undo-tree-id267 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -264) (undo-tree-id268 . -1) (#("x" 0 1 (face font-lock-doc-face fontified t)) . -265) (undo-tree-id269 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -266) (undo-tree-id270 . -1) (#("`" 0 1 (face font-lock-doc-face fontified t)) . -267) (undo-tree-id271 . -1) (#("]" 0 1 (face font-lock-doc-face fontified t)) . -268) (undo-tree-id272 . -1) 269 (219 . 223) (263 . 265) (#("<" 0 1 (face font-lock-doc-face syntax-table (1) fontified t)) . -263) (undo-tree-id273 . -1) 264 (#("]" 0 1 (face font-lock-doc-face fontified t)) . -252) (undo-tree-id274 . -1) 253 (246 . 253) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . 245) (undo-tree-id275 . -1) (246 . 247) (217 . 219) (199 . 201) (244 . 254) (238 . 244) (217 . 238) (196 . 217) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -196) (undo-tree-id276 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -197) (undo-tree-id277 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -198) (undo-tree-id278 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -199) (undo-tree-id279 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -200) (undo-tree-id280 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -201) (undo-tree-id281 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -202) (undo-tree-id282 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -203) (undo-tree-id283 . -1) (#("w" 0 1 (face font-lock-doc-face fontified t)) . -204) (undo-tree-id284 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -205) (undo-tree-id285 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -206) (undo-tree-id286 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -207) (undo-tree-id287 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -208) (undo-tree-id288 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -209) (undo-tree-id289 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -210) (undo-tree-id290 . -1) 211 (#(" " 0 1 (face font-lock-doc-face fontified nil)) . -211) (undo-tree-id291 . -1) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -212) (undo-tree-id292 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -213) (undo-tree-id293 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -214) (undo-tree-id294 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -215) (undo-tree-id295 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -216) (undo-tree-id296 . -1) (#("x" 0 1 (face font-lock-doc-face fontified t)) . -217) (undo-tree-id297 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -218) (undo-tree-id298 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -219) (undo-tree-id299 . -1) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -220) (undo-tree-id300 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -221) (undo-tree-id301 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -222) (undo-tree-id302 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -223) (undo-tree-id303 . -1) (#("b" 0 1 (face font-lock-doc-face fontified t)) . -224) (undo-tree-id304 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -225) (undo-tree-id305 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -226) (undo-tree-id306 . -1) (#("u" 0 1 (face font-lock-doc-face fontified t)) . -227) (undo-tree-id307 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -228) (undo-tree-id308 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -229) (undo-tree-id309 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -230) (undo-tree-id310 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -231) (undo-tree-id311 . -1) 232 (215 . 232) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -215) (undo-tree-id312 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -216) (undo-tree-id313 . -1) 217 (206 . 217) (191 . 206) (190 . 191) (#("/" 0 1 (face font-lock-doc-face fontified t)) . -190) (undo-tree-id314 . -1) 191 (190 . 191) (183 . 190) (159 . 166) (159 . 176) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -159) (undo-tree-id315 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -160) (undo-tree-id316 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -161) (undo-tree-id317 . -1) (#("m" 0 1 (face font-lock-doc-face fontified t)) . -162) (undo-tree-id318 . -1) (#("p" 0 1 (face font-lock-doc-face fontified t)) . -163) (undo-tree-id319 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -164) (undo-tree-id320 . -1) (#("y" 0 1 (face font-lock-doc-face fontified t)) . -165) (undo-tree-id321 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -166) (undo-tree-id322 . -1) (#("[" 0 1 (face font-lock-doc-face fontified t)) . -167) (undo-tree-id323 . -1) (#("`" 0 1 (face font-lock-doc-face fontified t)) . -168) (undo-tree-id324 . -1) (#("W" 0 1 (face font-lock-doc-face fontified t)) . -169) (undo-tree-id325 . -1) 170 (#("i" 0 1 (face font-lock-doc-face fontified t)) . -170) (undo-tree-id326 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -171) (undo-tree-id327 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -172) (undo-tree-id328 . -1) (#("C" 0 1 (face font-lock-doc-face fontified t)) . -173) (undo-tree-id329 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -174) (undo-tree-id330 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -175) (undo-tree-id331 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -176) (undo-tree-id332 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -177) (undo-tree-id333 . -1) (#("x" 0 1 (face font-lock-doc-face fontified t)) . -178) (undo-tree-id334 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -179) (undo-tree-id335 . -1) (#("`" 0 1 (face font-lock-doc-face fontified t)) . -180) (undo-tree-id336 . -1) (#("]" 0 1 (face font-lock-doc-face fontified t)) . -181) (undo-tree-id337 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -182) (undo-tree-id338 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -183) (undo-tree-id339 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -184) (undo-tree-id340 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -185) (undo-tree-id341 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -186) (undo-tree-id342 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -187) (undo-tree-id343 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -188) (undo-tree-id344 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -189) (undo-tree-id345 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -190) (undo-tree-id346 . -1) 191 (176 . 191) (155 . 176) (146 . 155) (137 . 146) (135 . 137) (t 25814 32962 578109 581000)) nil (25814 33411 912883 749000) 0 nil])
([nil nil ((321 . 322) (#("T" 0 1 (face font-lock-type-face fontified t)) . -321) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) 322 (302 . 303) (#("T" 0 1 (face font-lock-type-face fontified t)) . -302) (undo-tree-id351 . -1) (undo-tree-id352 . -1) 303 (325 . 327) (t 25814 33411 920684 741000)) nil (25814 33420 486615 274000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -416) (undo-tree-id353 . -2) (undo-tree-id354 . -2) (undo-tree-id355 . -2) (undo-tree-id356 . -2) (undo-tree-id357 . -2) (418 . 419) (413 . 418) (408 . 413) (#("value" 0 5 (fontified nil)) . 408) (408 . 413) (#("value" 0 5 (fontified t)) . -408) (undo-tree-id358 . -5) (undo-tree-id359 . -5) (undo-tree-id360 . -5) (undo-tree-id361 . -5) 413 (401 . 413) (397 . 401) (384 . 397) (376 . 384) (#("contex" 0 6 (fontified nil)) . 376) (376 . 382) (#("contexts" 0 8 (fontified nil)) . -376) (376 . 384) (#("contex" 0 6 (fontified t)) . -376) (undo-tree-id362 . -6) 382 (376 . 382) (372 . 376) (366 . 372) (#("t" 0 1 (fontified t)) . -366) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (#("o" 0 1 (fontified t)) . -367) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (#("d" 0 1 (fontified t)) . -368) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#("o" 0 1 (fontified t)) . -369) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (#("!" 0 1 (fontified t)) . -370) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("(" 0 1 (fontified t)) . -371) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (#(")" 0 1 (fontified t)) . -372) (undo-tree-id375 . -1) (undo-tree-id376 . -1) 373 (#("d" 0 1 (face font-lock-preprocessor-face fontified t)) . -366) (undo-tree-id377 . -1) (undo-tree-id378 . -1) 367 (366 . 367) (apply yas--snippet-revive 325 380 #s(yas--snippet nil (#s(yas--field 0 366 373 nil nil nil nil nil)) nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 366 373 nil nil nil nil nil)) nil 25 nil nil nil nil)) (325 . 380) (#("
    fn from(value: E) -> Self {
        ${0:todo!()}
    }
" 0 1 (fontified nil) 1 24 (fontified nil) 24 25 (syntax-table (1) fontified nil) 25 59 (fontified nil) 59 60 (fontified nil)) . 325) (undo-tree-id379 . -1) (326 . 384) (#("	" 0 1 (fontified t)) . 326) (undo-tree-id380 . -1) 325 (t 25814 33420 493999 580000)) nil (25814 33453 140886 666000) 0 nil])
([nil nil ((271 . 272) (254 . 255) (t 25814 33453 183930 371000)) nil (25814 33492 190437 730000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -200) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -201) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (#(" " 0 1 (fontified t)) . -202) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (#("f" 0 1 (face font-lock-function-name-face fontified t)) . -203) (undo-tree-id387 . -1) (#("m" 0 1 (face font-lock-function-name-face fontified t)) . -204) (undo-tree-id388 . -1) (#("t" 0 1 (face font-lock-function-name-face fontified t)) . -205) (undo-tree-id389 . -1) (#("(" 0 1 (fontified t)) . -206) (undo-tree-id390 . -1) 207 (203 . 207) (200 . 203) (198 . 200) (#("	" 0 1 (fontified nil)) . -199) (undo-tree-id391 . -1) (200 . 201) (198 . 200) (194 . 198) (#("T" 0 1 (face font-lock-type-face fontified t)) . -194) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#(">" 0 1 (fontified t)) . -195) (undo-tree-id394 . -1) (undo-tree-id395 . -1) 196 (194 . 195) (apply yas--snippet-revive 182 195 #s(yas--snippet nil nil #s(yas--exit 194 nil) 42 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 194 nil) 42 nil nil nil nil)) (182 . 195) (#("WithContext<$0>" 0 15 (fontified nil)) . 182) (182 . 197) (#("WithCon" 0 7 (fontified nil)) . 182) (182 . 189) (#("WithContext<…>" 0 14 (fontified nil)) . -182) (182 . 196) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -182) (undo-tree-id396 . -7) 189 (183 . 189) (#("I" 0 1 (face font-lock-type-face fontified t)) . -183) (undo-tree-id397 . -1) 184 (#("t" 0 1 (face font-lock-type-face fontified t)) . -184) (undo-tree-id398 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -185) (undo-tree-id399 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -186) (undo-tree-id400 . -1) 187 (176 . 187) (169 . 176) (#("Displ" 0 5 (fontified nil)) . 169) (169 . 174) (#("Display (alias {})" 0 18 (fontified nil)) . -169) (169 . 187) (#("Displ" 0 5 (face font-lock-type-face fontified t)) . -169) (undo-tree-id401 . -5) 174 (166 . 174) (#("T" 0 1 (face font-lock-type-face fontified t)) . -166) (undo-tree-id402 . -1) (#(":" 0 1 (fontified t)) . -167) (undo-tree-id403 . -1) (#(" " 0 1 (fontified t)) . -168) (undo-tree-id404 . -1) (#("D" 0 1 (face font-lock-type-face fontified t)) . -169) (undo-tree-id405 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -170) (undo-tree-id406 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -171) (undo-tree-id407 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -172) (undo-tree-id408 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -173) (undo-tree-id409 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -174) (undo-tree-id410 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -175) (undo-tree-id411 . -1) (#(">" 0 1 (fontified t)) . -176) (undo-tree-id412 . -1) (#(" " 0 1 (fontified t)) . -177) (undo-tree-id413 . -1) (#("f" 0 1 (fontified t)) . -178) (undo-tree-id414 . -1) (#("o" 0 1 (fontified t)) . -179) (undo-tree-id415 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -180) (undo-tree-id416 . -1) (#(" " 0 1 (fontified t)) . -181) (undo-tree-id417 . -1) (#("W" 0 1 (face font-lock-type-face fontified t)) . -182) (undo-tree-id418 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -183) (undo-tree-id419 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -184) (undo-tree-id420 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -185) (undo-tree-id421 . -1) 186 (181 . 186) (176 . 181) (1 . 25) (145 . 145) (145 . 152) (#("Displ" 0 5 (fontified nil)) . 145) (145 . 150) (#("Display (alias {}) (use std::fmt::Display)" 0 42 (fontified nil)) . -145) (145 . 187) (#("Displ" 0 5 (face font-lock-type-face fontified t)) . -145) (undo-tree-id422 . -5) 150 (137 . 150) (136 . 138) (t 25814 33492 190516 936000)) nil (25814 34675 263149 896000) 0 nil])
([nil nil ((178 . 185) (#("Displ" 0 5 (fontified nil)) . 178) (178 . 183) (#("Display (alias {})" 0 18 (fontified nil)) . -178) (178 . 196) (#("Displ" 0 5 (face font-lock-type-face fontified t)) . -178) (undo-tree-id423 . -5) (undo-tree-id424 . -5) (undo-tree-id425 . -5) (undo-tree-id426 . -5) (undo-tree-id427 . -5) 183 (177 . 183) (t 25814 34675 272076 551000)) nil (25814 34693 340580 491000) 0 nil])
([nil nil ((179 . 195) (#("Contex" 0 6 (fontified nil)) . 179) (179 . 185) (#("Contextualizable" 0 16 (fontified nil)) . -179) (179 . 195) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -179) (undo-tree-id428 . -6) (undo-tree-id429 . -6) (undo-tree-id430 . -6) (undo-tree-id431 . -6) (undo-tree-id432 . -6) 185 (176 . 185) (t 25814 34693 348720 623000)) nil (25814 34716 389379 37000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 307 314 nil nil nil nil nil)) nil 43 nil nil nil nil)) (225 . 321) (#("
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        ${0:todo!()}
    }
" 0 1 (fontified nil) 1 53 (fontified nil) 53 54 (syntax-table (1) fontified nil) 54 100 (fontified nil) 100 101 (fontified nil)) . 225) (undo-tree-id486 . -1) (226 . 325) (#("	" 0 1 (fontified t)) . 226) (undo-tree-id487 . -1) 225 (t 25814 34716 435358 507000)) nil (25814 34751 985703 548000) 0 nil])
([nil nil ((apply yas--snippet-revive 225 321 #s(yas--snippet nil (#s(yas--field 0 307 314 nil nil nil nil nil)) nil 43 nil nil nil nil))) nil (25814 34751 985700 434000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -307) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (#("o" 0 1 (fontified t)) . -308) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -309) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#(" " 0 1 (fontified t)) . -310) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -311) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -312) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -313) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -314) (undo-tree-id480 . -1) 315 (307 . 315) (#("todo!()" 0 5 (face font-lock-preprocessor-face fontified t) 5 7 (fontified t)) . 307) (undo-tree-id481 . -6) (undo-tree-id482 . -6) (undo-tree-id483 . -6) (undo-tree-id484 . -7) (undo-tree-id485 . -7)) nil (25814 34751 985694 833000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-constant-face fontified t)) . -260) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -261) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -262) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (#(":" 0 1 (fontified t)) . -263) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (#(":" 0 1 (fontified t)) . -264) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) 265 (#("s" 0 1 (face font-lock-constant-face fontified t)) . -288) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -289) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -290) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (#(":" 0 1 (fontified t)) . -291) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (#(":" 0 1 (fontified t)) . -292) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) 293 (16 . 22) (23 . 24) (15 . 15) (15 . 16) (t 25814 34752 31980 953000)) nil (25814 46642 517985 926000) 0 nil])
([nil nil ((423 . 429) (420 . 423) (411 . 420) (398 . 411) (#(":" 0 1 (fontified t)) . -398) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (#(" " 0 1 (fontified t)) . -399) (undo-tree-id490 . -1) (undo-tree-id491 . -1) 400 (371 . 372) (370 . 371) (395 . 398) (387 . 395) (#("{" 0 1 (fontified t)) . -387) (undo-tree-id492 . -1) (#("e" 0 1 (fontified t)) . -388) (undo-tree-id493 . -1) 389 (377 . 389) (374 . 377) (357 . 370) (346 . 357) (342 . 346) (#("	" 0 1 (fontified nil)) . -345) (undo-tree-id494 . -1) (346 . 347) (342 . 346) (340 . 342) (apply yas--snippet-revive 334 340 #s(yas--snippet nil nil #s(yas--exit 340 nil) 83 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 340 nil) 83 nil nil nil nil)) (334 . 340) (#("iter()$0" 0 8 (fontified nil)) . 334) (334 . 342) (#("iter" 0 4 (fontified nil)) . 334) (334 . 338) (#("iter()" 0 6 (fontified nil)) . -334) (334 . 340) (#("iter" 0 4 (fontified t)) . -334) (undo-tree-id495 . -4) 338 (333 . 338) (325 . 333) (#("contex" 0 6 (fontified nil)) . 325) (325 . 331) (#("contexts" 0 8 (fontified nil)) . -325) (325 . 333) (#("contex" 0 6 (fontified t)) . -325) (undo-tree-id496 . -6) 331 (330 . 331) (309 . 330) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -309) (undo-tree-id497 . -1) (#(" " 0 1 (fontified t)) . -310) (undo-tree-id498 . -1) (#("i" 0 1 (fontified t)) . -311) (undo-tree-id499 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -312) (undo-tree-id500 . -1) (#(" " 0 1 (fontified t)) . -313) (undo-tree-id501 . -1) (#("s" 0 1 (fontified t)) . -314) (undo-tree-id502 . -1) (#("e" 0 1 (fontified t)) . -315) (undo-tree-id503 . -1) (#("l" 0 1 (fontified t)) . -316) (undo-tree-id504 . -1) 317 (305 . 317) (#("s" 0 1 (fontified t)) . -305) (undo-tree-id505 . -1) (#("e" 0 1 (fontified t)) . -306) (undo-tree-id506 . -1) 307 (305 . 307) (#("s" 0 1 (fontified t)) . -305) (undo-tree-id507 . -1) (#("e" 0 1 (fontified t)) . -306) (undo-tree-id508 . -1) (#("l" 0 1 (fontified t)) . -307) (undo-tree-id509 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -308) (undo-tree-id510 . -1) (#("." 0 1 (fontified t)) . -309) (undo-tree-id511 . -1) 310 (305 . 310)) nil (25814 46642 517830 903000) 0 nil])
([nil nil ((419 . 420) (t 25814 46642 564262 334000)) nil (25814 46645 50698 485000) 0 nil])
([nil nil ((apply yas--snippet-revive 341 346 #s(yas--snippet nil nil #s(yas--exit 346 nil) 84 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 346 nil) 84 nil nil nil nil)) (341 . 346) (#("rev()$0" 0 7 (fontified nil)) . 341) (341 . 348) (#("rev" 0 3 (fontified nil)) . 341) (341 . 344) (#("rev() (alias reverse) (as Iterator)" 0 35 (fontified nil)) . -341) (341 . 376) (#("rev" 0 3 (fontified t)) . -341) (undo-tree-id589 . -3) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -3) (undo-tree-id593 . -3) (undo-tree-id594 . -3) (undo-tree-id595 . -3) 344 (340 . 344) (t 25814 46645 84261 158000)) nil (25814 47161 244405 70000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -169) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (#("m" 0 1 (fontified t)) . -170) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) 171 (#("p" 0 1 (fontified t)) . -171) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -172) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (#("<" 0 1 (fontified t)) . -173) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -174) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -175) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#(" " 0 1 (fontified t)) . -176) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) 177 (169 . 177) (167 . 169) (t 25814 47161 254020 830000)) nil (25814 47323 850005 454000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -167) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (#("
" 0 1 (fontified t)) . -168) (undo-tree-id678 . -1) (undo-tree-id679 . -1) 169 (t 25814 47323 857278 588000)) nil (25814 47644 181687 936000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -2214) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (2215 . 2216) (2213 . 2215) (2211 . 2213) (2209 . 2210) (44 . 45) (50 . 55) (51 . 57) (apply yas--snippet-revive 2188 2198 #s(yas--snippet nil nil #s(yas--exit 2197 nil) 103 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2197 nil) 103 nil nil nil nil)) (2188 . 2198) (#("OptError<$0>" 0 12 (fontified nil)) . 2188) (2188 . 2200) (#("OptE" 0 4 (fontified nil)) . 2188) (2188 . 2192) (#("OptError<…> (use super::OptError)" 0 33 (fontified nil)) . -2188) (2188 . 2221) (#("OptE" 0 4 (face font-lock-type-face fontified t)) . -2188) (undo-tree-id708 . -4) (undo-tree-id709 . -4) 2192 (2185 . 2192) (#("r" 0 1 (fontified t)) . -2185) (undo-tree-id710 . -1) 2186 (2185 . 2186) (#("r" 0 1 (fontified t)) . -2185) (undo-tree-id711 . -1) 2186 (2183 . 2186) (2167 . 2183) (#("Contex" 0 6 (fontified nil)) . 2167) (2167 . 2173) (#("Contextualizable" 0 16 (fontified nil)) . -2167) (2167 . 2183) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -2167) (undo-tree-id712 . -6) 2173 (2165 . 2173) (2149 . 2165) (#("Contex" 0 6 (fontified nil)) . 2149) (2149 . 2155) (#("Contextualizable" 0 16 (fontified nil)) . -2149) (2149 . 2165) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -2149) (undo-tree-id713 . -6) 2155 (2141 . 2155) (2139 . 2141) (t 25814 47644 190477 46000)) nil (25815 32311 493639 867000) 0 nil])
([nil nil ((2380 . 2381) (apply yas--snippet-revive 2358 2380 #s(yas--snippet nil (#s(yas--field 1 2372 2379 nil nil nil nil #s(yas--exit 2380 nil))) #s(yas--exit 2380 nil) 106 nil #s(yas--field 1 2372 2379 nil nil nil nil #s(yas--exit 2380 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2372 2379 nil nil nil nil #s(yas--exit 2380 nil))) #s(yas--exit 2380 nil) 106 nil #s(yas--field 1 2372 2379 nil nil nil nil #s(yas--exit 2380 nil)) nil nil)) (2358 . 2380) (#("contextualize(${1:context})$0" 0 29 (fontified nil)) . 2358) (2358 . 2387) (#("contextualize(…) (as Contextualizable)" 0 38 (fontified nil)) . -2358) (2358 . 2396) (2351 . 2358) (2343 . 2351) (#("OptErr" 0 6 (fontified nil)) . 2343) (2343 . 2349) (#("OptError" 0 8 (fontified nil)) . -2343) (2343 . 2351) (#("OptErr" 0 6 (face font-lock-type-face fontified t)) . -2343) (undo-tree-id680 . -6) 2349 (2343 . 2349) (2340 . 2343) (2333 . 2340) (2332 . 2333) (apply yas--snippet-revive 2317 2332 #s(yas--snippet nil (#s(yas--field 1 2326 2331 nil nil nil t #s(yas--exit 2332 nil))) #s(yas--exit 2332 nil) 105 nil #s(yas--field 1 2326 2331 nil nil nil t #s(yas--exit 2332 nil)) nil nil)) (2326 . 2331) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2326 2331 nil nil nil t #s(yas--exit 2332 nil))) #s(yas--exit 2332 nil) 105 nil #s(yas--field 1 2326 2331 nil nil nil t #s(yas--exit 2332 nil)) nil nil)) (2317 . 2327) (#("OptError($1)$0" 0 14 (fontified nil)) . 2317) (2317 . 2331) (#("OptEr" 0 5 (fontified nil)) . 2317) (2317 . 2322) (#("OptError(…)" 0 11 (fontified nil)) . -2317) (2317 . 2328) (#("OptEr" 0 5 (face font-lock-type-face fontified t)) . -2317) (undo-tree-id681 . -5) 2322 (2313 . 2322) (#("m" 0 1 (fontified nil)) . -2313) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (#("a" 0 1 (fontified t)) . -2314) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (#("t" 0 1 (fontified t)) . -2315) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (#("c" 0 1 (fontified t)) . -2316) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (#("h" 0 1 (face font-lock-keyword-face fontified t)) . -2317) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (#(" " 0 1 (fontified t)) . -2318) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (#("s" 0 1 (fontified t)) . -2319) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (#("e" 0 1 (fontified t)) . -2320) (undo-tree-id696 . -1) (undo-tree-id697 . -1) 2321 (2313 . 2321) (#("match self {
		}" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 10 (face font-lock-keyword-face fontified t) 10 13 (fontified t) 13 16 (fontified t)) . 2313) (undo-tree-id698 . -16) (undo-tree-id699 . -16) (#("	" 0 1 (fontified nil)) . -2328) (undo-tree-id700 . -1) (2329 . 2330) (2325 . 2329) (2313 . 2325) (apply yas--snippet-revive 2252 2316 #s(yas--snippet nil nil #s(yas--exit 2313 nil) 104 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2313 nil) 104 nil nil nil nil)) (2252 . 2316) (#("fn contextualize(self, context: Context) -> Self::Output {
		$0
	}" 0 42 (fontified nil) 42 43 (syntax-table (1) fontified nil) 43 66 (fontified nil)) . 2252) (2316 . 2317) (2311 . 2313) (#("    " 0 4 (fontified nil)) . 2311) (2252 . 2319) (#("fn contex" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 9 (fontified nil)) . 2252) (undo-tree-id701 . -3) (2255 . 2261) (#("fn contextualize(..)" 0 20 (fontified nil)) . -2255) (2255 . 2275) (#("contex" 0 6 (face font-lock-function-name-face fontified t)) . -2255) (undo-tree-id702 . -6) 2261 (2252 . 2261) (2251 . 2252) (#("	" 0 1 (fontified nil)) . 2250) (undo-tree-id703 . -1) (2249 . 2252) (2229 . 2249) (2215 . 2229) (2213 . 2215)) nil (25815 32311 493608 984000) 0 nil])
([nil nil ((2627 . 2629) (#(" " 0 1 (fontified nil)) . 2627) (2626 . 2627) (2625 . 2626) (2597 . 2600) (#(" " 0 1 (fontified nil)) . 2596) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (2597 . 2598) (2568 . 2571) (#(" " 0 1 (fontified nil)) . 2567) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (2568 . 2569) (apply yas--snippet-revive 2613 2619 #s(yas--snippet nil nil #s(yas--exit 2619 nil) 119 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2619 nil) 119 nil nil nil nil)) (2613 . 2619) (#("into()$0" 0 8 (fontified nil)) . 2613) (2613 . 2621) (#("into() (as Into)" 0 16 (fontified nil)) . -2613) (2613 . 2629) (2612 . 2613) (#("." 0 1 (fontified t)) . -2612) (undo-tree-id719 . -1) 2613 (2612 . 2613) (2607 . 2612) (#("error" 0 5 (fontified nil)) . -2607) (2607 . 2612) (2601 . 2607) (#("e" 0 1 (fontified t)) . -2601) (undo-tree-id720 . -1) (#("r" 0 1 (fontified t)) . -2602) (undo-tree-id721 . -1) (#("r" 0 1 (fontified t)) . -2603) (undo-tree-id722 . -1) (#("o" 0 1 (fontified t)) . -2604) (undo-tree-id723 . -1) (#("r" 0 1 (fontified t)) . -2605) (undo-tree-id724 . -1) 2606 (#("." 0 1 (fontified t)) . -2606) (undo-tree-id725 . -1) 2607 (2601 . 2607) (#("(" 0 1 (fontified t)) . -2601) (undo-tree-id726 . -1) (#(")" 0 1 (fontified t)) . -2602) (undo-tree-id727 . -1) 2603 (apply yas--snippet-revive 2554 2605 #s(yas--snippet nil (#s(yas--field 1 2578 2592 nil nil nil t #s(yas--field 2 2601 2603 nil nil nil nil #s(yas--exit 2605 nil))) #s(yas--field 2 2601 2603 nil nil nil nil #s(yas--exit 2605 nil))) #s(yas--exit 2605 nil) 118 nil #s(yas--field 1 2578 2592 nil nil nil t #s(yas--field 2 2601 2603 nil nil nil nil #s(yas--exit 2605 nil))) nil nil)) (2584 . 2592) (#("contexts" 0 8 (fontified nil)) . -2584) (2584 . 2592) (2579 . 2584) (#("()" 0 2 (fontified nil)) . 2579) (2578 . 2579) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2578 2592 nil nil nil t #s(yas--field 2 2601 2603 nil nil nil nil #s(yas--exit 2605 nil))) #s(yas--field 2 2601 2603 nil nil nil nil #s(yas--exit 2605 nil))) #s(yas--exit 2605 nil) 118 nil #s(yas--field 1 2578 2592 nil nil nil t #s(yas--field 2 2601 2603 nil nil nil nil #s(yas--exit 2605 nil))) nil nil)) (2554 . 2593) (#("WithContext { contexts: ${1:()}, error: ${2:()} }$0" 0 51 (fontified nil)) . 2554) (2554 . 2605) (#("WithC" 0 5 (fontified nil)) . 2554) (2554 . 2559) (#("WithContext {…}" 0 15 (fontified nil)) . -2554) (2554 . 2569) (#("WithC" 0 5 (face font-lock-type-face fontified t)) . -2554) (undo-tree-id728 . -1) (undo-tree-id729 . -5) 2559 (2554 . 2559) (apply yas--snippet-revive 2511 2557 #s(yas--snippet nil nil #s(yas--exit 2554 nil) 117 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2554 nil) 117 nil nil nil nil)) (2511 . 2557) (#("fn from(value: WithContext<U>) -> Self {
		$0
	}" 0 32 (fontified nil) 32 33 (syntax-table (1) fontified nil) 33 48 (fontified nil)) . 2511) (2557 . 2558) (2552 . 2554) (#("    " 0 4 (fontified nil)) . 2552) (2511 . 2560) (#("fn fro" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 6 (fontified nil)) . 2511) (undo-tree-id730 . -3) (2514 . 2517) (#("fn from(..)" 0 11 (fontified nil)) . -2514) (2514 . 2525) (#("fro" 0 3 (face font-lock-function-name-face fontified t)) . -2514) (undo-tree-id731 . -3) 2517 (2514 . 2517) (#("f" 0 1 (face font-lock-function-name-face fontified t)) . -2514) (undo-tree-id732 . -1) (#("r" 0 1 (face font-lock-function-name-face fontified t)) . -2515) (undo-tree-id733 . -1) (#("o" 0 1 (face font-lock-function-name-face fontified t)) . -2516) (undo-tree-id734 . -1) (#("m" 0 1 (face font-lock-function-name-face fontified t)) . -2517) (undo-tree-id735 . -1) 2518 (2516 . 2518) (2511 . 2516) (2509 . 2511) (2505 . 2506) (apply yas--snippet-revive 2493 2506 #s(yas--snippet nil nil #s(yas--exit 2505 nil) 116 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2505 nil) 116 nil nil nil nil)) (2493 . 2506) (#("WithContext<$0>" 0 15 (fontified nil)) . 2493) (2493 . 2508) (#("WithCon" 0 7 (fontified nil)) . 2493) (2493 . 2500) (#("WithContext<…>" 0 14 (fontified nil)) . -2493) (2493 . 2507) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -2493) (undo-tree-id736 . -7) 2500 (2493 . 2500) (#("T" 0 1 (face font-lock-type-face fontified t)) . -2493) (undo-tree-id737 . -1) (undo-tree-id738 . -1) 2494 (2485 . 2486) (#("T" 0 1 (face font-lock-type-face fontified t)) . -2485) (undo-tree-id739 . -1) (undo-tree-id740 . -1) 2486 (2485 . 2486) (apply yas--snippet-revive 2473 2486 #s(yas--snippet nil nil #s(yas--exit 2485 nil) 115 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2485 nil) 115 nil nil nil nil)) (2473 . 2486) (#("WithContext<$0>" 0 15 (fontified nil)) . 2473) (2473 . 2488) (#("WithU" 0 4 (fontified nil) 4 5 (face font-lock-type-face fontified nil)) . 2473) (2473 . 2477) (#("WithContext<…>" 0 14 (fontified nil)) . -2473) (2473 . 2487) (#("With" 0 4 (face font-lock-type-face fontified t)) . -2473) (undo-tree-id741 . -4) (undo-tree-id742 . -4) 2477 (2473 . 2477) (#("
" 0 1 (fontified t)) . -2483) (undo-tree-id743 . -1) (#("	" 0 1 (fontified t)) . -2484) (undo-tree-id744 . -1) (#("f" 0 1 (fontified t)) . -2485) (undo-tree-id745 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -2486) (undo-tree-id746 . -1) (#(" " 0 1 (fontified t)) . -2487) (undo-tree-id747 . -1) 2488 (2485 . 2488) (2483 . 2485) (#("	" 0 1 (fontified nil)) . -2484) (undo-tree-id748 . -1) (2485 . 2486) (2483 . 2485) (2473 . 2483) (2467 . 2473) (#("," 0 1 (fontified t)) . -2467) (undo-tree-id749 . -1) (#(" " 0 1 (fontified t)) . -2468) (undo-tree-id750 . -1) 2469 (2457 . 2469) (2453 . 2457) (#("U" 0 1 (face font-lock-type-face fontified t)) . -2453) (undo-tree-id751 . -1) 2454 (2453 . 2454) (#("T" 0 1 (face font-lock-type-face fontified t)) . -2453) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (#(":" 0 1 (fontified t)) . -2454) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (#(" " 0 1 (fontified t)) . -2455) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -2456) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2457) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2458) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -2459) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (#("<" 0 1 (fontified t)) . -2460) (undo-tree-id766 . -1) (undo-tree-id767 . -1) 2461 (2456 . 2461) (#("C" 0 1 (face font-lock-type-face fontified t)) . -2456) (undo-tree-id768 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -2457) (undo-tree-id769 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2458) (undo-tree-id770 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2459) (undo-tree-id771 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -2460) (undo-tree-id772 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -2461) (undo-tree-id773 . -1) 2462 (2448 . 2462) (2447 . 2448) (2437 . 2447) (2423 . 2437) (2402 . 2423) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -2402) (undo-tree-id774 . -1) 2403 (2392 . 2403) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -2392) (undo-tree-id775 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -2393) (undo-tree-id776 . -1) 2394 (2392 . 2394) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -2392) (undo-tree-id777 . -1) (#("m" 0 1 (face font-lock-doc-face fontified t)) . -2393) (undo-tree-id778 . -1) (#("p" 0 1 (face font-lock-doc-face fontified t)) . -2394) (undo-tree-id779 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -2395) (undo-tree-id780 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -2396) (undo-tree-id781 . -1) (#("m" 0 1 (face font-lock-doc-face fontified t)) . -2397) (undo-tree-id782 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -2398) (undo-tree-id783 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -2399) (undo-tree-id784 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -2400) (undo-tree-id785 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -2401) (undo-tree-id786 . -1) (#("`" 0 1 (face font-lock-doc-face fontified t)) . -2402) (undo-tree-id787 . -1) 2403 (2402 . 2403) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -2402) (undo-tree-id788 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -2403) (undo-tree-id789 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -2404) (undo-tree-id790 . -1) (#("m" 0 1 (face font-lock-doc-face fontified t)) . -2405) (undo-tree-id791 . -1) 2406 (2388 . 2406) (t 25815 32311 495554 868000)) nil (25815 54391 529508 220000) 0 nil])
([nil nil ((2635 . 2636)) nil (25815 54391 529423 121000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2438) (undo-tree-id792 . -1) (undo-tree-id793 . -1) 2439 (2392 . 2411) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -2392) (undo-tree-id794 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -2393) (undo-tree-id795 . -1) 2394 (#("a" 0 1 (face font-lock-doc-face fontified t)) . -2394) (undo-tree-id796 . -1) (#("m" 0 1 (face font-lock-doc-face fontified t)) . -2395) (undo-tree-id797 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -2396) (undo-tree-id798 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -2397) (undo-tree-id799 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -2398) (undo-tree-id800 . -1) (#("b" 0 1 (face font-lock-doc-face fontified t)) . -2399) (undo-tree-id801 . -1) (#("b" 0 1 (face font-lock-doc-face fontified t)) . -2400) (undo-tree-id802 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -2401) (undo-tree-id803 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -2402) (undo-tree-id804 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -2403) (undo-tree-id805 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -2404) (undo-tree-id806 . -1) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -2405) (undo-tree-id807 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -2406) (undo-tree-id808 . -1) (#("y" 0 1 (face font-lock-doc-face fontified t)) . -2407) (undo-tree-id809 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -2408) (undo-tree-id810 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -2409) (undo-tree-id811 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -2410) (undo-tree-id812 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -2411) (undo-tree-id813 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -2412) (undo-tree-id814 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -2413) (undo-tree-id815 . -1) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -2414) (undo-tree-id816 . -1) 2415 (2442 . 2445) (2409 . 2415) (2388 . 2409) (2387 . 2388) (2408 . 2414) (2399 . 2408) (#("a" 0 1 (face font-lock-type-face fontified t)) . -2399) (undo-tree-id817 . -1) 2400 (2394 . 2400) (#("U" 0 1 (face font-lock-type-face fontified nil)) . -2394) (undo-tree-id818 . -1) (#("n" 0 1 (face font-lock-type-face fontified nil)) . -2395) (undo-tree-id819 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -2396) (undo-tree-id820 . -1) (#("q" 0 1 (face font-lock-type-face fontified t)) . -2397) (undo-tree-id821 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -2398) (undo-tree-id822 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -2399) (undo-tree-id823 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -2400) (undo-tree-id824 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -2401) (undo-tree-id825 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -2402) (undo-tree-id826 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -2403) (undo-tree-id827 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -2404) (undo-tree-id828 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -2405) (undo-tree-id829 . -1) (#("<" 0 1 (fontified t)) . -2406) (undo-tree-id830 . -1) 2407 (2401 . 2407) (2396 . 2401) (#("E" 0 1 (face font-lock-type-face fontified t)) . -2396) (undo-tree-id831 . -1) (#("q" 0 1 (face font-lock-type-face fontified t)) . -2397) (undo-tree-id832 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -2398) (undo-tree-id833 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -2399) (undo-tree-id834 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -2400) (undo-tree-id835 . -1) 2401 (2389 . 2401) (#("a" 0 1 (fontified t)) . -2389) (undo-tree-id836 . -1) 2390 (2388 . 2390) (2387 . 2389) (t 25815 54391 529465 802000)) nil (25815 54784 270757 656000) 0 nil])
([nil nil ((2503 . 2512) (2490 . 2503) (#("NonEqu" 0 6 (fontified nil)) . 2490) (2490 . 2496) (#("NonEqualTypes" 0 13 (fontified nil)) . -2490) (2490 . 2503) (#("NonEqu" 0 6 (face font-lock-type-face fontified t)) . -2490) (undo-tree-id837 . -6) (undo-tree-id838 . -6) (undo-tree-id839 . -6) 2496 (2488 . 2496) (2486 . 2488) (#("	" 0 1 (fontified t)) . -2480) 2487 (2481 . 2487) (2479 . 2481) (2466 . 2479) (2453 . 2466) (#("NonEq" 0 5 (fontified nil)) . 2453) (2453 . 2458) (#("NonEqualTypes" 0 13 (fontified nil)) . -2453) (2453 . 2466) (#("NonEq" 0 5 (face font-lock-type-face fontified t)) . -2453) (undo-tree-id840 . -5) 2458 (2453 . 2458) (2442 . 2453) (2440 . 2442) (2536 . 2543) (2532 . 2536) (2511 . 2532) (#("," 0 1 (fontified t)) . -2511) (undo-tree-id841 . -1) 2512 (2493 . 2512) (2492 . 2493) (2470 . 2481) (#("e" 0 1 (face font-lock-type-face fontified t)) . -2470) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2471) (undo-tree-id844 . -1) (undo-tree-id845 . -1) 2472 (2461 . 2472) (#("T" 0 1 (face font-lock-type-face fontified t)) . -2461) (undo-tree-id846 . -1) (#("," 0 1 (fontified t)) . -2462) (undo-tree-id847 . -1) 2463 (#(" " 0 1 (fontified t)) . -2463) (undo-tree-id848 . -1) (#("U" 0 1 (face font-lock-type-face fontified t)) . -2464) (undo-tree-id849 . -1) 2465 (2460 . 2476) (2447 . 2460) (#("NonEqua" 0 7 (fontified nil)) . 2447) (2447 . 2454) (#("NonEqualTypes" 0 13 (fontified nil)) . -2447) (2447 . 2460) (#("NonEqua" 0 7 (face font-lock-type-face fontified t)) . -2447) (undo-tree-id850 . -7) 2454 (2447 . 2454) (2442 . 2447) (2440 . 2442) (t 25815 54784 272661 6000)) nil (25815 54897 169414 286000) 0 nil])
([nil nil ((2620 . 2627) (2598 . 2605) (2547 . 2554) (2533 . 2540) (t 25815 54897 179290 238000)) nil (25815 54933 323321 235000) 0 nil])
([nil nil ((2579 . 2581) (t 25815 54921 435948 963000)) nil (25815 54937 494642 273000) 0 nil] [nil nil ((#("impl<T, U> NonEqualTypes<U, T> for ()
where (): NonEqualTypes<T, U> {}" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (face font-lock-type-face fontified t) 6 8 (fontified t) 8 9 (face font-lock-type-face fontified t) 9 11 (fontified t) 11 24 (face font-lock-type-face fontified t) 24 25 (fontified t) 25 26 (face font-lock-type-face fontified t) 26 28 (fontified t) 28 29 (face font-lock-type-face fontified t) 29 31 (fontified t) 31 34 (face font-lock-keyword-face fontified t) 34 38 (fontified t) 38 43 (face font-lock-keyword-face fontified t) 43 48 (fontified t) 48 61 (face font-lock-type-face fontified t) 61 62 (fontified t) 62 63 (face font-lock-type-face fontified t) 63 65 (fontified t) 65 66 (face font-lock-type-face fontified t) 66 70 (fontified t)) . 2442) (undo-tree-id869 . -69) (undo-tree-id870 . -69) (undo-tree-id871 . -69) (undo-tree-id872 . -62) (undo-tree-id873 . -69) (undo-tree-id874 . -69) (undo-tree-id875 . -70) (t 25815 54921 435948 963000)) ((2442 . 2512)) (25815 54932 521002 678000) 0 nil])
([nil nil ((#("impl<T, U> NonEqualTypes<U, T> for ()
where (): NonEqualTypes<T, U> {}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (face font-lock-type-face fontified t) 6 8 (fontified t) 8 9 (face font-lock-type-face fontified t) 9 11 (fontified t) 11 24 (face font-lock-type-face fontified t) 24 25 (fontified t) 25 26 (face font-lock-type-face fontified t) 26 28 (fontified t) 28 29 (face font-lock-type-face fontified t) 29 31 (fontified t) 31 34 (face font-lock-keyword-face fontified t) 34 38 (fontified t) 38 43 (face font-lock-keyword-face fontified t) 43 48 (fontified t) 48 61 (face font-lock-type-face fontified t) 61 62 (fontified t) 62 63 (face font-lock-type-face fontified t) 63 65 (fontified t) 65 66 (face font-lock-type-face fontified t) 66 70 (fontified t) 70 71 (fontified t) 71 72 (fontified t)) . 2442) (undo-tree-id911 . -71) (undo-tree-id912 . -71) (undo-tree-id913 . -71) (undo-tree-id914 . -62) (undo-tree-id915 . -71) (undo-tree-id916 . -71) (undo-tree-id917 . -71) (undo-tree-id918 . -71) (undo-tree-id919 . -71) (undo-tree-id920 . -71) (undo-tree-id921 . -71) (undo-tree-id922 . -71) (undo-tree-id923 . -71) (undo-tree-id924 . -71) (undo-tree-id925 . -72) (t 25815 54937 502610 385000)) nil (25815 54946 443170 246000) 0 nil])
([nil nil ((2441 . 2442) (#("
" 0 1 (fontified t)) . -2441) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) 2442) ((2441 . 2442) (#("
" 0 1 (fontified t)) . 2441) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1)) (25815 54932 519968 14000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 2507) (undo-tree-id909 . -1) (undo-tree-id910 . -1)) nil (25815 54946 443141 854000) 0 nil])
nil
([nil nil ((#("/" 0 1 (fontified t)) . 2507) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1)) nil (25815 54946 443133 662000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . -2517) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (#("s" 0 1 (fontified t)) . -2518) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (#("u" 0 1 (fontified t)) . -2519) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (#("p" 0 1 (fontified t)) . -2520) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (#("e" 0 1 (fontified t)) . -2521) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -2522) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (#(":" 0 1 (fontified t)) . -2523) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (#(":" 0 1 (fontified t)) . -2524) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -2525) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2526) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2527) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -2528) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2529) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (#("n" 0 1 (face font-lock-type-face fontified nil)) . -2530) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (#("a" 0 1 (face font-lock-type-face fontified nil)) . -2531) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) 2532 (#("l" 0 1 (face font-lock-type-face fontified nil)) . -2532) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -2533) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2534) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2535) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -2536) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2537) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (#("," 0 1 (fontified t)) . -2538) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (#(" " 0 1 (fontified t)) . -2539) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (#("s" 0 1 (fontified t)) . -2540) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (#("u" 0 1 (fontified t)) . -2541) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (#("p" 0 1 (fontified t)) . -2542) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (#("e" 0 1 (fontified t)) . -2543) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -2544) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (#(":" 0 1 (fontified t)) . -2545) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (#(":" 0 1 (fontified t)) . -2546) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -2547) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2548) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2549) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -2550) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2551) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (#(">" 0 1 (fontified t)) . -2552) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) 2553 (2454 . 2455) (#("<" 0 1 (fontified t)) . -2454) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (#("s" 0 1 (fontified t)) . -2455) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (#("u" 0 1 (fontified t)) . -2456) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (#("p" 0 1 (fontified t)) . -2457) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (#("e" 0 1 (fontified t)) . -2458) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (#("r" 0 1 (fontified t)) . -2459) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (#(":" 0 1 (fontified t)) . -2460) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (#(":" 0 1 (fontified t)) . -2461) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -2462) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2463) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2464) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -2465) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2466) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (#("," 0 1 (fontified t)) . -2467) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (#(" " 0 1 (fontified t)) . -2468) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) 2469 (#("s" 0 1 (fontified t)) . -2469) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (#("u" 0 1 (fontified t)) . -2470) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (#("p" 0 1 (fontified t)) . -2471) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (#("e" 0 1 (fontified t)) . -2472) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (#("r" 0 1 (fontified t)) . -2473) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (#(":" 0 1 (fontified nil)) . -2474) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (#(":" 0 1 (fontified nil)) . -2475) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (#("I" 0 1 (face font-lock-type-face fontified nil)) . -2476) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2477) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2478) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -2479) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2480) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2481) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -2482) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -2483) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -2484) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2485) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2486) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -2487) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2488) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (#(">" 0 1 (fontified t)) . -2489) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) 2490 (#(" " 0 1 (fontified t)) . -2490) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) 2491 (2624 . 2629) (#("Err" 0 3 (fontified nil)) . 2624) (2624 . 2627) (#("Error" 0 5 (fontified nil)) . -2624) (2624 . 2629) (#("Err" 0 3 (face font-lock-type-face fontified t)) . -2624) (undo-tree-id1395 . -3) 2627 (2615 . 2627) (2602 . 2615) (#("Internal" 0 8 (fontified nil)) . 2602) (2602 . 2610) (#("InternalError" 0 13 (fontified nil)) . -2602) (2602 . 2615) (#("Internal" 0 8 (face font-lock-type-face fontified t)) . -2602) (undo-tree-id1396 . -8) 2610 (2595 . 2610) (2517 . 2530) (#("Internal" 0 8 (fontified nil)) . 2517) (2517 . 2525) (#("InternalError" 0 13 (fontified nil)) . -2517) (2517 . 2530) (#("Internal" 0 8 (face font-lock-type-face fontified t)) . -2517) (undo-tree-id1397 . -8) 2525 (2522 . 2525) (#("a" 0 1 (face font-lock-type-face fontified t)) . -2522) (undo-tree-id1398 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2523) (undo-tree-id1399 . -1) 2524 (2517 . 2524) (2496 . 2517) (#("<" 0 1 (fontified t)) . -2431) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -2432) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (#("," 0 1 (fontified t)) . -2433) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (#(" " 0 1 (fontified t)) . -2434) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (#("U" 0 1 (face font-lock-type-face fontified t)) . -2435) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (#(">" 0 1 (fontified t)) . -2436) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) 2437 (2693 . 2699) (#(" " 0 1 (fontified nil)) . -2693) (2692 . 2693) (t 25815 54946 449274 137000)) nil (25815 55006 577218 936000) 0 nil])
([nil nil ((2710 . 2711) (2697 . 2710) (#("NonEq" 0 5 (fontified nil)) . 2697) (2697 . 2702) (#("NonEqualTypes" 0 13 (fontified nil)) . -2697) (2697 . 2710) (#("NonEq" 0 5 (face font-lock-type-face fontified t)) . -2697) (undo-tree-id1412 . -5) (undo-tree-id1413 . -4) (undo-tree-id1414 . -5) (undo-tree-id1415 . -5) (undo-tree-id1416 . -5) 2702 (2688 . 2702) (#("
" 0 1 (fontified t)) . -2688) (undo-tree-id1417 . -1) 2689 (#(" " 0 1 (fontified nil)) . 2688) (undo-tree-id1418 . -1) (2689 . 2690) (t 25815 55006 589254 643000)) nil (25815 55018 891658 726000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2744) (2742 . 2743) (2726 . 2742) (#("Contex" 0 6 (fontified nil)) . 2726) (2726 . 2732) (#("Contextualizable" 0 16 (fontified nil)) . -2726) (2726 . 2742) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -2726) (undo-tree-id1419 . -6) (undo-tree-id1420 . -6) (undo-tree-id1421 . -6) (undo-tree-id1422 . -6) 2732 (2715 . 2732) (2710 . 2713) 2712 (2710 . 2712) (2709 . 2710) (2708 . 2709) (2692 . 2708) (#("Contex" 0 6 (fontified nil)) . 2692) (2692 . 2698) (#("Contextualizable" 0 16 (fontified nil)) . -2692) (2692 . 2708) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -2692) (undo-tree-id1423 . -6) 2698 (2690 . 2698) (#(";" 0 1 (fontified t)) . -2690) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -2691) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -2692) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2693) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) 2694 (2692 . 2694) (2688 . 2692) (#(" " 0 1 (fontified nil)) . 2682) (undo-tree-id1432 . -1) (2683 . 2684) (#("
" 0 1 (fontified t)) . -2688) (undo-tree-id1433 . -1) (#("	" 0 1 (fontified t)) . -2689) (undo-tree-id1434 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -2690) (undo-tree-id1435 . -1) 2691 (2690 . 2691) (2688 . 2690) (2689 . 2690) (#(" " 0 1 (fontified nil)) . 2688) (undo-tree-id1436 . -1) (2689 . 2690) (2682 . 2683) (#("
" 0 1 (fontified t)) . -2682) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) 2683 (t 25815 55018 899250 671000)) nil (25815 55068 844568 810000) 0 nil])
([nil nil ((#("       " 0 7 (fontified t)) . -2744) (undo-tree-id1439 . -7) 2751 (2744 . 2751) (t 25815 55068 855901 263000)) nil (25815 55079 363947 367000) 0 nil])
([nil nil ((2392 . 2413) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -2392) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (#("p" 0 1 (face font-lock-doc-face fontified t)) . -2393) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -2394) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -2395) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -2396) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -2397) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -2398) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -2399) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (#("z" 0 1 (face font-lock-doc-face fontified t)) . -2400) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -2401) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -2402) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -2403) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (#("o" 0 1 (face font-lock-doc-face fontified t)) . -2404) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (#("n" 0 1 (face font-lock-doc-face fontified nil)) . -2405) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -2406) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (#("w" 0 1 (face font-lock-doc-face fontified t)) . -2407) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -2408) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -2409) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -2410) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) 2411 (t 25815 55079 372564 563000)) nil (25815 55268 656945 565000) 0 nil])
([nil nil ((2414 . 2418) (t 25815 55268 659210 252000)) nil (25815 55285 151999 838000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2899) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (#("
" 0 1 (fontified t)) . -2900) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (#("i" 0 1 (fontified t)) . -2901) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (#("m" 0 1 (fontified t)) . -2902) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (#("p" 0 1 (fontified t)) . -2903) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -2904) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (#(" " 0 1 (fontified t)) . -2905) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) 2906 (2905 . 2906) (#("<" 0 1 (fontified t)) . -2905) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -2906) (undo-tree-id1555 . -1) (#(">" 0 1 (fontified t)) . -2907) (undo-tree-id1556 . -1) (#(" " 0 1 (fontified t)) . -2908) (undo-tree-id1557 . -1) 2909 (2905 . 2909) (2901 . 2905) (2900 . 2901) (t 25815 55285 155875 827000)) nil (25815 55955 614793 27000) 0 nil])
([nil nil ((2899 . 2900)) nil (25815 55955 614696 679000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -2901) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (#("m" 0 1 (fontified t)) . -2902) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (#("p" 0 1 (fontified t)) . -2903) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -2904) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (#(" " 0 1 (fontified t)) . -2905) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (#("F" 0 1 (face font-lock-type-face fontified nil)) . -2906) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2907) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -2908) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -2909) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (#("<" 0 1 (fontified t)) . -2910) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (#("s" 0 1 (fontified t)) . -2911) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (#("u" 0 1 (fontified t)) . -2912) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (#("p" 0 1 (fontified t)) . -2913) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (#("e" 0 1 (fontified t)) . -2914) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -2915) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (#(":" 0 1 (fontified t)) . -2916) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (#(":" 0 1 (fontified t)) . -2917) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -2918) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2919) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2920) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) 2921 (#("e" 0 1 (face font-lock-type-face fontified t)) . -2921) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2922) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2923) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -2924) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -2925) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -2926) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2927) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2928) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -2929) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2930) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (#(">" 0 1 (fontified t)) . -2931) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (#(" " 0 1 (fontified t)) . -2932) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (#("f" 0 1 (fontified t)) . -2933) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (#("o" 0 1 (fontified t)) . -2934) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified nil)) . -2935) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (#(" " 0 1 (fontified nil)) . -2936) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (#("W" 0 1 (face font-lock-type-face fontified nil)) . -2937) (undo-tree-id1719 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -2938) (undo-tree-id1720 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2939) (undo-tree-id1721 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -2940) (undo-tree-id1722 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -2941) (undo-tree-id1723 . -1) 2942 (2937 . 2942) (2934 . 2937) (2931 . 2934) (2918 . 2931) (#("Internal" 0 8 (fontified nil)) . 2918) (2918 . 2926) (#("InternalError" 0 13 (fontified nil)) . -2918) (2918 . 2931) (#("Internal" 0 8 (face font-lock-type-face fontified t)) . -2918) (undo-tree-id1724 . -8) (undo-tree-id1725 . -8) 2926 (2911 . 2926) (2901 . 2911) (2900 . 2901) (t 25815 55955 619103 788000)) nil (25815 58129 926337 1000) 0 nil])
([nil nil ((2618 . 2622) (2597 . 2618) (2589 . 2597) (2568 . 2589) (2567 . 2568) (t 25815 58132 301770 134000)) nil (25815 58146 138848 809000) 0 nil] [nil nil ((#("/// mfw no specialization
pub trait NonEqualTypes {}

impl NonEqualTypes for (super::Error, super::InternalError) {}
impl NonEqualTypes for (super::InternalError, super::Error) {}

" 0 25 (face font-lock-doc-face fontified t) 25 26 (face font-lock-doc-face fontified t) 26 29 (face font-lock-keyword-face fontified t) 29 30 (fontified t) 30 35 (face font-lock-keyword-face fontified t) 35 36 (fontified t) 36 49 (face font-lock-type-face fontified t) 49 53 (fontified t) 53 54 (fontified t) 54 58 (face font-lock-keyword-face fontified t) 58 59 (fontified t) 59 72 (face font-lock-type-face fontified t) 72 73 (fontified t) 73 76 (face font-lock-keyword-face fontified t) 76 78 (fontified t) 78 83 (face font-lock-keyword-face fontified t) 83 85 (fontified t) 85 90 (face font-lock-type-face fontified t) 90 92 (fontified t) 92 97 (face font-lock-keyword-face fontified t) 97 99 (fontified t) 99 112 (face font-lock-type-face fontified t) 112 117 (fontified t) 117 121 (face font-lock-keyword-face fontified t) 121 122 (fontified t) 122 135 (face font-lock-type-face fontified t) 135 136 (fontified t) 136 139 (face font-lock-keyword-face fontified t) 139 141 (fontified t) 141 146 (face font-lock-keyword-face fontified t) 146 148 (fontified t) 148 161 (face font-lock-type-face fontified t) 161 163 (fontified t) 163 168 (face font-lock-keyword-face fontified t) 168 170 (fontified t) 170 175 (face font-lock-type-face fontified t) 175 179 (fontified t) 179 180 (fontified t) 180 181 (fontified t rear-nonsticky t)) . 2388) (undo-tree-id1860 . -180) (undo-tree-id1861 . -180) (undo-tree-id1862 . -180) (undo-tree-id1863 . -181) (undo-tree-id1864 . -181) (undo-tree-id1865 . -180) (undo-tree-id1867 . -181) (undo-tree-id1869 . -180) 2568 (t 25815 57832 875203 644000)) ((2388 . 2569)) (25815 58129 442586 969000) 0 nil])
([nil nil ((#("impl NonEqualTypes for (super::Error, super::InternalError) {}
impl NonEqualTypes for (super::InternalError, super::Error) {}
impl NonEqualTypes for (super::Error, super::Error) {}

/// conversion of inner errors without changing the context
impl<T, U: Into<T>> From<WithContext<U>> for WithContext<T>
where T: Contextualizable,
	  U: Into<T> + Contextualizable,
(T, U): NonEqualTypes {
	fn from(value: WithContext<U>) -> Self {
		WithContext {
			contexts: value.contexts,
			error: value.error.into(),
		}
	}
}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 18 (face font-lock-type-face fontified t) 18 19 (fontified t) 19 22 (face font-lock-keyword-face fontified t) 22 24 (fontified t) 24 29 (face font-lock-keyword-face fontified t) 29 31 (fontified t) 31 36 (face font-lock-type-face fontified t) 36 38 (fontified t) 38 43 (face font-lock-keyword-face fontified t) 43 45 (fontified t) 45 58 (face font-lock-type-face fontified t) 58 63 (fontified t) 63 67 (face font-lock-keyword-face fontified t) 67 68 (fontified t) 68 81 (face font-lock-type-face fontified t) 81 82 (fontified t) 82 85 (face font-lock-keyword-face fontified t) 85 87 (fontified t) 87 92 (face font-lock-keyword-face fontified t) 92 94 (fontified t) 94 107 (face font-lock-type-face fontified t) 107 109 (fontified t) 109 114 (face font-lock-keyword-face fontified t) 114 116 (fontified t) 116 121 (face font-lock-type-face fontified t) 121 126 (fontified t) 126 130 (face font-lock-keyword-face fontified t) 130 131 (fontified t) 131 144 (face font-lock-type-face fontified t) 144 145 (fontified t) 145 148 (face font-lock-keyword-face fontified t) 148 150 (fontified t) 150 155 (face font-lock-keyword-face fontified t) 155 157 (fontified t) 157 162 (face font-lock-type-face fontified t) 162 164 (fontified t) 164 169 (face font-lock-keyword-face fontified t) 169 171 (fontified t) 171 176 (face font-lock-type-face fontified t) 176 180 (fontified t) 180 181 (fontified t) 181 182 (fontified t rear-nonsticky t) 182 242 (face font-lock-doc-face fontified t) 242 246 (face font-lock-keyword-face fontified t) 246 247 (fontified t) 247 248 (face font-lock-type-face fontified t) 248 250 (fontified t) 250 251 (face font-lock-variable-name-face fontified t) 251 253 (fontified t) 253 257 (face font-lock-type-face fontified t) 257 258 (fontified t) 258 259 (face font-lock-type-face fontified t) 259 262 (fontified t) 262 266 (face font-lock-type-face fontified t) 266 267 (fontified t) 267 278 (face font-lock-type-face fontified t) 278 279 (fontified t) 279 280 (face font-lock-type-face fontified t) 280 281 (fontified t) 281 283 (fontified t) 283 286 (face font-lock-keyword-face fontified t) 286 287 (fontified t) 287 298 (face font-lock-type-face fontified t) 298 299 (fontified t) 299 300 (face font-lock-type-face fontified t) 300 302 (fontified t) 302 307 (face font-lock-keyword-face fontified t) 307 308 (fontified t) 308 309 (face font-lock-variable-name-face fontified t) 309 311 (fontified t) 311 327 (face font-lock-type-face fontified t) 327 329 (fontified t) 329 332 (fontified t) 332 333 (face font-lock-variable-name-face fontified t) 333 335 (fontified t) 335 339 (face font-lock-type-face fontified t) 339 340 (fontified t) 340 341 (face font-lock-type-face fontified t) 341 345 (fontified t) 345 361 (face font-lock-type-face fontified t) 361 362 (fontified t) 362 363 (fontified t) 363 364 (fontified t) 364 365 (face font-lock-type-face fontified t) 365 366 (fontified t) 366 367 (fontified t) 367 368 (face font-lock-type-face fontified t) 368 369 (fontified t) 369 370 (fontified t) 370 371 (fontified t) 371 372 (face font-lock-type-face fontified t) 372 373 (face font-lock-type-face fontified t) 373 374 (face font-lock-type-face fontified t) 374 375 (face font-lock-type-face fontified t) 375 376 (face font-lock-type-face fontified t) 376 377 (face font-lock-type-face fontified t) 377 378 (face font-lock-type-face fontified t) 378 379 (face font-lock-type-face fontified t) 379 380 (face font-lock-type-face fontified t) 380 381 (face font-lock-type-face fontified t) 381 382 (face font-lock-type-face fontified t) 382 383 (face font-lock-type-face fontified t) 383 384 (face font-lock-type-face fontified t) 384 385 (fontified t) 385 387 (fontified t) 387 388 (fontified t) 388 390 (face font-lock-keyword-face fontified t) 390 391 (fontified t) 391 395 (face font-lock-function-name-face fontified t) 395 396 (fontified t) 396 401 (face font-lock-variable-name-face fontified t) 401 403 (fontified t) 403 414 (face font-lock-type-face fontified t) 414 415 (fontified t) 415 416 (face font-lock-type-face fontified t) 416 420 (fontified t) 420 421 (fontified t syntax-table (1)) 421 422 (fontified t) 422 426 (face font-lock-type-face fontified t) 426 427 (fontified t) 427 428 (fontified t) 428 429 (fontified t) 429 431 (fontified t) 431 442 (face font-lock-type-face fontified t) 442 443 (fontified t) 443 444 (fontified t) 444 445 (fontified t) 445 448 (fontified t) 448 456 (face font-lock-variable-name-face fontified t) 456 464 (fontified t) 464 472 (fontified t) 472 474 (fontified t) 474 477 (fontified t) 477 482 (face font-lock-variable-name-face fontified t) 482 490 (fontified t) 490 496 (fontified t) 496 506 (fontified t) 506 507 (fontified t) 507 508 (fontified t) 508 510 (fontified t) 510 511 (fontified t) 511 512 (fontified t) 512 513 (fontified t) 513 514 (fontified t)) . 2442) (undo-tree-id1871 . -513) (undo-tree-id1872 . -513) (undo-tree-id1873 . 334) (undo-tree-id1874 . -513) (undo-tree-id1875 . -276) (undo-tree-id1876 . -182) (undo-tree-id1877 . -431) (undo-tree-id1878 . -514) (undo-tree-id1879 . -514) (undo-tree-id1880 . -514) (undo-tree-id1881 . 334) (undo-tree-id1882 . -514) (t 25815 58146 145098 997000)) nil (25815 58178 776752 623000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2567) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1730 . -1) (#("
" 0 1 (fontified t)) . -2568) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1736 . -1) (undo-tree-id1738 . -1) 2569 (#("(" 0 1 (fontified t)) . -2569) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1743 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -2570) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1749 . -1) (#("," 0 1 (fontified t)) . -2571) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1755 . -1) (#(" " 0 1 (fontified t)) . -2572) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1761 . -1) (#("U" 0 1 (face font-lock-type-face fontified t)) . -2573) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1767 . -1) (#(")" 0 1 (fontified t)) . -2574) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1773 . -1) (#(":" 0 1 (fontified t)) . -2575) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1779 . -1) (#(" " 0 1 (fontified t)) . -2576) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1785 . -1) (#("N" 0 1 (face font-lock-type-face fontified t)) . -2577) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1791 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -2578) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1797 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2579) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1803 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -2580) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1809 . -1) (#("q" 0 1 (face font-lock-type-face fontified t)) . -2581) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1815 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -2582) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1821 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -2583) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1827 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -2584) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1833 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -2585) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1839 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -2586) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1845 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -2587) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1851 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -2588) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1857 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -2589) (undo-tree-id1859 . -1) 2590) ((2567 . 2590) (t 25815 58063 615125 828000)) (25815 58063 604792 264000) 0 nil])
([nil nil ((886 . 897) (884 . 886) (1005 . 1007) (989 . 1005) (984 . 989) (983 . 984) (962 . 983) (961 . 962) (#(" " 0 1 (fontified t)) . -961) (undo-tree-id1883 . -1) (#("p" 0 1 (face font-lock-function-name-face fontified t)) . -962) (undo-tree-id1884 . -1) (#("r" 0 1 (face font-lock-function-name-face fontified t)) . -963) (undo-tree-id1885 . -1) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -964) (undo-tree-id1886 . -1) (#("s" 0 1 (face font-lock-function-name-face fontified t)) . -965) (undo-tree-id1887 . -1) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -966) (undo-tree-id1888 . -1) (#("r" 0 1 (face font-lock-function-name-face fontified t)) . -967) (undo-tree-id1889 . -1) 968 (963 . 968) (962 . 963) (#("s" 0 1 (face font-lock-function-name-face fontified t)) . -962) (undo-tree-id1890 . -1) (#("w" 0 1 (face font-lock-function-name-face fontified t)) . -963) (undo-tree-id1891 . -1) 964 (961 . 964) (#(" " 0 1 (fontified t)) . -961) (undo-tree-id1892 . -1) (#("c" 0 1 (face font-lock-function-name-face fontified t)) . -962) (undo-tree-id1893 . -1) (#("o" 0 1 (face font-lock-function-name-face fontified t)) . -963) (undo-tree-id1894 . -1) (#("n" 0 1 (face font-lock-function-name-face fontified t)) . -964) (undo-tree-id1895 . -1) (#("v" 0 1 (face font-lock-function-name-face fontified nil)) . -965) (undo-tree-id1896 . -1) (#("e" 0 1 (face font-lock-function-name-face fontified nil)) . -966) (undo-tree-id1897 . -1) (#("r" 0 1 (face font-lock-function-name-face fontified nil)) . -967) (undo-tree-id1898 . -1) (#("t" 0 1 (face font-lock-function-name-face fontified t)) . -968) (undo-tree-id1899 . -1) (#("(" 0 1 (fontified t)) . -969) (undo-tree-id1900 . -1) 970 (959 . 970) (957 . 959) (t 25815 58178 785088 500000)) nil (25815 58326 468585 523000) 0 nil])
nil
([nil nil ((#("	" 0 1 (fontified nil)) . -1073) (undo-tree-id1901 . -1) (1074 . 1075) (1071 . 1074) (1069 . 1071) (1053 . 1069) (#("Contex" 0 6 (fontified nil)) . 1053) (1053 . 1059) (#("Contextualizable" 0 16 (fontified nil)) . -1053) (1053 . 1069) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -1053) (undo-tree-id1902 . -6) 1059 (1050 . 1059) (1032 . 1036) (1030 . 1032) (#(":" 0 1 (fontified t)) . -1030) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1031) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1032) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1033) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1034) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1035) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1036) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) 1037 (#("	" 0 1 (fontified t)) . -1045) 1052 (1046 . 1052) (1043 . 1046) (1042 . 1043) (1029 . 1037) (1030 . 1034) (#(" " 0 1 (fontified t)) . -1030) (undo-tree-id1924 . -1) 1031 (1029 . 1031) (1014 . 1017) (#("c" 0 1 (face font-lock-type-face fontified t)) . -1014) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1015) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) 1016 (1013 . 1016) (1024 . 1025) (994 . 995) (#("T" 0 1 (face font-lock-type-face fontified t)) . -994) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (#(":" 0 1 (fontified t)) . -995) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (#(" " 0 1 (fontified t)) . -996) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (#("C" 0 1 (face font-lock-type-face fontified nil)) . -997) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (#("o" 0 1 (face font-lock-type-face fontified nil)) . -998) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (#("n" 0 1 (face font-lock-type-face fontified nil)) . -999) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1000) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1001) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -1002) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1003) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1004) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1005) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1006) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1007) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (#("z" 0 1 (face font-lock-type-face fontified t)) . -1008) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1009) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -1010) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1011) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1012) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) 1013 (#("T" 0 1 (face font-lock-type-face fontified t)) . -1042) (undo-tree-id1967 . -1) (#(":" 0 1 (fontified t)) . -1043) (undo-tree-id1968 . -1) (#(":" 0 1 (fontified t)) . -1044) (undo-tree-id1969 . -1) 1045 (1042 . 1045) (1013 . 1014) (997 . 1013) (#("Contextua" 0 9 (fontified nil)) . 997) (997 . 1006) (#("Contextualizable" 0 16 (fontified nil)) . -997) (997 . 1013) (#("Contextua" 0 9 (face font-lock-type-face fontified t)) . -997) (undo-tree-id1970 . -9) 1006 (995 . 1006) (#(">" 0 1 (fontified t)) . -995) (undo-tree-id1971 . -1) 996 (993 . 996) (1011 . 1016) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1011) (undo-tree-id1972 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1012) (undo-tree-id1973 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1013) (undo-tree-id1974 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1014) (undo-tree-id1975 . -1) 1015 (t 25815 58326 491708 355000)) nil (25815 58486 427563 88000) 0 nil])
([nil nil ((1018 . 1024) (1071 . 1074) (t 25815 58486 441658 690000)) nil (25815 58498 456842 870000) 0 nil])
([nil nil ((1075 . 1076) (#(" " 0 1 (fontified t)) . -1075) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) 1076 (#("{
		
	}" 0 5 (fontified t) 5 7 (fontified t)) . 1076) (undo-tree-id1993 . -7) (undo-tree-id1994 . -4) (t 25815 58498 464988 325000)) nil (25815 58516 846928 363000) 0 nil])
([nil nil ((1450 . 1463) (1449 . 1450) (#("s" 0 1 (fontified t)) . -1449) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (#("e" 0 1 (fontified t)) . -1450) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (#("l" 0 1 (fontified t)) . -1451) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1452) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (#("." 0 1 (fontified nil)) . -1453) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (#("e" 0 1 (fontified nil)) . -1454) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (#("r" 0 1 (fontified nil)) . -1455) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (#("r" 0 1 (fontified t)) . -1456) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (#("o" 0 1 (fontified t)) . -1457) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (#("r" 0 1 (fontified t)) . -1458) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (#("." 0 1 (fontified t)) . -1459) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) 1460 (1459 . 1460) (1454 . 1459) (#("error" 0 5 (fontified nil)) . -1454) (1454 . 1459) (1442 . 1454) (1438 . 1442) (1437 . 1438) (1429 . 1437) (#("contexts" 0 8 (fontified nil)) . -1429) (1429 . 1437) (1414 . 1429) (1410 . 1414) (#("	" 0 1 (fontified nil)) . -1413) (undo-tree-id2017 . -1) (1414 . 1415) (1410 . 1414) (1408 . 1410) (1397 . 1408) (#("WithCon" 0 7 (fontified nil)) . 1397) (1397 . 1404) (#("WithContext" 0 11 (fontified nil)) . -1397) (1397 . 1408) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -1397) (undo-tree-id2018 . -7) 1404 (1397 . 1404) (#("s" 0 1 (fontified t)) . -1397) (undo-tree-id2019 . -1) (#("e" 0 1 (fontified t)) . -1398) (undo-tree-id2020 . -1) (#("l" 0 1 (fontified t)) . -1399) (undo-tree-id2021 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1400) (undo-tree-id2022 . -1) (#("." 0 1 (fontified t)) . -1401) (undo-tree-id2023 . -1) (#("=" 0 1 (fontified t)) . -1402) (undo-tree-id2024 . -1) 1403 (1397 . 1403) (1145 . 1160) (1143 . 1145) (apply yas--snippet-revive 1272 1383 #s(yas--snippet nil nil #s(yas--exit 1380 nil) 136 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1380 nil) 136 nil nil nil nil)) (1272 . 1383) (#("fn map_contextualized<T>(self, f: impl FnOnce(Self::Inner) -> T::Inner) -> T
	where T: Contextualizable {
		$0
	}" 0 60 (fontified nil) 60 61 (syntax-table (1) fontified nil) 61 73 (fontified nil) 73 74 (syntax-table (1) fontified nil) 74 113 (fontified nil)) . 1272) (1383 . 1384) (1378 . 1380) (#("    " 0 4 (fontified nil)) . 1378) (1272 . 1386) (#("fn map" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 6 (fontified nil)) . 1272) (undo-tree-id2025 . -3) (1275 . 1278) (#("fn map_contextualized(..)" 0 25 (fontified nil)) . -1275) (1275 . 1300) (#("map" 0 3 (face font-lock-function-name-face fontified t)) . -1275) (undo-tree-id2026 . -3) 1278 (1272 . 1278) (1271 . 1272) (#("	" 0 1 (fontified nil)) . 1270) (undo-tree-id2027 . -1) (1269 . 1272) (t 25815 58516 851649 343000)) nil (25815 59063 245154 652000) 0 nil])
([nil nil ((910 . 913) (t 25815 59063 254818 83000)) nil (25815 59263 64568 697000) 0 nil])
([nil nil ((973 . 985) (972 . 973) (t 25815 59263 71397 112000)) nil (25815 59281 811338 368000) 0 nil])
([nil nil ((1066 . 1067) (#("	" 0 1 (fontified t)) . -1066) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (#("	" 0 1 (fontified t)) . -1067) (undo-tree-id2030 . -1) (#("	" 0 1 (fontified t)) . -1068) (undo-tree-id2031 . -1) (#("	" 0 1 (fontified t)) . -1069) (undo-tree-id2032 . -1) (#("	" 0 1 (fontified t)) . -1070) (undo-tree-id2033 . -1) (#("	" 0 1 (fontified t)) . -1071) (undo-tree-id2034 . -1) (#(" " 0 1 (fontified t)) . -1072) (undo-tree-id2035 . -1) 1073 (#("
" 0 1 (fontified t)) . -1066) (undo-tree-id2036 . -1) (#("	" 0 1 (fontified t)) . -1067) (undo-tree-id2037 . -1) 1068 (1063 . 1065) (1022 . 1024) (#(" " 0 1 (fontified nil)) . 1021) (undo-tree-id2038 . -1) (1022 . 1023) (1013 . 1016) (#("	" 0 1 (fontified t)) . -1088) 1115 (1085 . 1086) (1087 . 1088) 1112 (1060 . 1068) (#(" " 0 1 (fontified nil)) . 1059) (undo-tree-id2039 . -1) (1060 . 1061) (1063 . 1076) (t 25815 59281 824710 411000)) nil (25815 59394 391661 801000) 0 nil])
([nil nil ((1281 . 1285) (#("W" 0 1 (face font-lock-type-face fontified t)) . -1281) (undo-tree-id2040 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1282) (undo-tree-id2041 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1283) (undo-tree-id2042 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -1284) (undo-tree-id2043 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1285) (undo-tree-id2044 . -1) 1286 (1283 . 1286) (1281 . 1283) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1281) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1282) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1283) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1284) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (#(":" 0 1 (fontified t)) . -1285) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (#(":" 0 1 (fontified t)) . -1286) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1287) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1288) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1289) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1290) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1291) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1292) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (#("<" 0 1 (fontified t)) . -1293) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1294) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (#(">" 0 1 (fontified t)) . -1295) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) 1296 (1295 . 1296) (1293 . 1295) (1228 . 1229) (apply yas--snippet-revive 1216 1229 #s(yas--snippet nil nil #s(yas--exit 1228 nil) 137 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1228 nil) 137 nil nil nil nil)) (1216 . 1229) (#("WithContext<$0>" 0 15 (fontified nil)) . 1216) (1216 . 1231) (#("WithC" 0 5 (fontified nil)) . 1216) (1216 . 1221) (#("WithContext<…>" 0 14 (fontified nil)) . -1216) (1216 . 1230) (#("WithC" 0 5 (face font-lock-type-face fontified t)) . -1216) (undo-tree-id2100 . -5) 1221 (1216 . 1221) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1216) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1217) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1218) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1219) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) 1220 (1210 . 1213) (t 25815 59394 397932 100000)) nil (25815 59583 672864 910000) 0 nil])
([nil nil ((932 . 947) (930 . 932) (#("<" 0 1 (fontified t)) . -929) (undo-tree-id2143 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -930) (undo-tree-id2144 . -1) (#(">" 0 1 (fontified t)) . -931) (undo-tree-id2145 . -1) 932 (#("::fmt" 0 2 (fontified t) 2 5 (face font-lock-constant-face fontified t)) . -8) 13 (16 . 22) (20 . 30) (22 . 27) (#("Di" 0 2 (face font-lock-type-face fontified t)) . 22) (25 . 31) (26 . 28) (#("lay" 0 3 (face font-lock-type-face fontified t)) . -26) 29 (1406 . 1406) (1406 . 1412) (#("Output" 0 6 (fontified nil)) . 1406) (1406 . 1412) (#("Output (use std::process::Output)" 0 33 (fontified nil)) . -1406) (1406 . 1439) (#("Output" 0 6 (face font-lock-type-face fontified t)) . -1406) (undo-tree-id2146 . -6) 1412 (1406 . 1412) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1406) (undo-tree-id2147 . -1) 1407 (t 25815 59583 687771 544000)) nil (25815 59903 279182 901000) 0 nil])
([nil nil ((1003 . 1005) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1003) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1004) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (#("<" 0 1 (fontified t)) . -1005) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (#("S" 0 1 (face font-lock-type-face fontified nil)) . -1006) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1007) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1008) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1009) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (#(":" 0 1 (fontified t)) . -1010) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (#(":" 0 1 (fontified t)) . -1011) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -1012) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1013) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1014) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1015) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1016) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (#(">" 0 1 (fontified t)) . -1017) (undo-tree-id2142 . -1) 1018) nil (25815 59903 279147 326000) 0 nil])
([nil nil ((946 . 949) (t 25815 59903 287552 739000)) nil (25815 59911 830640 489000) 0 nil])
([nil nil ((1099 . 1108) (#("MapOutput" 0 3 (fontified nil) 3 9 (face font-lock-type-face fontified nil)) . 1099) (undo-tree-id2148 . -9) (undo-tree-id2149 . -9) (undo-tree-id2150 . 6) (1099 . 1102) (#("MapOutput (as Contextualizable)" 0 31 (fontified nil)) . -1099) (1099 . 1130) (#("Map" 0 3 (face font-lock-type-face fontified t)) . -1099) (undo-tree-id2151 . -3) (undo-tree-id2152 . -3) (undo-tree-id2153 . -1) (undo-tree-id2154 . -3) (undo-tree-id2155 . -3) (undo-tree-id2156 . -3) (undo-tree-id2157 . -3) 1102 (1099 . 1102) (t 25815 59911 850880 849000)) nil (25815 59919 244922 60000) 0 nil])
([nil nil ((1278 . 1279) (apply yas--snippet-revive 1266 1279 #s(yas--snippet nil nil #s(yas--exit 1278 nil) 139 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1278 nil) 139 nil nil nil nil)) (1266 . 1279) (#("WithContext<$0>" 0 15 (fontified nil)) . 1266) (1266 . 1281) (#("WithCon" 0 7 (fontified nil)) . 1266) (1266 . 1273) (#("WithContext<…>" 0 14 (fontified nil)) . -1266) (1266 . 1280) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -1266) (undo-tree-id2158 . -7) (undo-tree-id2159 . -7) (undo-tree-id2160 . -7) 1273 (1266 . 1273) (1238 . 1243) (#("S" 0 1 (fontified t)) . -1238) (undo-tree-id2161 . -1) 1239 (1238 . 1239) (#(" " 0 1 (fontified t)) . -1238) (undo-tree-id2162 . -1) (#("W" 0 1 (face font-lock-type-face fontified t)) . -1239) (undo-tree-id2163 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1240) (undo-tree-id2164 . -1) (#("t" 0 1 (face font-lock-type-face fontified nil)) . -1241) (undo-tree-id2165 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -1242) (undo-tree-id2166 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1243) (undo-tree-id2167 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1244) (undo-tree-id2168 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1245) (undo-tree-id2169 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1246) (undo-tree-id2170 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1247) (undo-tree-id2171 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -1248) (undo-tree-id2172 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1249) (undo-tree-id2173 . -1) 1250 (apply yas--snippet-revive 1253 1274 #s(yas--snippet nil nil #s(yas--exit 1273 nil) 138 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1273 nil) 138 nil nil nil nil)) (1253 . 1274) (#("type MapOutput<T> = $0;" 0 23 (fontified nil)) . 1253) (1253 . 1276) (#("type MapO" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 9 (fontified nil)) . 1253) (undo-tree-id2174 . -5) (undo-tree-id2175 . -5) (1258 . 1262) (#("type MapOutput =" 0 16 (fontified nil)) . -1258) (1258 . 1274) (#("MapO" 0 4 (face font-lock-type-face fontified t)) . -1258) (undo-tree-id2176 . -3) (undo-tree-id2177 . -4) 1262 (1261 . 1262) (1253 . 1261) (1251 . 1253) (#("<" 0 1 (fontified t)) . -1250) (undo-tree-id2178 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1251) (undo-tree-id2179 . -1) (#(">" 0 1 (fontified t)) . -1252) (undo-tree-id2180 . -1) 1253 (#("<" 0 1 (fontified t)) . -1236) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1237) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (#(">" 0 1 (fontified t)) . -1238) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) 1239 (t 25815 59919 250876 356000)) nil (25815 59969 762778 607000) 0 nil])
([nil nil ((917 . 933) (#("Conte" 0 5 (fontified nil)) . 917) (917 . 922) (#("Contextualizable" 0 16 (fontified nil)) . -917) (917 . 933) (#("Conte" 0 5 (face font-lock-type-face fontified t)) . -917) (undo-tree-id2231 . -5) 922 (915 . 922) (t 25815 59946 330860 79000)) nil (25815 59976 578141 72000) 0 nil] [nil nil ((944 . 945) (932 . 945) (#("WithContext<$0>" 0 15 (fontified nil)) . 932) (932 . 947) (#("WithCon" 0 7 (fontified nil)) . 932) (932 . 939) (#("WithContext<…>" 0 14 (fontified nil)) . 932) (932 . 946) (#("WithCon" 0 7 (face font-lock-type-face fontified nil)) . 932) (932 . 939) (911 . 916) (#("S" 0 1 (face font-lock-type-face fontified nil)) . -911) 912 (911 . 912) (#("n" 0 1 (face font-lock-type-face fontified nil)) . -911) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (#("n" 0 1 (face font-lock-type-face fontified nil)) . -912) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (#("e" 0 1 (face font-lock-type-face fontified nil)) . -913) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (#("r" 0 1 (face font-lock-type-face fontified nil)) . -914) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (#(";" 0 1 (fontified nil)) . -915) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (#("
" 0 1 (fontified t)) . -916) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (#("	" 0 1 (fontified nil)) . -917) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified nil)) . -918) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (#("y" 0 1 (face font-lock-keyword-face fontified nil)) . -919) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (#("p" 0 1 (face font-lock-keyword-face fontified nil)) . -920) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified nil)) . -921) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (#(" " 0 1 (fontified t)) . -922) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) 923 (926 . 947) (#("type MapOutput<T> = $0;" 0 23 (fontified nil)) . 926) (926 . 949) (#("type MapO" 0 5 (fontified nil) 5 9 (fontified nil)) . 926) (931 . 935) (#("type MapOutput =" 0 16 (fontified nil)) . 931) (931 . 947) (#("MapO" 0 4 (fontified nil)) . 931) (926 . 935) (924 . 926) (#("O" 0 1 (face font-lock-type-face fontified nil)) . -923) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (#("u" 0 1 (face font-lock-type-face fontified nil)) . -924) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -925) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) 926 (#("p" 0 1 (face font-lock-type-face fontified nil)) . -926) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (#("u" 0 1 (face font-lock-type-face fontified nil)) . -927) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -928) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) 929 (t 25815 59946 330860 79000)) ((923 . 929) (#("
	" 0 1 (fontified nil) 1 2 (fontified nil)) . 924) (#("type MapO" 0 5 (fontified nil) 5 9 (fontified nil)) . 926) (931 . 935) (#("type MapOutput =" 0 16 (fontified nil)) . 931) (931 . 947) (#("MapO" 0 4 (fontified nil)) . 931) (926 . 935) (#("type MapOutput<T> = $0;" 0 23 (fontified nil)) . 926) (926 . 949) (#("type MapOutput<T> = ;" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 13 (face font-lock-type-face fontified nil) 13 14 (fontified nil) 14 15 (fontified nil) 15 16 (face font-lock-type-face fontified nil) 16 21 (fontified nil)) . 926) (undo-tree-id2226 . 8) (911 . 923) (#("S" 0 1 (face font-lock-type-face fontified nil)) . 911) (911 . 912) (#(" Self" 0 1 (fontified t) 1 5 (face font-lock-type-face fontified t)) . 911) (undo-tree-id2227 . -5) (undo-tree-id2228 . -5) (undo-tree-id2229 . -5) (#("WithCon" 0 7 (face font-lock-type-face fontified nil)) . 932) (932 . 939) (#("WithContext<…>" 0 14 (fontified nil)) . 932) (932 . 946) (#("WithCon" 0 7 (fontified nil)) . 932) (932 . 939) (#("WithContext<$0>" 0 15 (fontified nil)) . 932) (932 . 947) (#("WithContext<>" 0 11 (face font-lock-type-face fontified nil) 11 12 (fontified nil) 12 13 (fontified nil)) . 932) (undo-tree-id2230 . 1) (#("T" 0 1 (face font-lock-type-face fontified t)) . 944)) (25815 59969 747507 364000) 0 nil])
([nil nil ((1489 . 1492) (1480 . 1489) (#("Map" 0 3 (fontified nil)) . 1480) (1480 . 1483) (#("MapOutput (as Contextualizable)" 0 31 (fontified nil)) . -1480) (1480 . 1511) (#("Map" 0 3 (face font-lock-type-face fontified t)) . -1480) (undo-tree-id2232 . -3) 1483 (1474 . 1483) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1474) (undo-tree-id2233 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1475) (undo-tree-id2234 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1476) (undo-tree-id2235 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1477) (undo-tree-id2236 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1478) (undo-tree-id2237 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1479) (undo-tree-id2238 . -1) 1480 (t 25815 59976 627508 827000)) nil (25815 60076 995361 184000) 0 nil])
nil
([nil nil ((1474 . 1476) (1433 . 1435) (#(" " 0 1 (fontified nil)) . 1432) (undo-tree-id2239 . -1) (1433 . 1434) (1424 . 1427) (t 25815 60077 37451 439000)) nil (25815 60090 942528 254000) 0 nil])
([nil nil ((968 . 984) (#("Contex" 0 6 (fontified nil)) . 968) (968 . 974) (#("Contextualizable" 0 16 (fontified nil)) . -968) (968 . 984) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -968) (undo-tree-id2240 . -6) 974 (966 . 974) (t 25815 60090 970777 29000)) nil (25815 60124 87949 765000) 0 nil])
([nil nil ((1300 . 1316) (#("Contex" 0 6 (fontified nil)) . 1300) (1300 . 1306) (#("Contextualizable" 0 16 (fontified nil)) . -1300) (1300 . 1316) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -1300) (undo-tree-id2241 . -5) (undo-tree-id2242 . -6) (undo-tree-id2243 . -5) (undo-tree-id2244 . -5) (undo-tree-id2245 . -6) (undo-tree-id2246 . -6) (undo-tree-id2247 . -6) (undo-tree-id2248 . -6) (undo-tree-id2249 . -6) 1306 (1305 . 1306) (1298 . 1305) (t 25815 60124 114092 140000)) nil (25815 60135 536168 521000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1115) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (#(":" 0 1 (fontified t)) . -1116) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -1117) (undo-tree-id2254 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1118) (undo-tree-id2255 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1119) (undo-tree-id2256 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1120) (undo-tree-id2257 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1121) (undo-tree-id2258 . -1) 1122 (t 25815 60135 550752 580000)) nil (25815 60163 319060 945000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1496) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (#(":" 0 1 (fontified t)) . -1497) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -1498) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1499) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1500) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1501) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1502) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) 1503 (t 25815 60163 330737 582000)) nil (25815 60193 337596 99000) 0 nil])
([nil nil ((2002 . 2003) (apply yas--snippet-revive 1964 2003 #s(yas--snippet nil nil #s(yas--exit 2002 nil) 140 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2002 nil) 140 nil nil nil nil)) (1964 . 2003) (#("type MapOutput<T: Contextualizable> = $0;" 0 41 (fontified nil)) . 1964) (1964 . 2005) (#("type MapO" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 9 (fontified nil)) . 1964) (undo-tree-id2283 . -5) (1969 . 1973) (#("type MapOutput =" 0 16 (fontified nil)) . -1969) (1969 . 1985) (#("MapO" 0 4 (face font-lock-type-face fontified t)) . -1969) (undo-tree-id2284 . -4) 1973 (1964 . 1973) (1962 . 1964) (1926 . 1928) (1913 . 1926) (1911 . 1913) (t 25815 60193 357388 229000)) nil (25815 60244 163853 800000) 0 nil])
([nil nil ((1859 . 1860) (#("T" 0 1 (face font-lock-variable-name-face fontified t)) . 1859) (1908 . 1909) (#("T" 0 1 (face font-lock-type-face fontified t)) . 1908) (1926 . 1927) (#("T" 0 1 (face font-lock-type-face fontified t)) . 1926)) nil (25815 60244 163828 903000) 0 nil])
([nil nil ((2260 . 2265) (2258 . 2260) (apply yas--snippet-revive 2133 2261 #s(yas--snippet nil nil #s(yas--exit 2258 nil) 141 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2258 nil) 141 nil nil nil nil)) (2133 . 2261) (#("fn map_contextualized<T>(
		self,
		f: impl FnOnce(Self::Inner) -> T
	) -> Self::MapOutput<T>
	where T: Contextualizable {
		$0
	}" 0 65 (fontified nil) 65 66 (syntax-table (1) fontified nil) 66 73 (fontified nil) 73 74 (syntax-table (1) fontified nil) 74 130 (fontified nil)) . 2133) (2261 . 2262) (2256 . 2258) (#("    " 0 4 (fontified nil)) . 2256) (2133 . 2264) (#("fn map" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 6 (fontified nil)) . 2133) (undo-tree-id2285 . -3) (2136 . 2139) (#("fn map_contextualized(..)" 0 25 (fontified nil)) . -2136) (2136 . 2161) (#("map" 0 3 (face font-lock-function-name-face fontified t)) . -2136) (undo-tree-id2286 . -3) 2139 (2133 . 2139) (2132 . 2133) (#("	" 0 1 (fontified nil)) . 2131) (undo-tree-id2287 . -1) (2130 . 2133) (t 25815 60244 187361 532000)) nil (25815 60265 621745 228000) 0 nil])
([nil nil ((2492 . 2496) (#("u" 0 1 (face font-lock-type-face fontified t)) . -2492) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (#("," 0 1 (fontified t)) . -2493) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) 2494 (2490 . 2494) (2484 . 2490) (2461 . 2462) (#("T" 0 1 (face font-lock-variable-name-face fontified t)) . -2461) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) 2462 (#("R" 0 1 (face font-lock-type-face fontified t)) . -2484) (undo-tree-id2294 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -2485) (undo-tree-id2295 . -1) 2486 (2484 . 2486) (apply yas--snippet-revive 2446 2485 #s(yas--snippet nil nil #s(yas--exit 2484 nil) 142 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2484 nil) 142 nil nil nil nil)) (2446 . 2485) (#("type MapOutput<T: Contextualizable> = $0;" 0 41 (fontified nil)) . 2446) (2446 . 2487) (#("type MapO" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 9 (fontified nil)) . 2446) (undo-tree-id2296 . -5) (2451 . 2455) (#("type MapOutput =" 0 16 (fontified nil)) . -2451) (2451 . 2467) (#("MapO" 0 4 (face font-lock-type-face fontified t)) . -2451) (undo-tree-id2297 . -4) 2455 (2446 . 2455) (2444 . 2446) (2392 . 2407) (2390 . 2392) (t 25815 60265 630683 753000)) nil (25815 60550 926420 111000) 0 nil])
([nil nil ((apply yas--snippet-revive 2739 2749 #s(yas--snippet nil (#s(yas--field 1 2747 2748 nil nil nil t #s(yas--exit 2749 nil))) #s(yas--exit 2749 nil) 144 nil #s(yas--field 1 2747 2748 nil nil nil t #s(yas--exit 2749 nil)) nil nil)) (2747 . 2748) (#("s" 0 1 (fontified t)) . -2747) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) 2748 (#("op" 0 2 (fontified nil)) . 2748) (2747 . 2748) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2747 2748 nil nil nil t #s(yas--exit 2749 nil))) #s(yas--exit 2749 nil) 144 nil #s(yas--field 1 2747 2748 nil nil nil t #s(yas--exit 2749 nil)) nil nil)) (2739 . 2750) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 2739) (2739 . 2757) (#("map" 0 3 (fontified nil)) . 2739) (2739 . 2742) (#("map_err(…)" 0 10 (fontified nil)) . -2739) (2739 . 2749) (#("map" 0 3 (fontified t)) . -2739) (undo-tree-id2300 . -3) 2742 (2734 . 2742) (apply yas--snippet-revive 2609 2737 #s(yas--snippet nil nil #s(yas--exit 2734 nil) 143 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2734 nil) 143 nil nil nil nil)) (2609 . 2737) (#("fn map_contextualized<T>(
		self,
		f: impl FnOnce(Self::Inner) -> T
	) -> Self::MapOutput<T>
	where T: Contextualizable {
		$0
	}" 0 65 (fontified nil) 65 66 (syntax-table (1) fontified nil) 66 73 (fontified nil) 73 74 (syntax-table (1) fontified nil) 74 130 (fontified nil)) . 2609) (2737 . 2738) (2732 . 2734) (#("    " 0 4 (fontified nil)) . 2732) (2609 . 2740) (#("fn map_" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 7 (fontified nil)) . 2609) (undo-tree-id2301 . -3) (2612 . 2616) (#("fn map_contextualized(..)" 0 25 (fontified nil)) . -2612) (2612 . 2637) (#("map_" 0 4 (face font-lock-function-name-face fontified t)) . -2612) (undo-tree-id2302 . -4) 2616 (2609 . 2616) (2608 . 2609) (#("	" 0 1 (fontified nil)) . 2607) (undo-tree-id2303 . -1) (2606 . 2609) (t 25815 60550 940542 607000)) nil (25815 60581 914636 42000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2772 2773 nil nil nil nil #s(yas--exit 2774 nil))) #s(yas--exit 2774 nil) 145 nil #s(yas--field 1 2772 2773 nil nil nil nil #s(yas--exit 2774 nil)) nil nil)) (2753 . 2774) (#("map_contextualized(${1:f})$0" 0 28 (fontified nil)) . 2753) (2753 . 2781) (#("map" 0 3 (fontified nil)) . 2753) (2753 . 2756) (#("map_contextualized(…) (as Contextualizable)" 0 43 (fontified nil)) . -2753) (2753 . 2796) (#("map" 0 3 (fontified t)) . -2753) (undo-tree-id2304 . -3) (undo-tree-id2305 . -3) (undo-tree-id2306 . -3) (undo-tree-id2307 . -3) 2756 (2747 . 2756) (#("f" 0 1 (fontified t)) . -2747) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) 2748 (t 25815 60581 927194 549000)) nil (25815 60616 604607 932000) 0 nil])
([nil nil ((apply yas--snippet-revive 2753 2774 #s(yas--snippet nil (#s(yas--field 1 2772 2773 nil nil nil nil #s(yas--exit 2774 nil))) #s(yas--exit 2774 nil) 145 nil #s(yas--field 1 2772 2773 nil nil nil nil #s(yas--exit 2774 nil)) nil nil))) nil (25815 60616 604577 344000) 0 nil])
([nil nil ((2631 . 2632) (#("T" 0 1 (face font-lock-type-face fontified t)) . 2631) (undo-tree-id2321 . -1) (t 25815 60616 620511 506000)) nil (25815 60695 725683 906000) 0 nil])
([nil nil ((2700 . 2701) (#("T" 0 1 (face font-lock-type-face fontified t)) . -2700) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) 2701 (2676 . 2677) (#("T" 0 1 (face font-lock-type-face fontified t)) . -2676) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) 2677) nil (25815 60695 725673 826000) 0 nil])
([nil nil ((2710 . 2711) (#("T" 0 1 (face font-lock-variable-name-face fontified t)) . 2710) (undo-tree-id2322 . -1) (t 25815 60695 743807 890000)) nil (25815 60705 901014 630000) 0 nil])
([nil nil ((2406 . 2413) (t 25815 60705 920469 842000)) nil (25815 65036 64788 595000) 0 nil])
([nil nil ((3030 . 3039) (#("(" 0 1 (fontified t)) . -3030) (undo-tree-id2323 . -1) 3031 (3030 . 3031) (apply yas--snippet-revive 2992 3031 #s(yas--snippet nil nil #s(yas--exit 3030 nil) 146 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3030 nil) 146 nil nil nil nil)) (2992 . 3031) (#("type MapOutput<T: Contextualizable> = $0;" 0 41 (fontified nil)) . 2992) (2992 . 3033) (#("type MapO" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 9 (fontified nil)) . 2992) (undo-tree-id2324 . -5) (2997 . 3001) (#("type MapOutput =" 0 16 (fontified nil)) . -2997) (2997 . 3013) (#("MapO" 0 4 (face font-lock-type-face fontified t)) . -2997) (undo-tree-id2325 . -4) 3001 (2992 . 3001) (2990 . 2992) (2955 . 2956) (2934 . 2955) (2932 . 2934) (t 25815 65036 108876 917000)) nil (25815 65197 886105 855000) 0 nil])
([nil nil ((3030 . 3036) (#("Option" 0 6 (fontified nil)) . 3030) (3030 . 3036) (#("Option" 0 6 (face font-lock-type-face fontified t)) . -3030) (undo-tree-id2326 . -6) (undo-tree-id2327 . -6) (undo-tree-id2328 . -1) (undo-tree-id2329 . -6) (undo-tree-id2330 . -6) (undo-tree-id2331 . -6) (undo-tree-id2332 . -6) (undo-tree-id2333 . -6) (undo-tree-id2334 . -6) (undo-tree-id2335 . -6) 3036 (3031 . 3036) (#("u" 0 1 (face font-lock-type-face fontified t)) . -3031) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -3032) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -3033) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -3034) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -3035) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) 3036 (3147 . 3148) (#("	" 0 1 (fontified nil)) . 3146) (undo-tree-id2350 . -1) (3145 . 3148) (t 25815 65197 905407 288000)) nil (25815 65209 298855 489000) 0 nil])
([nil nil ((3007 . 3008) (#("T" 0 1 (face font-lock-variable-name-face fontified t)) . 3007) (t 25815 65209 315397 696000)) nil (25815 65226 491425 405000) 0 nil])
([nil nil ((3037 . 3038) (#("T" 0 1 (face font-lock-type-face fontified t)) . 3037)) nil (25815 65226 491413 288000) 0 nil])
([nil nil ((2513 . 2516) (2504 . 2513) (#("Map" 0 3 (fontified nil)) . 2504) (2504 . 2507) (#("MapOutput (as Contextualizable)" 0 31 (fontified nil)) . -2504) (2504 . 2535) (#("Map" 0 3 (face font-lock-type-face fontified t)) . -2504) (undo-tree-id2351 . -3) 2507 (2501 . 2507) (#("U" 0 1 (face font-lock-type-face fontified t)) . -2501) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (#(":" 0 1 (fontified t)) . -2502) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (#(":" 0 1 (fontified t)) . -2503) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (#("M" 0 1 (face font-lock-type-face fontified nil)) . -2504) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (#("a" 0 1 (face font-lock-type-face fontified nil)) . -2505) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (#("p" 0 1 (face font-lock-type-face fontified nil)) . -2506) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (#("O" 0 1 (face font-lock-type-face fontified nil)) . -2507) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (#("u" 0 1 (face font-lock-type-face fontified nil)) . -2508) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2509) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -2510) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -2511) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2512) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) 2513 (2504 . 2513) (#("Map" 0 3 (fontified nil)) . 2504) (2504 . 2507) (#("MapOutput (as Contextualizable)" 0 31 (fontified nil)) . -2504) (2504 . 2535) (#("Map" 0 3 (face font-lock-type-face fontified t)) . -2504) (undo-tree-id2376 . -3) 2507 (2502 . 2507) (t 25815 65226 505383 250000)) nil (25816 167 948233 821000) 0 nil])
([nil nil ((3064 . 3065) (3064 . 3065) (3063 . 3064) (3054 . 3063) (#("Map" 0 3 (fontified nil)) . 3054) (3054 . 3057) (#("MapOutput (as Contextualizable)" 0 31 (fontified nil)) . -3054) (3054 . 3085) (#("Map" 0 3 (face font-lock-type-face fontified t)) . -3054) (undo-tree-id2377 . -3) 3057 (3051 . 3057) (#("U" 0 1 (face font-lock-type-face fontified t)) . -3051) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) 3052 (t 25816 167 982252 569000)) nil (25816 1993 901958 974000) 0 nil])
([nil nil ((3337 . 3338) (apply yas--snippet-revive 3316 3337 #s(yas--snippet nil (#s(yas--field 1 3335 3336 nil nil nil t #s(yas--exit 3337 nil))) #s(yas--exit 3337 nil) 148 nil #s(yas--field 1 3335 3336 nil nil nil t #s(yas--exit 3337 nil)) nil nil)) (#("f" 0 1 (fontified nil)) . 3336) (3335 . 3336) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3335 3336 nil nil nil t #s(yas--exit 3337 nil))) #s(yas--exit 3337 nil) 148 nil #s(yas--field 1 3335 3336 nil nil nil t #s(yas--exit 3337 nil)) nil nil)) (3316 . 3337) (#("map_contextualized(${1:f})$0" 0 28 (fontified nil)) . 3316) (3316 . 3344) (#("map" 0 3 (fontified nil)) . 3316) (3316 . 3319) (#("map_contextualized(…) (as Contextualizable)" 0 43 (fontified nil)) . -3316) (3316 . 3359) (#("map" 0 3 (fontified t)) . -3316) (undo-tree-id2380 . -3) (undo-tree-id2381 . -3) 3319 (3310 . 3319) (#("|" 0 1 (fontified t)) . -3310) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (#("e" 0 1 (fontified t)) . -3311) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (#("|" 0 1 (fontified t)) . -3312) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (#(" " 0 1 (fontified t)) . -3313) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (#("e" 0 1 (fontified t)) . -3314) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (#("." 0 1 (fontified t)) . -3315) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) 3316 (3301 . 3316) (apply yas--snippet-revive 3176 3304 #s(yas--snippet nil nil #s(yas--exit 3301 nil) 147 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3301 nil) 147 nil nil nil nil)) (3176 . 3304) (#("fn map_contextualized<T>(
		self,
		f: impl FnOnce(Self::Inner) -> T
	) -> Self::MapOutput<T>
	where T: Contextualizable {
		$0
	}" 0 65 (fontified nil) 65 66 (syntax-table (1) fontified nil) 66 73 (fontified nil) 73 74 (syntax-table (1) fontified nil) 74 130 (fontified nil)) . 3176) (3304 . 3305) (3299 . 3301) (#("    " 0 4 (fontified nil)) . 3299) (3176 . 3307) (#("fn map" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 6 (fontified nil)) . 3176) (undo-tree-id2394 . -3) (3179 . 3182) (#("fn map_contextualized(..)" 0 25 (fontified nil)) . -3179) (3179 . 3204) (#("map" 0 3 (face font-lock-function-name-face fontified t)) . -3179) (undo-tree-id2395 . -3) 3182 (3176 . 3182) (3175 . 3176) (#("	" 0 1 (fontified nil)) . 3174) (undo-tree-id2396 . -1) (3173 . 3176) (t 25816 1993 921854 432000)) nil (25816 2533 512087 756000) 0 nil])
([nil nil ((3198 . 3199) (#("T" 0 1 (face font-lock-type-face fontified t)) . 3198) (t 25816 2533 528520 484000)) nil (25816 2557 954190 565000) 0 nil])
([nil nil ((3243 . 3244) (#("T" 0 1 (face font-lock-type-face fontified t)) . 3243)) nil (25816 2557 954185 497000) 0 nil])
([nil nil ((3267 . 3268) (#("T" 0 1 (face font-lock-type-face fontified t)) . 3267) (undo-tree-id2398 . -1)) nil (25816 2557 954180 280000) 0 nil])
([nil nil ((3277 . 3278) (#("T" 0 1 (face font-lock-variable-name-face fontified t)) . 3277) (undo-tree-id2397 . -1)) nil (25816 2557 954162 247000) 0 nil])
([nil nil ((3529 . 3532) (3520 . 3529) (#("Map" 0 3 (fontified nil)) . 3520) (3520 . 3523) (#("MapOutput (as Contextualizable)" 0 31 (fontified nil)) . -3520) (3520 . 3551) (#("Map" 0 3 (face font-lock-type-face fontified t)) . -3520) (undo-tree-id2409 . -3) (undo-tree-id2410 . -3) 3523 (3519 . 3523) (3517 . 3519) (apply yas--snippet-revive 3508 3518 #s(yas--snippet nil nil #s(yas--exit 3517 nil) 150 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3517 nil) 150 nil nil nil nil)) (3508 . 3518) (#("OptError<$0>" 0 12 (fontified nil)) . 3508) (3508 . 3520) (#("OptE" 0 4 (fontified nil)) . 3508) (3508 . 3512) (#("OptError<…>" 0 11 (fontified nil)) . -3508) (3508 . 3519) (#("OptE" 0 4 (face font-lock-type-face fontified t)) . -3508) (undo-tree-id2411 . -1) (undo-tree-id2412 . -4) 3512 (3509 . 3512) (#("u" 0 1 (face font-lock-type-face fontified t)) . -3509) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -3510) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) 3511 (#("p" 0 1 (face font-lock-type-face fontified t)) . -3511) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -3512) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) 3513 (3508 . 3513) (3485 . 3486) (#("T" 0 1 (face font-lock-variable-name-face fontified t)) . -3485) (undo-tree-id2421 . -1) 3486 (#("O" 0 1 (face font-lock-type-face fontified t)) . -3508) (undo-tree-id2422 . -1) 3509 (3508 . 3509) (apply yas--snippet-revive 3470 3509 #s(yas--snippet nil nil #s(yas--exit 3508 nil) 149 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3508 nil) 149 nil nil nil nil)) (3470 . 3509) (#("type MapOutput<T: Contextualizable> = $0;" 0 41 (fontified nil)) . 3470) (3470 . 3511) (#("type MapOut" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 11 (fontified nil)) . 3470) (undo-tree-id2423 . -5) (3475 . 3481) (#("type MapOutput =" 0 16 (fontified nil)) . -3475) (3475 . 3491) (#("MapOut" 0 6 (face font-lock-type-face fontified t)) . -3475) (undo-tree-id2424 . -6) 3481 (3470 . 3481) (3468 . 3470) (3431 . 3432) (3410 . 3431) (3408 . 3410) (t 25816 2557 978515 917000)) nil (25816 2736 25983 249000) 0 nil])
([nil nil ((3863 . 3864) (apply yas--snippet-revive 3842 3863 #s(yas--snippet nil (#s(yas--field 1 3861 3862 nil nil nil t #s(yas--exit 3863 nil))) #s(yas--exit 3863 nil) 153 nil #s(yas--field 1 3861 3862 nil nil nil t #s(yas--exit 3863 nil)) nil nil)) (#("f" 0 1 (fontified nil)) . 3862) (3861 . 3862) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3861 3862 nil nil nil t #s(yas--exit 3863 nil))) #s(yas--exit 3863 nil) 153 nil #s(yas--field 1 3861 3862 nil nil nil t #s(yas--exit 3863 nil)) nil nil)) (3842 . 3863) (#("map_contextualized(${1:f})$0" 0 28 (fontified nil)) . 3842) (3842 . 3870) (#("map_contextualized(…) (as Contextualizable)" 0 43 (fontified nil)) . -3842) (3842 . 3885) (3836 . 3842) (3835 . 3836) (3827 . 3835) (#("OptEr" 0 5 (fontified nil)) . 3827) (3827 . 3832) (#("OptError" 0 8 (fontified nil)) . -3827) (3827 . 3835) (#("OptEr" 0 5 (face font-lock-type-face fontified t)) . -3827) (undo-tree-id2399 . -5) 3832 (3827 . 3832) (3824 . 3827) (3819 . 3824) (3816 . 3819) (apply yas--snippet-revive 3801 3816 #s(yas--snippet nil (#s(yas--field 1 3810 3815 nil nil nil t #s(yas--exit 3816 nil))) #s(yas--exit 3816 nil) 152 nil #s(yas--field 1 3810 3815 nil nil nil t #s(yas--exit 3816 nil)) nil nil)) (3810 . 3815) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3810 3815 nil nil nil t #s(yas--exit 3816 nil))) #s(yas--exit 3816 nil) 152 nil #s(yas--field 1 3810 3815 nil nil nil t #s(yas--exit 3816 nil)) nil nil)) (3801 . 3811) (#("OptError($1)$0" 0 14 (fontified nil)) . 3801) (3801 . 3815) (#("OptE" 0 4 (fontified nil)) . 3801) (3801 . 3805) (#("OptError(…)" 0 11 (fontified nil)) . -3801) (3801 . 3812) (#("OptE" 0 4 (face font-lock-type-face fontified t)) . -3801) (undo-tree-id2400 . -4) 3805 (3797 . 3805) (3773 . 3774) (#("T" 0 1 (face font-lock-variable-name-face fontified t)) . -3773) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) 3774 (3763 . 3764) (#("T" 0 1 (face font-lock-type-face fontified t)) . -3763) (undo-tree-id2403 . -1) 3764 (3739 . 3740) (#("T" 0 1 (face font-lock-type-face fontified t)) . -3739) (undo-tree-id2404 . -1) 3740 (3694 . 3695) (#("T" 0 1 (face font-lock-type-face fontified t)) . -3694) (undo-tree-id2405 . -1) 3695 (apply yas--snippet-revive 3672 3800 #s(yas--snippet nil nil #s(yas--exit 3797 nil) 151 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3797 nil) 151 nil nil nil nil)) (3672 . 3800) (#("fn map_contextualized<T>(
		self,
		f: impl FnOnce(Self::Inner) -> T
	) -> Self::MapOutput<T>
	where T: Contextualizable {
		$0
	}" 0 65 (fontified nil) 65 66 (syntax-table (1) fontified nil) 66 73 (fontified nil) 73 74 (syntax-table (1) fontified nil) 74 130 (fontified nil)) . 3672) (3800 . 3801) (3795 . 3797) (#("    " 0 4 (fontified nil)) . 3795) (3672 . 3803) (#("fn map_" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 7 (fontified nil)) . 3672) (undo-tree-id2406 . -3) (3675 . 3679) (#("fn map_contextualized(..)" 0 25 (fontified nil)) . -3675) (3675 . 3700) (#("map_" 0 4 (face font-lock-function-name-face fontified t)) . -3675) (undo-tree-id2407 . -4) 3679 (3672 . 3679) (3671 . 3672) (#("	" 0 1 (fontified nil)) . 3670) (undo-tree-id2408 . -1) (3669 . 3672)) nil (25816 2736 25927 367000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -3945) (undo-tree-id2425 . -1) (3946 . 3947) (3944 . 3946) (3942 . 3944) (3940 . 3941) (3877 . 3889) (apply yas--snippet-revive 3916 3929 #s(yas--snippet nil nil #s(yas--exit 3928 nil) 154 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3928 nil) 154 nil nil nil nil)) (3916 . 3929) (#("WithContext<$0>" 0 15 (fontified nil)) . 3916) (3916 . 3931) (#("WithCon" 0 7 (fontified nil)) . 3916) (3916 . 3923) (#("WithContext<…>" 0 14 (fontified nil)) . -3916) (3916 . 3930) (#("WithCon" 0 7 (face font-lock-type-face fontified t)) . -3916) (undo-tree-id2426 . -7) 3923 (3911 . 3923) (3902 . 3911) (3879 . 3902) (#("Defa" 0 4 (fontified nil)) . 3879) (3879 . 3883) (#("DefaultContextualizable" 0 23 (fontified nil)) . -3879) (3879 . 3902) (#("Defa" 0 4 (face font-lock-type-face fontified t)) . -3879) (undo-tree-id2427 . -4) 3883 (3876 . 3883) (3875 . 3876) (3871 . 3875) (3870 . 3872) (t 25816 2736 45142 216000)) nil (25816 2869 78023 57000) 0 nil])
([nil nil ((3944 . 3946) (t 25816 2869 95105 477000)) nil (25816 2876 393026 597000) 0 nil])
([nil nil ((2292 . 2299) (2287 . 2292) (#("	" 0 1 (fontified nil)) . -2291) (undo-tree-id2428 . -1) (2292 . 2293) (2287 . 2292) (2271 . 2287) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2271) (undo-tree-id2429 . -1) 2272 (2265 . 2272) (#("	" 0 1 (fontified t)) . -2260) 2266 (2261 . 2266) (2256 . 2261) (2254 . 2256) (2234 . 2254) (#("		" 0 2 (fontified t)) . -2233) 2236 (2235 . 2236) (2229 . 2235) (2224 . 2229) (2221 . 2224) (2200 . 2221) (2198 . 2200) (2197 . 2198) (2192 . 2197) (2190 . 2192) (#("," 0 1 (fontified t)) . -2190) (undo-tree-id2430 . -1) 2191 (2187 . 2191) (2182 . 2187) (2163 . 2182) (2157 . 2163) (2154 . 2157) (#("			" 0 3 (fontified nil)) . 2153) (undo-tree-id2431 . -3) (2152 . 2157) (2129 . 2141) (2123 . 2129) (2121 . 2123) (2120 . 2121) (2099 . 2120) (2093 . 2099) (#("	" 0 1 (fontified nil)) . -2098) (undo-tree-id2432 . -1) (2099 . 2100) (2093 . 2099) (2090 . 2093) (2082 . 2090) (#("h" 0 1 (face font-lock-type-face fontified t)) . -2082) (undo-tree-id2433 . -1) 2083 (2080 . 2083) (2075 . 2080) (#("	" 0 1 (fontified nil)) . -2079) (undo-tree-id2434 . -1) (2080 . 2081) (2075 . 2080) (2074 . 2075) (2066 . 2074) (2045 . 2066) (2032 . 2045) (#("a" 0 1 (face font-lock-function-name-face fontified t)) . -2032) (undo-tree-id2435 . -1) 2033 (2017 . 2033) (2014 . 2017) (#("			" 0 3 (fontified nil)) . 2013) (undo-tree-id2436 . -3) (2012 . 2017) (2000 . 2012) (1993 . 2000) (1972 . 1993) (1850 . 1856) (1962 . 1966) (1921 . 1925) (#("$" 0 1 (fontified t)) . -1921) (undo-tree-id2437 . -1) (#("t" 0 1 (fontified t)) . -1922) (undo-tree-id2438 . -1) (#("y" 0 1 (fontified t)) . -1923) (undo-tree-id2439 . -1) 1924 (1959 . 1961) (1953 . 1959) (1932 . 1953) (1929 . 1932) (1925 . 1929) (1908 . 1925) (1904 . 1908) (#("	" 0 1 (fontified nil)) . -1907) (undo-tree-id2440 . -1) (1908 . 1909) (1904 . 1908) (1886 . 1904) (1873 . 1886) (1870 . 1873) (#("	" 0 1 (fontified nil)) . -1872) (undo-tree-id2441 . -1) (1873 . 1874) (1870 . 1873) (1867 . 1870) (1859 . 1867) (#(" " 0 1 (fontified t)) . -1859) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) 1860 (1856 . 1860) (#("T" 0 1 (fontified t)) . -1856) (undo-tree-id2444 . -1) 1857 (#(":" 0 1 (fontified t)) . -1857) (undo-tree-id2445 . -1) 1858 (1856 . 1858) (#("t" 0 1 (fontified t)) . -1856) (undo-tree-id2446 . -1) (#("y" 0 1 (fontified t)) . -1857) (undo-tree-id2447 . -1) (#(":" 0 1 (fontified t)) . -1858) (undo-tree-id2448 . -1) (#(" " 0 1 (fontified t)) . -1859) (undo-tree-id2449 . -1) 1860 (1854 . 1860) (1852 . 1854) (#("	" 0 1 (fontified nil)) . -1853) (undo-tree-id2450 . -1) (1854 . 1855) (1852 . 1854) (1851 . 1852) (1830 . 1851) (1816 . 1830) (1814 . 1816) (t 25816 2876 425103 321000)) nil (25816 3162 302838 958000) 0 nil])
([nil nil ((2772 . 2774) (2315 . 2317) (2314 . 2315) (t 25816 3162 328344 350000)) nil (25816 3181 684734 696000) 0 nil])
([nil nil ((2334 . 2354) (2319 . 2334) (#("c" 0 1 (fontified t)) . -2319) (undo-tree-id2451 . -1) (#("r" 0 1 (fontified t)) . -2320) (undo-tree-id2452 . -1) (#("a" 0 1 (fontified t)) . -2321) (undo-tree-id2453 . -1) (#("t" 0 1 (fontified t)) . -2322) (undo-tree-id2454 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -2323) (undo-tree-id2455 . -1) (#(")" 0 1 (fontified t)) . -2324) (undo-tree-id2456 . -1) (#(" " 0 1 (fontified t)) . -2325) (undo-tree-id2457 . -1) (#("u" 0 1 (fontified t)) . -2326) (undo-tree-id2458 . -1) (#("s" 0 1 (fontified t)) . -2327) (undo-tree-id2459 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -2328) (undo-tree-id2460 . -1) (#(" " 0 1 (fontified t)) . -2329) (undo-tree-id2461 . -1) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -2330) (undo-tree-id2462 . -1) (#("m" 0 1 (face font-lock-constant-face fontified t)) . -2331) (undo-tree-id2463 . -1) (#("p" 0 1 (face font-lock-constant-face fontified t)) . -2332) (undo-tree-id2464 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -2333) (undo-tree-id2465 . -1) 2334 (2315 . 2334) (2313 . 2315) (t 25816 3181 711670 952000)) nil (25816 3416 265894 2000) 0 nil])
([nil nil ((2326 . 2330) (t 25816 3416 288252 825000)) nil (25816 3421 821442 940000) 0 nil])
([nil nil ((#("
/*
/// wraps `Self` in a [`WithContext`]
impl<E: DefaultContextualizable> Contextualizable for E {
	type Inner = E;
	type Output = WithContext<Self>;
	type MapOutput<T: Contextualizable> = T;
	fn contextualize(self, context: Context) -> Self::Output {
		WithContext {
			contexts: vec![context],
			error: self
		}
	}

	fn map_contextualized<T>(
		self,
		f: impl FnOnce(Self::Inner) -> T
	) -> Self::MapOutput<T>
	where T: Contextualizable {
		f(self)
	}
}*/

" 0 1 (fontified t) 1 3 (face font-lock-comment-delimiter-face fontified t) 3 4 (face font-lock-comment-face fontified t) 4 8 (face font-lock-comment-face fontified t) 8 39 (face font-lock-comment-face fontified t) 39 42 (face font-lock-comment-face fontified t) 42 46 (face font-lock-comment-face fontified t) 46 47 (face font-lock-comment-face fontified t syntax-table (1)) 47 48 (face font-lock-comment-face fontified t) 48 50 (face font-lock-comment-face fontified t) 50 73 (face font-lock-comment-face fontified t) 73 74 (face font-lock-comment-face fontified t syntax-table (1)) 74 75 (face font-lock-comment-face fontified t) 75 91 (face font-lock-comment-face fontified t) 91 92 (face font-lock-comment-face fontified t) 92 95 (face font-lock-comment-face fontified t) 95 96 (face font-lock-comment-face fontified t) 96 97 (face font-lock-comment-face fontified t) 97 98 (face font-lock-comment-face fontified t) 98 100 (face font-lock-comment-face fontified t) 100 101 (face font-lock-comment-face fontified t) 101 105 (face font-lock-comment-face fontified t) 105 106 (face font-lock-comment-face fontified t) 106 111 (face font-lock-comment-face fontified t) 111 114 (face font-lock-comment-face fontified t) 114 115 (face font-lock-comment-face fontified t) 115 116 (face font-lock-comment-face fontified t) 116 117 (face font-lock-comment-face fontified t) 117 118 (face font-lock-comment-face fontified t) 118 122 (face font-lock-comment-face fontified t) 122 123 (face font-lock-comment-face fontified t) 123 129 (face font-lock-comment-face fontified t) 129 132 (face font-lock-comment-face fontified t) 132 143 (face font-lock-comment-face fontified t) 143 144 (face font-lock-comment-face fontified t syntax-table (1)) 144 148 (face font-lock-comment-face fontified t) 148 149 (face font-lock-comment-face fontified t syntax-table (1)) 149 151 (face font-lock-comment-face fontified t) 151 152 (face font-lock-comment-face fontified t) 152 156 (face font-lock-comment-face fontified t) 156 157 (face font-lock-comment-face fontified t) 157 166 (face font-lock-comment-face fontified t) 166 167 (face font-lock-comment-face fontified t syntax-table (1)) 167 168 (face font-lock-comment-face fontified t) 168 170 (face font-lock-comment-face fontified t) 170 186 (face font-lock-comment-face fontified t) 186 187 (face font-lock-comment-face fontified t syntax-table (1)) 187 190 (face font-lock-comment-face fontified t) 190 191 (face font-lock-comment-face fontified t) 191 192 (face font-lock-comment-face fontified t) 192 193 (face font-lock-comment-face fontified t) 193 194 (face font-lock-comment-face fontified t) 194 196 (face font-lock-comment-face fontified t) 196 197 (face font-lock-comment-face fontified t) 197 210 (face font-lock-comment-face fontified t) 210 211 (face font-lock-comment-face fontified t) 211 215 (face font-lock-comment-face fontified t) 215 217 (face font-lock-comment-face fontified t) 217 224 (face font-lock-comment-face fontified t) 224 226 (face font-lock-comment-face fontified t) 226 233 (face font-lock-comment-face fontified t) 233 236 (face font-lock-comment-face fontified t) 236 237 (face font-lock-comment-face fontified t syntax-table (1)) 237 238 (face font-lock-comment-face fontified t) 238 242 (face font-lock-comment-face fontified t) 242 244 (face font-lock-comment-face fontified t) 244 250 (face font-lock-comment-face fontified t) 250 251 (face font-lock-comment-face fontified t) 251 253 (face font-lock-comment-face fontified t) 253 255 (face font-lock-comment-face fontified t) 255 266 (face font-lock-comment-face fontified t) 266 272 (face font-lock-comment-face fontified t) 272 280 (face font-lock-comment-face fontified t) 280 282 (face font-lock-comment-face fontified t) 282 286 (face font-lock-comment-face fontified t) 286 300 (face font-lock-comment-face fontified t) 300 305 (face font-lock-comment-face fontified t) 305 307 (face font-lock-comment-face fontified t) 307 311 (face font-lock-comment-face fontified t) 311 315 (face font-lock-comment-face fontified t) 315 316 (face font-lock-comment-face fontified t) 316 319 (face font-lock-comment-face fontified t) 319 320 (face font-lock-comment-face fontified t) 320 321 (face font-lock-comment-face fontified t) 321 323 (face font-lock-comment-face fontified t) 323 324 (face font-lock-comment-face fontified t) 324 342 (face font-lock-comment-face fontified t) 342 343 (face font-lock-comment-face fontified t syntax-table (1)) 343 344 (face font-lock-comment-face fontified t) 344 345 (face font-lock-comment-face fontified t syntax-table (1)) 345 349 (face font-lock-comment-face fontified t) 349 353 (face font-lock-comment-face fontified t) 353 357 (face font-lock-comment-face fontified t) 357 358 (face font-lock-comment-face fontified t) 358 360 (face font-lock-comment-face fontified t) 360 364 (face font-lock-comment-face fontified t) 364 365 (face font-lock-comment-face fontified t) 365 371 (face font-lock-comment-face fontified t) 371 372 (face font-lock-comment-face fontified t) 372 376 (face font-lock-comment-face fontified t) 376 378 (face font-lock-comment-face fontified t) 378 383 (face font-lock-comment-face fontified t) 383 386 (face font-lock-comment-face fontified t) 386 387 (face font-lock-comment-face fontified t syntax-table (1)) 387 388 (face font-lock-comment-face fontified t) 388 389 (face font-lock-comment-face fontified t) 389 394 (face font-lock-comment-face fontified t) 394 395 (face font-lock-comment-face fontified t syntax-table (1)) 395 396 (face font-lock-comment-face fontified t) 396 400 (face font-lock-comment-face fontified t) 400 402 (face font-lock-comment-face fontified t) 402 411 (face font-lock-comment-face fontified t) 411 412 (face font-lock-comment-face fontified t syntax-table (1)) 412 413 (face font-lock-comment-face fontified t) 413 414 (face font-lock-comment-face fontified t syntax-table (1)) 414 416 (face font-lock-comment-face fontified t) 416 421 (face font-lock-comment-face fontified t) 421 422 (face font-lock-comment-face fontified t) 422 423 (face font-lock-comment-face fontified t) 423 425 (face font-lock-comment-face fontified t) 425 441 (face font-lock-comment-face fontified t) 441 442 (face font-lock-comment-face fontified t) 442 443 (face font-lock-comment-face fontified t) 443 444 (face font-lock-comment-face fontified t) 444 448 (face font-lock-comment-face fontified t) 448 452 (face font-lock-comment-face fontified t) 452 453 (face font-lock-comment-face fontified t) 453 454 (face font-lock-comment-face fontified t) 454 456 (face font-lock-comment-face fontified t) 456 457 (face font-lock-comment-face fontified t) 457 460 (face font-lock-comment-face fontified t) 460 461 (fontified t) 461 462 (fontified t)) . 2359) (undo-tree-id2466 . -461) (undo-tree-id2467 . -461) (undo-tree-id2468 . -14) (undo-tree-id2469 . -461) (undo-tree-id2470 . -14) (undo-tree-id2471 . -253) (undo-tree-id2472 . -458) (undo-tree-id2473 . -461) (undo-tree-id2474 . -462) (t 25816 3421 844917 420000)) nil (25816 3515 471999 737000) 0 nil])
([nil nil ((3971 . 3972) (#("T" 0 1 (face font-lock-type-face fontified t)) . -3971) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) 3972 (3963 . 3965) (#("T" 0 1 (face font-lock-type-face fontified t)) . -3963) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (#(":" 0 1 (fontified t)) . -3964) (undo-tree-id2580 . -1) (#(" " 0 1 (fontified t)) . -3965) (undo-tree-id2581 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -3966) (undo-tree-id2582 . -1) 3967 (3964 . 3967) (#(":" 0 1 (fontified t)) . -3964) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (#(" " 0 1 (fontified t)) . -3965) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -3966) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -3967) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -3968) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3969) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (#("<" 0 1 (fontified nil)) . -3970) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (#("U" 0 1 (face font-lock-type-face fontified nil)) . -3971) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (#(">" 0 1 (fontified nil)) . -3972) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (#("," 0 1 (fontified nil)) . -3973) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (#(" " 0 1 (fontified t)) . -3974) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (#("U" 0 1 (face font-lock-type-face fontified t)) . -3975) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (#(":" 0 1 (fontified t)) . -3976) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (#(" " 0 1 (fontified t)) . -3977) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (#("D" 0 1 (face font-lock-type-face fontified t)) . -3978) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3979) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -3980) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) 3981 (#("a" 0 1 (face font-lock-type-face fontified t)) . -3981) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -3982) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -3983) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -3984) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -3985) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3986) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -3987) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -3988) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3989) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -3990) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -3991) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -3992) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -3993) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -3994) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -3995) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (#("z" 0 1 (face font-lock-type-face fontified t)) . -3996) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -3997) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -3998) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -3999) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -4000) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (#(">" 0 1 (fontified t)) . -4001) (undo-tree-id2701 . -1) 4002 (t 25816 3515 494882 152000)) nil (25816 3604 357181 564000) 0 nil])
([nil nil ((3997 . 4002) (#("Err" 0 3 (fontified nil)) . 3997) (3997 . 4000) (#("Error" 0 5 (fontified nil)) . -3997) (3997 . 4002) (#("Err" 0 3 (face font-lock-type-face fontified t)) . -3997) (undo-tree-id2561 . -3) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -3) (undo-tree-id2565 . -3) (undo-tree-id2566 . -3) (undo-tree-id2567 . -3) 4000 (3990 . 4000) (#("E" 0 1 (face font-lock-type-face fontified t)) . -3990) (undo-tree-id2568 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3991) (undo-tree-id2569 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3992) (undo-tree-id2570 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3993) (undo-tree-id2571 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3994) (undo-tree-id2572 . -1) 3995 (3990 . 3995) (#("U" 0 1 (face font-lock-type-face fontified t)) . -3990) (undo-tree-id2573 . -1) 3991) nil (25816 3604 356668 580000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -3978) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3979) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3980) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3981) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) 3982 (3974 . 3982) (3971 . 3974) (3970 . 3977) (#("," 0 1 (fontified t)) . -3970) (undo-tree-id2499 . -1) 3971 (3964 . 3971) (4003 . 4004) (#("
" 0 1 (fontified t)) . -4003) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (#("w" 0 1 (fontified t)) . -4004) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (#("h" 0 1 (fontified t)) . -4005) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (#("e" 0 1 (fontified t)) . -4006) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) 4007 (#("r" 0 1 (fontified t)) . -4007) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -4008) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (#(" " 0 1 (fontified t)) . -4009) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -4010) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -4011) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -4012) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -4013) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (#(":" 0 1 (fontified t)) . -4014) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (#(" " 0 1 (fontified t)) . -4015) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -4016) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -4017) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -4018) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -4019) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (#("<" 0 1 (fontified t)) . -4020) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) 4021 (4010 . 4021) (#("s" 0 1 (fontified t)) . -4010) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (#("u" 0 1 (fontified t)) . -4011) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (#("p" 0 1 (fontified t)) . -4012) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (#("e" 0 1 (fontified t)) . -4013) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -4014) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (#(":" 0 1 (fontified t)) . -4015) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (#(":" 0 1 (fontified t)) . -4016) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -4017) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -4018) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -4019) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -4020) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -4021) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) 4022 (4012 . 4022) (4004 . 4012) (#(" " 0 1 (fontified nil)) . 4003) (undo-tree-id2560 . -1) (4004 . 4005)) nil (25816 3604 356540 279000) 0 nil])
([nil nil ((#("impl<T: Into<super::Error>> From<T> for WithContext<super::Error> {
	
}

" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (face font-lock-variable-name-face fontified t) 6 8 (fontified t) 8 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 18 (face font-lock-keyword-face fontified t) 18 20 (fontified t) 20 25 (face font-lock-type-face fontified t) 25 28 (fontified t) 28 32 (face font-lock-type-face fontified t) 32 33 (fontified t) 33 34 (face font-lock-type-face fontified t) 34 36 (fontified t) 36 39 (face font-lock-keyword-face fontified t) 39 40 (fontified t) 40 51 (face font-lock-type-face fontified t) 51 52 (fontified t) 52 57 (face font-lock-keyword-face fontified t) 57 59 (fontified t) 59 64 (face font-lock-type-face fontified t) 64 73 (fontified t)) . 3958) (undo-tree-id0 . -72) (undo-tree-id1 . -72) (undo-tree-id2 . -72) (undo-tree-id3 . -72) (undo-tree-id4 . -72) (undo-tree-id5 . -72) (undo-tree-id6 . -73) (undo-tree-id7 . -72) (t 25816 3604 378181 468000)) nil (25817 7419 879157 199000) 0 nil])
([nil nil ((1037 . 1038) (1020 . 1030) (t 25817 7419 902750 776000)) nil (25817 12911 578444 769000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1435) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) 1436 (1435 . 1436) (1394 . 1395) (1377 . 1387)) nil (25817 12911 578437 323000) 0 nil])
([nil nil ((apply yas--snippet-revive 1436 1442 #s(yas--snippet nil nil #s(yas--exit 1442 nil) 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1442 nil) 16 nil nil nil nil)) (1436 . 1442) (#("into()$0" 0 8 (fontified nil)) . 1436) (1436 . 1444) (#("into() (as Into)" 0 16 (fontified nil)) . -1436) (1436 . 1452) (1435 . 1436) (t 25817 12911 597750 931000)) nil (25817 12921 277183 449000) 0 nil])
([nil nil ((2095 . 2096) (2078 . 2088) (t 25817 12921 287730 666000)) nil (25817 12938 872969 271000) 0 nil])
([nil nil ((2161 . 2168) (#("." 0 1 (fontified t)) . -2161) (undo-tree-id13 . -1) 2162 (2161 . 2162) (t 25817 12938 891027 122000)) nil (25817 12951 1563 360000) 0 nil])
([nil nil ((2704 . 2705) (2687 . 2697) (t 25817 12951 17668 339000)) nil (25817 12961 941377 974000) 0 nil])
([nil nil ((3265 . 3266) (3248 . 3258) (t 25817 12961 960978 674000)) nil (25817 12968 888033 30000) 0 nil])
([nil nil ((3742 . 3743) (3725 . 3735) (t 25817 12968 904297 401000)) nil (25817 13635 716923 15000) 0 nil])
([nil nil ((1840 . 1842) (#("[" 0 1 (fontified t)) . -1889) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("$" 0 1 (fontified t)) . -1890) (undo-tree-id2 . -1) 1891 (1890 . 1891) (1889 . 1890) (#("p" 0 1 (fontified t)) . -1889) (undo-tree-id3 . -1) 1890 (1889 . 1890) (4040 . 4042) (2948 . 2950) (2947 . 2948) (t 25817 13635 735032 632000)) nil (25818 40843 740558 874000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . -1840) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#(">" 0 1 (fontified t)) . -1841) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 1842 (t 25818 40843 750604 103000)) nil (25818 40850 91591 833000) 0 nil])
([nil nil ((1917 . 1918) (1915 . 1916) (1915 . 1916) (1899 . 1901) (1903 . 1913) (#("G" 0 1 (face font-lock-type-face fontified t)) . -1903) (undo-tree-id63 . -1) 1904 (1901 . 1904) (1899 . 1901) (#(" " 0 1 (fontified t)) . -1899) (undo-tree-id64 . -1) (#("$" 0 1 (fontified t)) . -1900) (undo-tree-id65 . -1) (#("(" 0 1 (fontified t)) . -1901) (undo-tree-id66 . -1) (#("," 0 1 (fontified t)) . -1902) (undo-tree-id67 . -1) (#(" " 0 1 (fontified t)) . -1903) (undo-tree-id68 . -1) (#("$" 0 1 (fontified t)) . -1904) (undo-tree-id69 . -1) (#(")" 0 1 (fontified t)) . -1905) (undo-tree-id70 . -1) 1906 (1904 . 1905) (1902 . 1904) (1900 . 1903) (1899 . 1900) (t 25818 40850 93931 449000)) nil (25818 43656 65880 694000) 0 nil])
([nil nil ((1914 . 1917) (t 25818 43656 80217 639000)) nil (25818 43666 286772 937000) 0 nil])
([nil nil ((2470 . 2471) (2466 . 2469) (2464 . 2465) (apply yas--snippet-revive 2457 2465 #s(yas--snippet nil nil #s(yas--exit 2464 nil) 108 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2464 nil) 108 nil nil nil nil)) (2457 . 2465) (#("Option<$0>" 0 10 (fontified nil)) . 2457) (2457 . 2467) (#("Opti" 0 4 (fontified nil)) . 2457) (2457 . 2461) (#("Option<…>" 0 9 (fontified nil)) . -2457) (2457 . 2466) (#("Opti" 0 4 (face font-lock-type-face fontified t)) . -2457) (undo-tree-id71 . -4) (undo-tree-id72 . -4) 2461 (2457 . 2461) (#("P" 0 1 (face font-lock-type-face fontified t)) . -2457) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("[" 0 1 (fontified t)) . -2458) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 2459 (2457 . 2459) (apply yas--snippet-revive 2428 2458 #s(yas--snippet nil nil #s(yas--exit 2457 nil) 107 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2457 nil) 107 nil nil nil nil)) (2428 . 2458) (#("impl_contextualizable_error!($0)" 0 32 (fontified nil)) . 2428) (2428 . 2460) (#("impl_c" 0 6 (fontified nil)) . 2428) (2428 . 2434) (#("impl_contextualizable_error!(…)" 0 31 (fontified nil)) . -2428) (2428 . 2459) (#("impl_c" 0 6 (fontified t)) . -2428) (undo-tree-id79 . -6) 2434 (2428 . 2434) (2427 . 2428) (t 25818 43666 296870 238000)) nil (25818 43703 843802 571000) 0 nil])
([nil nil ((1893 . 1894) (1894 . 1896) (#("i" 0 1 (fontified t)) . -1894) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("d" 0 1 (fontified t)) . -1895) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (#("e" 0 1 (fontified t)) . -1896) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("n" 0 1 (fontified t)) . -1897) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (#("t" 0 1 (fontified t)) . -1898) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) 1899 (1934 . 1945) (t 25818 43703 856819 150000)) nil (25818 43728 217776 431000) 0 nil])
([nil nil ((1968 . 1969)) nil (25818 43728 217738 506000) 0 nil])
([nil nil ((1947 . 1949) (1936 . 1938) (1932 . 1933) (1945 . 1947) (1932 . 1934) (t 25818 43728 240119 813000)) nil (25818 43748 185870 884000) 0 nil])
([nil nil ((nil fontified nil 2483 . 2484) (2483 . 2484) (#("T" 0 1 (face font-lock-type-face fontified t)) . 2483) (undo-tree-id115 . -1) (t 25818 43748 216759 992000)) nil (25818 43790 34510 247000) 0 nil])
([nil nil ((2493 . 2494) (#("U" 0 1 (face font-lock-type-face fontified t)) . -2493) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) 2494 (2350 . 2353) (#("T" 0 1 (face font-lock-type-face fontified t)) . -2350) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) 2351 (2322 . 2325) (#("T" 0 1 (face font-lock-type-face fontified t)) . -2322) (undo-tree-id109 . -1) 2323 (2271 . 2274) (#("T" 0 1 (face font-lock-type-face fontified t)) . -2271) (undo-tree-id110 . -1) 2272 (2082 . 2085) (#("T" 0 1 (face font-lock-type-face fontified t)) . -2082) (undo-tree-id111 . -1) 2083 (2057 . 2060) (#("T" 0 1 (face font-lock-variable-name-face fontified t)) . -2057) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) 2058) nil (25818 43790 34504 147000) 0 nil])
([nil nil ((2364 . 2367) (#("T" 0 1 (face font-lock-variable-name-face fontified t)) . -2364) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) 2365 (t 25818 43790 43371 958000)) nil (25818 43796 475567 143000) 0 nil])
([nil nil ((#("/// marker trait that adds a default Contextualizable support for any type
/// exists specialization and default associated types aren't stable yet
pub trait DefaultContextualizable {}

" 0 75 (face font-lock-doc-face fontified t) 75 148 (face font-lock-doc-face fontified t) 148 151 (face font-lock-keyword-face fontified t) 151 152 (fontified t) 152 157 (face font-lock-keyword-face fontified t) 157 158 (fontified t) 158 181 (face font-lock-type-face fontified t) 181 185 (fontified t) 185 186 (fontified t)) . 1659) (undo-tree-id132 . -185) (undo-tree-id133 . -185) (undo-tree-id134 . -5) (undo-tree-id135 . -185) (undo-tree-id136 . -5) (undo-tree-id137 . -5) (undo-tree-id138 . -5) (undo-tree-id139 . -5) (undo-tree-id140 . -185) (undo-tree-id141 . -185) (undo-tree-id142 . -185) (undo-tree-id143 . -186) 1844 (t 25818 43796 486696 953000)) nil (25818 44120 294289 7000) 0 nil])
([nil nil ((nil fontified t 2178 . 2181) (nil face font-lock-variable-name-face 2178 . 2181) (#("__t" 0 3 (face font-lock-variable-name-face fontified t)) . 2178) (2181 . 2184) (nil fontified t 2164 . 2167) (#("__t" 0 3 (fontified t)) . 2164) (2167 . 2170) (nil fontified t 2136 . 2139) (#("__t" 0 3 (fontified t)) . 2136) (2139 . 2142) (nil fontified t 2085 . 2088) (#("__t" 0 3 (fontified t)) . 2085) (2088 . 2091) (nil fontified nil 1896 . 1899) (#("__t" 0 3 (fontified nil)) . 1896) (1899 . 1902) (nil fontified t 1871 . 1874) (t 25818 44086 533007 958000) (nil face font-lock-variable-name-face 1871 . 1874) (t 25818 44086 533007 958000) (#("__t" 0 3 (face font-lock-variable-name-face fontified t)) . 1871) (t 25818 44086 533007 958000) (1874 . 1877) (t 25818 44086 533007 958000)) nil (25818 44130 205521 435000) 0 nil] [nil nil ((nil fontified t 2168 . 2169) (nil face font-lock-variable-name-face 2168 . 2169) (#("__t" 0 3 (face font-lock-variable-name-face fontified t)) . 2168) (2171 . 2172) (nil fontified t 2156 . 2157) (#("__t" 0 3 (fontified t)) . 2156) (2159 . 2160) (#("__t" 0 3 (fontified t)) . 2130) (2133 . 2134) (nil fontified t 2081 . 2082) (#("__t" 0 3 (fontified t)) . 2081) (2084 . 2085) (#("__t" 0 3 (fontified nil)) . 1894) (1897 . 1898) (nil fontified t 1871 . 1872) (t 25818 44086 533007 958000) (nil face font-lock-variable-name-face 1871 . 1872) (t 25818 44086 533007 958000) (#("__t" 0 3 (face font-lock-variable-name-face fontified t)) . 1871) (t 25818 44086 533007 958000) (1874 . 1875) (t 25818 44086 533007 958000)) ((#("T" 0 1 (face font-lock-variable-name-face fontified nil)) . 1874) (t 25818 44086 533007 958000) (1871 . 1874) (t 25818 44086 533007 958000) (nil fontified nil 1871 . 1872) (#("T" 0 1 (face font-lock-type-face fontified nil)) . 1897) (1894 . 1897) (#("T" 0 1 (face font-lock-type-face fontified nil)) . 2084) (2081 . 2084) (#("T" 0 1 (face font-lock-type-face fontified nil)) . 2133) (2130 . 2133) (#("T" 0 1 (face font-lock-type-face fontified nil)) . 2159) (2156 . 2159) (#("T" 0 1 (face font-lock-variable-name-face fontified nil)) . 2171) (2168 . 2171)) (25818 44120 292340 65000) 0 nil])
([nil nil ((2357 . 2360) (2355 . 2356) (apply yas--snippet-revive 2346 2356 #s(yas--snippet nil nil #s(yas--exit 2355 nil) 110 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2355 nil) 110 nil nil nil nil)) (2346 . 2356) (#("OptError<$0>" 0 12 (fontified nil)) . 2346) (2346 . 2358) (#("OptEr" 0 5 (fontified nil)) . 2346) (2346 . 2351) (#("OptError<…>" 0 11 (fontified nil)) . -2346) (2346 . 2357) (#("OptEr" 0 5 (face font-lock-type-face fontified t)) . -2346) (undo-tree-id144 . -5) (undo-tree-id145 . -4) (undo-tree-id146 . -5) (undo-tree-id147 . -5) (undo-tree-id148 . -5) (undo-tree-id149 . -5) 2351 (2346 . 2351) (apply yas--snippet-revive 2317 2347 #s(yas--snippet nil nil #s(yas--exit 2346 nil) 109 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2346 nil) 109 nil nil nil nil)) (2317 . 2347) (#("impl_contextualizable_error!($0)" 0 32 (fontified nil)) . 2317) (2317 . 2349) (#("impl_con" 0 8 (fontified nil)) . 2317) (2317 . 2325) (#("impl_contextualizable_error!(…)" 0 31 (fontified nil)) . -2317) (2317 . 2348) (#("impl_con" 0 8 (fontified t)) . -2317) (undo-tree-id150 . -8) 2325 (2317 . 2325) (2316 . 2317) (t 25818 44130 206290 405000)) nil (25818 44226 644254 785000) 0 nil])
nil
([nil nil ((2361 . 2362) (t 25818 44226 676179 917000)) nil (25818 44232 635356 353000) 0 nil])
([nil nil ((162 . 166) (t 25818 44232 646173 157000)) nil (25827 22551 214242 93000) 0 nil])
([nil current ((191 . 195) (t 25827 22551 218860 930000)) nil (25827 22556 857170 532000) 0 nil])
nil
