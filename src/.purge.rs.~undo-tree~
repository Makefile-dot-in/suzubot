(undo-tree-save-format-version . 1)
"01297bea06c98b609e68cee72551ebe0eab7da0e"
[nil nil nil nil (25810 52040 712676 670000) 0 nil]
([nil nil ((13 . 18) 20 (562 . 567) 569 (t 25810 47448 895495 535000)) nil (25810 52040 712670 945000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2713) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("	" 0 1 (fontified t)) . -2714) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("	" 0 1 (fontified t)) . -2715) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("	" 0 1 (fontified t)) . -2716) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("e" 0 1 (fontified t)) . -2717) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("r" 0 1 (fontified t)) . -2718) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("r" 0 1 (fontified t)) . -2719) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("o" 0 1 (fontified t)) . -2720) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("r" 0 1 (fontified t)) . -2721) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("!" 0 1 (fontified t)) . -2722) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("(" 0 1 (fontified t)) . -2723) (undo-tree-id51 . -1) 2724 (2717 . 2724) (#("w" 0 1 (fontified t)) . -2717) (undo-tree-id52 . -1) (#("a" 0 1 (fontified t)) . -2718) (undo-tree-id53 . -1) (#("r" 0 1 (fontified t)) . -2719) (undo-tree-id54 . -1) (#("n" 0 1 (fontified t)) . -2720) (undo-tree-id55 . -1) (#("!" 0 1 (fontified t)) . -2721) (undo-tree-id56 . -1) 2722 (2717 . 2722) (#("m" 0 1 (fontified t)) . -2717) (undo-tree-id57 . -1) 2718 (2717 . 2718) (2713 . 2717) (#("
" 0 1 (fontified t)) . -2713) (undo-tree-id58 . -1) (#("	" 0 1 (fontified t)) . -2714) (undo-tree-id59 . -1) (#("	" 0 1 (fontified t)) . -2715) (undo-tree-id60 . -1) (#("	" 0 1 (fontified t)) . -2716) (undo-tree-id61 . -1) 2717 (2713 . 2717) (t 25810 52040 717187 738000)) nil (25811 54249 346080 383000) 0 nil])
([nil nil ((2709 . 2710) (#("e" 0 1 (fontified t)) . 2709) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (t 25811 54249 353377 39000)) nil (25811 54255 143577 811000) 0 nil])
([nil nil ((4357 . 4361) (4383 . 4385) (4378 . 4383) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -4378) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -4379) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -4380) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -4381) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -4382) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4383) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -4384) (undo-tree-id83 . -1) (undo-tree-id84 . -1) 4385 (4382 . 4385) (4370 . 4382) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -4370) (undo-tree-id85 . -1) 4371 (4366 . 4371) (4345 . 4366) (4324 . 4345) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -4324) (undo-tree-id86 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -4325) (undo-tree-id87 . -1) (#("k" 0 1 (face font-lock-doc-face fontified t)) . -4326) (undo-tree-id88 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4327) (undo-tree-id89 . -1) 4328 (4324 . 4328) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -4324) (undo-tree-id90 . -1) (#("m" 0 1 (face font-lock-doc-face fontified t)) . -4325) (undo-tree-id91 . -1) (#("p" 0 1 (face font-lock-doc-face fontified t)) . -4326) (undo-tree-id92 . -1) (#("l" 0 1 (face font-lock-doc-face fontified t)) . -4327) (undo-tree-id93 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4328) (undo-tree-id94 . -1) (#("m" 0 1 (face font-lock-doc-face fontified t)) . -4329) (undo-tree-id95 . -1) 4330 (4323 . 4330) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -4323) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -4324) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -4325) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("x" 0 1 (face font-lock-doc-face fontified t)) . -4326) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4327) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -4328) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -4329) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -4330) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -4331) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (#("d" 0 1 (face font-lock-doc-face fontified t)) . -4332) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4333) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("f" 0 1 (face font-lock-doc-face fontified t)) . -4334) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -4335) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -4336) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -4337) (undo-tree-id124 . -1) (undo-tree-id125 . -1) 4338 (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4338) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -4339) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("c" 0 1 (face font-lock-doc-face fontified t)) . -4340) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("y" 0 1 (face font-lock-doc-face fontified t)) . -4341) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -4342) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -4343) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -4344) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -4345) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -4346) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4347) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -4348) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4349) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("n" 0 1 (face font-lock-doc-face fontified t)) . -4350) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -4351) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -4352) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("y" 0 1 (face font-lock-doc-face fontified t)) . -4353) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -4354) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("w" 0 1 (face font-lock-doc-face fontified t)) . -4355) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("h" 0 1 (face font-lock-doc-face fontified t)) . -4356) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4357) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("r" 0 1 (face font-lock-doc-face fontified t)) . -4358) (undo-tree-id166 . -1) (undo-tree-id167 . -1) 4359 (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4359) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -4360) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4361) (undo-tree-id172 . -1) 4362 (4361 . 4362) (4360 . 4361) (4341 . 4360) (4320 . 4341) (4319 . 4320) (t 25811 54255 150040 802000)) nil (25811 55260 574064 292000) 0 nil])
([nil nil ((4435 . 4436) (4408 . 4409) (#("]" 0 1 (face font-lock-doc-face fontified t)) . -4408) (undo-tree-id173 . -1) 4409 (4408 . 4409) (4437 . 4442) (4431 . 4437) (4410 . 4431) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -4410) (undo-tree-id174 . -1) 4411 (4408 . 4411) (#("m" 0 1 (face font-lock-doc-face fontified t)) . -4408) (undo-tree-id175 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4409) (undo-tree-id176 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -4410) (undo-tree-id177 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -4411) (undo-tree-id178 . -1) 4412 (#("a" 0 1 (face font-lock-doc-face fontified t)) . -4412) (undo-tree-id179 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -4413) (undo-tree-id180 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4414) (undo-tree-id181 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -4415) (undo-tree-id182 . -1) 4416 (4408 . 4416) (4392 . 4408) (4391 . 4392) (4319 . 4321) (t 25811 55260 582101 960000)) nil (25811 56445 970995 153000) 0 nil])
([nil nil ((4451 . 4466) (4437 . 4451) (4436 . 4438) (t 25811 56445 977767 291000)) nil (25811 56513 998015 125000) 0 nil])
([nil nil ((4505 . 4506) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -4505) (undo-tree-id183 . -1) (undo-tree-id184 . -1) 4506 (4496 . 4506) (4475 . 4496) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -4475) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) 4476 (4475 . 4476) (t 25811 56514 1013 829000)) nil (25811 56540 285829 630000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4305) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("	" 0 1 (fontified t)) . -4306) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("m" 0 1 (fontified t)) . -4307) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("e" 0 1 (fontified t)) . -4308) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("s" 0 1 (fontified t)) . -4309) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#("s" 0 1 (fontified t)) . -4310) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("a" 0 1 (fontified t)) . -4311) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("g" 0 1 (fontified t)) . -4312) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (#("e" 0 1 (fontified t)) . -4313) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#("s" 0 1 (fontified t)) . -4314) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("." 0 1 (fontified t)) . -4315) (undo-tree-id208 . -1) (#("r" 0 1 (fontified t)) . -4316) (undo-tree-id209 . -1) (#("e" 0 1 (fontified t)) . -4317) (undo-tree-id210 . -1) (#("v" 0 1 (fontified t)) . -4318) (undo-tree-id211 . -1) (#("(" 0 1 (fontified t)) . -4319) (undo-tree-id212 . -1) (#(")" 0 1 (fontified t)) . -4320) (undo-tree-id213 . -1) 4321 (4315 . 4321) (#("." 0 1 (fontified t)) . -4315) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("r" 0 1 (fontified t)) . -4316) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (#("e" 0 1 (fontified t)) . -4317) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("v" 0 1 (fontified t)) . -4318) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("e" 0 1 (fontified t)) . -4319) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("r" 0 1 (fontified t)) . -4320) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#("s" 0 1 (fontified t)) . -4321) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("e" 0 1 (fontified t)) . -4322) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (#("(" 0 1 (fontified t)) . -4323) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#(")" 0 1 (fontified t)) . -4324) (undo-tree-id232 . -1) (undo-tree-id233 . -1) 4325 (apply yas--snippet-revive 4316 4325 #s(yas--snippet nil nil #s(yas--exit 4325 nil) 93 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4325 nil) 93 nil nil nil nil)) (4316 . 4325) (#("reverse()$0" 0 11 (fontified nil)) . 4316) (4316 . 4327) (#("reve" 0 4 (fontified nil)) . 4316) (4316 . 4320) (#("reverse()" 0 9 (fontified nil)) . -4316) (4316 . 4325) (#("reve" 0 4 (fontified t)) . -4316) (undo-tree-id234 . -4) 4320 (4307 . 4320) (4305 . 4307) (t 25811 56540 290981 413000)) nil (25811 56644 122667 646000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -4286) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 4287 (4286 . 4287) (t 25811 56644 130858 762000)) nil (25818 26874 575440 285000) 0 nil])
([nil nil ((535 . 554) (apply yas--snippet-revive 4320 4413 #s(yas--snippet nil (#s(yas--field 1 4330 4333 nil nil nil nil #s(yas--field 2 4335 4340 nil nil nil nil #s(yas--field 3 4342 4347 nil nil nil nil #s(yas--field 4 4349 4354 nil nil nil nil #s(yas--field 5 4356 4362 nil nil nil nil #s(yas--field 6 4364 4370 nil nil nil nil #s(yas--field 7 4372 4378 nil nil nil nil #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil)))))))))))) #s(yas--field 2 4335 4340 nil nil nil nil #s(yas--field 3 4342 4347 nil nil nil nil #s(yas--field 4 4349 4354 nil nil nil nil #s(yas--field 5 4356 4362 nil nil nil nil #s(yas--field 6 4364 4370 nil nil nil nil #s(yas--field 7 4372 4378 nil nil nil nil #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil))))))))))) #s(yas--field 3 4342 4347 nil nil nil nil #s(yas--field 4 4349 4354 nil nil nil nil #s(yas--field 5 4356 4362 nil nil nil nil #s(yas--field 6 4364 4370 nil nil nil nil #s(yas--field 7 4372 4378 nil nil nil nil #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil)))))))))) #s(yas--field 4 4349 4354 nil nil nil nil #s(yas--field 5 4356 4362 nil nil nil nil #s(yas--field 6 4364 4370 nil nil nil nil #s(yas--field 7 4372 4378 nil nil nil nil #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil))))))))) #s(yas--field 5 4356 4362 nil nil nil nil #s(yas--field 6 4364 4370 nil nil nil nil #s(yas--field 7 4372 4378 nil nil nil nil #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil)))))))) #s(yas--field 6 4364 4370 nil nil nil nil #s(yas--field 7 4372 4378 nil nil nil nil #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil))))))) #s(yas--field 7 4372 4378 nil nil nil nil #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil)))))) #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil))))) #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil)))) #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil))) #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil))) #s(yas--exit 4413 nil) 55 nil #s(yas--field 2 4335 4340 nil nil nil nil #s(yas--field 3 4342 4347 nil nil nil nil #s(yas--field 4 4349 4354 nil nil nil nil #s(yas--field 5 4356 4362 nil nil nil nil #s(yas--field 6 4364 4370 nil nil nil nil #s(yas--field 7 4372 4378 nil nil nil nil #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil))))))))))) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4330 4333 nil nil nil nil #s(yas--field 2 4335 4340 nil nil nil nil #s(yas--field 3 4342 4347 nil nil nil nil #s(yas--field 4 4349 4354 nil nil nil nil #s(yas--field 5 4356 4362 nil nil nil nil #s(yas--field 6 4364 4370 nil nil nil nil #s(yas--field 7 4372 4378 nil nil nil nil #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil)))))))))))) #s(yas--field 2 4335 4340 nil nil nil nil #s(yas--field 3 4342 4347 nil nil nil nil #s(yas--field 4 4349 4354 nil nil nil nil #s(yas--field 5 4356 4362 nil nil nil nil #s(yas--field 6 4364 4370 nil nil nil nil #s(yas--field 7 4372 4378 nil nil nil nil #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil))))))))))) #s(yas--field 3 4342 4347 nil nil nil nil #s(yas--field 4 4349 4354 nil nil nil nil #s(yas--field 5 4356 4362 nil nil nil nil #s(yas--field 6 4364 4370 nil nil nil nil #s(yas--field 7 4372 4378 nil nil nil nil #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil)))))))))) #s(yas--field 4 4349 4354 nil nil nil nil #s(yas--field 5 4356 4362 nil nil nil nil #s(yas--field 6 4364 4370 nil nil nil nil #s(yas--field 7 4372 4378 nil nil nil nil #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil))))))))) #s(yas--field 5 4356 4362 nil nil nil nil #s(yas--field 6 4364 4370 nil nil nil nil #s(yas--field 7 4372 4378 nil nil nil nil #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil)))))))) #s(yas--field 6 4364 4370 nil nil nil nil #s(yas--field 7 4372 4378 nil nil nil nil #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil))))))) #s(yas--field 7 4372 4378 nil nil nil nil #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil)))))) #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil))))) #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil)))) #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil))) #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil))) #s(yas--exit 4413 nil) 55 nil #s(yas--field 2 4335 4340 nil nil nil nil #s(yas--field 3 4342 4347 nil nil nil nil #s(yas--field 4 4349 4354 nil nil nil nil #s(yas--field 5 4356 4362 nil nil nil nil #s(yas--field 6 4364 4370 nil nil nil nil #s(yas--field 7 4372 4378 nil nil nil nil #s(yas--field 8 4380 4385 nil nil nil nil #s(yas--field 9 4387 4394 nil nil nil nil #s(yas--field 10 4396 4402 nil nil nil nil #s(yas--field 11 4404 4412 nil nil nil nil #s(yas--exit 4413 nil))))))))))) nil nil)) (4320 . 4413) (#("log_purge(${1:ctx}, ${2:guild}, ${3:limit}, ${4:total}, ${5:inlast}, ${6:author}, ${7:before}, ${8:after}, ${9:pattern}, ${10:reason}, ${11:messages})$0" 0 152 (fontified nil)) . 4320) (4320 . 4472) (#("purge" 0 5 (fontified nil)) . 4320) (4320 . 4325) (#("log_purge(…)" 0 12 (fontified nil)) . -4320) (4320 . 4332) (#("purge" 0 5 (fontified t)) . -4320) (undo-tree-id6 . -5) 4325 (4318 . 4325) (4311 . 4318) (#(";" 0 1 (fontified t)) . -4311) (undo-tree-id7 . -1) 4312 (4308 . 4312) (#("l" 0 1 (fontified t)) . -4308) (undo-tree-id8 . -1) (#("o" 0 1 (fontified t)) . -4309) (undo-tree-id9 . -1) (#("g" 0 1 (fontified t)) . -4310) (undo-tree-id10 . -1) (#(":" 0 1 (fontified t)) . -4311) (undo-tree-id11 . -1) (#(":" 0 1 (fontified t)) . -4312) (undo-tree-id12 . -1) 4313 (4308 . 4313) (4307 . 4308) (#("	" 0 1 (fontified nil)) . 4306) (undo-tree-id13 . -1) (4305 . 4308) (t 25818 26874 582563 43000)) nil (25818 27316 453624 238000) 0 nil])
([nil nil ((595 . 601) (586 . 595) (#("A" 0 1 (face font-lock-string-face fontified t)) . -586) (undo-tree-id14 . -1) 587 (586 . 587) (585 . 587) (564 . 570) (#("r" 0 1 (face font-lock-preprocessor-face fontified t)) . -564) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("e" 0 1 (face font-lock-preprocessor-face fontified t)) . -565) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("q" 0 1 (face font-lock-preprocessor-face fontified t)) . -566) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("u" 0 1 (face font-lock-preprocessor-face fontified t)) . -567) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("i" 0 1 (face font-lock-preprocessor-face fontified t)) . -568) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("r" 0 1 (face font-lock-preprocessor-face fontified t)) . -569) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("e" 0 1 (face font-lock-preprocessor-face fontified t)) . -570) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("d" 0 1 (face font-lock-preprocessor-face fontified t)) . -571) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) 572 (556 . 564) (575 . 579) (554 . 575) (t 25818 27316 455856 755000)) nil (25818 27532 641778 324000) 0 nil])
([nil nil ((4397 . 4400) (t 25818 27532 642503 468000)) nil (25818 28090 644862 53000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -4451) (undo-tree-id47 . -1) 4452 (4451 . 4452) (#("." 0 1 (fontified t)) . -4451) (undo-tree-id48 . -1) 4452 (4450 . 4452) (4443 . 4450) (4440 . 4443) (#(" " 0 1 (fontified t)) . -4440) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("t" 0 1 (fontified t)) . -4441) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("o" 0 1 (fontified t)) . -4442) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("t" 0 1 (fontified t)) . -4443) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("a" 0 1 (fontified t)) . -4444) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("l" 0 1 (fontified t)) . -4445) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) 4446 (4405 . 4407) (#(" " 0 1 (fontified nil)) . 4404) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (4405 . 4406) (4430 . 4432) (#(" " 0 1 (fontified nil)) . 4429) (undo-tree-id83 . -1) (4430 . 4431) (4426 . 4428) (#("id" 0 2 (fontified nil)) . -4426) (4426 . 4428) (4425 . 4426) (apply yas--snippet-revive 4417 4425 #s(yas--snippet nil nil #s(yas--exit 4425 nil) 58 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4425 nil) 58 nil nil nil nil)) (4417 . 4425) (#("unwrap()$0" 0 10 (fontified nil)) . 4417) (4417 . 4427) (#("unwr" 0 4 (fontified nil)) . 4417) (4417 . 4421) (#("unwrap()" 0 8 (fontified nil)) . -4417) (4417 . 4425) (#("unwr" 0 4 (fontified t)) . -4417) (undo-tree-id84 . -4) 4421 (4417 . 4421) (4416 . 4417) (apply yas--snippet-revive 4409 4416 #s(yas--snippet nil nil #s(yas--exit 4416 nil) 57 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4416 nil) 57 nil nil nil nil)) (4409 . 4416) (#("guild()$0" 0 9 (fontified nil)) . 4409) (4409 . 4418) (#("guild()" 0 7 (fontified nil)) . -4409) (4409 . 4416) (4405 . 4409) (#("guild" 0 5 (fontified t)) . 4405) (undo-tree-id85 . 5) (undo-tree-id86 . -4) (undo-tree-id87 . -5) (undo-tree-id88 . -5) (undo-tree-id89 . -5) (undo-tree-id90 . -5) (undo-tree-id91 . -5) (undo-tree-id92 . -5) (undo-tree-id93 . -5) (undo-tree-id94 . -5) (undo-tree-id95 . -5) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -4) (undo-tree-id99 . -4) (undo-tree-id100 . -5) (undo-tree-id101 . -5)) nil (25818 28090 644854 102000) 0 nil])
([nil nil ((4510 . 4511) (t 25818 28090 645784 514000)) nil (25818 28094 656385 182000) 0 nil])
([nil nil ((4453 . 4457) (4451 . 4453) (t 25818 28094 659117 469000)) nil (25818 28102 310733 648000) 0 nil])
([nil nil ((4458 . 4459) (#(" " 0 1 (fontified t)) . -4458) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -4459) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -4460) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -4461) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -4462) (undo-tree-id123 . -1) (undo-tree-id124 . -1) 4463 (4459 . 4463) (t 25818 28102 315783 413000)) nil (25818 28122 481403 474000) 0 nil])
([nil nil ((#("    let reason = reason.unwrap_or_else(|| \"No reason provided.\".to_string());
" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 14 (face font-lock-variable-name-face fontified t) 14 42 (fontified t) 42 62 (face font-lock-string-face fontified t) 62 63 (face font-lock-string-face fontified t) 63 78 (fontified t)) . 1506) (undo-tree-id125 . -60) (undo-tree-id126 . -77) (undo-tree-id127 . -60) (undo-tree-id128 . -60) (undo-tree-id129 . -60) (undo-tree-id130 . -60) (undo-tree-id131 . -60) (undo-tree-id132 . -60) (undo-tree-id133 . -60) (undo-tree-id134 . -60) (undo-tree-id135 . -60) (undo-tree-id136 . -60) (undo-tree-id137 . -60) (undo-tree-id138 . -60) (undo-tree-id139 . -60) (undo-tree-id140 . -78) 1566 (t 25818 28122 482448 177000)) nil (25818 28151 885153 126000) 0 nil])
([nil nil ((4389 . 4391) (#(" " 0 1 (fontified nil)) . 4388) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (4389 . 4390) (apply yas--snippet-revive 4396 4409 #s(yas--snippet nil (#s(yas--field 1 4400 4408 nil nil nil t #s(yas--exit 4409 nil))) #s(yas--exit 4409 nil) 59 nil #s(yas--field 1 4400 4408 nil nil nil t #s(yas--exit 4409 nil)) nil nil)) (4406 . 4408) (#("id" 0 2 (fontified nil)) . -4406) (4406 . 4408) (4401 . 4406) (#("f" 0 1 (fontified nil)) . 4401) (4400 . 4401) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4400 4408 nil nil nil t #s(yas--exit 4409 nil))) #s(yas--exit 4409 nil) 59 nil #s(yas--field 1 4400 4408 nil nil nil t #s(yas--exit 4409 nil)) nil nil)) (4396 . 4402) (#("map(${1:f})$0" 0 13 (fontified nil)) . 4396) (4396 . 4409) (#("map" 0 3 (fontified nil)) . 4396) (4396 . 4399) (#("map(…)" 0 6 (fontified nil)) . -4396) (4396 . 4402) (#("map" 0 3 (fontified t)) . -4396) (undo-tree-id143 . -3) 4399 (4395 . 4399) (t 25818 28151 885778 737000)) nil (25818 28196 417761 135000) 0 nil])
([nil nil ((4429 . 4433) (#("." 0 1 (fontified t)) . -4429) (undo-tree-id144 . -1) 4430 (4419 . 4430) (t 25818 28196 419107 863000)) nil (25818 28252 429983 315000) 0 nil])
([nil nil ((4460 . 4462) (#(" " 0 1 (fontified nil)) . 4459) (undo-tree-id145 . -1) (4460 . 4461) (4444 . 4458) (4437 . 4439) (#(" " 0 1 (fontified nil)) . 4436) (undo-tree-id146 . -1) (4437 . 4438) (4413 . 4415) (#(" " 0 1 (fontified nil)) . 4412) (undo-tree-id147 . -1) (4413 . 4414) (t 25818 28252 429102 571000)) nil (25818 28276 460059 240000) 0 nil])
([nil nil ((4322 . 4323) (t 25818 28276 459100 300000)) nil (25818 28298 378255 147000) 0 nil])
([nil nil ((4492 . 4494) (4482 . 4484) (#(" " 0 1 (fontified nil)) . 4481) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (4482 . 4483) (4472 . 4474) (#(" " 0 1 (fontified nil)) . 4471) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (4472 . 4473) (t 25818 28298 379098 228000)) nil (25818 28314 797824 853000) 0 nil])
([nil nil ((4343 . 4361) (4343 . 4344) (4342 . 4343) (4321 . 4342) (#("s" 0 1 (fontified t)) . -4321) (undo-tree-id160 . -1) (#("." 0 1 (fontified t)) . -4322) (undo-tree-id161 . -1) (#("i" 0 1 (fontified t)) . -4323) (undo-tree-id162 . -1) 4324 (#("t" 0 1 (fontified t)) . -4324) (undo-tree-id163 . -1) (#("e" 0 1 (fontified t)) . -4325) (undo-tree-id164 . -1) (#("r" 0 1 (fontified t)) . -4326) (undo-tree-id165 . -1) 4327 (4318 . 4327) (4297 . 4318) (4296 . 4297) (#("	" 0 1 (fontified nil)) . 4295) (undo-tree-id166 . -1) (4296 . 4297) (4295 . 4296) (t 25818 28314 799096 675000)) nil (25818 28358 997810 227000) 0 nil])
([nil nil ((4361 . 4363) (t 25818 28358 999092 493000)) nil (25818 28364 374901 554000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -4493) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#("i" 0 1 (fontified t)) . -4494) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("d" 0 1 (fontified t)) . -4495) (undo-tree-id175 . -1) (undo-tree-id176 . -1) 4496 (4479 . 4482) (#("-" 0 1 (fontified t)) . -4479) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) 4480 (4479 . 4480) (#("_" 0 1 (fontified t)) . -4479) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (#("d" 0 1 (fontified t)) . -4480) (undo-tree-id183 . -1) 4481 (4479 . 4481) (apply yas--snippet-revive 4642 4706 #s(yas--snippet nil (#s(yas--field 1 4656 4705 nil nil nil t #s(yas--exit 4706 nil))) #s(yas--exit 4706 nil) 60 nil #s(yas--field 1 4656 4705 nil nil nil t #s(yas--exit 4706 nil)) nil nil)) (apply yas--snippet-revive 4673 4705 #s(yas--snippet nil (#s(yas--field 1 4677 4700 nil nil nil t #s(yas--field 2 4702 4704 nil nil nil nil #s(yas--exit 4705 nil))) #s(yas--field 2 4702 4704 nil nil nil nil #s(yas--exit 4705 nil))) #s(yas--exit 4705 nil) 61 nil #s(yas--field 1 4677 4700 nil nil nil t #s(yas--field 2 4702 4704 nil nil nil nil #s(yas--exit 4705 nil))) #s(yas--field 1 4656 4705 nil nil nil t #s(yas--exit 4706 nil)) nil)) (4691 . 4700) (apply yas--snippet-revive 4681 4691 #s(yas--snippet nil nil #s(yas--exit 4691 nil) 62 nil nil #s(yas--field 1 4677 4700 nil nil nil t #s(yas--field 2 4702 4704 nil nil nil nil #s(yas--exit 4705 nil))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4691 nil) 62 nil nil #s(yas--field 1 4677 4700 nil nil nil t #s(yas--field 2 4702 4704 nil nil nil nil #s(yas--exit 4705 nil))) nil)) (4681 . 4691) (#("guild_id()$0" 0 12 (fontified nil)) . 4681) (4681 . 4693) (#("guild" 0 5 (fontified nil)) . 4681) (4681 . 4686) (#("guild_id()" 0 10 (fontified nil)) . -4681) (4681 . 4691) (#("guild" 0 5 (fontified t)) . -4681) (undo-tree-id184 . -5) (undo-tree-id185 . -5) 4686 (4678 . 4686) (#("()" 0 2 (fontified nil)) . 4678) (4677 . 4678) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4677 4700 nil nil nil t #s(yas--field 2 4702 4704 nil nil nil nil #s(yas--exit 4705 nil))) #s(yas--field 2 4702 4704 nil nil nil nil #s(yas--exit 4705 nil))) #s(yas--exit 4705 nil) 61 nil #s(yas--field 1 4677 4700 nil nil nil t #s(yas--field 2 4702 4704 nil nil nil nil #s(yas--exit 4705 nil))) #s(yas--field 1 4656 4705 nil nil nil t #s(yas--exit 4706 nil)) nil)) (4673 . 4684) (#("Log(${1:()}, ${2:()})$0" 0 23 (fontified nil)) . 4673) (4673 . 4696) (#("Log(…)" 0 6 (fontified nil)) . -4673) (4673 . 4679) (4671 . 4673) (37 . 70) (4623 . 4623) (4623 . 4638) (#("Log" 0 3 (fontified nil)) . 4623) (4623 . 4626) (#("LogErrorContext (use crate::log::LogErrorContext)" 0 49 (fontified nil)) . -4623) (4623 . 4672) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -4623) (undo-tree-id186 . -3) 4626 (4624 . 4626) (#("context" 0 7 (fontified nil)) . 4624) (4623 . 4624) (1 . 39) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4656 4705 nil nil nil t #s(yas--exit 4706 nil))) #s(yas--exit 4706 nil) 60 nil #s(yas--field 1 4656 4705 nil nil nil t #s(yas--exit 4706 nil)) nil nil)) (4571 . 4593) (#("contextualize(${1:context})$0" 0 29 (fontified nil)) . 4571) (4571 . 4600) (#("contex" 0 6 (fontified nil)) . 4571) (4571 . 4577) (#("contextualize(…) (use crate::errors::Contextualizable)" 0 54 (fontified nil)) . -4571) (4571 . 4625) (#("contex" 0 6 (fontified t)) . -4571) (undo-tree-id187 . -6) 4577 (4570 . 4577) (#("
" 0 1 (fontified t)) . -4570) (undo-tree-id188 . -1) (#("." 0 1 (fontified t)) . -4571) (undo-tree-id189 . -1) (#("m" 0 1 (fontified t)) . -4572) (undo-tree-id190 . -1) (#("a" 0 1 (fontified t)) . -4573) (undo-tree-id191 . -1) (#("p" 0 1 (fontified t)) . -4574) (undo-tree-id192 . -1) 4575 (4572 . 4575) (#("		" 0 2 (fontified t)) . -4571) (4573 . 4573) (4573 . 4574) (4570 . 4573) (#("." 0 1 (fontified t)) . -4570) (undo-tree-id193 . -1) (#("m" 0 1 (fontified t)) . -4571) (undo-tree-id194 . -1) 4572 (4571 . 4572) (#("." 0 1 (fontified t)) . -4571) (undo-tree-id195 . -1) 4572 (4570 . 4572) (#("." 0 1 (fontified t)) . -4570) (undo-tree-id196 . -1) 4571 (4570 . 4571) (#("." 0 1 (fontified t)) . -4570) (undo-tree-id197 . -1) (#("." 0 1 (fontified t)) . -4571) (undo-tree-id198 . -1) 4572 (4570 . 4572) (#("." 0 1 (fontified t)) . -4570) (undo-tree-id199 . -1) (#("." 0 1 (fontified t)) . -4571) (undo-tree-id200 . -1) 4572 (4570 . 4572) (4565 . 4570) (#("await" 0 5 (fontified nil)) . -4565) (4565 . 4570) (4564 . 4565) (t 25818 28364 375758 651000)) nil (25818 28727 328078 309000) 0 nil])
([nil nil ((32 . 48) (#("Contex" 0 6 (fontified nil)) . 32) (32 . 38) (#("Contextualizable" 0 16 (fontified nil)) . -32) (32 . 48) (#("Contex" 0 6 (face font-lock-type-face fontified t)) . -32) (undo-tree-id201 . -6) (undo-tree-id202 . -6) 38 (32 . 38) (30 . 32) (21 . 30) (#("CmdRContextualizable" 0 4 (fontified nil) 4 20 (face font-lock-type-face fontified nil)) . 21) (21 . 25) (#("CmdResult" 0 9 (fontified nil)) . -21) (21 . 30) (#("CmdR" 0 4 (face font-lock-type-face fontified t)) . -21) (undo-tree-id203 . -4) (undo-tree-id204 . -4) 25 (21 . 25) (37 . 38) (20 . 20) (20 . 21) (#("u" 0 1 (fontified t)) . -108) (undo-tree-id205 . -1) (#("s" 0 1 (fontified t)) . -109) (undo-tree-id206 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -110) (undo-tree-id207 . -1) (#(" " 0 1 (fontified t)) . -111) (undo-tree-id208 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -112) (undo-tree-id209 . -1) (#("t" 0 1 (face font-lock-constant-face fontified nil)) . -113) (undo-tree-id210 . -1) (#("d" 0 1 (face font-lock-constant-face fontified nil)) . -114) (undo-tree-id211 . -1) (#(":" 0 1 (fontified nil)) . -115) (undo-tree-id212 . -1) (#(":" 0 1 (fontified t)) . -116) (undo-tree-id213 . -1) (#("e" 0 1 (fontified t)) . -117) (undo-tree-id214 . -1) (#("r" 0 1 (fontified t)) . -118) (undo-tree-id215 . -1) (#("r" 0 1 (fontified t)) . -119) (undo-tree-id216 . -1) (#("o" 0 1 (fontified t)) . -120) (undo-tree-id217 . -1) (#("r" 0 1 (fontified t)) . -121) (undo-tree-id218 . -1) (#("s" 0 1 (fontified t)) . -122) (undo-tree-id219 . -1) (#(":" 0 1 (fontified t)) . -123) (undo-tree-id220 . -1) (#(":" 0 1 (fontified t)) . -124) (undo-tree-id221 . -1) 125 (117 . 125) (108 . 117) (107 . 108) (#("{" 0 1 (fontified t)) . -94) (undo-tree-id222 . -1) 95 (#("}" 0 1 (fontified t)) . -107) (undo-tree-id223 . -1) 108 (#("," 0 1 (fontified t)) . -107) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#(" " 0 1 (fontified t)) . -108) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -109) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -110) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -111) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -112) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -113) (undo-tree-id236 . -1) (undo-tree-id237 . -1) 114 (#("." 0 1 (fontified t)) . -4732) (undo-tree-id238 . -1) (undo-tree-id239 . -1) 4733 (4732 . 4733) (apply yas--snippet-revive 4725 4730 #s(yas--snippet nil nil #s(yas--exit 4730 nil) 63 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4730 nil) 63 nil nil nil nil)) (4725 . 4730) (#("Purge$0" 0 7 (fontified nil)) . 4725) (4725 . 4732) (#("Purge" 0 5 (fontified nil)) . -4725) (4725 . 4730) (4723 . 4725) ("::log" . -47) 52 (54 . 60) (69 . 79) (4705 . 4705) (4705 . 4712) (#("LogTyp" 0 6 (fontified nil)) . 4705) (4705 . 4711) (#("LogType (use crate::log::LogType)" 0 33 (fontified nil)) . -4705) (4705 . 4738) (#("LogTyp" 0 6 (face font-lock-type-face fontified t)) . -4705) (undo-tree-id240 . -6) 4711 (4705 . 4711) (#("(" 0 1 (fontified t)) . -4705) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#(")" 0 1 (fontified t)) . -4706) (undo-tree-id243 . -1) (undo-tree-id244 . -1) 4707 (#("
" 0 1 (fontified t)) . -4635) (undo-tree-id245 . -1) (#("	" 0 1 (fontified t)) . -4636) (undo-tree-id246 . -1) (#("	" 0 1 (fontified t)) . -4637) (undo-tree-id247 . -1) 4638 (4644 . 4647) (4635 . 4638) (t 25818 28727 329057 595000)) nil (25818 28846 87256 667000) 0 nil])
([nil nil ((1425 . 1434) (#("CmdResult" 0 3 (fontified nil) 3 9 (face font-lock-type-face fontified nil)) . 1425) (undo-tree-id248 . 6) (1425 . 1428) (#("CmdResult" 0 9 (fontified nil)) . -1425) (1425 . 1434) (#("Cmd" 0 3 (face font-lock-type-face fontified t)) . -1425) (undo-tree-id249 . -3) (undo-tree-id250 . -3) 1428 (1426 . 1428) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1426) (undo-tree-id251 . -1) 1427 (1426 . 1427) (1425 . 1426) (#("," 0 1 (fontified t)) . -1434) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#(" " 0 1 (fontified t)) . -1435) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1436) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1437) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1438) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1439) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1440) (undo-tree-id270 . -1) (undo-tree-id271 . -1) 1441 (t 25818 28846 92379 662000)) nil (25818 28856 232642 245000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -1571) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (apply yas--snippet-revive 1567 1572 #s(yas--snippet nil (#s(yas--field 1 1571 1571 nil nil nil t #s(yas--exit 1572 nil))) #s(yas--exit 1572 nil) 65 nil #s(yas--field 1 1571 1571 nil nil nil t #s(yas--exit 1572 nil)) #s(yas--field 1 1560 1571 nil nil nil t #s(yas--exit 1572 nil)) nil)) (#("(" 0 1 (fontified t)) . -1571) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) 1572 (#("sererr" 0 6 (fontified t)) . 1572) (48 . 55) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1571 1571 nil nil nil t #s(yas--exit 1572 nil))) #s(yas--exit 1572 nil) 65 nil #s(yas--field 1 1571 1571 nil nil nil t #s(yas--exit 1572 nil)) #s(yas--field 1 1560 1571 nil nil nil t #s(yas--exit 1572 nil)) nil)) (1560 . 1572) (#("from(${1:sererr})$0" 0 19 (fontified nil)) . 1560) (undo-tree-id277 . -19) (1560 . 1579) (#("from" 0 4 (fontified nil)) . 1560) (undo-tree-id278 . -4) (1560 . 1564) (#("from(…) (use crate::errors::Error)" 0 34 (fontified nil)) . -1560) (undo-tree-id279 . -34) (1560 . 1594) (#("from" 0 4 (fontified t)) . -1560) (undo-tree-id280 . -4) (undo-tree-id281 . -4) 1564 (1553 . 1564) (#("|" 0 1 (fontified t)) . -1553) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (#("e" 0 1 (fontified t)) . -1554) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("|" 0 1 (fontified t)) . -1555) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (#(" " 0 1 (fontified t)) . -1556) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("e" 0 1 (fontified t)) . -1557) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (#("." 0 1 (fontified t)) . -1558) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) 1559 (1554 . 1559) (#("op" 0 2 (fontified nil)) . 1554) (undo-tree-id300 . -2) (1553 . 1554) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1560 1571 nil nil nil t #s(yas--exit 1572 nil))) #s(yas--exit 1572 nil) 64 nil #s(yas--field 1 1560 1571 nil nil nil t #s(yas--exit 1572 nil)) nil nil)) (1545 . 1556) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 1545) (1545 . 1563) (#("map" 0 3 (fontified nil)) . 1545) (1545 . 1548) (#("map_err(…)" 0 10 (fontified nil)) . -1545) (1545 . 1555) (#("map" 0 3 (fontified t)) . -1545) (undo-tree-id301 . -3) (undo-tree-id302 . -3) 1548 (1544 . 1548) (t 25818 28856 239045 366000)) nil (25818 29003 360261 316000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1561) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (#("m" 0 1 (fontified t)) . -1562) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (#("a" 0 1 (fontified t)) . -1563) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (#("p" 0 1 (fontified t)) . -1564) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (#("_" 0 1 (fontified t)) . -1565) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (#("e" 0 1 (fontified t)) . -1566) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (#("r" 0 1 (fontified nil)) . -1567) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (#("r" 0 1 (fontified nil)) . -1568) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (#("(" 0 1 (fontified t)) . -1569) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1570) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1571) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1572) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1573) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1574) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#(":" 0 1 (fontified t)) . -1575) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#(":" 0 1 (fontified t)) . -1576) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (#("f" 0 1 (fontified t)) . -1577) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (#("r" 0 1 (fontified t)) . -1578) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) 1579 (#("o" 0 1 (fontified t)) . -1579) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (#("m" 0 1 (fontified t)) . -1580) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (#(")" 0 1 (fontified t)) . -1581) (undo-tree-id393 . -1) (undo-tree-id394 . 1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (#("." 0 1 (fontified t)) . -1582) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (#("m" 0 1 (fontified t)) . -1583) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (#("a" 0 1 (fontified t)) . -1584) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (#("p" 0 1 (fontified t)) . -1585) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (#("_" 0 1 (fontified t)) . -1586) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (#("e" 0 1 (fontified t)) . -1587) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (#("r" 0 1 (fontified t)) . -1588) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (#("r" 0 1 (fontified t)) . -1589) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (#("(" 0 1 (fontified t)) . -1590) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1591) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1592) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1593) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1594) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1595) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1596) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1597) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1598) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (#(")" 0 1 (fontified t)) . -1599) (undo-tree-id458 . -1) (undo-tree-id459 . -1) 1600 (apply yas--snippet-revive 1583 1600 #s(yas--snippet nil (#s(yas--field 1 1591 1599 nil nil nil t #s(yas--exit 1600 nil))) #s(yas--exit 1600 nil) 66 nil #s(yas--field 1 1591 1599 nil nil nil t #s(yas--exit 1600 nil)) nil nil)) (55 . 65) (1581 . 1581) (1581 . 1589) (#("OptE" 0 4 (fontified nil)) . 1581) (1581 . 1585) (#("OptError (use crate::errors::OptError)" 0 38 (fontified nil)) . -1581) (1581 . 1619) (#("OptE" 0 4 (face font-lock-type-face fontified t)) . -1581) (undo-tree-id460 . -3) (undo-tree-id461 . -4) (undo-tree-id462 . -3) 1585 (1584 . 1585) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1584) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1585) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1586) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (#(":" 0 1 (fontified t)) . -1587) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (#(":" 0 1 (fontified t)) . -1588) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (#("<" 0 1 (fontified t)) . -1589) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) 1590 (1582 . 1590) (#("op" 0 2 (fontified nil)) . 1582) (1581 . 1582) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1591 1599 nil nil nil t #s(yas--exit 1600 nil))) #s(yas--exit 1600 nil) 66 nil #s(yas--field 1 1591 1599 nil nil nil t #s(yas--exit 1600 nil)) nil nil)) (1573 . 1584) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 1573) (1573 . 1591) (#("map" 0 3 (fontified nil)) . 1573) (1573 . 1576) (#("map_err(…)" 0 10 (fontified nil)) . -1573) (1573 . 1583) (#("map" 0 3 (fontified t)) . -1573) (undo-tree-id481 . -3) 1576 (1572 . 1576) (t 25818 29003 359031 398000) (apply yas--snippet-revive 1552 1572 #s(yas--snippet nil (#s(yas--field 1 1560 1571 nil nil nil t #s(yas--exit 1572 nil))) #s(yas--exit 1572 nil) 64 nil #s(yas--field 1 1560 1571 nil nil nil t #s(yas--exit 1572 nil)) nil nil))) nil (25818 29062 350456 598000) 0 nil])
([nil nil ((1577 . 1582) (1561 . 1577) (t 25818 29062 352359 130000)) nil (25818 29069 822004 186000) 0 nil])
([nil nil ((1630 . 1637) (65 . 80) (1602 . 1602) (1602 . 1615) (#("Internal" 0 8 (fontified nil)) . 1602) (undo-tree-id482 . -8) (1602 . 1610) (#("InternalError (use crate::errors::InternalError)" 0 48 (fontified nil)) . -1602) (undo-tree-id483 . -48) (1602 . 1650) (#("Internal" 0 8 (face font-lock-type-face fontified t)) . -1602) (undo-tree-id484 . -8) (undo-tree-id485 . -8) (undo-tree-id486 . -8) 1610 (1604 . 1610) (1599 . 1604) (1591 . 1599) (#("OptE" 0 4 (fontified nil)) . 1591) (undo-tree-id487 . -4) (1591 . 1595) (#("OptError" 0 8 (fontified nil)) . -1591) (undo-tree-id488 . -8) (1591 . 1599) (#("OptE" 0 4 (face font-lock-type-face fontified t)) . -1591) (undo-tree-id489 . -4) (undo-tree-id490 . -4) (undo-tree-id491 . -4) 1595 (1592 . 1595) (#("op" 0 2 (fontified nil)) . 1592) (undo-tree-id492 . -2) (1591 . 1592) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1606 1637 nil nil nil t #s(yas--exit 1638 nil))) #s(yas--exit 1638 nil) 67 nil #s(yas--field 1 1606 1637 nil nil nil t #s(yas--exit 1638 nil)) nil nil)) (1583 . 1594) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 1583) (1583 . 1601) (#("map" 0 3 (fontified nil)) . 1583) (1583 . 1586) (#("map_err(…)" 0 10 (fontified nil)) . -1583) (1583 . 1593) (#("map" 0 3 (fontified t)) . -1583) (undo-tree-id493 . -3) 1586 (1582 . 1586) (t 25818 29069 835691 753000)) nil (25818 29488 641658 827000) 0 nil])
([nil nil ((1643 . 1644) (1621 . 1629) (1617 . 1621) (t 25818 29488 645651 976000) (apply yas--snippet-revive 1598 1638 #s(yas--snippet nil (#s(yas--field 1 1606 1637 nil nil nil t #s(yas--exit 1638 nil))) #s(yas--exit 1638 nil) 67 nil #s(yas--field 1 1606 1637 nil nil nil t #s(yas--exit 1638 nil)) nil nil))) nil (25818 29507 945813 724000) 0 nil])
([nil nil ((80 . 93) (1617 . 1617) (1617 . 1628) (#("WithContext" 0 11 (fontified nil)) . 1617) (1617 . 1628) (#("WithContext (use crate::errors::WithContext)" 0 44 (fontified nil)) . -1617) (1617 . 1661) (#("WithContext" 0 11 (face font-lock-type-face fontified t)) . -1617) (undo-tree-id494 . -10) (undo-tree-id495 . -11) (undo-tree-id496 . -11) 1628 (1627 . 1628) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1627) (undo-tree-id497 . -1) (undo-tree-id498 . -1) 1628 (t 25818 29507 948983 474000)) nil (25818 29523 870655 919000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1666) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) 1667 (1666 . 1667) (t 25818 29523 872315 293000)) nil (25818 33310 815182 328000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1610) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (#("m" 0 1 (fontified t)) . -1611) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (#("a" 0 1 (fontified t)) . -1612) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (#("p" 0 1 (fontified t)) . -1613) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (#("_" 0 1 (fontified t)) . -1614) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (#("e" 0 1 (fontified t)) . -1615) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (#("r" 0 1 (fontified nil)) . -1616) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (#("r" 0 1 (fontified nil)) . -1617) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (#("(" 0 1 (fontified nil)) . -1618) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (#("O" 0 1 (face font-lock-type-face fontified nil)) . -1619) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -1620) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1621) (undo-tree-id521 . -1) 1622 (#("E" 0 1 (face font-lock-type-face fontified t)) . -1622) (undo-tree-id522 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1623) (undo-tree-id523 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1624) (undo-tree-id524 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1625) (undo-tree-id525 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1626) (undo-tree-id526 . -1) (#(":" 0 1 (fontified t)) . -1627) (undo-tree-id527 . -1) (#(":" 0 1 (fontified t)) . -1628) (undo-tree-id528 . -1) (#("<" 0 1 (fontified t)) . -1629) (undo-tree-id529 . -1) (#("W" 0 1 (face font-lock-type-face fontified t)) . -1630) (undo-tree-id530 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1631) (undo-tree-id531 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1632) (undo-tree-id532 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -1633) (undo-tree-id533 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1634) (undo-tree-id534 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1635) (undo-tree-id535 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1636) (undo-tree-id536 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1637) (undo-tree-id537 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1638) (undo-tree-id538 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -1639) (undo-tree-id539 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1640) (undo-tree-id540 . -1) (#("<" 0 1 (fontified nil)) . -1641) (undo-tree-id541 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -1642) (undo-tree-id542 . -1) 1643 (#("n" 0 1 (face font-lock-type-face fontified t)) . -1643) (undo-tree-id543 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1644) (undo-tree-id544 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1645) (undo-tree-id545 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1646) (undo-tree-id546 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1647) (undo-tree-id547 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1648) (undo-tree-id548 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1649) (undo-tree-id549 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1650) (undo-tree-id550 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1651) (undo-tree-id551 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1652) (undo-tree-id552 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1653) (undo-tree-id553 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1654) (undo-tree-id554 . -1) (#(">" 0 1 (fontified t)) . -1655) (undo-tree-id555 . -1) (#(">" 0 1 (fontified t)) . -1656) (undo-tree-id556 . -1) (#(":" 0 1 (fontified t)) . -1657) (undo-tree-id557 . -1) (#(":" 0 1 (fontified t)) . -1658) (undo-tree-id558 . -1) (#("f" 0 1 (fontified nil)) . -1659) (undo-tree-id559 . -1) (#("r" 0 1 (fontified t)) . -1660) (undo-tree-id560 . -1) (#("o" 0 1 (fontified t)) . -1661) (undo-tree-id561 . -1) (#("m" 0 1 (fontified t)) . -1662) (undo-tree-id562 . -1) (#(")" 0 1 (fontified t)) . -1663) (undo-tree-id563 . -1) 1664) nil (25818 33310 815151 584000) 0 nil])
([nil nil ((1589 . 1592) (t 25818 33310 822759 563000)) nil (25818 33314 950910 447000) 0 nil])
([nil nil ((1919 . 1924) (apply yas--snippet-revive 1920 1940 #s(yas--snippet nil (#s(yas--field 1 1928 1939 nil nil nil t #s(yas--exit 1940 nil))) #s(yas--exit 1940 nil) 78 nil #s(yas--field 1 1928 1939 nil nil nil t #s(yas--exit 1940 nil)) nil nil)) (1929 . 1939) (#("op" 0 2 (fontified nil)) . 1929) (undo-tree-id569 . -2) (1928 . 1929) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1928 1939 nil nil nil t #s(yas--exit 1940 nil))) #s(yas--exit 1940 nil) 78 nil #s(yas--field 1 1928 1939 nil nil nil t #s(yas--exit 1940 nil)) nil nil)) (1920 . 1931) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 1920) (1920 . 1938) (#("map" 0 3 (fontified nil)) . 1920) (1920 . 1923) (#("map_err(…)" 0 10 (fontified nil)) . -1920) (1920 . 1930) (#("map" 0 3 (fontified t)) . -1920) (undo-tree-id570 . -3) 1923 (1919 . 1923) (t 25818 33314 956092 567000)) nil (25818 33330 708190 739000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1941) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (#("." 0 1 (fontified t)) . -1942) (undo-tree-id580 . -1) (undo-tree-id581 . -1) 1943 (1937 . 1943) (#("f" 0 1 (fontified t)) . -1937) (undo-tree-id582 . -1) 1938 (1920 . 1924) (#("            " 0 12 (fontified t)) . 1920) (apply yas--snippet-revive 1933 1947 #s(yas--snippet nil (#s(yas--field 1 1945 1946 nil nil nil nil #s(yas--exit 1947 nil))) #s(yas--exit 1947 nil) 79 nil #s(yas--field 1 1945 1946 nil nil nil nil #s(yas--exit 1947 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1945 1946 nil nil nil nil #s(yas--exit 1947 nil))) #s(yas--exit 1947 nil) 79 nil #s(yas--field 1 1945 1946 nil nil nil nil #s(yas--exit 1947 nil)) nil nil)) (1933 . 1947) (#("inspect_err(${1:f})$0" 0 21 (fontified nil)) . 1933) (1933 . 1954) (#("inspe" 0 5 (fontified nil)) . 1933) (1933 . 1938) (#("inspect_err(…)" 0 14 (fontified nil)) . -1933) (1933 . 1947) (#("inspe" 0 5 (fontified t)) . -1933) (undo-tree-id583 . -5) 1938 (1933 . 1938) (1920 . 1932) (#("				" 0 4 (fontified t)) . -1920) 1924 (1924 . 1924) (1924 . 1925) (1919 . 1924) (t 25818 33330 716091 335000)) nil (25818 38793 109548 63000) 0 nil])
([nil nil ((#("				.inspect_err(|e| )
" 0 4 (fontified t) 4 5 (fontified t) 5 22 (fontified t) 22 23 (fontified t)) . 1920) (undo-tree-id573 . 2) (undo-tree-id574 . -22) (undo-tree-id575 . -21) (undo-tree-id576 . -20) (undo-tree-id577 . 2) 1940) nil (25818 38793 109538 412000) 0 nil])
([nil nil ((2363 . 2367) (apply yas--snippet-revive 2364 2384 #s(yas--snippet nil (#s(yas--field 1 2372 2383 nil nil nil t #s(yas--exit 2384 nil))) #s(yas--exit 2384 nil) 85 nil #s(yas--field 1 2372 2383 nil nil nil t #s(yas--exit 2384 nil)) nil nil)) (2373 . 2383) (#("op" 0 2 (fontified nil)) . 2373) (undo-tree-id571 . -2) (2372 . 2373) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2372 2383 nil nil nil t #s(yas--exit 2384 nil))) #s(yas--exit 2384 nil) 85 nil #s(yas--field 1 2372 2383 nil nil nil t #s(yas--exit 2384 nil)) nil nil)) (2364 . 2375) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 2364) (2364 . 2382) (#("map" 0 3 (fontified nil)) . 2364) (2364 . 2367) (#("map_err(…)" 0 10 (fontified nil)) . -2364) (2364 . 2374) (#("map" 0 3 (fontified t)) . -2364) (undo-tree-id572 . -3) 2367 (2363 . 2367)) nil (25818 38793 109530 563000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2006) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (#(" " 0 1 (fontified t)) . -2007) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (#(" " 0 1 (fontified t)) . -2008) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (#(" " 0 1 (fontified t)) . -2009) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (#(" " 0 1 (fontified t)) . -2010) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (#(" " 0 1 (fontified t)) . -2011) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (#(" " 0 1 (fontified t)) . -2012) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (#(" " 0 1 (fontified t)) . -2013) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (#(" " 0 1 (fontified t)) . -2014) (undo-tree-id619 . -1) 2015 (apply yas--snippet-revive 2025 2044 #s(yas--snippet nil (#s(yas--field 1 2029 2043 nil nil nil t #s(yas--exit 2044 nil))) #s(yas--exit 2044 nil) 86 nil #s(yas--field 1 2029 2043 nil nil nil t #s(yas--exit 2044 nil)) nil nil)) (2030 . 2043) (#("other" 0 5 (fontified nil)) . 2030) (2029 . 2030) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2029 2043 nil nil nil t #s(yas--exit 2044 nil))) #s(yas--exit 2044 nil) 86 nil #s(yas--field 1 2029 2043 nil nil nil t #s(yas--exit 2044 nil)) nil nil)) (2025 . 2035) (#("zip(${1:other})$0" 0 17 (fontified nil)) . 2025) (2025 . 2042) (#("zip" 0 3 (fontified nil)) . 2025) (2025 . 2028) (#("zip(…)" 0 6 (fontified nil)) . -2025) (2025 . 2031) (#("zip" 0 3 (fontified t)) . -2025) (undo-tree-id620 . -3) 2028 (2024 . 2028) (t 25818 38793 110715 113000)) nil (25818 38915 5664 275000) 0 nil])
([nil nil ((2063 . 2064) (#("b" 0 1 (fontified t)) . -2062) (undo-tree-id601 . -1) (undo-tree-id602 . -1) 2063 (2058 . 2063)) nil (25818 38915 5649 909000) 0 nil])
([nil nil ((#("        && after
            .as_ref()
            .is_some_and(|a| a.channel_id != ctx.channel_id())
" 0 102 (fontified t)) . 2100) (undo-tree-id597 . -101) (undo-tree-id598 . -101) (undo-tree-id599 . -101) (undo-tree-id600 . -101) 2201) nil (25818 38915 5647 66000) 0 nil])
([nil nil ((2096 . 2102) (#(" " 0 1 (fontified t)) . -2096) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) 2097 (2088 . 2097) (2087 . 2088) (2066 . 2087)) nil (25818 38915 5640 58000) 0 nil])
([nil nil ((2652 . 2660) (2651 . 2652) (apply yas--snippet-revive 2631 2652 #s(yas--snippet nil (#s(yas--field 1 2643 2651 nil nil nil t #s(yas--exit 2652 nil))) #s(yas--exit 2652 nil) 90 nil #s(yas--field 1 2643 2651 nil nil nil t #s(yas--exit 2652 nil)) nil nil)) (2649 . 2651) (#("id" 0 2 (fontified nil)) . -2649) (2649 . 2651) (2648 . 2649) (#(" " 0 1 (fontified t)) . -2648) (undo-tree-id621 . -1) (undo-tree-id622 . -1) 2649 (2647 . 2649) (2644 . 2647) (#("f" 0 1 (fontified nil)) . 2644) (2643 . 2644) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2643 2651 nil nil nil t #s(yas--exit 2652 nil))) #s(yas--exit 2652 nil) 90 nil #s(yas--field 1 2643 2651 nil nil nil t #s(yas--exit 2652 nil)) nil nil)) (2631 . 2645) (#("is_some_and(${1:f})$0" 0 21 (fontified nil)) . 2631) (2631 . 2652) (#("is_some_and(…)" 0 14 (fontified nil)) . -2631) (2631 . 2645) (2630 . 2631) (apply yas--snippet-revive 2585 2632 #s(yas--snippet nil (#s(yas--field 1 2596 2631 nil nil nil t #s(yas--exit 2632 nil))) #s(yas--exit 2632 nil) 87 nil #s(yas--field 1 2596 2631 nil nil nil t #s(yas--exit 2632 nil)) nil nil)) (apply yas--snippet-revive 2610 2631 #s(yas--snippet nil (#s(yas--field 1 2616 2630 nil nil nil t #s(yas--exit 2631 nil))) #s(yas--exit 2631 nil) 88 nil #s(yas--field 1 2616 2630 nil nil nil t #s(yas--exit 2631 nil)) #s(yas--field 1 2596 2631 nil nil nil t #s(yas--exit 2632 nil)) nil)) (apply yas--snippet-revive 2622 2630 #s(yas--snippet nil nil #s(yas--exit 2630 nil) 89 nil nil #s(yas--field 1 2616 2630 nil nil nil t #s(yas--exit 2631 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2630 nil) 89 nil nil #s(yas--field 1 2616 2630 nil nil nil t #s(yas--exit 2631 nil)) nil)) (2622 . 2630) (#("as_ref()$0" 0 10 (fontified nil)) . 2622) (2622 . 2632) (#("as_" 0 3 (fontified nil)) . 2622) (2622 . 2625) (#("as_ref()" 0 8 (fontified nil)) . -2622) (2622 . 2630) (#("as_" 0 3 (fontified t)) . -2622) (undo-tree-id623 . -2) (undo-tree-id624 . -3) 2625 (2616 . 2625) (#("m" 0 1 (fontified t)) . -2616) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (#("s" 0 1 (fontified t)) . -2617) (undo-tree-id627 . -1) (undo-tree-id628 . -1) 2618 (#("g" 0 1 (fontified t)) . -2618) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (#("." 0 1 (fontified t)) . -2619) (undo-tree-id631 . -1) (undo-tree-id632 . -1) 2620 (2617 . 2620) (#("t" 0 1 (fontified nil)) . 2617) (2616 . 2617) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2616 2630 nil nil nil t #s(yas--exit 2631 nil))) #s(yas--exit 2631 nil) 88 nil #s(yas--field 1 2616 2630 nil nil nil t #s(yas--exit 2631 nil)) #s(yas--field 1 2596 2631 nil nil nil t #s(yas--exit 2632 nil)) nil)) (2610 . 2618) (#("ready(${1:t})$0" 0 15 (fontified nil)) . 2610) (2610 . 2625) (#("read" 0 4 (fontified nil)) . 2610) (2610 . 2614) (#("ready(…)" 0 8 (fontified nil)) . -2610) (2610 . 2618) (#("read" 0 4 (fontified t)) . -2610) (undo-tree-id633 . -4) 2614 (2597 . 2614) (#("f" 0 1 (fontified nil)) . 2597) (2596 . 2597) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2596 2631 nil nil nil t #s(yas--exit 2632 nil))) #s(yas--exit 2632 nil) 87 nil #s(yas--field 1 2596 2631 nil nil nil t #s(yas--exit 2632 nil)) nil nil)) (2585 . 2598) (#("take_while(${1:f})$0" 0 20 (fontified nil)) . 2585) (2585 . 2605) (#("take_" 0 5 (fontified nil)) . 2585) (2585 . 2590) (#("take_while(…) (as StreamExt)" 0 28 (fontified nil)) . -2585) (2585 . 2613) (#("take_" 0 5 (fontified t)) . -2585) (undo-tree-id634 . -5) 2590 (2585 . 2590) (2576 . 2584) (#("		" 0 2 (fontified t)) . -2576) 2578 (2578 . 2578) (2578 . 2579) (2575 . 2578) (t 25818 38915 7510 977000)) nil (25818 39143 443994 371000) 0 nil])
([nil nil ((2585 . 2589) (#("." 0 1 (fontified t)) . -2575) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (#("t" 0 1 (fontified t)) . -2576) (undo-tree-id637 . -1) (#("r" 0 1 (fontified t)) . -2577) (undo-tree-id638 . -1) (#("y" 0 1 (face font-lock-keyword-face fontified t)) . -2578) (undo-tree-id639 . -1) (#("_" 0 1 (fontified t)) . -2579) (undo-tree-id640 . -1) (#("t" 0 1 (fontified t)) . -2580) (undo-tree-id641 . -1) (#("a" 0 1 (fontified t)) . -2581) (undo-tree-id642 . -1) (#("k" 0 1 (fontified t)) . -2582) (undo-tree-id643 . -1) 2583 (2575 . 2583) (t 25818 39143 444340 698000)) nil (25818 39167 240511 620000) 0 nil])
([nil nil ((2600 . 2605) (t 25818 39167 241019 716000)) nil (25818 39197 98287 973000) 0 nil])
([nil nil ((2668 . 2669) (2620 . 2623) (#("m" 0 1 (fontified t)) . -2600) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (#("o" 0 1 (fontified t)) . -2601) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (#("v" 0 1 (fontified t)) . -2602) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -2603) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (#(" " 0 1 (fontified t)) . -2604) (undo-tree-id652 . -1) (undo-tree-id653 . -1) 2605 (#("
" 0 1 (fontified t)) . -2672) (undo-tree-id654 . -1) (#("	" 0 1 (fontified t)) . -2673) (undo-tree-id655 . -1) (#("	" 0 1 (fontified t)) . -2674) (undo-tree-id656 . -1) 2675 (2672 . 2675) (t 25818 39197 97700 867000) 2604) nil (25818 39241 606849 650000) 0 nil])
([nil nil ((3710 . 3714) (3714 . 3718) (3710 . 3727) (t 25818 39241 607720 462000)) nil (25818 39284 767752 730000) 0 nil])
([nil nil ((3811 . 3815) (apply yas--snippet-revive 3812 3832 #s(yas--snippet nil (#s(yas--field 1 3820 3831 nil nil nil t #s(yas--exit 3832 nil))) #s(yas--exit 3832 nil) 91 nil #s(yas--field 1 3820 3831 nil nil nil t #s(yas--exit 3832 nil)) nil nil)) (3821 . 3831) (#("op" 0 2 (fontified nil)) . 3821) (3820 . 3821) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3820 3831 nil nil nil t #s(yas--exit 3832 nil))) #s(yas--exit 3832 nil) 91 nil #s(yas--field 1 3820 3831 nil nil nil t #s(yas--exit 3832 nil)) nil nil)) (3812 . 3823) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 3812) (3812 . 3830) (#("map_" 0 4 (fontified nil)) . 3812) (3812 . 3816) (#("map_err(…)" 0 10 (fontified nil)) . -3812) (3812 . 3822) (#("map_" 0 4 (fontified t)) . -3812) (undo-tree-id657 . -3) (undo-tree-id658 . -4) 3816 (3811 . 3816) (t 25818 39284 767737 377000)) nil (25818 39306 898078 912000) 0 nil])
([nil nil ((4239 . 4245) (apply yas--snippet-revive 4240 4260 #s(yas--snippet nil (#s(yas--field 1 4248 4259 nil nil nil t #s(yas--exit 4260 nil))) #s(yas--exit 4260 nil) 92 nil #s(yas--field 1 4248 4259 nil nil nil t #s(yas--exit 4260 nil)) nil nil)) (4250 . 4259) (4249 . 4250) (#("op" 0 2 (fontified nil)) . 4249) (undo-tree-id659 . -2) (4248 . 4249) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4248 4259 nil nil nil t #s(yas--exit 4260 nil))) #s(yas--exit 4260 nil) 92 nil #s(yas--field 1 4248 4259 nil nil nil t #s(yas--exit 4260 nil)) nil nil)) (4240 . 4251) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 4240) (4240 . 4258) (#("map_" 0 4 (fontified nil)) . 4240) (4240 . 4244) (#("map_err(…)" 0 10 (fontified nil)) . -4240) (4240 . 4250) (#("map_" 0 4 (fontified t)) . -4240) (undo-tree-id660 . -4) 4244 (4239 . 4244) (t 25818 39306 901078 637000)) nil (25818 39321 63227 444000) 0 nil])
([nil nil ((4463 . 4469) (apply yas--snippet-revive 4464 4484 #s(yas--snippet nil (#s(yas--field 1 4472 4483 nil nil nil t #s(yas--exit 4484 nil))) #s(yas--exit 4484 nil) 93 nil #s(yas--field 1 4472 4483 nil nil nil t #s(yas--exit 4484 nil)) nil nil)) (4473 . 4483) (#("op" 0 2 (fontified nil)) . 4473) (undo-tree-id661 . -2) (4472 . 4473) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4472 4483 nil nil nil t #s(yas--exit 4484 nil))) #s(yas--exit 4484 nil) 93 nil #s(yas--field 1 4472 4483 nil nil nil t #s(yas--exit 4484 nil)) nil nil)) (4464 . 4475) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 4464) (4464 . 4482) (#("map" 0 3 (fontified nil)) . 4464) (4464 . 4467) (#("map_err(…)" 0 10 (fontified nil)) . -4464) (4464 . 4474) (#("map" 0 3 (fontified t)) . -4464) (undo-tree-id662 . -3) 4467 (4463 . 4467) (t 25818 39321 64416 788000)) nil (25818 39333 438644 100000) 0 nil])
([nil nil ((4645 . 4648) (apply yas--snippet-revive 4646 4666 #s(yas--snippet nil (#s(yas--field 1 4654 4665 nil nil nil t #s(yas--exit 4666 nil))) #s(yas--exit 4666 nil) 94 nil #s(yas--field 1 4654 4665 nil nil nil t #s(yas--exit 4666 nil)) nil nil)) (4655 . 4665) (#("op" 0 2 (fontified nil)) . 4655) (undo-tree-id663 . -2) (4654 . 4655) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4654 4665 nil nil nil t #s(yas--exit 4666 nil))) #s(yas--exit 4666 nil) 94 nil #s(yas--field 1 4654 4665 nil nil nil t #s(yas--exit 4666 nil)) nil nil)) (4646 . 4657) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 4646) (4646 . 4664) (#("map_" 0 4 (fontified nil)) . 4646) (4646 . 4650) (#("map_err(…)" 0 10 (fontified nil)) . -4646) (4646 . 4656) (#("map_" 0 4 (fontified t)) . -4646) (undo-tree-id664 . -4) 4650 (4645 . 4650) (t 25818 39333 437754 173000)) nil (25818 39384 215997 629000) 0 nil])
([nil nil ((4856 . 4858) (#(" " 0 1 (fontified nil)) . 4855) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (4856 . 4857) (4841 . 4845) (4826 . 4830) (4827 . 4835) (#("try_into" 0 8 (fontified nil)) . 4827) (4827 . 4835) (#("try_into (as TryInto)" 0 21 (fontified nil)) . -4827) (4827 . 4848) (#("try_into" 0 8 (fontified t)) . -4827) (undo-tree-id667 . -4) (undo-tree-id668 . -8) (undo-tree-id669 . -8) 4835 (4833 . 4835) (#("o" 0 1 (fontified t)) . -4833) (undo-tree-id670 . -1) 4834 (4831 . 4834) (#("f" 0 1 (fontified t)) . -4831) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (#("i" 0 1 (fontified t)) . -4832) (undo-tree-id673 . -1) (#("n" 0 1 (fontified t)) . -4833) (undo-tree-id674 . -1) 4834 (4832 . 4834) (#("r" 0 1 (fontified t)) . -4832) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (#("o" 0 1 (fontified t)) . -4833) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (#("m" 0 1 (fontified t)) . -4834) (undo-tree-id679 . -1) 4835 (4838 . 4846) (#("i" 0 1 (fontified t)) . -4838) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -4839) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (#("t" 0 1 (fontified t)) . -4840) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (#("o" 0 1 (fontified t)) . -4841) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (#("(" 0 1 (fontified t)) . -4842) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (#(")" 0 1 (fontified t)) . -4843) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) 4844 (4826 . 4844) (t 25818 39384 221102 699000)) nil (25818 39655 396190 803000) 0 nil])
([nil nil ((2692 . 2693) (#("m" 0 1 (fontified t)) . -2692) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (#("o" 0 1 (fontified t)) . -2693) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (#("v" 0 1 (fontified t)) . -2694) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (#("e" 0 1 (fontified t)) . -2695) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (#(" " 0 1 (fontified t)) . -2696) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (#("|" 0 1 (fontified t)) . -2697) (undo-tree-id713 . -1) 2698 (t 25818 39655 397818 488000)) nil (25818 39671 266505 520000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -2785) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (#("o" 0 1 (fontified t)) . -2786) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (#("v" 0 1 (fontified t)) . -2787) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -2788) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (#(" " 0 1 (fontified t)) . -2789) (undo-tree-id725 . -1) (undo-tree-id726 . -1) 2790 (t 25818 39671 271153 359000)) nil (25818 39676 114915 541000) 0 nil])
([nil nil ((2565 . 2567) (2560 . 2565) (#("f" 0 1 (fontified nil)) . 2560) (undo-tree-id727 . -1) (2559 . 2560) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2559 2567 nil nil nil t #s(yas--exit 2568 nil))) #s(yas--exit 2568 nil) 96 nil #s(yas--field 1 2559 2567 nil nil nil t #s(yas--exit 2568 nil)) nil nil)) (2555 . 2561) (#("map(${1:f})$0" 0 13 (fontified nil)) . 2555) (2555 . 2568) (#("map" 0 3 (fontified nil)) . 2555) (2555 . 2558) (#("map(…)" 0 6 (fontified nil)) . -2555) (2555 . 2561) (#("map" 0 3 (fontified t)) . -2555) (undo-tree-id728 . -3) (undo-tree-id729 . -3) 2558 (2554 . 2558) (apply yas--snippet-revive 2546 2554 #s(yas--snippet nil nil #s(yas--exit 2554 nil) 95 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2554 nil) 95 nil nil nil nil)) (2546 . 2554) (#("as_ref()$0" 0 10 (fontified nil)) . 2546) (2546 . 2556) (#("as_" 0 3 (fontified nil)) . 2546) (2546 . 2549) (#("as_ref()" 0 8 (fontified nil)) . -2546) (2546 . 2554) (#("as_" 0 3 (fontified t)) . -2546) (undo-tree-id730 . -3) (undo-tree-id731 . -3) 2549 (2545 . 2549) (t 25818 39676 117820 472000)) nil (25818 39702 673877 664000) 0 nil])
([nil nil ((apply yas--snippet-revive 2555 2568 #s(yas--snippet nil (#s(yas--field 1 2559 2567 nil nil nil t #s(yas--exit 2568 nil))) #s(yas--exit 2568 nil) 96 nil #s(yas--field 1 2559 2567 nil nil nil t #s(yas--exit 2568 nil)) nil nil))) nil (25818 39723 401630 661000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -1713) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) 1714 (1684 . 1693) (t 25818 39702 674489 384000)) nil (25818 39723 401626 706000) 0 nil])
([nil nil ((5078 . 5079) (t 25818 39723 404490 914000)) nil (25818 39739 706422 982000) 0 nil])
([nil nil ((5133 . 5134) (5126 . 5132) (5125 . 5126) (5112 . 5125) (#("InternalE" 0 9 (fontified nil)) . 5112) (5112 . 5121) (#("InternalError" 0 13 (fontified nil)) . -5112) (5112 . 5125) (#("InternalE" 0 9 (face font-lock-type-face fontified t)) . -5112) (undo-tree-id739 . -9) (undo-tree-id740 . -9) 5121 (5109 . 5121) (5101 . 5109) (#("Opt" 0 3 (fontified nil)) . 5101) (5101 . 5104) (#("OptError" 0 8 (fontified nil)) . -5101) (5101 . 5109) (#("Opt" 0 3 (face font-lock-type-face fontified t)) . -5101) (undo-tree-id741 . -3) 5104 (5101 . 5104) (#("f" 0 1 (fontified t)) . -5101) (undo-tree-id742 . -1) 5102 (5078 . 5081) (apply yas--snippet-revive 5079 5100 #s(yas--snippet nil (#s(yas--field 1 5098 5099 nil nil nil nil #s(yas--exit 5100 nil))) #s(yas--exit 5100 nil) 102 nil #s(yas--field 1 5098 5099 nil nil nil nil #s(yas--exit 5100 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5098 5099 nil nil nil nil #s(yas--exit 5100 nil))) #s(yas--exit 5100 nil) 102 nil #s(yas--field 1 5098 5099 nil nil nil nil #s(yas--exit 5100 nil)) nil nil)) (5079 . 5100) (#("map_contextualized(${1:f})$0" 0 28 (fontified nil)) . 5079) (5079 . 5107) (#("map" 0 3 (fontified nil)) . 5079) (5079 . 5082) (#("map_contextualized(…) (as Contextualizable)" 0 43 (fontified nil)) . -5079) (5079 . 5122) (#("map" 0 3 (fontified t)) . -5079) (undo-tree-id743 . -3) 5082 (5078 . 5082) (#("?" 0 1 (face rust-question-mark fontified t)) . -5078) (undo-tree-id744 . -1) (undo-tree-id745 . -1) 5079 (t 25818 39739 707825 320000)) nil (25818 39979 873239 21000) 0 nil])
([nil nil ((5124 . 5137) (#("Intern" 0 6 (fontified nil)) . 5124) (5124 . 5130) (#("InternalError" 0 13 (fontified nil)) . -5124) (5124 . 5137) (#("Intern" 0 6 (face font-lock-type-face fontified t)) . -5124) (undo-tree-id746 . -6) (undo-tree-id747 . -6) (undo-tree-id748 . -6) (undo-tree-id749 . -6) (undo-tree-id750 . -6) (undo-tree-id751 . -6) (undo-tree-id752 . -6) 5130 (5124 . 5130) (apply yas--snippet-revive 5112 5125 #s(yas--snippet nil nil #s(yas--exit 5124 nil) 103 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5124 nil) 103 nil nil nil nil)) (5112 . 5125) (#("WithContext<$0>" 0 15 (fontified nil)) . 5112) (5112 . 5127) (#("WithContextInternalError" 0 11 (fontified nil) 11 24 (face font-lock-type-face fontified nil)) . 5112) (undo-tree-id753 . 13) (5112 . 5123) (#("WithContext<…>" 0 14 (fontified nil)) . -5112) (5112 . 5126) (#("WithContext" 0 11 (face font-lock-type-face fontified t)) . -5112) (undo-tree-id754 . -11) (undo-tree-id755 . -11) 5123 (5112 . 5123) (t 25818 39979 884496 585000)) nil (25818 40000 523073 617000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . 5137) (undo-tree-id794 . 1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (t 25818 40000 531162 828000)) nil (25818 40024 473223 239000) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-type-face fontified t)) . -5112) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -5113) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -5114) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -5115) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -5116) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -5117) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -5118) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -5119) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -5120) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -5121) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -5122) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (#("<" 0 1 (fontified t)) . -5123) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) 5124) nil (25818 40024 473198 814000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1485) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) 1486 (1485 . 1486) (t 25818 40024 481162 204000)) nil (25818 44298 585342 194000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1752) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) 1753 (1752 . 1753) (t 25818 44298 592765 665000)) nil (25818 44326 201480 698000) 0 nil])
([nil nil ((apply yas--snippet-revive 5123 5155 #s(yas--snippet nil (#s(yas--field 1 5131 5154 nil nil nil t #s(yas--exit 5155 nil))) #s(yas--exit 5155 nil) 113 nil #s(yas--field 1 5131 5154 nil nil nil t #s(yas--exit 5155 nil)) nil nil)) (5151 . 5154) (5147 . 5148) (5131 . 5147) (5132 . 5134) (#("content" 0 7 (fontified nil)) . 5132) (5131 . 5132) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5131 5154 nil nil nil t #s(yas--exit 5155 nil))) #s(yas--exit 5155 nil) 113 nil #s(yas--field 1 5131 5154 nil nil nil t #s(yas--exit 5155 nil)) nil nil)) (5123 . 5139) (#("content(${1:content})$0" 0 23 (fontified nil)) . 5123) (5123 . 5146) (#("content(…)" 0 10 (fontified nil)) . -5123) (5123 . 5133) (5121 . 5123) (5096 . 5098) (#("r" 0 1 (fontified t)) . -5097) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (#("r" 0 1 (fontified t)) . -5098) (undo-tree-id814 . -1) (undo-tree-id815 . -1) 5099 (5098 . 5099) (5097 . 5098) (5117 . 5119) (#("|" 0 1 (fontified t)) . -5117) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (#(" " 0 1 (fontified t)) . -5118) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (#("e" 0 1 (fontified t)) . -5119) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (#("." 0 1 (fontified t)) . -5120) (undo-tree-id822 . -1) (undo-tree-id823 . -1) 5121 (5120 . 5121) (#("." 0 1 (fontified t)) . -5120) (undo-tree-id824 . -1) (undo-tree-id825 . -1) 5121 (apply yas--snippet-revive 5105 5122 #s(yas--snippet nil (#s(yas--field 1 5110 5113 nil nil nil nil #s(yas--field 2 5115 5121 nil nil nil t #s(yas--exit 5122 nil))) #s(yas--field 2 5115 5121 nil nil nil t #s(yas--exit 5122 nil))) #s(yas--exit 5122 nil) 112 nil #s(yas--field 2 5115 5121 nil nil nil t #s(yas--exit 5122 nil)) nil nil)) (5116 . 5121) (#("builder" 0 7 (fontified nil)) . 5116) (5115 . 5116) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5110 5113 nil nil nil nil #s(yas--field 2 5115 5121 nil nil nil t #s(yas--exit 5122 nil))) #s(yas--field 2 5115 5121 nil nil nil t #s(yas--exit 5122 nil))) #s(yas--exit 5122 nil) 112 nil #s(yas--field 2 5115 5121 nil nil nil t #s(yas--exit 5122 nil)) nil nil)) (5105 . 5123) (#("edit(${1:ctx}, ${2:builder})$0" 0 30 (fontified nil)) . 5105) (5105 . 5135) (#("edit(…)" 0 7 (fontified nil)) . -5105) (5105 . 5112) (5101 . 5105) (5098 . 5101) (#("c" 0 1 (fontified t)) . -5098) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (#("t" 0 1 (fontified t)) . -5099) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (#("x" 0 1 (fontified t)) . -5100) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (#("." 0 1 (fontified t)) . -5101) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (#("e" 0 1 (fontified t)) . -5102) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (#("d" 0 1 (fontified t)) . -5103) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (#("i" 0 1 (fontified t)) . -5104) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (#("t" 0 1 (fontified t)) . -5105) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (#("(" 0 1 (fontified t)) . -5106) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (#(")" 0 1 (fontified t)) . -5107) (undo-tree-id844 . -1) 5108 (5102 . 5108) (5098 . 5102) (#("e" 0 1 (fontified t)) . -5098) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (#("." 0 1 (fontified t)) . -5099) (undo-tree-id847 . -1) (undo-tree-id848 . -1) 5100 (5094 . 5100) (#("f" 0 1 (fontified t)) . -5094) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (#("\\" 0 1 (fontified t)) . -5095) (undo-tree-id852 . -1) (undo-tree-id853 . -1) 5096 (5095 . 5096) (5078 . 5081) (apply yas--snippet-revive 5079 5093 #s(yas--snippet nil (#s(yas--field 1 5091 5092 nil nil nil nil #s(yas--exit 5093 nil))) #s(yas--exit 5093 nil) 111 nil #s(yas--field 1 5091 5092 nil nil nil nil #s(yas--exit 5093 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5091 5092 nil nil nil nil #s(yas--exit 5093 nil))) #s(yas--exit 5093 nil) 111 nil #s(yas--field 1 5091 5092 nil nil nil nil #s(yas--exit 5093 nil)) nil nil)) (5079 . 5093) (#("inspect_err(${1:f})$0" 0 21 (fontified nil)) . 5079) (5079 . 5100) (#("inspect_err(…)" 0 14 (fontified nil)) . -5079) (5079 . 5093) (5078 . 5079) (t 25818 44326 206068 210000)) nil (25818 44514 566266 70000) 0 nil])
([nil nil ((5162 . 5163) (5100 . 5105) (t 25818 44514 572528 425000)) nil (25818 44530 472384 90000) 0 nil])
([nil nil ((275 . 287) (#("Try" 0 3 (fontified nil)) . 275) (275 . 278) (#("TryFutureExt" 0 12 (fontified nil)) . -275) (275 . 287) (#("Try" 0 3 (face font-lock-type-face fontified t)) . -275) (undo-tree-id854 . -3) 278 (273 . 278) (#("
" 0 1 (fontified t)) . -566) (undo-tree-id855 . -1) (#("u" 0 1 (fontified t)) . -567) (undo-tree-id856 . -1) (#("s" 0 1 (fontified t)) . -568) (undo-tree-id857 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -569) (undo-tree-id858 . -1) (#(" " 0 1 (fontified t)) . -570) (undo-tree-id859 . -1) (#("f" 0 1 (face font-lock-constant-face fontified nil)) . -571) (undo-tree-id860 . -1) (#("u" 0 1 (face font-lock-constant-face fontified nil)) . -572) (undo-tree-id861 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -573) (undo-tree-id862 . -1) (#("u" 0 1 (face font-lock-constant-face fontified t)) . -574) (undo-tree-id863 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -575) (undo-tree-id864 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -576) (undo-tree-id865 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -577) (undo-tree-id866 . -1) 578 (571 . 578) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -571) (undo-tree-id867 . -1) 572 (567 . 572) (566 . 567) (#("." 0 1 (fontified t)) . -3142) (undo-tree-id868 . -1) 3143 (3142 . 3143) (#("
" 0 1 (fontified t)) . -3142) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (#(" " 0 1 (fontified t)) . -3143) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (#(" " 0 1 (fontified t)) . -3144) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (#(" " 0 1 (fontified t)) . -3145) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (#(" " 0 1 (fontified t)) . -3146) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (#(" " 0 1 (fontified t)) . -3147) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (#(" " 0 1 (fontified t)) . -3148) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (#(" " 0 1 (fontified t)) . -3149) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (#(" " 0 1 (fontified t)) . -3150) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (#("." 0 1 (fontified t)) . -3151) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (#("a" 0 1 (fontified t)) . -3152) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (#("w" 0 1 (fontified t)) . -3153) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (#("a" 0 1 (fontified t)) . -3154) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (#("i" 0 1 (fontified t)) . -3155) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -3156) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (#("?" 0 1 (face rust-question-mark fontified t)) . -3157) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (#(";" 0 1 (fontified t)) . -3158) (undo-tree-id901 . -1) (undo-tree-id902 . -1) 3159 (4773 . 4774) (4764 . 4773) (#("l" 0 1 (face font-lock-constant-face fontified t)) . -4764) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -4765) (undo-tree-id905 . -1) (undo-tree-id906 . -1) 4766 (4764 . 4766) (#("." 0 1 (fontified t)) . -5161) (undo-tree-id907 . -1) (undo-tree-id908 . -1) 5162 (5161 . 5162) (t 25818 44530 489197 374000)) nil (25818 45121 176106 434000) 0 nil])
([nil nil ((3156 . 3157) (#("." 0 1 (fontified t)) . -3156) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) 3157 (3156 . 3157) (#("." 0 1 (fontified t)) . -3156) (undo-tree-id917 . -1) 3157 (3156 . 3157) (t 25818 45121 207299 704000)) nil (25818 45140 856527 647000) 0 nil])
([nil nil ((2989 . 2992) (2969 . 2989) (2960 . 2968) (#("		" 0 2 (fontified t)) . -2960) 2962 (2962 . 2962) (2962 . 2963) (2959 . 2962) (t 25818 45140 857320 730000)) nil (25818 46560 863755 909000) 0 nil])
([nil nil ((#("        .try_collect::<Vec<_>>();
" 0 18 (fontified t) 18 23 (fontified t) 23 26 (face font-lock-type-face fontified t) 26 33 (fontified t) 33 34 (fontified t)) . 3157) (undo-tree-id934 . -32) (undo-tree-id935 . -33) (undo-tree-id936 . -31) 3188) nil (25818 46560 863754 292000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 3032)) nil (25818 46560 863751 451000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 3032)) nil (25818 46560 863750 707000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 3032)) nil (25818 46560 863750 57000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . 3032)) nil (25818 46560 863748 963000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 3032)) nil (25818 46560 863748 245000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 3139) (undo-tree-id932 . -1) (undo-tree-id933 . -1)) nil (25818 46560 863747 395000) 0 nil])
([nil nil ((3139 . 3145)) nil (25818 46560 863745 267000) 0 nil])
([nil nil ((#("  .inspect_err(|_| {
            handle.edit(ctx, |m| {
                m.content(\"An error occurred while reading messages\")
            }).await
        })

" 0 21 (fontified t) 21 33 (fontified t) 33 56 (fontified t) 56 82 (fontified t) 82 124 (face font-lock-string-face fontified t) 124 126 (fontified t) 126 141 (fontified t) 141 146 (face font-lock-keyword-face fontified t) 146 147 (fontified t) 147 158 (fontified t) 158 159 (fontified t)) . 2999) (undo-tree-id918 . -158) (undo-tree-id919 . 158) (undo-tree-id920 . -158) (undo-tree-id921 . -158) (undo-tree-id922 . -158) (undo-tree-id923 . 13) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -158) (undo-tree-id930 . -158) (undo-tree-id931 . -159) 3157) nil (25818 46560 863743 493000) 0 nil])
([nil nil ((2992 . 2999) (#("  " 0 2 (fontified t)) . -3001) 3052) nil (25818 46560 863723 458000) 0 nil])
([nil nil ((2992 . 2995) (#("    " 0 2 (fontified t) 2 4 (fontified t)) . -3004) (undo-tree-id937 . -2) (undo-tree-id938 . -2) (undo-tree-id939 . 2) (undo-tree-id940 . -2) (undo-tree-id941 . -2) 3038 (t 25818 46560 864100 886000)) nil (25818 46570 953498 387000) 0 nil])
([nil nil ((3001 . 3002) (t 25818 46570 960764 310000)) nil (25818 46575 950455 314000) 0 nil])
([nil nil ((4653 . 4656) (660 . 662) (#("	" 0 1 (fontified nil)) . -661) (undo-tree-id942 . -1) (662 . 663) (660 . 662) (651 . 660) (630 . 651) (#("s" 0 1 (fontified t)) . -630) (undo-tree-id943 . -1) (#("t" 0 1 (fontified t)) . -631) (undo-tree-id944 . -1) 632 (630 . 632) (629 . 631) (t 25818 46575 967427 81000)) nil (25818 47431 541785 162000) 0 nil])
([nil nil ((#("		.inspect_err(|err| drop(handle.edit(ctx, |e| e.content(format!(\"Error: {err}\")))))
" 0 57 (fontified t) 57 64 (face rust-builtin-formatting-macro fontified t) 64 65 (fontified t) 65 73 (face font-lock-string-face fontified t) 73 78 (face rust-string-interpolation fontified t) 78 79 (face font-lock-string-face fontified t) 79 85 (fontified t)) . 4971) (undo-tree-id48 . -28) (undo-tree-id49 . -28) (undo-tree-id50 . -28) (undo-tree-id51 . -28) (undo-tree-id52 . -28) (undo-tree-id53 . -28) (undo-tree-id54 . -28) (undo-tree-id55 . -28) (undo-tree-id56 . -28) (undo-tree-id57 . -28) (undo-tree-id58 . -28) (undo-tree-id59 . -28) (undo-tree-id60 . -85) (undo-tree-id61 . -84) 4999 (t 25818 47431 542734 226000)) nil (25823 43333 974698 889000) 0 nil])
([nil nil ((5082 . 5083) (5077 . 5082) (#("await" 0 5 (fontified nil)) . -5077) (5077 . 5082) (5076 . 5077) (5059 . 5062) (4994 . 4996) (apply yas--snippet-revive 5016 5071 #s(yas--snippet nil (#s(yas--field 1 5021 5061 nil nil nil t #s(yas--field 2 5063 5070 nil nil nil nil #s(yas--exit 5071 nil))) #s(yas--field 2 5063 5070 nil nil nil nil #s(yas--exit 5071 nil))) #s(yas--exit 5071 nil) 0 nil #s(yas--field 1 5021 5061 nil nil nil t #s(yas--field 2 5063 5070 nil nil nil nil #s(yas--exit 5071 nil))) nil nil)) (apply yas--snippet-revive 5032 5061 #s(yas--snippet nil (#s(yas--field 1 5040 5060 nil nil nil t #s(yas--exit 5061 nil))) #s(yas--exit 5061 nil) 1 nil #s(yas--field 1 5040 5060 nil nil nil t #s(yas--exit 5061 nil)) #s(yas--field 1 5021 5061 nil nil nil t #s(yas--field 2 5063 5070 nil nil nil nil #s(yas--exit 5071 nil))) nil)) (5048 . 5059) (5040 . 5049) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -5040) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 5041 (#("content" 0 7 (fontified nil)) . 5041) (5040 . 5041) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5040 5060 nil nil nil t #s(yas--exit 5061 nil))) #s(yas--exit 5061 nil) 1 nil #s(yas--field 1 5040 5060 nil nil nil t #s(yas--exit 5061 nil)) #s(yas--field 1 5021 5061 nil nil nil t #s(yas--field 2 5063 5070 nil nil nil nil #s(yas--exit 5071 nil))) nil)) (5032 . 5048) (#("content(${1:content})$0" 0 23 (fontified nil)) . 5032) (5032 . 5055) (#("content(…)" 0 10 (fontified nil)) . -5032) (5032 . 5042) (5027 . 5032) (#("e" 0 1 (fontified t)) . -5027) (undo-tree-id2 . -1) (#("|" 0 1 (fontified t)) . -5028) (undo-tree-id3 . -1) (#(" " 0 1 (fontified t)) . -5029) (undo-tree-id4 . -1) (#("e" 0 1 (fontified t)) . -5030) (undo-tree-id5 . -1) (#("." 0 1 (fontified t)) . -5031) (undo-tree-id6 . -1) 5032 (5022 . 5032) (#("ctx" 0 3 (fontified nil)) . 5022) (5021 . 5022) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5021 5061 nil nil nil t #s(yas--field 2 5063 5070 nil nil nil nil #s(yas--exit 5071 nil))) #s(yas--field 2 5063 5070 nil nil nil nil #s(yas--exit 5071 nil))) #s(yas--exit 5071 nil) 0 nil #s(yas--field 1 5021 5061 nil nil nil t #s(yas--field 2 5063 5070 nil nil nil nil #s(yas--exit 5071 nil))) nil nil)) (5016 . 5034) (#("edit(${1:ctx}, ${2:builder})$0" 0 30 (fontified nil)) . 5016) (5016 . 5046) (#("edit" 0 4 (fontified nil)) . 5016) (5016 . 5020) (#("edit(…)" 0 7 (fontified nil)) . -5016) (5016 . 5023) (#("edit" 0 4 (fontified t)) . -5016) (undo-tree-id7 . -4) 5020 (5009 . 5020) (#("c" 0 1 (fontified t)) . -5009) (undo-tree-id8 . -1) (#("t" 0 1 (fontified t)) . -5010) (undo-tree-id9 . -1) (#("x" 0 1 (fontified t)) . -5011) (undo-tree-id10 . -1) (#("." 0 1 (fontified t)) . -5012) (undo-tree-id11 . -1) 5013 (5009 . 5013) (#("d" 0 1 (fontified t)) . -5009) (undo-tree-id12 . -1) (#("r" 0 1 (fontified t)) . -5010) (undo-tree-id13 . -1) (#("o" 0 1 (fontified t)) . -5011) (undo-tree-id14 . -1) (#("p" 0 1 (fontified t)) . -5012) (undo-tree-id15 . -1) 5013 (5009 . 5013) (5008 . 5010) (#(" " 0 1 (fontified t)) . -5009) (undo-tree-id16 . -1) (#(" " 0 1 (fontified t)) . -5010) (undo-tree-id17 . -1) 5011 (5002 . 5011) (#("o" 0 1 (fontified t)) . -5002) (undo-tree-id18 . -1) 5003 (4996 . 5003) (#("c" 0 1 (fontified t)) . -4996) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("t" 0 1 (fontified t)) . -4997) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("x" 0 1 (fontified t)) . -4998) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("." 0 1 (fontified t)) . -4999) (undo-tree-id25 . -1) (undo-tree-id26 . -1) 5000 (4999 . 5000) (#("." 0 1 (fontified t)) . -4999) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 5000 (4996 . 5000) (#("{" 0 1 (fontified t)) . -4996) (undo-tree-id29 . -1) 4997 (4994 . 4997) (#("\\" 0 1 (fontified t)) . -4994) (undo-tree-id30 . -1) 4995 (4992 . 4995) (#("$" 0 1 (fontified t)) . -4992) (undo-tree-id31 . -1) (#("{" 0 1 (fontified t)) . -4993) (undo-tree-id32 . -1) (#("1" 0 1 (fontified t)) . -4994) (undo-tree-id33 . -1) (#(":" 0 1 (fontified t)) . -4995) (undo-tree-id34 . -1) (#("i" 0 1 (fontified t)) . -4996) (undo-tree-id35 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -4997) (undo-tree-id36 . -1) (#("s" 0 1 (fontified t)) . -4998) (undo-tree-id37 . -1) (#("p" 0 1 (fontified t)) . -4999) (undo-tree-id38 . -1) (#("e" 0 1 (fontified t)) . -5000) (undo-tree-id39 . -1) (#("c" 0 1 (fontified t)) . -5001) (undo-tree-id40 . -1) (#("t" 0 1 (fontified t)) . -5002) (undo-tree-id41 . -1) (#("o" 0 1 (fontified t)) . -5003) (undo-tree-id42 . -1) (#("r" 0 1 (fontified t)) . -5004) (undo-tree-id43 . -1) (#("}" 0 1 (fontified t)) . -5005) (undo-tree-id44 . -1) 5006 (4971 . 4973) (#("$" 0 1 (fontified t)) . -5005) (undo-tree-id45 . -1) (#("0" 0 1 (fontified t)) . -5006) (undo-tree-id46 . -1) 5007 (4972 . 5007) (#("inspect_err_" 0 12 (fontified nil)) . 4972) (4972 . 4984) (#("inspect_err_async(…) (use crate::errors::AsyncInspectErr)" 0 57 (fontified nil)) . -4972) (4972 . 5029) (#("inspect_err_" 0 12 (fontified t)) . -4972) (undo-tree-id47 . -12) 4984 (4972 . 4984) (#("		" 0 2 (fontified t)) . -4971) (4973 . 4973) (4973 . 4974) (4970 . 4973)) nil (25823 43333 974630 365000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -5066) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#(" " 0 1 (fontified t)) . -5067) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("b" 0 1 (fontified t)) . -5068) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("u" 0 1 (fontified t)) . -5069) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("i" 0 1 (fontified t)) . -5070) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("l" 0 1 (fontified t)) . -5071) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("d" 0 1 (fontified t)) . -5072) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("e" 0 1 (fontified t)) . -5073) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("r" 0 1 (fontified t)) . -5074) (undo-tree-id84 . -1) 5075 (#("
" 0 1 (fontified t)) . -5086) (undo-tree-id85 . -1) (#("	" 0 1 (fontified t)) . -5087) (undo-tree-id86 . -1) (#("	" 0 1 (fontified t)) . -5088) (undo-tree-id87 . -1) 5089 (5086 . 5089) (t 25823 43333 990881 466000) 5075) nil (25823 43360 307904 42000) 0 nil])
([nil nil ((93 . 110) (t 25823 43360 320881 70000)) nil (25823 43369 857234 493000) 0 nil])
([nil nil ((5094 . 5097) (5095 . 5100) (#("await" 0 5 (fontified nil)) . -5095) (5095 . 5100) (5094 . 5095) (t 25823 43369 870880 932000)) nil (25823 63659 999902 383000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -5028) (undo-tree-id88 . -1) (undo-tree-id89 . -1) 5029 (5028 . 5029) (t 25823 63660 12393 78000)) nil (25823 63690 803241 212000) 0 nil])
([nil nil ((5095 . 5096) (5028 . 5033) (t 25823 63690 809030 160000)) nil (25823 63942 376663 963000) 0 nil])
([nil nil ((4695 . 4696) (apply yas--snippet-revive 4677 4695 #s(yas--snippet nil nil #s(yas--exit 4695 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4695 nil) 2 nil nil nil nil)) (4677 . 4695) (#("serenity_context()$0" 0 20 (fontified nil)) . 4677) (4677 . 4697) (#("sere" 0 4 (fontified nil)) . 4677) (4677 . 4681) (#("serenity_context()" 0 18 (fontified nil)) . -4677) (4677 . 4695) (#("sere" 0 4 (fontified t)) . -4677) (undo-tree-id90 . -4) 4681 (4660 . 4681) (4658 . 4660) (t 25823 63942 385476 798000)) nil (25823 64210 649722 324000) 0 nil])
([nil nil ((5083 . 5086) (t 25823 64210 658605 625000)) nil (25823 64224 857362 334000) 0 nil])
([nil nil ((5085 . 5086) (#("x" 0 1 (fontified t)) . 5085) (undo-tree-id93 . -1)) nil (25823 64224 857360 34000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t)) . 5085) (undo-tree-id91 . -1) (undo-tree-id92 . -1)) nil (25823 64224 857354 330000) 0 nil])
([nil nil ((5085 . 5086)) nil (25823 64224 857334 990000) 0 nil])
([nil nil ((#("	let serctx = ctx.serenity_context();
" 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 11 (face font-lock-variable-name-face fontified t) 11 18 (fontified t) 18 37 (fontified t) 37 38 (fontified t)) . 4659) (undo-tree-id104 . -24) (undo-tree-id105 . -37) (undo-tree-id106 . 2) (undo-tree-id107 . -35) (undo-tree-id108 . -35) (undo-tree-id109 . -24) (undo-tree-id110 . -24) (undo-tree-id111 . -24) (undo-tree-id112 . -24) (undo-tree-id113 . -37) (undo-tree-id114 . -37) (undo-tree-id115 . -37) (undo-tree-id116 . -37) (undo-tree-id117 . -37) (undo-tree-id118 . -37) (undo-tree-id119 . -37) (undo-tree-id120 . -37) (undo-tree-id121 . -36) (undo-tree-id122 . -36) (undo-tree-id123 . -36) (undo-tree-id124 . -36) (undo-tree-id125 . -36) (undo-tree-id126 . -36) (undo-tree-id127 . -36) (undo-tree-id128 . -36) (undo-tree-id129 . -36) (undo-tree-id130 . -35) (undo-tree-id131 . -35) (undo-tree-id132 . -35) (undo-tree-id133 . -35) (undo-tree-id134 . -35) (undo-tree-id135 . -35) (undo-tree-id136 . -35) (undo-tree-id137 . -38) 4694 (t 25823 64224 878595 390000)) nil (25823 64247 869583 573000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -5045) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("e" 0 1 (fontified t)) . -5046) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("r" 0 1 (fontified t)) . -5047) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) 5048) nil (25823 64247 869461 4000) 0 nil])
([nil nil ((5009 . 5014) (t 25823 64247 895245 593000)) nil (25823 64290 57935 461000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -5009) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("o" 0 1 (fontified t)) . -5010) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("v" 0 1 (fontified t)) . -5011) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -5012) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#(" " 0 1 (fontified t)) . -5013) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) 5014 (t 25823 64290 65215 751000)) nil (25823 64296 719420 236000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 5028) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (t 25823 64296 728544 405000)) nil (25824 51697 219587 275000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 5028) (undo-tree-id74 . -1) (undo-tree-id75 . -1)) nil (25824 51697 219581 326000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 5028) (undo-tree-id72 . -1) (undo-tree-id73 . -1)) nil (25824 51697 219578 131000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . 5028) (undo-tree-id70 . -1) (undo-tree-id71 . -1)) nil (25824 51697 219574 683000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 5028) (undo-tree-id68 . -1) (undo-tree-id69 . -1)) nil (25824 51697 219570 424000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -5090) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#(";" 0 1 (fontified t)) . -5091) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) 5092) nil (25824 51697 219562 236000) 0 nil])
([nil nil ((5090 . 5091)) nil (25824 51697 219425 969000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -5094) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) 5095 (5094 . 5095) (t 25824 51697 315996 536000)) nil (25826 7021 25663 260000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -5094) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 5095 (5094 . 5095) (t 25826 7021 27827 903000)) nil (25826 7567 171522 971000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -803) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) 804 (803 . 804) (t 25826 7567 192682 767000)) nil (25826 34465 347176 377000) 0 nil])
([nil nil ((5008 . 5010) (110 . 130) (4989 . 4989) (4989 . 4999) (#("repor" 0 5 (fontified nil)) . 4989) (4989 . 4994) (#("report_err (use crate::errors::AsyncInspectFmtErr)" 0 50 (fontified nil)) . -4989) (4989 . 5039) (#("repor" 0 5 (fontified t)) . -4989) (undo-tree-id89 . -5) 4994 (4989 . 4994) (#("		" 0 2 (fontified t)) . -4988) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (4990 . 4990) (4990 . 4991) (#("." 0 1 (fontified t)) . -4990) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("i" 0 1 (fontified t)) . -4991) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -4992) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("s" 0 1 (fontified t)) . -4993) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("p" 0 1 (fontified nil)) . -4994) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("e" 0 1 (fontified t)) . -4995) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("c" 0 1 (fontified t)) . -4996) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("t" 0 1 (fontified t)) . -4997) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("_" 0 1 (fontified t)) . -4998) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("e" 0 1 (fontified t)) . -4999) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("r" 0 1 (fontified t)) . -5000) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("r" 0 1 (fontified t)) . -5001) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("_" 0 1 (fontified t)) . -5002) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("a" 0 1 (fontified t)) . -5003) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("s" 0 1 (fontified t)) . -5004) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("y" 0 1 (fontified t)) . -5005) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("n" 0 1 (fontified t)) . -5006) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("c" 0 1 (fontified t)) . -5007) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) 5008 (t 25826 34465 349866 123000)) nil (25827 22221 837933 235000) 0 nil])
([nil nil ((117 . 118) ("Insp" . 117) (122 . 125) ("ctFm" . 122) 130 (t 25827 22221 839277 550000)) nil (25827 22274 890438 154000) 0 nil])
([nil nil ((#("A" 0 1 (face font-lock-type-face fontified t)) . -95) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -96) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -97) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -98) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -99) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -100) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -101) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -102) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -103) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -104) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -105) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -106) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -107) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -108) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -109) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#("," 0 1 (fontified t)) . -110) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (#(" " 0 1 (fontified t)) . -111) (undo-tree-id193 . -1) 112) nil (25827 22274 890430 327000) 0 nil])
([nil nil ((5087 . 5088) (#(")" 0 1 (fontified t)) . -5088) (undo-tree-id194 . -1) 5089 (5088 . 5089) (5020 . 5025) (t 25827 22274 893807 468000)) nil (25827 22796 279744 463000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-constant-face fontified t)) . -4659) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -4660) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -4661) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (#(" " 0 1 (fontified t)) . -4662) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -4663) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -4664) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (#("g" 0 1 (face font-lock-variable-name-face fontified t)) . -4665) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -4666) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -4667) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -4668) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (#(" " 0 1 (fontified t)) . -4669) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (#("=" 0 1 (fontified t)) . -4670) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#(" " 0 1 (fontified t)) . -4671) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) 4672 (t 25827 22796 284895 987000)) nil (25827 22967 931909 426000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4887) (undo-tree-id368 . -1) (undo-tree-id369 . 1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (#("	" 0 1 (fontified t)) . -4888) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (#("	" 0 1 (fontified t)) . -4889) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) 4890 (4887 . 4890) (t 25827 22967 941890 795000)) nil (25827 22980 992318 591000) 0 nil])
([nil nil ((5043 . 5046) (#("f" 0 1 (fontified t)) . -5043) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (#("o" 0 1 (fontified t)) . -5044) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -5045) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) 5046 (#("m" 0 1 (fontified t)) . -5046) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (#("a" 0 1 (fontified t)) . -5047) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (#("t" 0 1 (fontified t)) . -5048) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (#("!" 0 1 (fontified t)) . -5049) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (#("(" 0 1 (fontified t)) . -5050) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -5051) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#("E" 0 1 (face font-lock-string-face fontified t)) . -5052) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (#("r" 0 1 (face font-lock-string-face fontified nil)) . -5053) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (#("r" 0 1 (face font-lock-string-face fontified nil)) . -5054) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (#("o" 0 1 (face font-lock-string-face fontified nil)) . -5055) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -5056) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (#(":" 0 1 (face font-lock-string-face fontified t)) . -5057) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -5058) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (#("{" 0 1 (face rust-string-interpolation fontified t)) . -5059) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (#("e" 0 1 (face rust-string-interpolation fontified t)) . -5060) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (#("r" 0 1 (face rust-string-interpolation fontified t)) . -5061) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (#("r" 0 1 (face rust-string-interpolation fontified t)) . -5062) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (#("}" 0 1 (face rust-string-interpolation fontified t)) . -5063) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -5064) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (#(")" 0 1 (fontified t)) . -5065) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (#(")" 0 1 (fontified t)) . -5066) (undo-tree-id522 . -1) (undo-tree-id523 . -1) 5067 (t 25827 22980 998381 990000)) nil (25827 36742 377810 250000) 0 nil])
([nil nil ((5054 . 5055) (#("/" 0 1 (fontified t)) . -5058) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) 5059 (5058 . 5059) (t 25827 36742 381675 913000)) nil (25827 36759 975081 902000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -5053) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) 5054 (5053 . 5054) (#("." 0 1 (fontified t)) . -5047) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (#("a" 0 1 (fontified t)) . -5048) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (#("w" 0 1 (fontified t)) . -5049) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (#("a" 0 1 (fontified t)) . -5050) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (#("i" 0 1 (fontified t)) . -5051) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -5052) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) 5053 (t 25827 36759 998349 357000)) nil (25827 36782 274553 439000) 0 nil])
([nil nil ((5049 . 5054) (#("awa" 0 3 (fontified nil)) . 5049) (5049 . 5052) (#("await" 0 5 (fontified nil)) . -5049) (5049 . 5054) (#("awa" 0 3 (fontified t)) . -5049) (undo-tree-id563 . -3) (undo-tree-id564 . -3) (undo-tree-id565 . -3) (undo-tree-id566 . -3) (undo-tree-id567 . -3) (undo-tree-id568 . -3) (undo-tree-id569 . -3) (undo-tree-id570 . -3) (undo-tree-id571 . -3) 5052 (5051 . 5052) (5048 . 5051) (t 25827 36782 298355 369000)) nil (25827 36788 308826 56000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -5030) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (#("a" 0 1 (fontified t)) . -5031) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (#("w" 0 1 (fontified t)) . -5032) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (#("a" 0 1 (fontified t)) . -5033) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (#("i" 0 1 (fontified t)) . -5034) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -5035) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (#(")" 0 1 (fontified t)) . -5036) (undo-tree-id584 . 1) (undo-tree-id585 . -1) (#(";" 0 1 (fontified t)) . -5037) (undo-tree-id586 . -1) (#(" " 0 1 (fontified t)) . -5038) (undo-tree-id587 . -1) (#("}" 0 1 (fontified t)) . -5039) (undo-tree-id588 . -1) 5040 (#("a" 0 1 (fontified t)) . -4994) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (#("s" 0 1 (fontified t)) . -4995) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (#("y" 0 1 (fontified t)) . -4996) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (#("n" 0 1 (fontified t)) . -4997) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (#("c" 0 1 (fontified t)) . -4998) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (#(" " 0 1 (fontified t)) . -4999) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (#("m" 0 1 (fontified t)) . -5000) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (#("o" 0 1 (fontified t)) . -5001) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (#("v" 0 1 (fontified t)) . -5002) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (#("e" 0 1 (fontified t)) . -5003) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (#(" " 0 1 (fontified t)) . -5004) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (#("{" 0 1 (fontified t)) . -5005) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (#(" " 0 1 (fontified t)) . -5006) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (#("d" 0 1 (fontified t)) . -5007) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (#("r" 0 1 (fontified t)) . -5008) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (#("o" 0 1 (fontified t)) . -5009) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (#("p" 0 1 (fontified t)) . -5010) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (#("(" 0 1 (fontified t)) . -5011) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) 5012 (t 25827 36788 338356 519000)) nil (25827 36898 293791 825000) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -5108) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) 5109 (4659 . 4672) (t 25827 36898 301678 132000)) nil (25827 42195 685786 641000) 0 nil])
([nil nil ((#("		.report_err(|err| handle.edit(ctx, |m| m.content(err)))
" 0 2 (fontified t) 2 3 (fontified t) 3 13 (fontified t) 13 20 (fontified t) 20 54 (fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 58 (fontified t)) . 4987) (undo-tree-id719 . -57) (undo-tree-id720 . -20) (undo-tree-id721 . -55) (undo-tree-id722 . -55) (undo-tree-id723 . -20) (undo-tree-id724 . 37) (undo-tree-id725 . -20) (undo-tree-id726 . -20) (undo-tree-id727 . -54) (undo-tree-id728 . -54) (undo-tree-id729 . -54) (undo-tree-id730 . -54) (undo-tree-id731 . -54) (undo-tree-id732 . -54) (undo-tree-id733 . -54) (undo-tree-id734 . -54) (undo-tree-id735 . -54) (undo-tree-id736 . -54) (undo-tree-id737 . -58) 5041 (t 25827 42196 480798 333000)) nil (25827 42204 605039 387000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -5053) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) 5054 (5053 . 5054) (5051 . 5053) (t 25827 42204 607436 15000)) nil (25827 42210 391575 785000) 0 nil])
([nil nil ((#("		.await
" 0 3 (fontified t) 3 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t)) . 4987) (undo-tree-id738 . -8) (undo-tree-id739 . 9) (undo-tree-id740 . -9)) nil (25827 42210 391567 782000) 0 nil])
([nil nil ((5110 . 5111) (#("content" 0 7 (fontified nil)) . 5110) (5109 . 5110) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5109 5125 nil nil nil t #s(yas--exit 5126 nil))) #s(yas--exit 5126 nil) 55 nil #s(yas--field 1 5109 5125 nil nil nil t #s(yas--exit 5126 nil)) nil nil)) (5101 . 5117) (#("content(${1:content})$0" 0 23 (fontified nil)) . 5101) (5101 . 5124) (#("conte" 0 5 (fontified nil)) . 5101) (5101 . 5106) (#("content(…)" 0 10 (fontified nil)) . -5101) (5101 . 5111) (#("conte" 0 5 (fontified t)) . -5101) (undo-tree-id801 . -5) (undo-tree-id802 . -5) 5106 (5095 . 5106) (#("b" 0 1 (fontified t)) . -5095) (undo-tree-id803 . -1) (#("u" 0 1 (fontified t)) . -5096) (undo-tree-id804 . -1) (#("i" 0 1 (fontified t)) . -5097) (undo-tree-id805 . -1) (#("l" 0 1 (fontified t)) . -5098) (undo-tree-id806 . -1) (#("d" 0 1 (fontified t)) . -5099) (undo-tree-id807 . -1) (#("e" 0 1 (fontified t)) . -5100) (undo-tree-id808 . -1) (#("r" 0 1 (fontified t)) . -5101) (undo-tree-id809 . -1) 5102 (5081 . 5084) (#("    " 0 4 (fontified t)) . 5081) (apply yas--snippet-revive 5086 5104 #s(yas--snippet nil (#s(yas--field 1 5091 5094 nil nil nil nil #s(yas--field 2 5096 5103 nil nil nil nil #s(yas--exit 5104 nil))) #s(yas--field 2 5096 5103 nil nil nil nil #s(yas--exit 5104 nil))) #s(yas--exit 5104 nil) 54 nil #s(yas--field 1 5091 5094 nil nil nil nil #s(yas--field 2 5096 5103 nil nil nil nil #s(yas--exit 5104 nil))) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5091 5094 nil nil nil nil #s(yas--field 2 5096 5103 nil nil nil nil #s(yas--exit 5104 nil))) #s(yas--field 2 5096 5103 nil nil nil nil #s(yas--exit 5104 nil))) #s(yas--exit 5104 nil) 54 nil #s(yas--field 1 5091 5094 nil nil nil nil #s(yas--field 2 5096 5103 nil nil nil nil #s(yas--exit 5104 nil))) nil nil)) (5086 . 5104) (#("edit(${1:ctx}, ${2:builder})$0" 0 30 (fontified nil)) . 5086) (5086 . 5116) (#("edit" 0 4 (fontified nil)) . 5086) (5086 . 5090) (#("edit(…)" 0 7 (fontified nil)) . -5086) (5086 . 5093) (#("edit" 0 4 (fontified t)) . -5086) (undo-tree-id810 . -4) 5090 (5086 . 5090) (5081 . 5085) (#("			" 0 3 (fontified t)) . -5081) 5084 (5084 . 5084) (5084 . 5085) (5080 . 5084) (#("." 0 1 (fontified t)) . -5080) (undo-tree-id811 . -1) (#("e" 0 1 (fontified t)) . -5081) (undo-tree-id812 . -1) (#("d" 0 1 (fontified t)) . -5082) (undo-tree-id813 . -1) (#("i" 0 1 (fontified t)) . -5083) (undo-tree-id814 . -1) (#("t" 0 1 (fontified t)) . -5084) (undo-tree-id815 . -1) (#("(" 0 1 (fontified t)) . -5085) (undo-tree-id816 . -1) (#("c" 0 1 (fontified t)) . -5086) (undo-tree-id817 . -1) (#("t" 0 1 (fontified t)) . -5087) (undo-tree-id818 . -1) 5088 (5074 . 5088) (5042 . 5044) (5069 . 5072) (#("	" 0 1 (fontified nil)) . -5071) (undo-tree-id819 . -1) (5072 . 5073) (5069 . 5072) (5051 . 5069) (#("e" 0 1 (fontified t)) . -5051) (undo-tree-id820 . -1) (#("r" 0 1 (fontified t)) . -5052) (undo-tree-id821 . -1) (#("r" 0 1 (fontified t)) . -5053) (undo-tree-id822 . -1) (#(")" 0 1 (fontified t)) . -5054) (undo-tree-id823 . -1) 5055 (5047 . 5055) (5045 . 5047) (5044 . 5045) (t 25827 42210 394082 59000)) nil (25827 42786 322636 655000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5111 . 5112) (nil fontified nil 5110 . 5112) (5110 . 5112) 5109) nil (25827 42786 322613 819000) 0 nil])
([nil nil ((5126 . 5131) (#("f" 0 1 (face font-lock-string-face fontified t)) . -5126) (undo-tree-id790 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -5127) (undo-tree-id791 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -5128) (undo-tree-id792 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -5129) (undo-tree-id793 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -5130) (undo-tree-id794 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -5131) (undo-tree-id795 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -5132) (undo-tree-id796 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -5133) (undo-tree-id797 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -5134) (undo-tree-id798 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -5135) (undo-tree-id799 . -1) 5136 (5126 . 5136) (5122 . 5124) (apply yas--snippet-revive 5101 5126 #s(yas--snippet nil (#s(yas--field 1 5109 5125 nil nil nil t #s(yas--exit 5126 nil))) #s(yas--exit 5126 nil) 55 nil #s(yas--field 1 5109 5125 nil nil nil t #s(yas--exit 5126 nil)) nil nil)) (5113 . 5115) (5112 . 5122) (#(" " 0 1 (face font-lock-string-face fontified t)) . -5111) (undo-tree-id800 . -1) 5112 (5111 . 5112)) nil (25827 42786 322610 638000) 0 nil])
([nil nil ((4906 . 4907) (#("
		.contextualize(LogErrorContext::Log(ctx.guild_id().unwrap(), LogType::Purge))
		.map_contextualized(OptError::<InternalError>::from)" 0 1 (fontified t) 1 18 (fontified t) 18 33 (face font-lock-type-face fontified t) 33 35 (fontified t) 35 38 (face font-lock-type-face fontified t) 38 64 (fontified t) 64 71 (face font-lock-type-face fontified t) 71 73 (fontified t) 73 78 (face font-lock-type-face fontified t) 78 81 (fontified t) 81 103 (fontified t) 103 111 (face font-lock-type-face fontified t) 111 113 (fontified t) 113 114 (fontified t) 114 116 (face font-lock-type-face fontified t) 116 127 (face font-lock-type-face fontified t) 127 128 (fontified t) 128 135 (fontified t)) . 4906) (undo-tree-id780 . -135) (undo-tree-id781 . -81) (undo-tree-id782 . -81) (undo-tree-id783 . -81) (undo-tree-id784 . -81) (undo-tree-id785 . 54) (undo-tree-id786 . -81) (undo-tree-id787 . -81) (undo-tree-id788 . -135) (undo-tree-id789 . -135)) nil (25827 42786 322601 369000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 4906)) nil (25827 42786 322593 755000) 0 nil])
([nil nil ((#("			" 0 3 (fontified t)) . -5146) (undo-tree-id746 . -1) 5147 (#("			" 0 3 (fontified t)) . -5141) (undo-tree-id747 . -1) 5142 (#("			" 0 3 (fontified t)) . -5137) (#("			" 0 3 (fontified t)) . -5109) (undo-tree-id748 . -1) 5116 (#("	" 0 1 (fontified t)) . -5088) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (#("	" 0 1 (fontified t)) . -5089) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (#("	" 0 1 (fontified t)) . -5090) (undo-tree-id753 . -1) 5091 (#("r" 0 1 (fontified t)) . -5135) (undo-tree-id754 . -1) 5136 (#("a" 0 1 (fontified t)) . -5147) (undo-tree-id755 . -1) (#("r" 0 1 (fontified t)) . -5148) (undo-tree-id756 . -1) (#("." 0 1 (fontified t)) . -5149) (undo-tree-id757 . -1) 5150 (5147 . 5150) (5139 . 5147) (5146 . 5147) (5139 . 5146) (5133 . 5135) (5136 . 5137) (5137 . 5143) (5140 . 5142) (5109 . 5115) (5133 . 5134) (5108 . 5109) (5130 . 5131) (5107 . 5107) (5107 . 5108) (#("		  " 0 4 (face font-lock-string-face fontified nil)) . -5068) (5068 . 5069) (#("	" 0 1 (face font-lock-string-face fontified nil)) . 5068) (5065 . 5068) 5063 (#("
" 0 1 (fontified t)) . -4966) (undo-tree-id758 . -1) (#("	" 0 1 (fontified t)) . -4967) (undo-tree-id759 . -1) (#("	" 0 1 (fontified t)) . -4968) (undo-tree-id760 . -1) (#("	" 0 1 (fontified t)) . -4969) (undo-tree-id761 . -1) (#("	" 0 1 (fontified t)) . -4970) (undo-tree-id762 . -1) 4971 (#("	" 0 1 (fontified t)) . -4971) 4970 (4962 . 4965) (#(" " 0 1 (fontified nil)) . 4961) (undo-tree-id763 . -1) (4962 . 4963) (4961 . 4962) (5133 . 5134) (4960 . 4960) (4960 . 4961) (apply yas--snippet-revive 5111 5131 #s(yas--snippet nil (#s(yas--field 1 5126 5130 nil nil nil t #s(yas--exit 5131 nil))) #s(yas--exit 5131 nil) 57 nil #s(yas--field 1 5126 5130 nil nil nil t #s(yas--exit 5131 nil)) nil nil)) (5127 . 5130) (#("row" 0 3 (fontified nil)) . 5127) (5126 . 5127) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5126 5130 nil nil nil t #s(yas--exit 5131 nil))) #s(yas--exit 5131 nil) 57 nil #s(yas--field 1 5126 5130 nil nil nil t #s(yas--exit 5131 nil)) nil nil)) (5111 . 5130) (#("add_action_row(${1:row})$0" 0 26 (fontified nil)) . 5111) (5111 . 5137) (#("add_action_row(…)" 0 17 (fontified nil)) . -5111) (5111 . 5128) (5105 . 5111) (#("f" 0 1 (fontified t)) . -5105) (undo-tree-id764 . -1) 5106 (5092 . 5093) (#("  " 0 2 (fontified t)) . 5092) 5106 (#("		  " 0 4 (face font-lock-string-face fontified nil)) . -5070) (5070 . 5071) (#("	" 0 1 (face font-lock-string-face fontified nil)) . 5070) (5068 . 5070) 5066 (4966 . 4967) (#("  " 0 2 (fontified t)) . 4966) (undo-tree-id765 . -2) 4965 (#("
" 0 1 (fontified t)) . -4945) (undo-tree-id766 . -1) (#("	" 0 1 (fontified t)) . -4946) (undo-tree-id767 . -1) (#("	" 0 1 (fontified t)) . -4947) (undo-tree-id768 . -1) (#("	" 0 1 (fontified t)) . -4948) (undo-tree-id769 . -1) 4949 (4965 . 4972) (5088 . 5094) (apply yas--snippet-revive 5089 5102 #s(yas--snippet nil (#s(yas--field 1 5100 5101 nil nil nil nil #s(yas--exit 5102 nil))) #s(yas--exit 5102 nil) 56 nil #s(yas--field 1 5100 5101 nil nil nil nil #s(yas--exit 5102 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5100 5101 nil nil nil nil #s(yas--exit 5102 nil))) #s(yas--exit 5102 nil) 56 nil #s(yas--field 1 5100 5101 nil nil nil nil #s(yas--exit 5102 nil)) nil nil)) (5089 . 5102) (#("components(${1:f})$0" 0 20 (fontified nil)) . 5089) (5089 . 5109) (#("comp" 0 4 (fontified nil)) . 5089) (5089 . 5093) (#("components(…)" 0 13 (fontified nil)) . -5089) (5089 . 5102) (#("comp" 0 4 (fontified t)) . -5089) (undo-tree-id770 . -4) (undo-tree-id771 . -4) 5093 (5089 . 5093) (#("			" 0 3 (fontified t)) . -5088) (5091 . 5091) (5091 . 5092) (5087 . 5091) (5070 . 5085) (5058 . 5070) (5057 . 5058) (5044 . 5057) (#("c" 0 1 (face font-lock-string-face fontified t)) . -5044) (undo-tree-id772 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -5045) (undo-tree-id773 . -1) 5046 (5043 . 5046) (5033 . 5043) (5012 . 5033) (#("A" 0 1 (face font-lock-string-face fontified t)) . -5012) (undo-tree-id774 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -5013) (undo-tree-id775 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -5014) (undo-tree-id776 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -5015) (undo-tree-id777 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -5016) (undo-tree-id778 . -1) 5017 (5013 . 5017) (#("n" 0 1 (face font-lock-string-face fontified t)) . -5013) (undo-tree-id779 . -1) 5014 (5012 . 5014) (4991 . 5007)) nil (25827 42786 322578 629000) 0 nil])
([nil nil ((5143 . 5145) (#("a" 0 1 (fontified t)) . -5143) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (#("r" 0 1 (fontified t)) . -5144) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (#("." 0 1 (fontified t)) . -5145) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) 5146 (5143 . 5146) (5153 . 5154) 5155 (5147 . 5148) 5149 (5142 . 5143) (5113 . 5114) 5117 (5091 . 5092) (5088 . 5091) (t 25827 42786 342094 402000)) nil (25827 42808 217368 596000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -5143) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (#("r" 0 1 (fontified t)) . -5144) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (#("." 0 1 (fontified t)) . -5145) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) 5146 (5145 . 5146) (t 25827 42808 222026 506000)) nil (25827 42818 726532 411000) 0 nil])
([nil nil ((5161 . 5162)) nil (25827 42818 726507 848000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -5143) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (#("r" 0 1 (fontified t)) . -5144) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (#("." 0 1 (fontified t)) . -5145) (undo-tree-id871 . -1) 5146 (5144 . 5146) (#("a" 0 1 (fontified t)) . -5144) (undo-tree-id872 . -1) (#("r" 0 1 (fontified t)) . -5145) (undo-tree-id873 . -1) (#("." 0 1 (fontified t)) . -5146) (undo-tree-id874 . -1) 5147 (5144 . 5147) (5143 . 5144) (t 25827 42818 771993 688000)) nil (25827 42835 551448 498000) 0 nil])
([nil nil ((5143 . 5150) (#("p" 0 1 (fontified t)) . -5143) (undo-tree-id866 . -1) 5144 (5143 . 5144)) nil (25827 42835 551436 927000) 0 nil])
([nil nil ((#(".add_action_row(|ar| {
					todo!()
				})" 0 1 (fontified t) 1 23 (fontified t) 23 28 (fontified t) 28 33 (face font-lock-preprocessor-face fontified t) 33 36 (fontified t) 36 42 (fontified t)) . 5115) (undo-tree-id1012 . -41) (undo-tree-id1013 . -41) (undo-tree-id1014 . 7) (undo-tree-id1015 . -41) (undo-tree-id1016 . -16) (undo-tree-id1017 . 7) (undo-tree-id1018 . -42) (t 25827 42835 555274 710000)) nil (25827 42943 798309 706000) 0 nil])
([nil nil ((5204 . 5210) (#("        " 0 8 (fontified t)) . 5204) (5255 . 5259) (#("i" 0 1 (fontified t)) . -5255) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (#("d" 0 1 (fontified t)) . -5256) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) 5257 (4989 . 4991) (#("*" 0 1 (face font-lock-string-face fontified t)) . -4988) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) 4989 (#("*" 0 1 (face font-lock-string-face fontified t)) . -4989) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) 4990 (5054 . 5056) (5041 . 5043) (apply yas--snippet-revive 5209 5255 #s(yas--snippet nil (#s(yas--field 1 5223 5254 nil nil nil t #s(yas--exit 5255 nil))) #s(yas--exit 5255 nil) 64 nil #s(yas--field 1 5223 5254 nil nil nil t #s(yas--exit 5255 nil)) nil nil)) (apply yas--snippet-revive 5241 5254 #s(yas--snippet nil (#s(yas--field 1 5251 5253 nil nil nil nil #s(yas--exit 5254 nil))) #s(yas--exit 5254 nil) 66 nil #s(yas--field 1 5251 5253 nil nil nil nil #s(yas--exit 5254 nil)) #s(yas--field 1 5223 5254 nil nil nil t #s(yas--exit 5255 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5251 5253 nil nil nil nil #s(yas--exit 5254 nil))) #s(yas--exit 5254 nil) 66 nil #s(yas--field 1 5251 5253 nil nil nil nil #s(yas--exit 5254 nil)) #s(yas--field 1 5223 5254 nil nil nil t #s(yas--exit 5255 nil)) nil)) (5241 . 5254) (#("custom_id(${1:id})$0" 0 20 (fontified nil)) . 5241) (5241 . 5261) (#("custom" 0 6 (fontified nil)) . 5241) (5241 . 5247) (#("custom_id(…)" 0 12 (fontified nil)) . -5241) (5241 . 5253) (#("custom" 0 6 (fontified t)) . -5241) (undo-tree-id887 . -6) (undo-tree-id888 . -6) 5247 (5244 . 5247) (5240 . 5244) (apply yas--snippet-revive 5229 5240 #s(yas--snippet nil (#s(yas--field 1 5235 5239 nil nil nil t #s(yas--exit 5240 nil))) #s(yas--exit 5240 nil) 65 nil #s(yas--field 1 5235 5239 nil nil nil t #s(yas--exit 5240 nil)) #s(yas--field 1 5223 5254 nil nil nil t #s(yas--exit 5255 nil)) nil)) (5236 . 5239) (#("label" 0 5 (fontified nil)) . 5236) (5235 . 5236) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5235 5239 nil nil nil t #s(yas--exit 5240 nil))) #s(yas--exit 5240 nil) 65 nil #s(yas--field 1 5235 5239 nil nil nil t #s(yas--exit 5240 nil)) #s(yas--field 1 5223 5254 nil nil nil t #s(yas--exit 5255 nil)) nil)) (5229 . 5241) (#("label(${1:label})$0" 0 19 (fontified nil)) . 5229) (5229 . 5248) (#("label" 0 5 (fontified nil)) . 5229) (5229 . 5234) (#("label(…)" 0 8 (fontified nil)) . -5229) (5229 . 5237) (#("label" 0 5 (fontified t)) . -5229) (undo-tree-id889 . -2) (undo-tree-id890 . -5) 5234 (5231 . 5234) (#("e" 0 1 (fontified t)) . -5231) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (#("b" 0 1 (fontified t)) . -5232) (undo-tree-id893 . -1) 5233 (5224 . 5233) (#("f" 0 1 (fontified nil)) . 5224) (5223 . 5224) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5223 5254 nil nil nil t #s(yas--exit 5255 nil))) #s(yas--exit 5255 nil) 64 nil #s(yas--field 1 5223 5254 nil nil nil t #s(yas--exit 5255 nil)) nil nil)) (5209 . 5225) (#("create_button(${1:f})$0" 0 23 (fontified nil)) . 5209) (5209 . 5232) (#("create_" 0 7 (fontified nil)) . 5209) (5209 . 5216) (#("create_button(…)" 0 16 (fontified nil)) . -5209) (5209 . 5225) (#("create_" 0 7 (fontified t)) . -5209) (undo-tree-id894 . -7) 5216 (5209 . 5216) (#("crea" 0 4 (fontified t)) . -5209) (undo-tree-id895 . -4) 5213 (5209 . 5213) (5200 . 5208) (#("						" 0 6 (fontified t)) . -5200) 5206 (5206 . 5206) (5206 . 5207) (5199 . 5206) (apply yas--snippet-revive 5149 5199 #s(yas--snippet nil (#s(yas--field 1 5163 5198 nil nil nil t #s(yas--exit 5199 nil))) #s(yas--exit 5199 nil) 61 nil #s(yas--field 1 5163 5198 nil nil nil t #s(yas--exit 5199 nil)) nil nil)) (apply yas--snippet-revive 5182 5198 #s(yas--snippet nil (#s(yas--field 1 5192 5197 nil nil nil t #s(yas--exit 5198 nil))) #s(yas--exit 5198 nil) 63 nil #s(yas--field 1 5192 5197 nil nil nil t #s(yas--exit 5198 nil)) #s(yas--field 1 5163 5198 nil nil nil t #s(yas--exit 5199 nil)) nil)) (5193 . 5197) (#("id" 0 2 (fontified nil)) . 5193) (5192 . 5193) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5192 5197 nil nil nil t #s(yas--exit 5198 nil))) #s(yas--exit 5198 nil) 63 nil #s(yas--field 1 5192 5197 nil nil nil t #s(yas--exit 5198 nil)) #s(yas--field 1 5163 5198 nil nil nil t #s(yas--exit 5199 nil)) nil)) (5182 . 5195) (#("custom_id(${1:id})$0" 0 20 (fontified nil)) . 5182) (5182 . 5202) (#("custom_id(…)" 0 12 (fontified nil)) . -5182) (5182 . 5194) (5181 . 5182) (apply yas--snippet-revive 5169 5181 #s(yas--snippet nil (#s(yas--field 1 5175 5180 nil nil nil t #s(yas--exit 5181 nil))) #s(yas--exit 5181 nil) 62 nil #s(yas--field 1 5175 5180 nil nil nil t #s(yas--exit 5181 nil)) #s(yas--field 1 5163 5198 nil nil nil t #s(yas--exit 5199 nil)) nil)) (5176 . 5180) (#("y" 0 1 (face font-lock-string-face fontified t)) . -5176) (undo-tree-id896 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -5177) (undo-tree-id897 . -1) 5178 (5176 . 5178) (#("label" 0 5 (fontified nil)) . 5176) (5175 . 5176) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5175 5180 nil nil nil t #s(yas--exit 5181 nil))) #s(yas--exit 5181 nil) 62 nil #s(yas--field 1 5175 5180 nil nil nil t #s(yas--exit 5181 nil)) #s(yas--field 1 5163 5198 nil nil nil t #s(yas--exit 5199 nil)) nil)) (5169 . 5181) (#("label(${1:label})$0" 0 19 (fontified nil)) . 5169) (5169 . 5188) (#("label(…)" 0 8 (fontified nil)) . -5169) (5169 . 5177) (5164 . 5169) (#("f" 0 1 (fontified nil)) . 5164) (5163 . 5164) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5163 5198 nil nil nil t #s(yas--exit 5199 nil))) #s(yas--exit 5199 nil) 61 nil #s(yas--field 1 5163 5198 nil nil nil t #s(yas--exit 5199 nil)) nil nil)) (5149 . 5165) (#("create_button(${1:f})$0" 0 23 (fontified nil)) . 5149) (5149 . 5172) (#("create_button(…)" 0 16 (fontified nil)) . -5149) (5149 . 5165) (5147 . 5149) (#("r" 0 1 (fontified t)) . -5147) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (#("." 0 1 (fontified t)) . -5148) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (#("a" 0 1 (fontified t)) . -5149) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (#("d" 0 1 (fontified t)) . -5150) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (#("d" 0 1 (fontified t)) . -5151) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (#("_" 0 1 (fontified t)) . -5152) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (#("b" 0 1 (fontified t)) . -5153) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (#("u" 0 1 (fontified t)) . -5154) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (#("t" 0 1 (fontified t)) . -5155) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (#("t" 0 1 (fontified t)) . -5156) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (#("o" 0 1 (fontified t)) . -5157) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (#("n" 0 1 (fontified t)) . -5158) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (#("(" 0 1 (fontified t)) . -5159) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (#(")" 0 1 (fontified t)) . -5160) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) 5161 (apply yas--snippet-revive 5149 5161 #s(yas--snippet nil (#s(yas--field 1 5160 5160 nil nil nil t #s(yas--exit 5161 nil))) #s(yas--exit 5161 nil) 60 nil #s(yas--field 1 5160 5160 nil nil nil t #s(yas--exit 5161 nil)) nil nil)) (#("|" 0 1 (fontified t)) . -5160) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (#("b" 0 1 (fontified t)) . -5161) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (#("|" 0 1 (fontified t)) . -5162) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (#(" " 0 1 (fontified t)) . -5163) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (#("b" 0 1 (fontified t)) . -5164) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (#("." 0 1 (fontified t)) . -5165) (undo-tree-id951 . -1) (undo-tree-id952 . -1) 5166 (5161 . 5166) (#("n" 0 1 (fontified t)) . -5161) (undo-tree-id953 . -1) 5162 (5161 . 5162) (#("button" 0 6 (fontified nil)) . 5161) (5160 . 5161) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5160 5160 nil nil nil t #s(yas--exit 5161 nil))) #s(yas--exit 5161 nil) 60 nil #s(yas--field 1 5160 5160 nil nil nil t #s(yas--exit 5161 nil)) nil nil)) (5149 . 5167) (#("add_button(${1:button})$0" 0 25 (fontified nil)) . 5149) (5149 . 5174) (#("add_button(…)" 0 13 (fontified nil)) . -5149) (5149 . 5162) (5148 . 5149) (#("/" 0 1 (fontified t)) . -5148) (undo-tree-id954 . -1) 5149 (5148 . 5149) (#("." 0 1 (fontified t)) . -5148) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (#("a" 0 1 (fontified t)) . -5149) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (#("d" 0 1 (fontified t)) . -5150) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (#("d" 0 1 (fontified t)) . -5151) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (#("_" 0 1 (fontified t)) . -5152) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (#("b" 0 1 (fontified t)) . -5153) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (#("u" 0 1 (fontified t)) . -5154) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (#("t" 0 1 (fontified t)) . -5155) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (#("t" 0 1 (fontified t)) . -5156) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (#("o" 0 1 (fontified t)) . -5157) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (#("n" 0 1 (fontified t)) . -5158) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (#("(" 0 1 (fontified t)) . -5159) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (#("b" 0 1 (fontified t)) . -5160) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (#("u" 0 1 (fontified t)) . -5161) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (#("t" 0 1 (fontified nil)) . -5162) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (#("t" 0 1 (fontified t)) . -5163) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) 5164 (#("o" 0 1 (fontified t)) . -5164) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (#("n" 0 1 (fontified t)) . -5165) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (#(")" 0 1 (fontified t)) . -5166) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) 5167 (apply yas--snippet-revive 5149 5167 #s(yas--snippet nil (#s(yas--field 1 5160 5166 nil nil nil nil #s(yas--exit 5167 nil))) #s(yas--exit 5167 nil) 59 nil #s(yas--field 1 5160 5166 nil nil nil nil #s(yas--exit 5167 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5160 5166 nil nil nil nil #s(yas--exit 5167 nil))) #s(yas--exit 5167 nil) 59 nil #s(yas--field 1 5160 5166 nil nil nil nil #s(yas--exit 5167 nil)) nil nil)) (5149 . 5167) (#("add_button(${1:button})$0" 0 25 (fontified nil)) . 5149) (5149 . 5174) (#("add_button(…)" 0 13 (fontified nil)) . -5149) (5149 . 5162) (5146 . 5149) (5140 . 5146) (5145 . 5146) (5138 . 5140) (apply yas--snippet-revive 5116 5144 #s(yas--snippet nil (#s(yas--field 1 5134 5143 nil nil nil t #s(yas--exit 5144 nil))) #s(yas--exit 5144 nil) 58 nil #s(yas--field 1 5134 5143 nil nil nil t #s(yas--exit 5144 nil)) nil nil)) (5138 . 5143) (5135 . 5138) (#("f" 0 1 (fontified nil)) . 5135) (5134 . 5135) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5134 5143 nil nil nil t #s(yas--exit 5144 nil))) #s(yas--exit 5144 nil) 58 nil #s(yas--field 1 5134 5143 nil nil nil t #s(yas--exit 5144 nil)) nil nil)) (5116 . 5136) (#("create_action_row(${1:f})$0" 0 27 (fontified nil)) . 5116) (5116 . 5143) (#("create_action_row(…)" 0 20 (fontified nil)) . -5116) (5116 . 5136) (5115 . 5116)) nil (25827 42943 798282 989000) 0 nil])
([nil nil ((4914 . 4918) (t 25827 42943 801601 163000)) nil (25827 42952 980742 142000) 0 nil])
([nil nil ((5017 . 5019) (5014 . 5016) (5013 . 5014) (t 25827 42952 984905 428000)) nil (25827 42963 646225 333000) 0 nil])
([nil nil ((5313 . 5314) (apply yas--snippet-revive 5293 5313 #s(yas--snippet nil (#s(yas--field 1 5301 5312 nil nil nil t #s(yas--exit 5313 nil))) #s(yas--exit 5313 nil) 67 nil #s(yas--field 1 5301 5312 nil nil nil t #s(yas--exit 5313 nil)) nil nil)) (5307 . 5312) (#(";" 0 1 (fontified t)) . -5307) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (#("f" 0 1 (fontified t)) . -5308) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (#("r" 0 1 (fontified t)) . -5309) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (#("o" 0 1 (fontified t)) . -5310) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (#("m" 0 1 (fontified t)) . -5311) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) 5312 (5301 . 5312) (#("F" 0 1 (face font-lock-type-face fontified t)) . -5301) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -5302) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -5303) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -5304) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) 5305 (5302 . 5305) (#("op" 0 2 (fontified nil)) . 5302) (undo-tree-id1046 . -2) (5301 . 5302) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5301 5312 nil nil nil t #s(yas--exit 5313 nil))) #s(yas--exit 5313 nil) 67 nil #s(yas--field 1 5301 5312 nil nil nil t #s(yas--exit 5313 nil)) nil nil)) (5293 . 5304) (#("map_err(${1:op})$0" 0 18 (fontified nil)) . 5293) (5293 . 5311) (#("map" 0 3 (fontified nil)) . 5293) (5293 . 5296) (#("map_err(…)" 0 10 (fontified nil)) . -5293) (5293 . 5303) (#("map" 0 3 (fontified t)) . -5293) (undo-tree-id1047 . -3) 5296 (5292 . 5296) (#("
" 0 1 (fontified t)) . -5292) (undo-tree-id1048 . -1) (#("." 0 1 (fontified t)) . -5293) (undo-tree-id1049 . -1) (#("m" 0 1 (fontified t)) . -5294) (undo-tree-id1050 . -1) (#("a" 0 1 (fontified t)) . -5295) (undo-tree-id1051 . -1) (#("p" 0 1 (fontified t)) . -5296) (undo-tree-id1052 . -1) 5297 (5294 . 5297) (#("			" 0 3 (fontified t)) . -5293) (5296 . 5296) (5296 . 5297) (5292 . 5296) (5287 . 5292) (#("await" 0 5 (fontified nil)) . -5287) (5287 . 5292) (5286 . 5287) (t 25827 42963 651538 293000)) nil (25827 42991 684714 237000) 0 nil])
([nil nil ((5086 . 5091) (#("   " 0 3 (face font-lock-string-face fontified t)) . 5086) 5107 (5106 . 5107) (4979 . 4987) (t 25827 42991 701449 223000)) nil (25827 43004 130656 999000) 0 nil])
([nil nil ((apply yas--snippet-revive 4910 4915 #s(yas--snippet nil nil #s(yas--exit 4915 nil) 69 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4915 nil) 69 nil nil nil nil)) (4910 . 4915) (#("rev()$0" 0 7 (fontified nil)) . 4910) (4910 . 4917) (#("rev" 0 3 (fontified nil)) . 4910) (4910 . 4913) (#("rev() (alias reverse) (as Iterator)" 0 35 (fontified nil)) . -4910) (4910 . 4945) (#("rev" 0 3 (fontified t)) . -4910) (undo-tree-id1053 . -3) 4913 (4909 . 4913) (apply yas--snippet-revive 4898 4909 #s(yas--snippet nil nil #s(yas--exit 4909 nil) 68 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4909 nil) 68 nil nil nil nil)) (4898 . 4909) (#("into_iter()$0" 0 13 (fontified nil)) . 4898) (4898 . 4911) (#("into_" 0 5 (fontified nil)) . 4898) (4898 . 4903) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -4898) (4898 . 4927) (#("into_" 0 5 (fontified t)) . -4898) (undo-tree-id1054 . -5) 4903 (4897 . 4903) (#("." 0 1 (fontified t)) . -4897) (undo-tree-id1055 . -1) (#("i" 0 1 (fontified t)) . -4898) (undo-tree-id1056 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -4899) (undo-tree-id1057 . -1) 4900 (4897 . 4900) (#("." 0 1 (fontified t)) . -4897) (undo-tree-id1058 . -1) (#("r" 0 1 (fontified t)) . -4898) (undo-tree-id1059 . -1) (#("e" 0 1 (fontified t)) . -4899) (undo-tree-id1060 . -1) (#("v" 0 1 (fontified t)) . -4900) (undo-tree-id1061 . -1) 4901 (4897 . 4901) (t 25827 43004 134742 991000)) nil (25827 43089 27800 937000) 0 nil])
([nil nil ((111 . 117) (#("Resu" 0 4 (fontified nil)) . 111) (111 . 115) (#("Result" 0 6 (fontified nil)) . -111) (111 . 117) (#("Resu" 0 4 (face font-lock-type-face fontified t)) . -111) (undo-tree-id1062 . -4) (undo-tree-id1063 . -4) (undo-tree-id1064 . -4) (undo-tree-id1065 . -4) (undo-tree-id1066 . -4) 115 (109 . 115) (5513 . 5514) (5510 . 5512) (apply yas--snippet-revive 5503 5511 #s(yas--snippet nil nil #s(yas--exit 5510 nil) 70 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5510 nil) 70 nil nil nil nil)) (5503 . 5511) (#("Result<$0>" 0 10 (fontified nil)) . 5503) (5503 . 5513) (#("Resul" 0 5 (fontified nil)) . 5503) (5503 . 5508) (#("Result<…>" 0 9 (fontified nil)) . -5503) (5503 . 5512) (#("Resul" 0 5 (face font-lock-type-face fontified t)) . -5503) (undo-tree-id1067 . -5) 5508 (5499 . 5508) (#("		" 0 2 (fontified t)) . -5498) 5501 (5500 . 5501) (5497 . 5500) (#(")" 0 1 (fontified t)) . -5497) (undo-tree-id1068 . -1) 5498 (5497 . 5498) (5454 . 5455) (#(" " 0 1 (fontified nil)) . 5453) (undo-tree-id1069 . -1) (5454 . 5455) (5414 . 5415) (#(" " 0 1 (fontified nil)) . 5413) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (5414 . 5415) (5388 . 5390) (5412 . 5415) (#("log" 0 3 (fontified nil)) . 5412) (5412 . 5415) (#("log" 0 3 (face font-lock-variable-name-face fontified t)) . -5412) (undo-tree-id1072 . -3) (undo-tree-id1073 . -3) 5415 (5410 . 5415) (#(" " 0 1 (fontified t)) . -5410) (undo-tree-id1074 . -1) 5411 (5406 . 5411) (5394 . 5406) (#("Poiselogging" 0 5 (fontified nil) 5 6 (face font-lock-variable-name-face fontified nil) 6 12 (face font-lock-variable-name-face fontified nil)) . 5394) (5394 . 5399) (#("PoiseContext" 0 12 (fontified nil)) . -5394) (5394 . 5406) (#("Poise" 0 5 (face font-lock-variable-name-face fontified t)) . -5394) (undo-tree-id1075 . -5) 5399 (5395 . 5399) (#("O" 0 1 (face font-lock-variable-name-face fontified t)) . -5395) (undo-tree-id1076 . -1) 5396 (5391 . 5396) (5388 . 5391) (5452 . 5473) (5431 . 5452) (5418 . 5431) (5409 . 5418) (#("I" 0 1 (face font-lock-type-face fontified t)) . -5409) (undo-tree-id1077 . -1) 5410 (5397 . 5410) (#("u" 0 1 (fontified t)) . -5397) (undo-tree-id1078 . -1) (#("n" 0 1 (fontified t)) . -5398) (undo-tree-id1079 . -1) 5399 (5397 . 5399) (5388 . 5397) (#("f" 0 1 (fontified t)) . -5388) (undo-tree-id1080 . -1) (#("u" 0 1 (fontified t)) . -5389) (undo-tree-id1081 . -1) (#("t" 0 1 (fontified t)) . -5390) (undo-tree-id1082 . -1) (#("1" 0 1 (fontified t)) . -5391) (undo-tree-id1083 . -1) (#(":" 0 1 (fontified t)) . -5392) (undo-tree-id1084 . -1) (#(" " 0 1 (fontified t)) . -5393) (undo-tree-id1085 . -1) 5394 (5388 . 5394) (5387 . 5388) (#("(" 0 1 (fontified t)) . -5387) (undo-tree-id1086 . -1) 5388 (5381 . 5388) (#("_" 0 1 (face font-lock-function-name-face fontified t)) . -5381) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -5382) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (#("x" 0 1 (face font-lock-function-name-face fontified t)) . -5383) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) 5384 (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -5384) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (#("c" 0 1 (face font-lock-function-name-face fontified t)) . -5385) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (#("u" 0 1 (face font-lock-function-name-face fontified t)) . -5386) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (#("t" 0 1 (face font-lock-function-name-face fontified t)) . -5387) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -5388) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (#("o" 0 1 (face font-lock-function-name-face fontified t)) . -5389) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (#("n" 0 1 (face font-lock-function-name-face fontified t)) . -5390) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) 5391 (5381 . 5391) (5377 . 5381) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -5377) (undo-tree-id1107 . -1) 5378 (5362 . 5378) (#("f" 0 1 (fontified t)) . -5362) (undo-tree-id1108 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -5363) (undo-tree-id1109 . -1) (#(" " 0 1 (fontified t)) . -5364) (undo-tree-id1110 . -1) (#("s" 0 1 (face font-lock-function-name-face fontified t)) . -5365) (undo-tree-id1111 . -1) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -5366) (undo-tree-id1112 . -1) (#("q" 0 1 (face font-lock-function-name-face fontified t)) . -5367) (undo-tree-id1113 . -1) (#("u" 0 1 (face font-lock-function-name-face fontified t)) . -5368) (undo-tree-id1114 . -1) 5369 (5362 . 5369) (t 25827 43089 31138 256000)) nil (25827 47547 700016 959000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -5524) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (5525 . 5526) (5523 . 5525) (5522 . 5523) (#(" " 0 1 (fontified t)) . -5522) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) 5523 (5522 . 5523) (t 25827 47547 942519 913000)) nil (25827 47554 764210 772000) 0 nil])
([nil nil ((5525 . 5531) (5523 . 5525) (t 25827 47554 785825 547000)) nil (25827 47559 787443 922000) 0 nil])
([nil nil ((628 . 629) (622 . 628) (#("Future" 0 6 (fontified nil)) . -622) (622 . 628) (620 . 622) (614 . 620) (#("futu" 0 4 (fontified nil)) . 614) (614 . 618) (#("future" 0 6 (fontified nil)) . -614) (614 . 620) (#("futu" 0 4 (fontified t)) . -614) (undo-tree-id1124 . -4) 618 (605 . 618) (604 . 605) (t 25827 47559 815805 189000)) nil (25827 47572 96676 772000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -6120) (undo-tree-id1125 . -1) (#(" " 0 1 (fontified t)) . -6121) (undo-tree-id1126 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -6122) (undo-tree-id1127 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -6123) (undo-tree-id1128 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -6124) (undo-tree-id1129 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -6125) (undo-tree-id1130 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -6126) (undo-tree-id1131 . -1) 6127 (t 25827 47572 119088 729000)) nil (25827 47595 731659 394000) 0 nil])
([nil nil ((5540 . 5544) (#("Send" 0 4 (fontified nil)) . 5540) (5540 . 5544) (#("Send" 0 4 (face font-lock-type-face fontified t)) . -5540) (undo-tree-id1132 . -4) (undo-tree-id1133 . -4) (undo-tree-id1134 . -4) (undo-tree-id1135 . -4) (undo-tree-id1136 . -4) 5544 (5537 . 5544) (5488 . 5492) (#("Send" 0 4 (fontified nil)) . 5488) (5488 . 5492) (#("Send" 0 4 (face font-lock-type-face fontified t)) . -5488) (undo-tree-id1137 . -4) (undo-tree-id1138 . -4) 5492 (5485 . 5492) (#("l" 0 1 (fontified t)) . -5550) (undo-tree-id1139 . -1) 5551 (5550 . 5551) (5548 . 5550) (#("
" 0 1 (fontified t)) . -5530) (undo-tree-id1140 . -1) (#("	" 0 1 (fontified t)) . -5531) (undo-tree-id1141 . -1) (#("	" 0 1 (fontified t)) . -5532) (undo-tree-id1142 . -1) 5533 (5530 . 5533) (t 25827 47595 745659 788000)) nil (25827 48255 31033 633000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -5615) (undo-tree-id1157 . -1) (5616 . 5617) (5613 . 5616) (5597 . 5613) (5591 . 5597) (#("m" 0 1 (fontified t)) . -5591) (undo-tree-id1158 . -1) (#("a" 0 1 (fontified t)) . -5592) (undo-tree-id1159 . -1) (#("t" 0 1 (fontified t)) . -5593) (undo-tree-id1160 . -1) (#("c" 0 1 (fontified t)) . -5594) (undo-tree-id1161 . -1) (#("h" 0 1 (face font-lock-keyword-face fontified t)) . -5595) (undo-tree-id1162 . -1) (#(" " 0 1 (fontified t)) . -5596) (undo-tree-id1163 . -1) (#("l" 0 1 (fontified t)) . -5597) (undo-tree-id1164 . -1) (#("o" 0 1 (fontified t)) . -5598) (undo-tree-id1165 . -1) (#("g" 0 1 (fontified t)) . -5599) (undo-tree-id1166 . -1) (#("r" 0 1 (fontified t)) . -5600) (undo-tree-id1167 . -1) (#("e" 0 1 (fontified t)) . -5601) (undo-tree-id1168 . -1) (#("s" 0 1 (fontified t)) . -5602) (undo-tree-id1169 . -1) 5603 (5591 . 5603) (5590 . 5591) (#("	" 0 1 (fontified nil)) . 5589) (undo-tree-id1170 . -1) (5590 . 5591) (#("d" 0 1 (fontified t)) . -5590) (undo-tree-id1171 . -1) (#("e" 0 1 (fontified t)) . -5591) (undo-tree-id1172 . -1) (#("l" 0 1 (fontified t)) . -5592) (undo-tree-id1173 . -1) (#("e" 0 1 (fontified t)) . -5593) (undo-tree-id1174 . -1) 5594 (5590 . 5594) (5588 . 5590) (5587 . 5588) (#(";" 0 1 (fontified t)) . -5587) (undo-tree-id1175 . -1) (#("
" 0 1 (fontified t)) . -5588) (undo-tree-id1176 . -1) (#("	" 0 1 (fontified t)) . -5589) (undo-tree-id1177 . -1) (#("i" 0 1 (fontified t)) . -5590) (undo-tree-id1178 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -5591) (undo-tree-id1179 . -1) (#(" " 0 1 (fontified t)) . -5592) (undo-tree-id1180 . -1) (#("l" 0 1 (fontified t)) . -5593) (undo-tree-id1181 . -1) (#("e" 0 1 (fontified t)) . -5594) (undo-tree-id1182 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -5595) (undo-tree-id1183 . -1) (#(" " 0 1 (fontified t)) . -5596) (undo-tree-id1184 . -1) 5597 (5590 . 5597) (5588 . 5590) (5586 . 5588) (#("
" 0 1 (fontified t)) . -5586) (undo-tree-id1185 . -1) (#(" " 0 1 (fontified t)) . -5587) (undo-tree-id1186 . -1) (#(" " 0 1 (fontified t)) . -5588) (undo-tree-id1187 . -1) (#(" " 0 1 (fontified t)) . -5589) (undo-tree-id1188 . -1) (#(" " 0 1 (fontified t)) . -5590) (undo-tree-id1189 . -1) (#("." 0 1 (fontified t)) . -5591) (undo-tree-id1190 . -1) (#("m" 0 1 (fontified t)) . -5592) (undo-tree-id1191 . -1) (#("a" 0 1 (fontified t)) . -5593) (undo-tree-id1192 . -1) (#("p" 0 1 (fontified t)) . -5594) (undo-tree-id1193 . -1) 5595 (5592 . 5595) (5587 . 5591) (#("		" 0 2 (fontified t)) . -5587) 5589 (5589 . 5589) (5589 . 5590) (5586 . 5589) (#("." 0 1 (fontified t)) . -5586) (undo-tree-id1194 . -1) 5587 (5586 . 5587) (5581 . 5586) (#("awa" 0 3 (fontified nil)) . 5581) (5581 . 5584) (#("await" 0 5 (fontified nil)) . -5581) (5581 . 5586) (#("awa" 0 3 (fontified t)) . -5581) (undo-tree-id1195 . -3) 5584 (5581 . 5584) (5567 . 5581) (#("l" 0 1 (fontified t)) . -5567) (undo-tree-id1196 . -1) 5568 (5564 . 5568) (#("l" 0 1 (fontified t)) . -5564) (undo-tree-id1197 . -1) (#("o" 0 1 (fontified t)) . -5565) (undo-tree-id1198 . -1) (#("g" 0 1 (fontified t)) . -5566) (undo-tree-id1199 . -1) (#("." 0 1 (fontified t)) . -5567) (undo-tree-id1200 . -1) 5568 (5566 . 5568) (#("h" 0 1 (fontified t)) . -5566) (undo-tree-id1201 . -1) 5567 (5564 . 5567) (t 25827 48255 49662 973000)) nil (25827 52494 114318 129000) 0 nil])
([nil nil ((3086 . 3089) (3091 . 3107) (#("c" 0 1 (fontified t)) . -3091) (undo-tree-id1143 . -1) (#("o" 0 1 (fontified t)) . -3092) (undo-tree-id1144 . -1) (#("n" 0 1 (fontified t)) . -3093) (undo-tree-id1145 . -1) 3094 (3091 . 3094) (3088 . 3091) (#("s" 0 1 (fontified t)) . -3088) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (#("p" 0 1 (fontified t)) . -3089) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) 3090 (3086 . 3090) (#("h" 0 1 (fontified t)) . -5616) (undo-tree-id1150 . -1) (#("a" 0 1 (fontified t)) . -5617) (undo-tree-id1151 . -1) (#("n" 0 1 (fontified t)) . -5618) (undo-tree-id1152 . -1) (#("d" 0 1 (fontified t)) . -5619) (undo-tree-id1153 . -1) (#("l" 0 1 (fontified t)) . -5620) (undo-tree-id1154 . -1) (#("e" 0 1 (fontified t)) . -5621) (undo-tree-id1155 . -1) (#("." 0 1 (fontified t)) . -5622) (undo-tree-id1156 . -1) 5623 (5616 . 5623) (5613 . 5616)) nil (25827 52494 114142 995000) 0 nil])
([nil nil ((3090 . 3108) (#("map_contex" 0 10 (fontified nil)) . 3090) (3090 . 3100) (#("map_contextualized (as Contextualizable)" 0 40 (fontified nil)) . -3090) (3090 . 3130) (#("map_contex" 0 10 (fontified t)) . -3090) (undo-tree-id1202 . -4) (undo-tree-id1203 . -10) (undo-tree-id1204 . -4) (undo-tree-id1205 . -4) (undo-tree-id1206 . -4) (undo-tree-id1207 . -4) (undo-tree-id1208 . -4) (undo-tree-id1209 . -10) (undo-tree-id1210 . -10) (undo-tree-id1211 . -10) (undo-tree-id1212 . -10) 3100 (3094 . 3100) (#("e" 0 1 (fontified t)) . -3094) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (#("r" 0 1 (fontified t)) . -3095) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (#("r" 0 1 (fontified t)) . -3096) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) 3097 (t 25827 52494 125911 231000)) nil (25827 52680 122845 700000) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-type-face fontified t)) . -1569) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -1570) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -1571) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) 1572 (t 25827 52680 151918 276000)) nil (25827 52689 203151 442000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -835) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) 836 (835 . 836) (t 25827 52689 215219 473000)) nil (25827 52740 465978 172000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1685) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (#("	" 0 1 (fontified t)) . -1686) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (#("	" 0 1 (fontified t)) . -1687) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) 1688 (#("." 0 1 (fontified t)) . -1688) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (#("m" 0 1 (fontified t)) . -1689) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (#("a" 0 1 (fontified t)) . -1690) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (#("p" 0 1 (fontified t)) . -1691) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (#("_" 0 1 (fontified t)) . -1692) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (#("e" 0 1 (fontified t)) . -1693) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (#("r" 0 1 (fontified t)) . -1694) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (#("r" 0 1 (fontified t)) . -1695) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (#("(" 0 1 (fontified t)) . -1696) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1697) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1698) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1699) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1700) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (#("r" 0 1 (face font-lock-type-face fontified nil)) . -1701) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (#(":" 0 1 (fontified nil)) . -1702) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (#(":" 0 1 (fontified nil)) . -1703) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (#("f" 0 1 (fontified t)) . -1704) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (#("r" 0 1 (fontified t)) . -1705) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (#("o" 0 1 (fontified t)) . -1706) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (#("m" 0 1 (fontified t)) . -1707) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (#(")" 0 1 (fontified t)) . -1708) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) 1709 (#("
" 0 1 (fontified t)) . -1711) (undo-tree-id1372 . -1) (#("	" 0 1 (fontified t)) . -1712) (undo-tree-id1373 . -1) 1713 (1711 . 1713) (t 25827 52740 481704 357000) 1709) nil (25827 52758 91015 11000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1999) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (#("	" 0 1 (fontified t)) . -2000) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (#("	" 0 1 (fontified t)) . -2001) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (#("	" 0 1 (fontified t)) . -2002) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (#("	" 0 1 (fontified t)) . -2003) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (#("." 0 1 (fontified t)) . -2004) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (#("m" 0 1 (fontified t)) . -2005) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (#("a" 0 1 (fontified t)) . -2006) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (#("p" 0 1 (fontified t)) . -2007) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (#("_" 0 1 (fontified t)) . -2008) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (#("e" 0 1 (fontified nil)) . -2009) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (#("r" 0 1 (fontified nil)) . -2010) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (#("r" 0 1 (fontified nil)) . -2011) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (#("(" 0 1 (fontified t)) . -2012) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -2013) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2014) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2015) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -2016) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2017) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) 2018 (#(":" 0 1 (fontified t)) . -2018) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (#(":" 0 1 (fontified t)) . -2019) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (#("f" 0 1 (fontified t)) . -2020) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (#("r" 0 1 (fontified t)) . -2021) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (#("o" 0 1 (fontified t)) . -2022) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (#("m" 0 1 (fontified t)) . -2023) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (#(")" 0 1 (fontified t)) . -2024) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) 2025 (t 25827 52758 998305 365000)) nil (25827 52764 812922 450000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2367) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (#("	" 0 1 (fontified t)) . -2368) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (#("	" 0 1 (fontified t)) . -2369) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (#("	" 0 1 (fontified t)) . -2370) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) 2371 (#("." 0 1 (fontified t)) . -2371) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (#("m" 0 1 (fontified t)) . -2372) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (#("a" 0 1 (fontified t)) . -2373) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (#("p" 0 1 (fontified t)) . -2374) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (#("_" 0 1 (fontified t)) . -2375) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (#("e" 0 1 (fontified t)) . -2376) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (#("r" 0 1 (fontified t)) . -2377) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (#("r" 0 1 (fontified nil)) . -2378) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (#("(" 0 1 (fontified nil)) . -2379) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (#("E" 0 1 (face font-lock-type-face fontified nil)) . -2380) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2381) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2382) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -2383) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2384) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (#(":" 0 1 (fontified t)) . -2385) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (#(":" 0 1 (fontified t)) . -2386) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (#("f" 0 1 (fontified t)) . -2387) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (#("r" 0 1 (fontified t)) . -2388) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (#("o" 0 1 (fontified t)) . -2389) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (#("m" 0 1 (fontified t)) . -2390) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (#(")" 0 1 (fontified t)) . -2391) (undo-tree-id1555 . -1) 2392 (t 25827 52764 828284 692000)) nil (25827 52771 432826 84000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3008) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (#("	" 0 1 (fontified t)) . -3009) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (#("	" 0 1 (fontified t)) . -3010) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (#("." 0 1 (fontified nil)) . -3011) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (#("m" 0 1 (fontified nil)) . -3012) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (#("a" 0 1 (fontified t)) . -3013) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (#("p" 0 1 (fontified t)) . -3014) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (#("_" 0 1 (fontified t)) . -3015) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (#("c" 0 1 (fontified t)) . -3016) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (#("o" 0 1 (fontified t)) . -3017) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (#("n" 0 1 (fontified t)) . -3018) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (#("t" 0 1 (fontified t)) . -3019) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (#("e" 0 1 (fontified t)) . -3020) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (#("x" 0 1 (fontified t)) . -3021) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) 3022 (#("t" 0 1 (fontified t)) . -3022) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (#("u" 0 1 (fontified t)) . -3023) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (#("a" 0 1 (fontified t)) . -3024) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (#("l" 0 1 (fontified t)) . -3025) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (#("i" 0 1 (fontified t)) . -3026) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (#("z" 0 1 (fontified t)) . -3027) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (#("e" 0 1 (fontified t)) . -3028) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (#("d" 0 1 (fontified t)) . -3029) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (#("(" 0 1 (fontified t)) . -3030) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -3031) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3032) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3033) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3034) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3035) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (#(":" 0 1 (fontified t)) . -3036) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (#(":" 0 1 (fontified t)) . -3037) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (#("f" 0 1 (fontified t)) . -3038) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (#("r" 0 1 (fontified t)) . -3039) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (#("o" 0 1 (fontified t)) . -3040) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (#("m" 0 1 (fontified t)) . -3041) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (#(")" 0 1 (fontified t)) . -3042) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) 3043 (t 25827 52771 461594 504000)) nil (25827 52780 447600 632000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3581) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (#("	" 0 1 (fontified t)) . -3582) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (#("	" 0 1 (fontified t)) . -3583) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (#("	" 0 1 (fontified t)) . -3584) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) 3585 (#("." 0 1 (fontified t)) . -3585) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (#("m" 0 1 (fontified t)) . -3586) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (#("a" 0 1 (fontified t)) . -3587) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (#("p" 0 1 (fontified t)) . -3588) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (#("_" 0 1 (fontified t)) . -3589) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (#("e" 0 1 (fontified t)) . -3590) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (#("r" 0 1 (fontified t)) . -3591) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (#("r" 0 1 (fontified t)) . -3592) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (#("(" 0 1 (fontified t)) . -3593) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -3594) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3595) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3596) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3597) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3598) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (#(":" 0 1 (fontified t)) . -3599) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (#(":" 0 1 (fontified t)) . -3600) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (#("f" 0 1 (fontified t)) . -3601) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (#("r" 0 1 (fontified t)) . -3602) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (#("o" 0 1 (fontified t)) . -3603) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (#("m" 0 1 (fontified t)) . -3604) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (#(")" 0 1 (fontified t)) . -3605) (undo-tree-id1721 . -1) 3606 (t 25827 52780 461562 590000)) nil (25827 52790 23273 546000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3657) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (#("	" 0 1 (fontified t)) . -3658) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (#("	" 0 1 (fontified t)) . -3659) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (#("	" 0 1 (fontified t)) . -3660) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) 3661 (#("." 0 1 (fontified t)) . -3661) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (#("m" 0 1 (fontified t)) . -3662) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (#("a" 0 1 (fontified t)) . -3663) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (#("p" 0 1 (fontified t)) . -3664) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (#("_" 0 1 (fontified t)) . -3665) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (#("e" 0 1 (fontified t)) . -3666) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (#("r" 0 1 (fontified t)) . -3667) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (#("r" 0 1 (fontified t)) . -3668) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (#("(" 0 1 (fontified t)) . -3669) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -3670) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3671) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3672) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (#("o" 0 1 (face font-lock-type-face fontified nil)) . -3673) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (#("r" 0 1 (face font-lock-type-face fontified nil)) . -3674) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (#(":" 0 1 (fontified nil)) . -3675) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (#(":" 0 1 (fontified t)) . -3676) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (#("f" 0 1 (fontified t)) . -3677) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (#("r" 0 1 (fontified t)) . -3678) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (#("o" 0 1 (fontified t)) . -3679) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (#("m" 0 1 (fontified t)) . -3680) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (#(")" 0 1 (fontified t)) . -3681) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) 3682 (t 25827 52790 88195 119000)) nil (25827 52796 960376 849000) 0 nil])
([nil nil ((3111 . 3120) (3105 . 3111) (#("m" 0 1 (fontified t)) . -3105) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) 3106 (3105 . 3106) (#("l" 0 1 (fontified t)) . -3105) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (#("e" 0 1 (fontified t)) . -3106) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (#("t" 0 1 (fontified t)) . -3107) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (#(" " 0 1 (fontified t)) . -3108) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -3109) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -3110) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -3111) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -3112) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -3113) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) 3114 (3105 . 3114) (3202 . 3204) (3197 . 3202) (#("await" 0 5 (fontified nil)) . -3197) (3197 . 3202) (3196 . 3197) (#(";" 0 1 (fontified t)) . -3196) (undo-tree-id1813 . -1) 3197 (3196 . 3197) (apply yas--snippet-revive 3105 3196 #s(yas--snippet nil (#s(yas--field 1 3112 3115 nil nil nil nil #s(yas--field 2 3117 3195 nil nil nil t #s(yas--exit 3196 nil))) #s(yas--field 2 3117 3195 nil nil nil t #s(yas--exit 3196 nil))) #s(yas--exit 3196 nil) 104 nil #s(yas--field 2 3117 3195 nil nil nil t #s(yas--exit 3196 nil)) nil nil)) (apply yas--snippet-revive 3117 3195 #s(yas--snippet nil (#s(yas--field 1 3122 3129 nil nil nil t #s(yas--field 2 3131 3134 nil nil nil nil #s(yas--field 3 3136 3194 nil nil nil t #s(yas--exit 3195 nil)))) #s(yas--field 2 3131 3134 nil nil nil nil #s(yas--field 3 3136 3194 nil nil nil t #s(yas--exit 3195 nil))) #s(yas--field 3 3136 3194 nil nil nil t #s(yas--exit 3195 nil))) #s(yas--exit 3195 nil) 105 nil #s(yas--field 3 3136 3194 nil nil nil t #s(yas--exit 3195 nil)) #s(yas--field 2 3117 3195 nil nil nil t #s(yas--exit 3196 nil)) nil)) (3180 . 3192) (3166 . 3180) (3145 . 3166) (3144 . 3146) (#("
" 0 1 (fontified t)) . -3144) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (#("	" 0 1 (fontified t)) . -3145) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (#("	" 0 1 (fontified t)) . -3146) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -3147) (undo-tree-id1820 . -1) 3148 (3147 . 3148) (3144 . 3147) (3143 . 3145) (3137 . 3143) (#("content" 0 7 (fontified nil)) . 3137) (3136 . 3137) (3122 . 3123) (3122 . 3128) (#("hand" 0 4 (fontified nil)) . 3122) (3122 . 3126) (#("&handle" 0 7 (fontified nil)) . -3122) (3122 . 3129) (#("hand" 0 4 (fontified t)) . -3122) (undo-tree-id1821 . -4) (undo-tree-id1822 . -4) 3126 (3122 . 3126) (#("c" 0 1 (fontified t)) . -3122) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (#("t" 0 1 (fontified t)) . -3123) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (#("x" 0 1 (fontified t)) . -3124) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) 3125 (3123 . 3125) (#("handle" 0 6 (fontified nil)) . 3123) (3122 . 3123) ("::comp_util" . -10) 21 (23 . 35) (29 . 36) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3122 3129 nil nil nil t #s(yas--field 2 3131 3134 nil nil nil nil #s(yas--field 3 3136 3194 nil nil nil t #s(yas--exit 3195 nil)))) #s(yas--field 2 3131 3134 nil nil nil nil #s(yas--field 3 3136 3194 nil nil nil t #s(yas--exit 3195 nil))) #s(yas--field 3 3136 3194 nil nil nil t #s(yas--exit 3195 nil))) #s(yas--exit 3195 nil) 105 nil #s(yas--field 3 3136 3194 nil nil nil t #s(yas--exit 3195 nil)) #s(yas--field 2 3117 3195 nil nil nil t #s(yas--exit 3196 nil)) nil)) (3109 . 3135) (#("edit(${1:handle}, ${2:ctx}, ${3:content})$0" 0 43 (fontified nil)) . 3109) (3109 . 3152) (#("edit" 0 4 (fontified nil)) . 3109) (3109 . 3113) (#("edit(…) (use crate::comp_util::edit)" 0 36 (fontified nil)) . -3109) (3109 . 3145) (#("edit" 0 4 (fontified t)) . -3109) (undo-tree-id1829 . -4) 3113 (3112 . 3113) (#("t" 0 1 (fontified t)) . -3112) (undo-tree-id1830 . -1) (#("(" 0 1 (fontified t)) . -3113) (undo-tree-id1831 . -1) 3114 (3110 . 3114) (#("sender" 0 6 (fontified nil)) . 3110) (3109 . 3110) (1 . 31) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3112 3115 nil nil nil nil #s(yas--field 2 3117 3195 nil nil nil t #s(yas--exit 3196 nil))) #s(yas--field 2 3117 3195 nil nil nil t #s(yas--exit 3196 nil))) #s(yas--exit 3196 nil) 104 nil #s(yas--field 2 3117 3195 nil nil nil t #s(yas--exit 3196 nil)) nil nil)) (3067 . 3086) (#("ask_yn(${1:ctx}, ${2:sender})$0" 0 31 (fontified nil)) . 3067) (3067 . 3098) (#("ask_" 0 4 (fontified nil)) . 3067) (3067 . 3071) (#("ask_yn(…) (use crate::comp_util::ask_yn)" 0 40 (fontified nil)) . -3067) (3067 . 3107) (#("ask_" 0 4 (fontified t)) . -3067) (undo-tree-id1832 . -4) 3071 (3069 . 3071) (3067 . 3069) (#("h" 0 1 (fontified t)) . -3067) (undo-tree-id1833 . -1) (#("a" 0 1 (fontified t)) . -3068) (undo-tree-id1834 . -1) (#("n" 0 1 (fontified t)) . -3069) (undo-tree-id1835 . -1) (#("d" 0 1 (fontified t)) . -3070) (undo-tree-id1836 . -1) (#("l" 0 1 (fontified t)) . -3071) (undo-tree-id1837 . -1) (#("e" 0 1 (fontified t)) . -3072) (undo-tree-id1838 . -1) 3073 (3067 . 3073) (3064 . 3067) (t 25827 52796 984837 330000)) nil (25827 57821 168412 840000) 0 nil])
([nil nil ((#("        handle
            .edit(ctx, |e| {
                e.content(format!(
                    \"This will delete **{}** messages. Are you sure?\",
                    messages.len()
                ))
                .components(|c| {
                    c.create_action_row(|ar| {
                        ar.create_button(|b| b.custom_id(\"yes\").label(\"Yes\"))
                            .create_button(|b| b.custom_id(\"no\").label(\"No\"))
                    })
                })
            })
            .await?;
        let comp_inter = handle
            .message()
            .await?
            .await_component_interaction(ctx)
            .author_id(ctx.author().id)
            .timeout(StdDuration::from_secs(60 * 10))
            .await;
" 0 31 (fontified t) 31 37 (fontified t) 37 44 (fontified t) 44 70 (fontified t) 70 77 (face rust-builtin-formatting-macro fontified t) 77 79 (fontified t) 79 99 (fontified t) 99 119 (face font-lock-string-face fontified t) 119 121 (face rust-string-interpolation fontified t) 121 148 (face font-lock-string-face fontified t) 148 150 (fontified t) 150 185 (fontified t) 185 204 (fontified t) 204 238 (fontified t) 238 285 (fontified t) 285 342 (fontified t) 342 347 (face font-lock-string-face fontified t) 347 350 (fontified t) 350 355 (fontified t) 355 360 (face font-lock-string-face fontified t) 360 363 (fontified t) 363 377 (fontified t) 377 422 (fontified t) 422 426 (face font-lock-string-face fontified t) 426 434 (fontified t) 434 438 (face font-lock-string-face fontified t) 438 441 (fontified t) 441 464 (fontified t) 464 483 (fontified t) 483 498 (fontified t) 498 500 (fontified t) 500 511 (fontified t) 511 516 (face font-lock-keyword-face fontified t) 516 517 (face rust-question-mark fontified t) 517 519 (fontified t) 519 527 (fontified t) 527 530 (face font-lock-keyword-face fontified t) 530 531 (fontified t) 531 541 (face font-lock-variable-name-face fontified t) 541 574 (fontified t) 574 587 (fontified t) 587 589 (face font-lock-keyword-face fontified t) 589 592 (face font-lock-keyword-face fontified t) 592 593 (face rust-question-mark fontified t) 593 594 (fontified t) 594 609 (fontified t) 609 640 (fontified t) 640 659 (fontified t) 659 680 (fontified t) 680 694 (fontified t) 694 701 (fontified t) 701 712 (face font-lock-type-face fontified t) 712 720 (fontified t) 720 734 (fontified t) 734 747 (fontified t) 747 752 (face font-lock-keyword-face fontified t) 752 754 (fontified t)) . 3220) (undo-tree-id1861 . -753) (undo-tree-id1862 . -753) (undo-tree-id1863 . -753) (undo-tree-id1864 . -754) (undo-tree-id1865 . -753) (undo-tree-id1866 . -734) (undo-tree-id1867 . -734) (undo-tree-id1868 . -734) (undo-tree-id1869 . -753) (undo-tree-id1870 . -753) (undo-tree-id1871 . -753) (undo-tree-id1872 . -753) (undo-tree-id1873 . -753) (undo-tree-id1874 . -754) 3973 (t 25827 57821 176783 91000)) nil (25827 57844 656440 858000) 0 nil])
([nil nil ((apply yas--snippet-revive 3219 3224 #s(yas--snippet nil nil #s(yas--exit 3224 nil) 106 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3224 nil) 106 nil nil nil nil)) (3219 . 3224) (#("len()$0" 0 7 (fontified nil)) . 3219) (3219 . 3226) (#("len" 0 3 (fontified nil)) . 3219) (3219 . 3222) (#("len()" 0 5 (fontified nil)) . -3219) (3219 . 3224) (#("len" 0 3 (fontified t)) . -3219) (undo-tree-id1839 . -3) (undo-tree-id1840 . -3) (undo-tree-id1841 . -3) (undo-tree-id1842 . -3) (undo-tree-id1843 . -3) (undo-tree-id1844 . -3) (undo-tree-id1845 . -3) (undo-tree-id1846 . -3) (undo-tree-id1847 . -3) 3222 (3208 . 3222) (3234 . 3242) (#("respon" 0 6 (fontified nil)) . 3234) (3234 . 3240) (#("response" 0 8 (fontified nil)) . -3234) (3234 . 3242) (#("respon" 0 6 (fontified t)) . -3234) (undo-tree-id1848 . -6) 3240 (3234 . 3240) (#("c" 0 1 (fontified t)) . -3234) (undo-tree-id1849 . -1) (#("r" 0 1 (fontified t)) . -3235) (undo-tree-id1850 . -1) (#("e" 0 1 (fontified t)) . -3236) (undo-tree-id1851 . -1) 3237 (3235 . 3237) (#("o" 0 1 (fontified t)) . -3235) (undo-tree-id1852 . -1) (#("m" 0 1 (fontified t)) . -3236) (undo-tree-id1853 . -1) (#("p" 0 1 (fontified t)) . -3237) (undo-tree-id1854 . -1) (#("_" 0 1 (fontified t)) . -3238) (undo-tree-id1855 . -1) (#("i" 0 1 (fontified t)) . -3239) (undo-tree-id1856 . -1) (#("n" 0 1 (fontified t)) . -3240) (undo-tree-id1857 . -1) (#("t" 0 1 (fontified t)) . -3241) (undo-tree-id1858 . -1) (#("e" 0 1 (fontified t)) . -3242) (undo-tree-id1859 . -1) (#("r" 0 1 (fontified t)) . -3243) (undo-tree-id1860 . -1) 3244) nil (25827 57844 656423 501000) 0 nil])
([nil nil ((3278 . 3282) (#("m" 0 1 (fontified t)) . -3278) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) 3279 (t 25827 57844 676704 408000)) nil (25827 57874 567692 288000) 0 nil])
([nil nil ((3308 . 3313) (#("_" 0 1 (fontified t)) . -3308) (undo-tree-id1875 . -1) 3309 (#("i" 0 1 (fontified t)) . -3284) (undo-tree-id1876 . -1) (#("f" 0 1 (fontified t)) . -3285) (undo-tree-id1877 . -1) (#(" " 0 1 (fontified t)) . -3286) (undo-tree-id1878 . -1) (#("m" 0 1 (fontified t)) . -3287) (undo-tree-id1879 . -1) (#("." 0 1 (fontified t)) . -3288) (undo-tree-id1880 . -1) (#("d" 0 1 (fontified t)) . -3289) (undo-tree-id1881 . -1) (#("a" 0 1 (fontified t)) . -3290) (undo-tree-id1882 . -1) (#("t" 0 1 (fontified t)) . -3291) (undo-tree-id1883 . -1) 3292 (#("a" 0 1 (fontified t)) . -3292) (undo-tree-id1884 . -1) (#("." 0 1 (fontified t)) . -3293) (undo-tree-id1885 . -1) (#("c" 0 1 (fontified t)) . -3294) (undo-tree-id1886 . -1) (#("u" 0 1 (fontified t)) . -3295) (undo-tree-id1887 . -1) (#("s" 0 1 (fontified t)) . -3296) (undo-tree-id1888 . -1) (#("t" 0 1 (fontified t)) . -3297) (undo-tree-id1889 . -1) (#("o" 0 1 (fontified t)) . -3298) (undo-tree-id1890 . -1) (#("m" 0 1 (fontified t)) . -3299) (undo-tree-id1891 . -1) (#("_" 0 1 (fontified t)) . -3300) (undo-tree-id1892 . -1) (#("i" 0 1 (fontified t)) . -3301) (undo-tree-id1893 . -1) (#("d" 0 1 (fontified t)) . -3302) (undo-tree-id1894 . -1) (#(" " 0 1 (fontified t)) . -3303) (undo-tree-id1895 . -1) (#("=" 0 1 (fontified t)) . -3304) (undo-tree-id1896 . -1) (#("=" 0 1 (fontified t)) . -3305) (undo-tree-id1897 . -1) (#(" " 0 1 (fontified t)) . -3306) (undo-tree-id1898 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -3307) (undo-tree-id1899 . -1) (#("y" 0 1 (face font-lock-string-face fontified t)) . -3308) (undo-tree-id1900 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -3309) (undo-tree-id1901 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -3310) (undo-tree-id1902 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -3311) (undo-tree-id1903 . -1) (#(" " 0 1 (fontified t)) . -3312) (undo-tree-id1904 . -1) 3313) nil (25827 57874 567671 517000) 0 nil])
([nil nil ((3342 . 3343) (#("
" 0 1 (fontified t)) . -3342) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) 3343 (#(" " 0 1 (fontified t)) . -3343) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (#(" " 0 1 (fontified t)) . -3344) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (#(" " 0 1 (fontified t)) . -3345) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (#(" " 0 1 (fontified t)) . -3346) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (#(" " 0 1 (fontified t)) . -3347) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (#(" " 0 1 (fontified t)) . -3348) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (#(" " 0 1 (fontified t)) . -3349) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (#(" " 0 1 (fontified t)) . -3350) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (#(" " 0 1 (fontified t)) . -3351) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (#(" " 0 1 (fontified t)) . -3352) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (#(" " 0 1 (fontified t)) . -3353) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (#(" " 0 1 (fontified nil)) . -3354) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (#(" " 0 1 (fontified nil)) . -3355) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (#(" " 0 1 (fontified nil)) . -3356) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (#(" " 0 1 (fontified t)) . -3357) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (#(" " 0 1 (fontified t)) . -3358) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (#(" " 0 1 (fontified t)) . -3359) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (#(" " 0 1 (fontified t)) . -3360) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (#(" " 0 1 (fontified t)) . -3361) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (#(" " 0 1 (fontified t)) . -3362) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (#("." 0 1 (fontified t)) . -3363) (undo-tree-id1992 . -1) 3364 (#("
" 0 1 (fontified t)) . -3572) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (#(" " 0 1 (fontified t)) . -3573) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (#(" " 0 1 (fontified t)) . -3574) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (#(" " 0 1 (fontified t)) . -3575) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (#(" " 0 1 (fontified t)) . -3576) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (#(" " 0 1 (fontified t)) . -3577) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (#(" " 0 1 (fontified t)) . -3578) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (#(" " 0 1 (fontified t)) . -3579) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (#(" " 0 1 (fontified t)) . -3580) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (#(" " 0 1 (fontified t)) . -3581) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (#(" " 0 1 (fontified t)) . -3582) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (#(" " 0 1 (fontified t)) . -3583) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (#(" " 0 1 (fontified t)) . -3584) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (#(" " 0 1 (fontified t)) . -3585) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (#(" " 0 1 (fontified t)) . -3586) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (#(" " 0 1 (fontified t)) . -3587) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (#(" " 0 1 (fontified t)) . -3588) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (#(" " 0 1 (fontified t)) . -3589) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (#(" " 0 1 (fontified t)) . -3590) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (#(" " 0 1 (fontified t)) . -3591) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (#(" " 0 1 (fontified t)) . -3592) (undo-tree-id2033 . -1) 3593 (t 25827 57874 579937 359000)) nil (25827 57975 523418 137000) 0 nil])
([nil nil ((#("            None => {
                handle.edit(ctx, |e| e.content(\"Timed out.\").components(|c| c))
                    .await
					.map_err(Error::from)?;
                return Ok(());
            }
" 0 12 (fontified t) 12 16 (face font-lock-type-face fontified t) 16 18 (fontified t) 18 19 (fontified t syntax-table (1)) 19 22 (fontified t) 22 44 (fontified t) 44 69 (fontified t) 69 81 (face font-lock-string-face fontified t) 81 102 (fontified t) 102 123 (fontified t) 123 128 (face font-lock-keyword-face fontified t) 128 129 (fontified t) 129 143 (fontified t) 143 148 (face font-lock-type-face fontified t) 148 155 (fontified t) 155 156 (face rust-question-mark fontified t) 156 158 (fontified t) 158 174 (fontified t) 174 180 (face font-lock-keyword-face fontified t) 180 181 (fontified t) 181 183 (face font-lock-type-face fontified t) 183 203 (fontified t)) . 3507) (undo-tree-id1918 . -202) (undo-tree-id1919 . -202) (undo-tree-id1920 . -202) (undo-tree-id1921 . -202) (undo-tree-id1922 . -20) (undo-tree-id1923 . -20) (undo-tree-id1924 . -20) (undo-tree-id1925 . -20) (undo-tree-id1926 . -189) (undo-tree-id1927 . -202) (undo-tree-id1928 . -203) 3709) nil (25827 57975 522853 729000) 0 nil])
([nil nil ((3308 . 3309) (#("f" 0 1 (fontified t)) . -3308) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (#("a" 0 1 (fontified t)) . -3309) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (#("l" 0 1 (fontified t)) . -3310) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (#("s" 0 1 (fontified t)) . -3311) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -3312) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) 3313) nil (25827 57975 522829 790000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -3304) (undo-tree-id2034 . 1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) 3305 (#("S" 0 1 (face font-lock-type-face fontified t)) . -3303) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3304) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -3305) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3306) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (#("(" 0 1 (fontified t)) . -3307) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) 3308 (t 25827 57975 549596 484000)) nil (25827 57987 277784 103000) 0 nil])
([nil nil ((#("*" 0 1 (face font-lock-string-face fontified t)) . -4683) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (#("*" 0 1 (face font-lock-string-face fontified t)) . -4684) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (#("W" 0 1 (face font-lock-string-face fontified t)) . -4685) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (#("A" 0 1 (face font-lock-string-face fontified t)) . -4686) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (#("R" 0 1 (face font-lock-string-face fontified t)) . -4687) (undo-tree-id2139 . -1) 4688 (4683 . 4688) (#("W" 0 1 (face font-lock-string-face fontified t)) . -4683) (undo-tree-id2140 . -1) 4684 (4683 . 4684) (4682 . 4684) (4678 . 4683) (4674 . 4678) (#("c" 0 1 (fontified t)) . -4674) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (#("o" 0 1 (fontified t)) . -4675) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (#("n" 0 1 (fontified t)) . -4676) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) 4677 (4674 . 4677) (4669 . 4674) (4661 . 4669) (#("c" 0 1 (fontified t)) . -4661) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) 4662 (4661 . 4662) (4660 . 4662) (4656 . 4660) (#("edit" 0 4 (fontified nil)) . 4656) (4656 . 4660) (#("edit" 0 4 (fontified t)) . -4656) (undo-tree-id2149 . -4) (undo-tree-id2150 . -4) 4660 (4656 . 4660) (#("s" 0 1 (fontified t)) . -4656) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (#("e" 0 1 (fontified t)) . -4657) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (#("n" 0 1 (fontified t)) . -4658) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (#("d" 0 1 (fontified t)) . -4659) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (#("e" 0 1 (fontified t)) . -4660) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (#("r" 0 1 (fontified t)) . -4661) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) 4662 (#("&" 0 1 (face rust-ampersand-face fontified t)) . -4438) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) 4439 (apply yas--snippet-revive 4645 4664 #s(yas--snippet nil (#s(yas--field 1 4652 4655 nil nil nil nil #s(yas--field 2 4657 4663 nil nil nil nil #s(yas--exit 4664 nil))) #s(yas--field 2 4657 4663 nil nil nil nil #s(yas--exit 4664 nil))) #s(yas--exit 4664 nil) 107 nil #s(yas--field 1 4652 4655 nil nil nil nil #s(yas--field 2 4657 4663 nil nil nil nil #s(yas--exit 4664 nil))) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4652 4655 nil nil nil nil #s(yas--field 2 4657 4663 nil nil nil nil #s(yas--exit 4664 nil))) #s(yas--field 2 4657 4663 nil nil nil nil #s(yas--exit 4664 nil))) #s(yas--exit 4664 nil) 107 nil #s(yas--field 1 4652 4655 nil nil nil nil #s(yas--field 2 4657 4663 nil nil nil nil #s(yas--exit 4664 nil))) nil nil)) (4645 . 4664) (#("ask_yn(${1:ctx}, ${2:sender})$0" 0 31 (fontified nil)) . 4645) (4645 . 4676) (#("ask_" 0 4 (fontified nil)) . 4645) (4645 . 4649) (#("ask_yn(…)" 0 9 (fontified nil)) . -4645) (4645 . 4654) (#("ask_" 0 4 (fontified t)) . -4645) (undo-tree-id2171 . -4) 4649 (4634 . 4649) (4630 . 4634) (#("h" 0 1 (fontified t)) . -4630) (undo-tree-id2172 . -1) (#("a" 0 1 (fontified t)) . -4631) (undo-tree-id2173 . -1) (#("n" 0 1 (fontified t)) . -4632) (undo-tree-id2174 . -1) (#("d" 0 1 (fontified t)) . -4633) (undo-tree-id2175 . -1) (#("l" 0 1 (fontified t)) . -4634) (undo-tree-id2176 . -1) (#("e" 0 1 (fontified t)) . -4635) (undo-tree-id2177 . -1) 4636 (4630 . 4636) (4604 . 4608) (t 25827 57987 502889 284000)) nil (25827 58142 946714 490000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4684 . 4685) (nil fontified nil 4683 . 4685) (4683 . 4685) 4682) nil (25827 58151 664147 915000) 0 nil] [nil nil ((nil rear-nonsticky nil 4885 . 4886) (nil fontified nil 4683 . 4886) (4683 . 4886) 4682) ((#("            None => {
                handle.edit(ctx, |e| e.content(\"Timed out.\").components(|c| c))
                    .await
					.map_err(Error::from)?;
                return Ok(());
            }
" 0 18 (face font-lock-string-face fontified nil) 18 19 (face font-lock-string-face syntax-table (1) fontified nil) 19 70 (face font-lock-string-face fontified nil) 70 75 (face font-lock-type-face fontified nil) 75 80 (fontified nil) 80 189 (face font-lock-string-face fontified nil) 189 202 (face font-lock-string-face fontified nil) 202 203 (face font-lock-string-face rear-nonsticky nil fontified nil)) . 4683) (undo-tree-id2178 . -202) (undo-tree-id2179 . -203) (undo-tree-id2180 . -203) (undo-tree-id2181 . -203) (nil fontified t 4763 . 4872) (nil fontified t 4758 . 4763) (nil fontified t 4753 . 4758) (nil fontified t 4702 . 4753) (nil fontified t 4701 . 4702) (nil fontified t 4683 . 4701) (nil rear-nonsticky t 4885 . 4886)) (25827 58142 945243 356000) 0 nil])
([nil nil ((4825 . 4828) (4823 . 4825) (#("." 0 1 (fontified t)) . -4823) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) 4824 (4823 . 4824) (4818 . 4823) (#("await" 0 5 (fontified nil)) . -4818) (4818 . 4823) (4817 . 4818) (#("." 0 1 (fontified t)) . -4817) (undo-tree-id2190 . -1) 4818 (4817 . 4818) (4813 . 4816) (4795 . 4810) (4782 . 4795) (4766 . 4782) (#("c" 0 1 (face font-lock-string-face fontified t)) . -4766) (undo-tree-id2191 . -1) 4767 (4764 . 4767) (4752 . 4764) (4731 . 4752) (4660 . 4663) (#(" " 0 1 (fontified nil)) . 4659) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (4660 . 4661) (4651 . 4655) (4723 . 4724) (4702 . 4723) (4695 . 4702) (#("*" 0 1 (face font-lock-string-face fontified t)) . -4695) (undo-tree-id2194 . -1) (#("*" 0 1 (face font-lock-string-face fontified t)) . -4696) (undo-tree-id2195 . -1) 4697 (4685 . 4697)) nil (25827 58866 956301 977000) 0 nil] [nil nil ((4685 . 4686) (#("W" 0 1 (face font-lock-string-face fontified t)) . -4685) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) 4686 (4684 . 4686)) ((#(" W" 0 1 (face font-lock-string-face fontified nil) 1 2 (face font-lock-string-face fontified nil)) . 4684) (undo-tree-id2184 . -2) (undo-tree-id2185 . -1) (4685 . 4686) (#("*" 0 1 (face font-lock-string-face fontified t)) . 4685)) (25827 58151 662897 649000) 0 nil])
nil
([nil nil ((4611 . 4614) (#("l" 0 1 (fontified t)) . -4611) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (#("l" 0 1 (fontified t)) . -4612) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (#("o" 0 1 (fontified t)) . -4613) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (#("g" 0 1 (fontified t)) . -4614) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) 4615 (4611 . 4615) (4827 . 4829) (#("		" 0 2 (fontified nil)) . 4826) (undo-tree-id2204 . -2) (undo-tree-id2205 . -2) (4828 . 4829) (t 25827 58866 989847 862000)) nil (25827 58890 624235 319000) 0 nil])
nil
([nil nil ((4501 . 4502) (352 . 376) (4466 . 4466) (4466 . 4477) (#("ReplyHa" 0 7 (fontified nil)) . 4466) (4466 . 4473) (#("ReplyHandle (use poise::ReplyHandle)" 0 36 (fontified nil)) . -4466) (4466 . 4502) (#("ReplyHa" 0 7 (face font-lock-type-face fontified t)) . -4466) (undo-tree-id2206 . -7) (undo-tree-id2207 . -6) (undo-tree-id2208 . -7) (undo-tree-id2209 . -7) (undo-tree-id2210 . -7) (undo-tree-id2211 . -7) 4473 (4467 . 4473) (4457 . 4467) (4455 . 4457) (t 25827 58890 639765 182000)) nil (25827 58900 359940 580000) 0 nil])
([nil nil ((4501 . 4505) (t 25827 58900 376397 803000)) nil (25827 58910 334349 0) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -4646) (undo-tree-id2278 . -1) 4647 (t 25827 58910 983027 378000)) nil (25827 58952 66708 686000) 0 nil])
([nil nil ((4675 . 4680) (#("await" 0 5 (fontified nil)) . -4675) (4675 . 4680) (4674 . 4675) (#("r" 0 1 (fontified t)) . -4674) (undo-tree-id2275 . -1) (#("e" 0 1 (fontified t)) . -4675) (undo-tree-id2276 . -1) (#("s" 0 1 (fontified t)) . -4676) (undo-tree-id2277 . -1) 4677) nil (25827 58952 66704 251000) 0 nil])
([nil nil ((#("	let logres = log.await;
" 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 11 (face font-lock-variable-name-face fontified t) 11 18 (fontified t) 18 23 (face font-lock-keyword-face fontified t) 23 25 (fontified t)) . 4623) (undo-tree-id2265 . -24) (undo-tree-id2266 . -23) (undo-tree-id2267 . -23) (undo-tree-id2268 . -23) (undo-tree-id2269 . -23) (undo-tree-id2270 . -23) (undo-tree-id2271 . -23) (undo-tree-id2272 . -23) (undo-tree-id2273 . -23) (undo-tree-id2274 . -25) 4646) nil (25827 58952 66695 473000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -4673) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (#("a" 0 1 (fontified t)) . -4674) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (#("w" 0 1 (fontified t)) . -4675) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (#("a" 0 1 (fontified t)) . -4676) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (#("i" 0 1 (fontified t)) . -4677) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) 4678 (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -4678) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) 4679 (4646 . 4647) (4641 . 4646) (#("awa" 0 3 (fontified nil)) . 4641) (4641 . 4644) (#("await" 0 5 (fontified nil)) . -4641) (4641 . 4646) (#("awa" 0 3 (fontified t)) . -4641) (undo-tree-id2252 . -3) 4644 (4643 . 4644) (#("a" 0 1 (fontified t)) . -4643) (undo-tree-id2253 . -1) (#("t" 0 1 (fontified t)) . -4644) (undo-tree-id2254 . -1) 4645 (4624 . 4645) (4622 . 4624) (#("
" 0 1 (fontified t)) . -4622) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) 4623) nil (25827 58952 66667 613000) 0 nil])
([nil nil ((4670 . 4676) (#("logres" 0 6 (fontified nil)) . 4670) (4670 . 4676) (#("logres" 0 6 (fontified t)) . -4670) (undo-tree-id2279 . -6) (undo-tree-id2280 . -6) (undo-tree-id2281 . -6) (undo-tree-id2282 . -6) (undo-tree-id2283 . -6) 4676 (4673 . 4676) (t 25827 58952 82883 605000)) nil (25827 58989 246693 363000) 0 nil])
([nil nil ((4870 . 4873) (#(" " 0 1 (fontified nil)) . 4870) (4869 . 4870) (4865 . 4869) (4857 . 4862) (#("f" 0 1 (fontified t)) . -4857) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (#("a" 0 1 (fontified t)) . -4858) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (#("l" 0 1 (fontified t)) . -4859) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (#("s" 0 1 (fontified t)) . -4860) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -4861) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (#(")" 0 1 (fontified t)) . -4862) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) 4863 (4954 . 4960) (#("
" 0 1 (fontified t)) . -3419) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (#(" " 0 1 (fontified t)) . -3420) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (#(" " 0 1 (fontified t)) . -3421) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (#(" " 0 1 (fontified t)) . -3422) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (#(" " 0 1 (fontified t)) . -3423) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (#(" " 0 1 (fontified t)) . -3424) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (#(" " 0 1 (fontified t)) . -3425) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (#(" " 0 1 (fontified t)) . -3426) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (#(" " 0 1 (fontified t)) . -3427) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (#(" " 0 1 (fontified t)) . -3428) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (#(" " 0 1 (fontified t)) . -3429) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (#(" " 0 1 (fontified t)) . -3430) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (#(" " 0 1 (fontified t)) . -3431) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (#(" " 0 1 (fontified t)) . -3432) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (#(" " 0 1 (fontified t)) . -3433) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (#(" " 0 1 (fontified t)) . -3434) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (#(" " 0 1 (fontified t)) . -3435) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (#(" " 0 1 (fontified t)) . -3436) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (#(" " 0 1 (fontified t)) . -3437) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (#(" " 0 1 (fontified t)) . -3438) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (#(" " 0 1 (fontified t)) . -3439) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) 3440 (#("
" 0 1 (fontified t)) . -4963) (undo-tree-id2346 . -1) (#("	" 0 1 (fontified t)) . -4964) (undo-tree-id2347 . -1) (#("	" 0 1 (fontified t)) . -4965) (undo-tree-id2348 . -1) (#("	" 0 1 (fontified t)) . -4966) (undo-tree-id2349 . -1) (#("	" 0 1 (fontified t)) . -4967) (undo-tree-id2350 . -1) (#("	" 0 1 (fontified t)) . -4968) (undo-tree-id2351 . -1) 4969 (4976 . 4981) (4964 . 4969) (#("        " 0 8 (fontified t)) . 4964) 4979 (4973 . 4979) (4964 . 4972) (#("					" 0 5 (fontified t)) . -4964) 4969 (4969 . 4969) (4969 . 4970) (4963 . 4969) (4963 . 4967) (4889 . 4894) (4958 . 4959) (4888 . 4888) (4888 . 4889) (#("
" 0 1 (fontified t)) . -3446) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (#("	" 0 1 (fontified t)) . -3447) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (#("	" 0 1 (fontified t)) . -3448) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (#("	" 0 1 (fontified t)) . -3449) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (#("	" 0 1 (fontified t)) . -3450) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (#("	" 0 1 (fontified t)) . -3451) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) 3452 (#("." 0 1 (fontified t)) . -3452) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (#("m" 0 1 (fontified t)) . -3453) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (#("a" 0 1 (fontified t)) . -3454) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (#("p" 0 1 (fontified t)) . -3455) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (#("_" 0 1 (fontified t)) . -3456) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (#("e" 0 1 (fontified t)) . -3457) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (#("r" 0 1 (fontified t)) . -3458) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (#("r" 0 1 (fontified t)) . -3459) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (#("(" 0 1 (fontified t)) . -3460) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -3461) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3462) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3463) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3464) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3465) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (#(":" 0 1 (fontified t)) . -3466) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (#(":" 0 1 (fontified t)) . -3467) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (#("f" 0 1 (fontified t)) . -3468) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (#("r" 0 1 (fontified t)) . -3469) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (#("o" 0 1 (fontified t)) . -3470) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (#("m" 0 1 (fontified t)) . -3471) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (#(")" 0 1 (fontified t)) . -3472) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) 3473 (4905 . 4910) (#("t" 0 1 (fontified t)) . -4905) (undo-tree-id2406 . -1) (#("r" 0 1 (fontified t)) . -4906) (undo-tree-id2407 . -1) (#("u" 0 1 (fontified t)) . -4907) (undo-tree-id2408 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -4908) (undo-tree-id2409 . -1) 4909 (4989 . 4993) (4988 . 4989) (4984 . 4988) (4983 . 4984) (apply yas--snippet-revive 4965 4982 #s(yas--snippet nil (#s(yas--field 1 4976 4981 nil nil nil t #s(yas--exit 4982 nil))) #s(yas--exit 4982 nil) 110 nil #s(yas--field 1 4976 4981 nil nil nil t #s(yas--exit 4982 nil)) nil nil)) (4977 . 4981) (#("f" 0 1 (fontified nil)) . 4977) (4976 . 4977) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4976 4981 nil nil nil t #s(yas--exit 4982 nil))) #s(yas--exit 4982 nil) 110 nil #s(yas--field 1 4976 4981 nil nil nil t #s(yas--exit 4982 nil)) nil nil)) (4965 . 4978) (#("components(${1:f})$0" 0 20 (fontified nil)) . 4965) (4965 . 4985) (#("components(…)" 0 13 (fontified nil)) . -4965) (4965 . 4978) (4964 . 4965) (4953 . 4963) (#("n" 0 1 (face font-lock-string-face fontified t)) . -4953) (undo-tree-id2410 . -1) 4954 (4946 . 4954) (#("p" 0 1 (face font-lock-string-face fontified t)) . -4946) (undo-tree-id2411 . -1) 4947 (4944 . 4947) (#("(" 0 1 (fontified t)) . -4944) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (#("c" 0 1 (fontified t)) . -4945) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (#("o" 0 1 (fontified t)) . -4946) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (#("n" 0 1 (fontified t)) . -4947) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (#("t" 0 1 (fontified t)) . -4948) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (#("e" 0 1 (fontified t)) . -4949) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (#("n" 0 1 (fontified t)) . -4950) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (#("t" 0 1 (fontified t)) . -4951) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) 4952 (apply yas--snippet-revive 4937 4953 #s(yas--snippet nil (#s(yas--field 1 4945 4952 nil nil nil nil #s(yas--exit 4953 nil))) #s(yas--exit 4953 nil) 109 nil #s(yas--field 1 4945 4952 nil nil nil nil #s(yas--exit 4953 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4945 4952 nil nil nil nil #s(yas--exit 4953 nil))) #s(yas--exit 4953 nil) 109 nil #s(yas--field 1 4945 4952 nil nil nil nil #s(yas--exit 4953 nil)) nil nil)) (4937 . 4953) (#("content(${1:content})$0" 0 23 (fontified nil)) . 4937) (4937 . 4960) (#("content(…)" 0 10 (fontified nil)) . -4937) (4937 . 4947) (4932 . 4937) (#("b" 0 1 (fontified t)) . -4932) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (#("|" 0 1 (fontified t)) . -4933) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (#(" " 0 1 (fontified t)) . -4934) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (#("b" 0 1 (fontified t)) . -4935) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (#("." 0 1 (fontified t)) . -4936) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) 4937 (4936 . 4937) (#("." 0 1 (fontified t)) . -4936) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) 4937 (4931 . 4937) (#("b" 0 1 (fontified t)) . -4931) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (#("u" 0 1 (fontified t)) . -4932) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (#("i" 0 1 (fontified t)) . -4933) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (#("l" 0 1 (fontified t)) . -4934) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (#("d" 0 1 (fontified t)) . -4935) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (#("e" 0 1 (fontified t)) . -4936) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (#("r" 0 1 (fontified t)) . -4937) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) 4938 (apply yas--snippet-revive 4921 4939 #s(yas--snippet nil (#s(yas--field 1 4926 4929 nil nil nil nil #s(yas--field 2 4931 4938 nil nil nil nil #s(yas--exit 4939 nil))) #s(yas--field 2 4931 4938 nil nil nil nil #s(yas--exit 4939 nil))) #s(yas--exit 4939 nil) 108 nil #s(yas--field 2 4931 4938 nil nil nil nil #s(yas--exit 4939 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4926 4929 nil nil nil nil #s(yas--field 2 4931 4938 nil nil nil nil #s(yas--exit 4939 nil))) #s(yas--field 2 4931 4938 nil nil nil nil #s(yas--exit 4939 nil))) #s(yas--exit 4939 nil) 108 nil #s(yas--field 2 4931 4938 nil nil nil nil #s(yas--exit 4939 nil)) nil nil)) (4921 . 4939) (#("edit(${1:ctx}, ${2:builder})$0" 0 30 (fontified nil)) . 4921) (4921 . 4951) (#("edi" 0 3 (fontified nil)) . 4921) (4921 . 4924) (#("edit(…)" 0 7 (fontified nil)) . -4921) (4921 . 4928) (#("edi" 0 3 (fontified t)) . -4921) (undo-tree-id2454 . -3) 4924 (4913 . 4924) (#(" " 0 1 (fontified t)) . -4913) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (#("c" 0 1 (fontified t)) . -4914) (undo-tree-id2457 . -1) (#("t" 0 1 (fontified t)) . -4915) (undo-tree-id2458 . -1) (#("x" 0 1 (fontified t)) . -4916) (undo-tree-id2459 . -1) (#("." 0 1 (fontified t)) . -4917) (undo-tree-id2460 . -1) (#("e" 0 1 (fontified t)) . -4918) (undo-tree-id2461 . -1) (#("d" 0 1 (fontified t)) . -4919) (undo-tree-id2462 . -1) (#("i" 0 1 (fontified t)) . -4920) (undo-tree-id2463 . -1) (#("t" 0 1 (fontified t)) . -4921) (undo-tree-id2464 . -1) (#("(" 0 1 (fontified t)) . -4922) (undo-tree-id2465 . -1) 4923 (4914 . 4923) (4909 . 4914) (4900 . 4909) (4896 . 4900) (#("	" 0 1 (fontified nil)) . -4899) (undo-tree-id2466 . -1) (4900 . 4901) (4896 . 4900) (4880 . 4896) (4879 . 4880) (4877 . 4878) (#("
" 0 1 (fontified t)) . -4877) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (#("
" 0 1 (fontified t)) . -4878) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (#("	" 0 1 (fontified t)) . -4879) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) 4880 (t 25827 58989 276086 778000)) nil (25827 59239 580065 970000) 0 nil])
([nil nil ((#("			_ => 
" 0 6 (fontified t) 6 7 (fontified t syntax-table (1)) 7 9 (fontified t)) . 4973) (undo-tree-id2284 . -8) (undo-tree-id2285 . -2) 4975) nil (25827 59239 579312 71000) 0 nil])
([nil nil ((4873 . 4878)) nil (25827 59239 579291 917000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4976) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) 4977 (t 25827 59239 608633 356000)) nil (25827 59243 223401 803000) 0 nil])
([nil nil ((4965 . 4972) (t 25827 59243 268622 795000)) nil (25827 59322 408776 9000) 0 nil])
([nil nil ((4978 . 4979) (t 25827 59322 438391 23000)) nil (25827 59332 88310 638000) 0 nil])
([nil nil ((5007 . 5009) (5002 . 5007) (#("await" 0 5 (fontified nil)) . -5002) (5002 . 5007) (5001 . 5002) (4993 . 5001) (#("delet" 0 5 (fontified nil)) . 4993) (4993 . 4998) (#("deletion" 0 8 (fontified nil)) . -4993) (4993 . 5001) (#("delet" 0 5 (fontified t)) . -4993) (undo-tree-id2478 . -5) 4998 (4993 . 4998) (4991 . 4993) (t 25827 59332 125028 923000)) nil (25827 59353 821437 742000) 0 nil])
([nil nil ((5214 . 5216) (#("	" 0 1 (fontified nil)) . -5215) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (5216 . 5217) (5214 . 5216) (5198 . 5214) (#("		" 0 2 (fontified t)) . -5197) 5200 (5199 . 5200) (5196 . 5199) (5192 . 5196) (#("Send" 0 4 (fontified nil)) . 5192) (5192 . 5196) (#("Send" 0 4 (face font-lock-type-face fontified t)) . -5192) (undo-tree-id2483 . -4) 5196 (5188 . 5196) (5168 . 5188) (5147 . 5168) (5145 . 5147) (5144 . 5145) (5136 . 5144) (5133 . 5135) (apply yas--snippet-revive 5126 5134 #s(yas--snippet nil nil #s(yas--exit 5133 nil) 111 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5133 nil) 111 nil nil nil nil)) (5126 . 5134) (#("Result<$0>" 0 10 (fontified nil)) . 5126) (5126 . 5136) (#("Resul" 0 5 (fontified nil)) . 5126) (5126 . 5131) (#("Result<…>" 0 9 (fontified nil)) . -5126) (5126 . 5135) (#("Resul" 0 5 (face font-lock-type-face fontified t)) . -5126) (undo-tree-id2484 . -5) (undo-tree-id2485 . -5) 5131 (5126 . 5131) (#("(" 0 1 (fontified t)) . -5126) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (#(")" 0 1 (fontified t)) . -5127) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) 5128 (5126 . 5128) (5117 . 5126) (5106 . 5117) (#("p" 0 1 (fontified t)) . -5106) (undo-tree-id2490 . -1) 5107 (5100 . 5107) (5098 . 5100) (5093 . 5098) (5082 . 5093) (#("ReplyH" 0 6 (fontified nil)) . 5082) (5082 . 5088) (#("ReplyHandle" 0 11 (fontified nil)) . -5082) (5082 . 5093) (#("ReplyH" 0 6 (face font-lock-type-face fontified t)) . -5082) (undo-tree-id2491 . -6) 5088 (5082 . 5088) (5073 . 5082) (5071 . 5073) (5066 . 5071) (5054 . 5066) (#("PoiseCon" 0 8 (fontified nil)) . 5054) (5054 . 5062) (#("PoiseContext" 0 12 (fontified nil)) . -5054) (5054 . 5066) (#("PoiseCon" 0 8 (face font-lock-type-face fontified t)) . -5054) (undo-tree-id2492 . -8) 5062 (5052 . 5062) (#("x" 0 1 (fontified t)) . -5052) (undo-tree-id2493 . -1) (#(":" 0 1 (fontified t)) . -5053) (undo-tree-id2494 . -1) 5054 (5049 . 5054) (5047 . 5049) (#("c" 0 1 (fontified t)) . -5047) (undo-tree-id2495 . -1) (#("t" 0 1 (fontified t)) . -5048) (undo-tree-id2496 . -1) 5049 (5048 . 5049) (5033 . 5048) (#("r" 0 1 (face font-lock-function-name-face fontified t)) . -5033) (undo-tree-id2497 . -1) (#("u" 0 1 (face font-lock-function-name-face fontified t)) . -5034) (undo-tree-id2498 . -1) 5035 (5021 . 5035) (5019 . 5021) (t 25827 59353 848297 442000)) nil (25827 59421 672209 638000) 0 nil])
([nil nil ((5269 . 5271) (5268 . 5269) (5259 . 5267) (#("dele" 0 4 (fontified nil)) . 5259) (5259 . 5263) (#("deletion" 0 8 (fontified nil)) . -5259) (5259 . 5267) (#("dele" 0 4 (fontified t)) . -5259) (undo-tree-id2499 . -4) (undo-tree-id2500 . -4) (undo-tree-id2501 . -4) (undo-tree-id2502 . -4) (undo-tree-id2503 . -4) 5263 (5254 . 5263) (5229 . 5235) (#("r" 0 1 (fontified t)) . -5229) (undo-tree-id2504 . -1) (#("2" 0 1 (fontified t)) . -5230) (undo-tree-id2505 . -1) 5231 (5221 . 5227) (#("s" 0 1 (fontified t)) . -5221) (undo-tree-id2506 . -1) (#("u" 0 1 (fontified t)) . -5222) (undo-tree-id2507 . -1) (#("c" 0 1 (fontified t)) . -5223) (undo-tree-id2508 . -1) (#("c" 0 1 (fontified t)) . -5224) (undo-tree-id2509 . -1) (#("e" 0 1 (fontified t)) . -5225) (undo-tree-id2510 . -1) (#("s" 0 1 (fontified t)) . -5226) (undo-tree-id2511 . -1) (#("s" 0 1 (fontified t)) . -5227) (undo-tree-id2512 . -1) 5228 (5221 . 5228) (#("r" 0 1 (fontified t)) . -5221) (undo-tree-id2513 . -1) (#("1" 0 1 (fontified t)) . -5222) (undo-tree-id2514 . -1) 5223 (apply yas--snippet-revive 5240 5247 #s(yas--snippet nil nil #s(yas--exit 5246 nil) 113 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5246 nil) 113 nil nil nil nil)) (5240 . 5247) (#("join!($0)" 0 9 (fontified nil)) . 5240) (5240 . 5249) (#("join" 0 4 (fontified nil)) . 5240) (5240 . 5244) (#("join!(…)" 0 8 (fontified nil)) . -5240) (5240 . 5248) (#("join" 0 4 (fontified t)) . -5240) (undo-tree-id2515 . -4) (undo-tree-id2516 . -4) 5244 (5231 . 5244) (#("j" 0 1 (fontified t)) . -5231) (undo-tree-id2517 . -1) (#("f" 0 1 (fontified t)) . -5232) (undo-tree-id2518 . -1) 5233 (5232 . 5233) (#("o" 0 1 (fontified t)) . -5232) (undo-tree-id2519 . -1) (#("i" 0 1 (fontified t)) . -5233) (undo-tree-id2520 . -1) 5234 (5231 . 5234) (5216 . 5231) (#("f" 0 1 (fontified t)) . -5216) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (#("u" 0 1 (fontified t)) . -5217) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (#("t" 0 1 (fontified t)) . -5218) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (#("u" 0 1 (fontified t)) . -5219) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (#("r" 0 1 (fontified t)) . -5220) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (#("e" 0 1 (fontified t)) . -5221) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (#("s" 0 1 (fontified t)) . -5222) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (#(":" 0 1 (fontified t)) . -5223) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (#(":" 0 1 (fontified t)) . -5224) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (#("t" 0 1 (fontified t)) . -5225) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (#("r" 0 1 (fontified t)) . -5226) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (#("y" 0 1 (face font-lock-keyword-face fontified t)) . -5227) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (#("_" 0 1 (fontified t)) . -5228) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (#("j" 0 1 (fontified t)) . -5229) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (#("o" 0 1 (fontified t)) . -5230) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (#("i" 0 1 (fontified t)) . -5231) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (#("n" 0 1 (face font-lock-preprocessor-face fontified nil)) . -5232) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (#("!" 0 1 (face font-lock-preprocessor-face fontified nil)) . -5233) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (#("(" 0 1 (fontified t)) . -5234) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (#(")" 0 1 (fontified t)) . -5235) (undo-tree-id2559 . -1) 5236 (apply yas--snippet-revive 5225 5236 #s(yas--snippet nil nil #s(yas--exit 5235 nil) 112 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5235 nil) 112 nil nil nil nil)) (5225 . 5236) (#("try_join!($0)" 0 13 (fontified nil)) . 5225) (5225 . 5238) (#("join" 0 4 (fontified nil)) . 5225) (5225 . 5229) (#("try_join!(…)" 0 12 (fontified nil)) . -5225) (5225 . 5237) (#("join" 0 4 (fontified t)) . -5225) (undo-tree-id2560 . -4) (undo-tree-id2561 . -4) 5229 (5216 . 5229) (t 25827 59421 691425 827000)) nil (25827 59702 313598 37000) 0 nil])
([nil nil ((5271 . 5277) (t 25827 59702 333879 226000)) nil (25827 59710 119495 499000) 0 nil])
([nil nil ((5248 . 5257) (#("try_" 0 4 (fontified nil)) . 5248) (5248 . 5252) (#("try_join!(…)" 0 12 (fontified nil)) . -5248) (5248 . 5260) (#("try_" 0 4 (fontified t)) . -5248) (undo-tree-id2562 . -4) (undo-tree-id2563 . -4) 5252 (5248 . 5252) (#("j" 0 1 (fontified t)) . -5248) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (#("o" 0 1 (fontified t)) . -5249) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (#("i" 0 1 (fontified t)) . -5250) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (#("n" 0 1 (fontified t)) . -5251) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (#("!" 0 1 (face font-lock-preprocessor-face fontified t)) . -5252) (undo-tree-id2576 . -1) 5253 (5269 . 5271) (t 25827 59710 153854 119000)) nil (25827 59919 91664 340000) 0 nil])
([nil nil ((5272 . 5273) (t 25827 59919 109841 409000)) nil (25827 59926 164740 214000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-constant-face fontified t)) . -5216) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -5217) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) 5218 (#("t" 0 1 (face font-lock-constant-face fontified t)) . -5218) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (#(" " 0 1 (fontified t)) . -5219) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (#("(" 0 1 (fontified t)) . -5220) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (#("l" 0 1 (face font-lock-constant-face fontified t)) . -5221) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (#("o" 0 1 (face font-lock-constant-face fontified nil)) . -5222) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (#("g" 0 1 (face font-lock-constant-face fontified t)) . -5223) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -5224) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -5225) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -5226) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (#("," 0 1 (fontified t)) . -5227) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (#(" " 0 1 (fontified t)) . -5228) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -5229) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -5230) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (#("l" 0 1 (face font-lock-constant-face fontified t)) . -5231) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -5232) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -5233) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -5234) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (#(")" 0 1 (fontified t)) . -5235) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (#(" " 0 1 (fontified t)) . -5236) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (#("=" 0 1 (fontified t)) . -5237) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (#(" " 0 1 (fontified t)) . -5238) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) 5239 (t 25827 59926 186484 819000)) nil (25827 60010 727330 124000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5251) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (#("	" 0 1 (fontified t)) . -5252) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -5253) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (#("k" 0 1 (face font-lock-type-face fontified t)) . -5254) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (#("(" 0 1 (fontified t)) . -5255) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (#("(" 0 1 (fontified t)) . -5256) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (#(")" 0 1 (fontified t)) . -5257) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (#(")" 0 1 (fontified t)) . -5258) (undo-tree-id3024 . -1) 5259 (#("
" 0 1 (fontified t)) . -5251) (undo-tree-id3025 . -1) (#("	" 0 1 (fontified t)) . -5252) (undo-tree-id3026 . -1) 5253 (t 25827 60010 762872 512000)) nil (25827 60051 49881 62000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -5250) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) 5251 (t 25827 60051 66072 292000)) nil (25827 60059 544355 733000) 0 nil])
([nil nil ((5253 . 5259) (5251 . 5253) (5250 . 5251) (t 25827 60059 562710 757000)) nil (25827 60065 966605 337000) 0 nil])
([nil nil ((#("	ctx: PoiseContext<'_>,
" 0 1 (fontified t) 1 4 (face font-lock-variable-name-face fontified t) 4 6 (fontified t) 6 18 (face font-lock-type-face fontified t) 18 20 (fontified t) 20 21 (face font-lock-variable-name-face fontified t) 21 24 (fontified t)) . 5048) (undo-tree-id3035 . -23) (undo-tree-id3036 . -6) (undo-tree-id3037 . -6) (undo-tree-id3038 . -6) (undo-tree-id3039 . -6) (undo-tree-id3040 . -6) (undo-tree-id3041 . -6) (undo-tree-id3042 . -6) (undo-tree-id3043 . -6) (undo-tree-id3044 . -6) (undo-tree-id3045 . -24) (t 25827 60066 6022 694000)) nil (25827 60081 959815 265000) 0 nil])
([nil nil ((#("	handle: &ReplyHandle<'_>,
" 0 1 (fontified t) 1 7 (face font-lock-variable-name-face fontified t) 7 9 (fontified t) 9 10 (face rust-ampersand-face fontified t) 10 21 (face font-lock-type-face fontified t) 21 23 (fontified t) 23 24 (face font-lock-variable-name-face fontified t) 24 26 (fontified t) 26 27 (fontified t)) . 5048) (undo-tree-id3032 . -26) (undo-tree-id3033 . -26) (undo-tree-id3034 . -27)) nil (25827 60081 959786 125000) 0 nil])
([nil nil ((3685 . 3688) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -3685) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -3686) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -3687) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) 3688 (#("." 0 1 (fontified t)) . -3943) (undo-tree-id3072 . -1) (#("m" 0 1 (fontified t)) . -3944) (undo-tree-id3073 . -1) (#("a" 0 1 (fontified t)) . -3945) (undo-tree-id3074 . -1) (#("p" 0 1 (fontified t)) . -3946) (undo-tree-id3075 . -1) 3947 (3943 . 3947) (t 25827 60081 995969 557000)) nil (25827 60192 335238 33000) 0 nil])
([nil nil ((#("	if let Err(logerr) = logres {
		handle.edit(ctx, |e| {
			e.content(format!(\"⚠️ **WARNING:** logging failed: {logerr}. The purged messages will be **irrevocably** lost.\\
							   Proceed anyway?\"))
		    .components(|c| {
				c.create_action_row(|ar| {
					ar.create_button(|b| b.label(\"Yes\").custom_id(\"yes\"))
						.create_button(|b| b.label(\"No\").custom_id(\"no\"))
				})
			})
		}).await.map_err(Error::from)?;
	}
" 0 1 (fontified t) 1 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 11 (face font-lock-type-face fontified t) 11 31 (fontified t) 31 39 (fontified t) 39 40 (fontified t) 40 56 (fontified t) 56 60 (fontified t) 60 61 (fontified t) 61 69 (fontified t) 69 71 (face rust-builtin-formatting-macro fontified t) 71 72 (face rust-builtin-formatting-macro fontified t) 72 76 (face rust-builtin-formatting-macro fontified t) 76 77 (fontified t) 77 78 (face font-lock-string-face fontified t) 78 79 (face font-lock-string-face fontified t) 79 80 (face font-lock-string-face fontified t rear-nonsticky t) 80 110 (face font-lock-string-face fontified t) 110 118 (face rust-string-interpolation fontified t) 118 171 (face font-lock-string-face fontified t) 171 196 (face font-lock-string-face fontified t) 196 197 (face font-lock-string-face fontified t) 197 199 (fontified t) 199 200 (fontified t) 200 201 (fontified t) 201 206 (fontified t) 206 207 (fontified t) 207 224 (fontified t) 224 226 (fontified t) 226 228 (fontified t) 228 230 (fontified t) 230 255 (fontified t) 255 263 (fontified t) 263 283 (fontified t) 283 289 (fontified t) 289 294 (face font-lock-string-face fontified t) 294 296 (fontified t) 296 301 (fontified t) 301 306 (fontified t) 306 311 (face font-lock-string-face fontified t) 311 312 (fontified t) 312 314 (fontified t) 314 320 (fontified t) 320 321 (fontified t) 321 326 (fontified t) 326 341 (fontified t) 341 347 (fontified t) 347 351 (face font-lock-string-face fontified t) 351 353 (fontified t) 353 363 (fontified t) 363 367 (face font-lock-string-face fontified t) 367 368 (fontified t) 368 369 (fontified t) 369 370 (fontified t) 370 372 (fontified t) 372 376 (fontified t) 376 377 (fontified t) 377 380 (fontified t) 380 381 (fontified t) 381 383 (fontified t) 383 385 (fontified t) 385 386 (fontified t) 386 388 (fontified t) 388 393 (face font-lock-keyword-face fontified t) 393 394 (fontified t) 394 402 (fontified t) 402 407 (face font-lock-type-face fontified t) 407 412 (fontified t) 412 413 (fontified t) 413 414 (fontified t) 414 415 (face rust-question-mark fontified t) 415 416 (fontified t) 416 417 (fontified t) 417 419 (fontified t) 419 420 (fontified t)) . 3947) (undo-tree-id3046 . -419) (undo-tree-id3047 . -419) (undo-tree-id3048 . -419) (undo-tree-id3049 . -4) (undo-tree-id3050 . -33) (undo-tree-id3051 . -78) (undo-tree-id3052 . -60) (undo-tree-id3053 . -60) (undo-tree-id3054 . -55) (undo-tree-id3055 . -227) (undo-tree-id3056 . -261) (undo-tree-id3057 . -261) (undo-tree-id3058 . -417) (undo-tree-id3059 . -419) (undo-tree-id3060 . -417) (undo-tree-id3061 . -419) (undo-tree-id3062 . -420) 4366) nil (25827 60192 335211 851000) 0 nil])
([nil nil ((1809 . 1810) (apply yas--snippet-revive 1793 1809 #s(yas--snippet nil (#s(yas--field 1 1803 1808 nil nil nil t #s(yas--exit 1809 nil))) #s(yas--exit 1809 nil) 120 nil #s(yas--field 1 1803 1808 nil nil nil t #s(yas--exit 1809 nil)) nil nil)) (1804 . 1808) (#("default" 0 7 (fontified nil)) . 1804) (1803 . 1804) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1803 1808 nil nil nil t #s(yas--exit 1809 nil))) #s(yas--exit 1809 nil) 120 nil #s(yas--field 1 1803 1808 nil nil nil t #s(yas--exit 1809 nil)) nil nil)) (1793 . 1811) (#("unwrap_or(${1:default})$0" 0 25 (fontified nil)) . 1793) (1793 . 1818) (#("unwrap_" 0 7 (fontified nil)) . 1793) (1793 . 1800) (#("unwrap_or(…)" 0 12 (fontified nil)) . -1793) (1793 . 1805) (#("unwrap_" 0 7 (fontified t)) . -1793) (undo-tree-id3076 . -7) 1800 (1794 . 1800) (1786 . 1794) (1765 . 1786) (1763 . 1765) (1712 . 1717) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1712) (undo-tree-id3077 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1713) (undo-tree-id3078 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -1714) (undo-tree-id3079 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1715) (undo-tree-id3080 . -1) 1716 (1689 . 1697) (1676 . 1689) (1655 . 1676) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1655) (undo-tree-id3081 . -1) 1656 (#("l" 0 1 (face font-lock-string-face fontified t)) . -1655) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1656) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -1657) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1658) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1659) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1660) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -1661) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) 1662 (1692 . 1696) (#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -1692) (undo-tree-id3103 . -1) 1693 (1686 . 1693) (#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -1686) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -1687) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -1688) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -1689) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -1690) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -1691) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -1692) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -1693) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -1694) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -1695) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) 1696 (#("p" 0 1 (face font-lock-string-face fontified t)) . -1663) (undo-tree-id3124 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -1664) (undo-tree-id3125 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1665) (undo-tree-id3126 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -1666) (undo-tree-id3127 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1667) (undo-tree-id3128 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1668) (undo-tree-id3129 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -1669) (undo-tree-id3130 . -1) 1670 (#("o" 0 1 (face font-lock-string-face fontified t)) . -1670) (undo-tree-id3131 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1671) (undo-tree-id3132 . -1) (#("c" 0 1 (face font-lock-string-face fontified nil)) . -1672) (undo-tree-id3133 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -1673) (undo-tree-id3134 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1674) (undo-tree-id3135 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1675) (undo-tree-id3136 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1676) (undo-tree-id3137 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1677) (undo-tree-id3138 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1678) (undo-tree-id3139 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -1679) (undo-tree-id3140 . -1) (#("y" 0 1 (face font-lock-string-face fontified t)) . -1680) (undo-tree-id3141 . -1) 1681 (1693 . 1702) (1672 . 1693) (1661 . 1672) (1640 . 1661) (#("=" 0 1 (fontified t)) . -1640) (undo-tree-id3142 . -1) (#(" " 0 1 (fontified t)) . -1641) (undo-tree-id3143 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -1642) (undo-tree-id3144 . -1) 1643 (1627 . 1643) (1625 . 1627) (1648 . 1651) (1627 . 1648) (#("l" 0 1 (fontified t)) . -1627) (undo-tree-id3145 . -1) (#("o" 0 1 (fontified t)) . -1628) (undo-tree-id3146 . -1) (#("g" 0 1 (fontified t)) . -1629) (undo-tree-id3147 . -1) (#("_" 0 1 (fontified t)) . -1630) (undo-tree-id3148 . -1) 1631 (1627 . 1631) (#("c" 0 1 (fontified t)) . -1627) (undo-tree-id3149 . -1) 1628 (1627 . 1628) (1625 . 1627) (#("
" 0 1 (fontified t)) . -3937) (undo-tree-id3150 . -1) (#("	" 0 1 (fontified t)) . -3938) (undo-tree-id3151 . -1) (#("	" 0 1 (fontified t)) . -3939) (undo-tree-id3152 . -1) 3940 (3937 . 3940) (apply yas--snippet-revive 4012 4026 #s(yas--snippet nil nil #s(yas--exit 4026 nil) 119 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4026 nil) 119 nil nil nil nil)) (4012 . 4026) (#("LogType::Purge$0" 0 16 (fontified nil)) . 4012) (4012 . 4028) (#("Log" 0 3 (fontified nil)) . 4012) (4012 . 4015) (#("LogType::Purge" 0 14 (fontified nil)) . -4012) (4012 . 4026) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -4012) (undo-tree-id3153 . -3) 4015 (4012 . 4015) (4011 . 4012) (#(" " 0 1 (fontified t)) . -4011) (undo-tree-id3154 . -1) (#("(" 0 1 (fontified t)) . -4012) (undo-tree-id3155 . -1) (#(")" 0 1 (fontified t)) . -4013) (undo-tree-id3156 . -1) 4014 (apply yas--snippet-revive 4002 4010 #s(yas--snippet nil nil #s(yas--exit 4010 nil) 118 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4010 nil) 118 nil nil nil nil)) (4002 . 4010) (#("unwrap()$0" 0 10 (fontified nil)) . 4002) (4002 . 4012) (#("unwr" 0 4 (fontified nil)) . 4002) (4002 . 4006) (#("unwrap()" 0 8 (fontified nil)) . -4002) (4002 . 4010) (#("unwr" 0 4 (fontified t)) . -4002) (undo-tree-id3157 . -4) 4006 (4002 . 4006) (4001 . 4002) (apply yas--snippet-revive 3938 4008 #s(yas--snippet nil (#s(yas--field 1 3946 4007 nil nil nil t #s(yas--exit 4008 nil))) #s(yas--exit 4008 nil) 114 nil #s(yas--field 1 3946 4007 nil nil nil t #s(yas--exit 4008 nil)) nil nil)) (apply yas--snippet-revive 3952 4007 #s(yas--snippet nil (#s(yas--field 1 3966 4006 nil nil nil t #s(yas--exit 4007 nil))) #s(yas--exit 4007 nil) 115 nil #s(yas--field 1 3966 4006 nil nil nil t #s(yas--exit 4007 nil)) #s(yas--field 1 3946 4007 nil nil nil t #s(yas--exit 4008 nil)) nil)) (apply yas--snippet-revive 3983 4006 #s(yas--snippet nil (#s(yas--field 1 3987 4001 nil nil nil t #s(yas--field 2 4003 4005 nil nil nil nil #s(yas--exit 4006 nil))) #s(yas--field 2 4003 4005 nil nil nil nil #s(yas--exit 4006 nil))) #s(yas--exit 4006 nil) 116 nil #s(yas--field 1 3987 4001 nil nil nil t #s(yas--field 2 4003 4005 nil nil nil nil #s(yas--exit 4006 nil))) #s(yas--field 1 3966 4006 nil nil nil t #s(yas--exit 4007 nil)) nil)) (apply yas--snippet-revive 3991 4001 #s(yas--snippet nil nil #s(yas--exit 4001 nil) 117 nil nil #s(yas--field 1 3987 4001 nil nil nil t #s(yas--field 2 4003 4005 nil nil nil nil #s(yas--exit 4006 nil))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4001 nil) 117 nil nil #s(yas--field 1 3987 4001 nil nil nil t #s(yas--field 2 4003 4005 nil nil nil nil #s(yas--exit 4006 nil))) nil)) (3991 . 4001) (#("guild_id()$0" 0 12 (fontified nil)) . 3991) (3991 . 4003) (#("guild" 0 5 (fontified nil)) . 3991) (3991 . 3996) (#("guild_id()" 0 10 (fontified nil)) . -3991) (3991 . 4001) (#("guild" 0 5 (fontified t)) . -3991) (undo-tree-id3158 . -5) (undo-tree-id3159 . -5) 3996 (3988 . 3996) (#("()" 0 2 (fontified nil)) . 3988) (3987 . 3988) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3987 4001 nil nil nil t #s(yas--field 2 4003 4005 nil nil nil nil #s(yas--exit 4006 nil))) #s(yas--field 2 4003 4005 nil nil nil nil #s(yas--exit 4006 nil))) #s(yas--exit 4006 nil) 116 nil #s(yas--field 1 3987 4001 nil nil nil t #s(yas--field 2 4003 4005 nil nil nil nil #s(yas--exit 4006 nil))) #s(yas--field 1 3966 4006 nil nil nil t #s(yas--exit 4007 nil)) nil)) (3983 . 3994) (#("Log(${1:()}, ${2:()})$0" 0 23 (fontified nil)) . 3983) (3983 . 4006) (#("Log(…)" 0 6 (fontified nil)) . -3983) (3983 . 3989) (3981 . 3983) (3966 . 3981) (#("Log" 0 3 (fontified nil)) . 3966) (3966 . 3969) (#("LogErrorContext" 0 15 (fontified nil)) . -3966) (3966 . 3981) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -3966) (undo-tree-id3160 . -3) (undo-tree-id3161 . -3) 3969 (3967 . 3969) (#("context" 0 7 (fontified nil)) . 3967) (3966 . 3967) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3966 4006 nil nil nil t #s(yas--exit 4007 nil))) #s(yas--exit 4007 nil) 115 nil #s(yas--field 1 3966 4006 nil nil nil t #s(yas--exit 4007 nil)) #s(yas--field 1 3946 4007 nil nil nil t #s(yas--exit 4008 nil)) nil)) (3952 . 3974) (#("contextualize(${1:context})$0" 0 29 (fontified nil)) . 3952) (3952 . 3981) (#("contextualize(…) (as Contextualizable)" 0 38 (fontified nil)) . -3952) (3952 . 3990) (3951 . 3952) (#("." 0 1 (fontified t)) . -3951) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) 3952 (3947 . 3952) (#("f" 0 1 (fontified nil)) . 3947) (3946 . 3947) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3946 4007 nil nil nil t #s(yas--exit 4008 nil))) #s(yas--exit 4008 nil) 114 nil #s(yas--field 1 3946 4007 nil nil nil t #s(yas--exit 4008 nil)) nil nil)) (3938 . 3948) (#("map_err(${1:f})$0" 0 17 (fontified nil)) . 3938) (3938 . 3955) (#("map_" 0 4 (fontified nil)) . 3938) (3938 . 3942) (#("map_err(…) (as TryFutureExt)" 0 28 (fontified nil)) . -3938) (3938 . 3966) (#("map_" 0 4 (fontified t)) . -3938) (undo-tree-id3164 . -4) 3942 (3938 . 3942) (3937 . 3938) (#("." 0 1 (fontified t)) . -3937) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (#("a" 0 1 (fontified t)) . -3938) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (#("w" 0 1 (fontified t)) . -3939) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) 3940 (#("a" 0 1 (fontified t)) . -3940) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (#("i" 0 1 (fontified t)) . -3941) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -3942) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) 3943 (#("." 0 1 (fontified t)) . -3937) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) 3938 (3937 . 3938) (t 25827 60192 365601 433000)) nil (25827 60331 309274 747000) 0 nil])
([nil nil ((#("	let sequential = sequential.unwrap_or(false);
" 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 15 (face font-lock-variable-name-face fontified t) 15 29 (fontified t) 29 39 (fontified t) 39 44 (face font-lock-keyword-face fontified t) 44 46 (fontified t) 46 47 (fontified t)) . 1764) (undo-tree-id3230 . -46) (undo-tree-id3231 . 1) (undo-tree-id3232 . -45) (undo-tree-id3233 . -45) (undo-tree-id3234 . -45) (undo-tree-id3235 . -45) (undo-tree-id3236 . -45) (undo-tree-id3237 . -45) (undo-tree-id3238 . -45) (undo-tree-id3239 . -45) (undo-tree-id3240 . -45) (undo-tree-id3241 . -45) (undo-tree-id3242 . -45) (undo-tree-id3243 . -45) (undo-tree-id3244 . -45) (undo-tree-id3245 . -45) (undo-tree-id3246 . -45) (undo-tree-id3247 . -45) (undo-tree-id3248 . -45) (undo-tree-id3249 . -45) (undo-tree-id3250 . -45) (undo-tree-id3251 . -45) (undo-tree-id3252 . -45) (undo-tree-id3253 . -45) (undo-tree-id3254 . -45) (undo-tree-id3255 . -45) (undo-tree-id3256 . -45) (undo-tree-id3257 . -45) (undo-tree-id3258 . -45) (undo-tree-id3259 . -47) 1809 (t 25827 60331 315135 154000)) nil (25827 60348 836425 747000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2229 . 2230) (#("
" 0 1 (fontified nil)) . -2275) (2228 . 2276)) nil (25827 60348 836311 888000) 0 nil])
([nil nil ((2227 . 2229) (#("
" 0 1 (fontified t)) . -2227) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (#("
" 0 1 (fontified t)) . -2228) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (#("	" 0 1 (rear-nonsticky t fontified t)) . -2229) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) 2230) nil (25827 60348 836291 642000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2275) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) 2276 (2274 . 2276)) nil (25827 60348 836172 896000) 0 nil])
([nil nil ((3655 . 3657) (#("
" 0 1 (fontified t)) . -3723) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (#(" " 0 1 (fontified t)) . -3724) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (#(" " 0 1 (fontified t)) . -3725) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (#(" " 0 1 (fontified t)) . -3726) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (#(" " 0 1 (fontified t)) . -3727) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (#(" " 0 1 (fontified t)) . -3728) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (#(" " 0 1 (fontified t)) . -3729) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (#(" " 0 1 (fontified t)) . -3730) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (#(" " 0 1 (fontified t)) . -3731) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) 3732 (#("
" 0 1 (fontified t)) . -3666) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (#(" " 0 1 (fontified t)) . -3667) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (#(" " 0 1 (fontified t)) . -3668) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (#(" " 0 1 (fontified t)) . -3669) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (#(" " 0 1 (fontified t)) . -3670) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (#(" " 0 1 (fontified t)) . -3671) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (#(" " 0 1 (fontified t)) . -3672) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (#(" " 0 1 (fontified t)) . -3673) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (#(" " 0 1 (fontified t)) . -3674) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) 3675 (#("
" 0 1 (fontified t)) . -3747) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (#("	" 0 1 (fontified t)) . -3748) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (#("	" 0 1 (fontified t)) . -3749) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) 3750 (#("." 0 1 (fontified t)) . -3750) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (#("m" 0 1 (fontified t)) . -3751) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (#("a" 0 1 (fontified t)) . -3752) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (#("p" 0 1 (fontified t)) . -3753) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (#("_" 0 1 (fontified t)) . -3754) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (#("e" 0 1 (fontified t)) . -3755) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (#("r" 0 1 (fontified t)) . -3756) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (#("r" 0 1 (fontified t)) . -3757) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (#("(" 0 1 (fontified t)) . -3758) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -3759) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3760) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3761) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3762) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3763) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (#(":" 0 1 (fontified t)) . -3764) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (#(":" 0 1 (fontified t)) . -3765) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (#("f" 0 1 (fontified t)) . -3766) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (#("r" 0 1 (fontified t)) . -3767) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (#("o" 0 1 (fontified t)) . -3768) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (#("m" 0 1 (fontified t)) . -3769) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (#(")" 0 1 (fontified t)) . -3770) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) 3771 (t 25827 60349 135075 163000)) nil (25827 60417 580014 627000) 0 nil])
([nil nil ((3239 . 3241) (t 25827 60417 594844 352000)) nil (25827 60440 989949 136000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -4417) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (4418 . 4419) (4416 . 4418) (4414 . 4416) (4411 . 4413) (apply yas--snippet-revive 4404 4412 #s(yas--snippet nil nil #s(yas--exit 4411 nil) 121 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4411 nil) 121 nil nil nil nil)) (4404 . 4412) (#("Result<$0>" 0 10 (fontified nil)) . 4404) (4404 . 4414) (#("Resul" 0 5 (fontified nil)) . 4404) (4404 . 4409) (#("Result<…>" 0 9 (fontified nil)) . -4404) (4404 . 4413) (#("Resul" 0 5 (face font-lock-type-face fontified t)) . -4404) (undo-tree-id3397 . -5) (undo-tree-id3398 . -5) (undo-tree-id3399 . -5) (undo-tree-id3400 . -5) (undo-tree-id3401 . -5) 4409 (4404 . 4409) (4333 . 4353) (#("l" 0 1 (fontified t)) . -4333) (undo-tree-id3402 . -1) (#("i" 0 1 (fontified t)) . -4334) (undo-tree-id3403 . -1) (#("d" 0 1 (fontified t)) . -4335) (undo-tree-id3404 . -1) 4336 (4327 . 4336) (4250 . 4267) (4230 . 4250) (4219 . 4230) (4198 . 4219) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -4198) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) 4199 (4257 . 4259) (4188 . 4199) (#("m" 0 1 (face font-lock-doc-face fontified t)) . -4188) (undo-tree-id3408 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4189) (undo-tree-id3409 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -4190) (undo-tree-id3410 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -4191) (undo-tree-id3411 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -4192) (undo-tree-id3412 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -4193) (undo-tree-id3413 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -4194) (undo-tree-id3414 . -1) (#("s" 0 1 (face font-lock-doc-face fontified t)) . -4195) (undo-tree-id3415 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -4196) (undo-tree-id3416 . -1) 4197 (4176 . 4197) (4175 . 4176) (4280 . 4284) (#("		" 0 2 (fontified t)) . -4279) 4282 (4281 . 4282) (4278 . 4281) (#(")" 0 1 (fontified t)) . -4278) (undo-tree-id3417 . -1) (#(" " 0 1 (fontified t)) . -4279) (undo-tree-id3418 . -1) 4280 (4278 . 4280) (#(" " 0 1 (fontified t)) . -4278) (undo-tree-id3419 . -1) 4279 (4275 . 4279) (4262 . 4275) (4250 . 4262) (#("IntoI" 0 5 (fontified nil)) . 4250) (4250 . 4255) (#("IntoIterator" 0 12 (fontified nil)) . -4250) (4250 . 4262) (#("IntoI" 0 5 (face font-lock-type-face fontified t)) . -4250) (undo-tree-id3420 . -5) 4255 (4235 . 4255) (4233 . 4235) (4231 . 4233) (4227 . 4231) (#("Htt" 0 3 (fontified nil)) . 4227) (4227 . 4230) (#("Http" 0 4 (fontified nil)) . -4227) (4227 . 4231) (#("Htt" 0 3 (face font-lock-type-face fontified t)) . -4227) (undo-tree-id3421 . -3) (undo-tree-id3422 . -3) 4230 (4228 . 4230) (4209 . 4228) (#("t" 0 1 (fontified t)) . -4209) (undo-tree-id3423 . -1) (#(":" 0 1 (fontified t)) . -4210) (undo-tree-id3424 . -1) (#(" " 0 1 (fontified t)) . -4211) (undo-tree-id3425 . -1) 4212 (4203 . 4212) (4202 . 4203) (#("c" 0 1 (fontified t)) . -4202) (undo-tree-id3426 . -1) 4203 (4202 . 4203) (#("	" 0 1 (fontified t)) . -4202) (undo-tree-id3427 . -1) (#("c" 0 1 (fontified t)) . -4203) (undo-tree-id3428 . -1) (#(";" 0 1 (fontified t)) . -4204) (undo-tree-id3429 . -1) 4205 (4203 . 4205) (4201 . 4203) (4200 . 4201) (4185 . 4200) (#("s" 0 1 (face font-lock-function-name-face fontified t)) . -4185) (undo-tree-id3430 . -1) 4186 (4185 . 4186) (4176 . 4185) (4175 . 4177) (t 25827 60441 8098 640000)) nil (25827 60734 812560 835000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -4417) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) 4418 (4416 . 4418)) nil (25827 60734 812489 405000) 0 nil])
([nil nil ((4422 . 4424) (4418 . 4422) (4417 . 4418) (#("O" 0 1 (face font-lock-type-face fontified t)) . -4417) (undo-tree-id3388 . -1) 4418 (4417 . 4418)) nil (25827 60734 812475 872000) 0 nil])
([nil nil ((4383 . 4392) (t 25827 60734 833769 209000)) nil (25827 60825 38922 802000) 0 nil])
([nil nil ((4383 . 4387) (#("O" 0 1 (face font-lock-type-face fontified t)) . -4383) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -4384) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -4385) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -4386) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -4387) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -4388) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) 4389 (t 25827 60825 56795 504000)) nil (25827 60831 59490 387000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -4514) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (4515 . 4516) (4512 . 4515) (4510 . 4512) (4501 . 4508) (apply yas--snippet-revive 4489 4503 #s(yas--snippet nil nil #s(yas--exit 4503 nil) 126 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4503 nil) 126 nil nil nil nil)) (4489 . 4503) (#("array_chunks()$0" 0 16 (fontified nil)) . 4489) (4489 . 4505) (#("array_chunks() (as Iterator)" 0 28 (fontified nil)) . -4489) (4489 . 4517) (4488 . 4489) (apply yas--snippet-revive 4480 4488 #s(yas--snippet nil nil #s(yas--exit 4488 nil) 125 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4488 nil) 125 nil nil nil nil)) (4480 . 4488) (#("by_ref()$0" 0 10 (fontified nil)) . 4480) (4480 . 4490) (#("by_" 0 3 (fontified nil)) . 4480) (4480 . 4483) (#("by_ref() (as Iterator)" 0 22 (fontified nil)) . -4480) (4480 . 4502) (#("by_" 0 3 (fontified t)) . -4480) (undo-tree-id3506 . -3) 4483 (4480 . 4483) (4467 . 4480) (4463 . 4467) (#("i" 0 1 (fontified t)) . -4463) (undo-tree-id3507 . -1) (#("t" 0 1 (fontified t)) . -4464) (undo-tree-id3508 . -1) (#("e" 0 1 (fontified t)) . -4465) (undo-tree-id3509 . -1) (#("r" 0 1 (fontified t)) . -4466) (undo-tree-id3510 . -1) (#("." 0 1 (fontified t)) . -4467) (undo-tree-id3511 . -1) 4468 (4463 . 4468) (4461 . 4463) (4460 . 4461) (apply yas--snippet-revive 4449 4460 #s(yas--snippet nil nil #s(yas--exit 4460 nil) 124 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4460 nil) 124 nil nil nil nil)) (4449 . 4460) (#("into_iter()$0" 0 13 (fontified nil)) . 4449) (4449 . 4462) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -4449) (4449 . 4478) (4440 . 4449) (#("c" 0 1 (fontified t)) . -4440) (undo-tree-id3512 . -1) (#("h" 0 1 (fontified t)) . -4441) (undo-tree-id3513 . -1) 4442 (4429 . 4442) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -4429) (undo-tree-id3514 . -1) 4430 (4425 . 4430) (#("m" 0 1 (fontified t)) . -4425) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (#("e" 0 1 (fontified t)) . -4426) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (#("s" 0 1 (fontified t)) . -4427) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (#("s" 0 1 (fontified t)) . -4428) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (#("a" 0 1 (fontified t)) . -4429) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (#("g" 0 1 (fontified t)) . -4430) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (#("e" 0 1 (fontified t)) . -4431) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (#("s" 0 1 (fontified t)) . -4432) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (#("." 0 1 (fontified t)) . -4433) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (#("i" 0 1 (fontified t)) . -4434) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -4435) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (#("t" 0 1 (fontified t)) . -4436) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (#("o" 0 1 (fontified t)) . -4437) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (#("_" 0 1 (fontified t)) . -4438) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (#("i" 0 1 (fontified t)) . -4439) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (#("t" 0 1 (fontified t)) . -4440) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (#("e" 0 1 (fontified t)) . -4441) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (#("r" 0 1 (fontified t)) . -4442) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (#("(" 0 1 (fontified t)) . -4443) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (#(")" 0 1 (fontified t)) . -4444) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (#("." 0 1 (fontified t)) . -4445) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) 4446 (#("a" 0 1 (fontified t)) . -4446) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (#("r" 0 1 (fontified t)) . -4447) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (#("r" 0 1 (fontified t)) . -4448) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (#("a" 0 1 (fontified t)) . -4449) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (#("y" 0 1 (fontified t)) . -4450) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (#("_" 0 1 (fontified t)) . -4451) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (#("c" 0 1 (fontified t)) . -4452) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (#("h" 0 1 (fontified t)) . -4453) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (#("u" 0 1 (fontified t)) . -4454) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (#("n" 0 1 (fontified t)) . -4455) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (#("k" 0 1 (fontified t)) . -4456) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (#("s" 0 1 (fontified t)) . -4457) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (#(":" 0 1 (fontified nil)) . -4458) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (#(":" 0 1 (fontified t)) . -4459) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (#("<" 0 1 (fontified t)) . -4460) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (#("1" 0 1 (fontified t)) . -4461) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (#("0" 0 1 (fontified t)) . -4462) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (#("0" 0 1 (fontified t)) . -4463) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (#(">" 0 1 (fontified t)) . -4464) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (#("(" 0 1 (fontified t)) . -4465) (undo-tree-id3631 . -1) (#(")" 0 1 (fontified t)) . -4466) (undo-tree-id3632 . -1) 4467 (4461 . 4465) (4458 . 4461) (apply yas--snippet-revive 4446 4460 #s(yas--snippet nil nil #s(yas--exit 4460 nil) 123 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4460 nil) 123 nil nil nil nil)) (4446 . 4460) (#("array_chunks()$0" 0 16 (fontified nil)) . 4446) (4446 . 4462) (#("arra" 0 4 (fontified nil)) . 4446) (4446 . 4450) (#("array_chunks() (as Iterator)" 0 28 (fontified nil)) . -4446) (4446 . 4474) (#("arra" 0 4 (fontified t)) . -4446) (undo-tree-id3633 . -4) 4450 (4445 . 4450) (apply yas--snippet-revive 4434 4445 #s(yas--snippet nil nil #s(yas--exit 4445 nil) 122 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4445 nil) 122 nil nil nil nil)) (4434 . 4445) (#("into_iter()$0" 0 13 (fontified nil)) . 4434) (4434 . 4447) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -4434) (4434 . 4463) (4425 . 4434) (4423 . 4425) (t 25827 60831 86774 969000)) nil (25827 61263 791764 502000) 0 nil])
([nil nil ((4485 . 4488) (4482 . 4485) (#("now" 0 3 (fontified nil)) . 4482) (4482 . 4485) (#("now" 0 3 (fontified t)) . -4482) (undo-tree-id3446 . -3) 4485 (4482 . 4485) (4480 . 4482) (#(":" 0 1 (fontified t)) . -4480) (undo-tree-id3447 . -1) (#(":" 0 1 (fontified t)) . -4481) (undo-tree-id3448 . -1) (#("t" 0 1 (fontified t)) . -4482) (undo-tree-id3449 . -1) (#("i" 0 1 (fontified t)) . -4483) (undo-tree-id3450 . -1) (#("m" 0 1 (fontified t)) . -4484) (undo-tree-id3451 . -1) (#("e" 0 1 (fontified t)) . -4485) (undo-tree-id3452 . -1) (#("s" 0 1 (fontified t)) . -4486) (undo-tree-id3453 . -1) (#("t" 0 1 (fontified t)) . -4487) (undo-tree-id3454 . -1) (#("a" 0 1 (fontified t)) . -4488) (undo-tree-id3455 . -1) (#("m" 0 1 (fontified t)) . -4489) (undo-tree-id3456 . -1) (#("p" 0 1 (fontified t)) . -4490) (undo-tree-id3457 . -1) (#("(" 0 1 (fontified t)) . -4491) (undo-tree-id3458 . -1) (#(")" 0 1 (fontified t)) . -4492) (undo-tree-id3459 . -1) 4493 (4489 . 4493) (4482 . 4489) (4480 . 4482) (apply yas--snippet-revive 4477 4480 #s(yas--snippet nil nil #s(yas--exit 4480 nil) 128 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4480 nil) 128 nil nil nil nil)) (4477 . 4480) (#("Utc$0" 0 5 (fontified nil)) . 4477) (4477 . 4482) (#("Utc" 0 3 (fontified nil)) . 4477) (4477 . 4480) (#("Utc" 0 3 (face font-lock-type-face fontified t)) . -4477) (undo-tree-id3460 . -3) 4480 (4479 . 4480) (#("c" 0 1 (face font-lock-type-face fontified t)) . -4479) (undo-tree-id3461 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -4480) (undo-tree-id3462 . -1) 4481 (4480 . 4481) (#(":" 0 1 (fontified t)) . -4480) (undo-tree-id3463 . -1) (#(":" 0 1 (fontified t)) . -4481) (undo-tree-id3464 . -1) 4482 (4480 . 4482) (#(":" 0 1 (fontified t)) . -4480) (undo-tree-id3465 . -1) (#(":" 0 1 (fontified t)) . -4481) (undo-tree-id3466 . -1) 4482 (4477 . 4482) (4463 . 4477) (4461 . 4463) (apply yas--snippet-revive 4489 4510 #s(yas--snippet nil (#s(yas--field 1 4500 4509 nil nil nil nil #s(yas--exit 4510 nil))) #s(yas--exit 4510 nil) 127 nil #s(yas--field 1 4500 4509 nil nil nil nil #s(yas--exit 4510 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4500 4509 nil nil nil nil #s(yas--exit 4510 nil))) #s(yas--exit 4510 nil) 127 nil #s(yas--field 1 4500 4509 nil nil nil nil #s(yas--exit 4510 nil)) nil nil)) (4489 . 4510) (#("take_while(${1:predicate})$0" 0 28 (fontified nil)) . 4489) (4489 . 4517) (#("take" 0 4 (fontified nil)) . 4489) (4489 . 4493) (#("take_while(…) (as Iterator)" 0 27 (fontified nil)) . -4489) (4489 . 4516) (#("take" 0 4 (fontified t)) . -4489) (undo-tree-id3467 . -4) (undo-tree-id3468 . -4) 4493 (4488 . 4493) (#("." 0 1 (fontified t)) . -4510) (undo-tree-id3469 . -1) (#("t" 0 1 (fontified t)) . -4511) (undo-tree-id3470 . -1) (#("a" 0 1 (fontified nil)) . -4512) (undo-tree-id3471 . -1) (#("k" 0 1 (fontified t)) . -4513) (undo-tree-id3472 . -1) (#("e" 0 1 (fontified t)) . -4514) (undo-tree-id3473 . -1) 4515 (4510 . 4515) (#("
" 0 1 (fontified t)) . -4512) (undo-tree-id3474 . -1) (#("	" 0 1 (fontified t)) . -4513) (undo-tree-id3475 . -1) (#("	" 0 1 (fontified t)) . -4514) (undo-tree-id3476 . -1) (#("i" 0 1 (fontified t)) . -4515) (undo-tree-id3477 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -4516) (undo-tree-id3478 . -1) (#(" " 0 1 (fontified t)) . -4517) (undo-tree-id3479 . -1) (#("m" 0 1 (fontified t)) . -4518) (undo-tree-id3480 . -1) (#("s" 0 1 (fontified t)) . -4519) (undo-tree-id3481 . -1) (#("g" 0 1 (fontified t)) . -4520) (undo-tree-id3482 . -1) (#("s" 0 1 (fontified t)) . -4521) (undo-tree-id3483 . -1) (#("." 0 1 (fontified t)) . -4522) (undo-tree-id3484 . -1) (#("l" 0 1 (fontified t)) . -4523) (undo-tree-id3485 . -1) (#("e" 0 1 (fontified t)) . -4524) (undo-tree-id3486 . -1) (#("n" 0 1 (fontified t)) . -4525) (undo-tree-id3487 . -1) 4526 (4515 . 4526) (#("c" 0 1 (fontified t)) . -4515) (undo-tree-id3488 . -1) (#("h" 0 1 (fontified t)) . -4516) (undo-tree-id3489 . -1) (#("a" 0 1 (fontified t)) . -4517) (undo-tree-id3490 . -1) (#("n" 0 1 (fontified t)) . -4518) (undo-tree-id3491 . -1) (#("n" 0 1 (fontified t)) . -4519) (undo-tree-id3492 . -1) (#("e" 0 1 (fontified t)) . -4520) (undo-tree-id3493 . -1) (#("l" 0 1 (fontified t)) . -4521) (undo-tree-id3494 . -1) (#("i" 0 1 (fontified t)) . -4522) (undo-tree-id3495 . -1) (#("d" 0 1 (fontified t)) . -4523) (undo-tree-id3496 . -1) (#("." 0 1 (fontified t)) . -4524) (undo-tree-id3497 . -1) (#("d" 0 1 (fontified t)) . -4525) (undo-tree-id3498 . -1) (#("e" 0 1 (fontified t)) . -4526) (undo-tree-id3499 . -1) (#("l" 0 1 (fontified t)) . -4527) (undo-tree-id3500 . -1) (#("e" 0 1 (fontified t)) . -4528) (undo-tree-id3501 . -1) 4529 (4515 . 4529) (4512 . 4515)) nil (25827 61263 791323 200000) 0 nil])
([nil nil ((#("days" 0 4 (fontified nil)) . 4506) (undo-tree-id3443 . -4) (4505 . 4506) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4505 4506 nil nil nil t #s(yas--exit 4507 nil))) #s(yas--exit 4507 nil) 129 nil #s(yas--field 1 4505 4506 nil nil nil t #s(yas--exit 4507 nil)) nil nil)) (4500 . 4510) (#("days(${1:days})$0" 0 17 (fontified nil)) . 4500) (4500 . 4517) (#("days(…)" 0 7 (fontified nil)) . -4500) (4500 . 4507) (4498 . 4500) (4490 . 4498) (#("Dura" 0 4 (fontified nil)) . 4490) (4490 . 4494) (#("Duration" 0 8 (fontified nil)) . -4490) (4490 . 4498) (#("Dura" 0 4 (face font-lock-type-face fontified t)) . -4490) (undo-tree-id3444 . -4) (undo-tree-id3445 . -4) 4494 (4487 . 4494)) nil (25827 61263 791273 267000) 0 nil])
([nil nil ((apply yas--snippet-revive 4500 4507 #s(yas--snippet nil (#s(yas--field 1 4505 4506 nil nil nil t #s(yas--exit 4507 nil))) #s(yas--exit 4507 nil) 129 nil #s(yas--field 1 4505 4506 nil nil nil t #s(yas--exit 4507 nil)) nil nil))) nil (25827 61405 430359 113000) 0 nil])
([nil nil ((4479 . 4488) (#("Time" 0 4 (fontified nil)) . 4479) (4479 . 4483) (#("Timestamp" 0 9 (fontified nil)) . -4479) (4479 . 4488) (#("Time" 0 4 (face font-lock-type-face fontified t)) . -4479) (undo-tree-id3634 . -4) (undo-tree-id3635 . -4) (undo-tree-id3636 . -4) (undo-tree-id3637 . -4) 4483 (4475 . 4483) (4472 . 4475) (apply yas--snippet-revive 4508 4514 #s(yas--snippet nil nil #s(yas--exit 4514 nil) 130 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4514 nil) 130 nil nil nil nil)) (4508 . 4514) (#("into()$0" 0 8 (fontified nil)) . 4508) (4508 . 4516) (#("into" 0 4 (fontified nil)) . 4508) (4508 . 4512) (#("into() (as Into)" 0 16 (fontified nil)) . -4508) (4508 . 4524) (#("into" 0 4 (fontified t)) . -4508) (undo-tree-id3638 . -1) (undo-tree-id3639 . -4) 4512 (4506 . 4512) (4475 . 4476) (#("T" 0 1 (face font-lock-type-face fontified t)) . -4475) (undo-tree-id3640 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4476) (undo-tree-id3641 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -4477) (undo-tree-id3642 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -4478) (undo-tree-id3643 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -4479) (undo-tree-id3644 . -1) 4480 (4475 . 4480) (4470 . 4472) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -4470) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -4471) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -4472) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -4473) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) 4474 (#("p" 0 1 (fontified t)) . -4547) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (#("r" 0 1 (fontified t)) . -4548) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (#("e" 0 1 (fontified t)) . -4549) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (#("d" 0 1 (fontified t)) . -4550) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (#("i" 0 1 (fontified t)) . -4551) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (#("c" 0 1 (fontified t)) . -4552) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (#("a" 0 1 (fontified t)) . -4553) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (#("t" 0 1 (fontified t)) . -4554) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (#("e" 0 1 (fontified t)) . -4555) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) 4556 (t 25827 61263 798587 466000)) nil (25827 61405 430337 710000) 0 nil])
([nil nil ((4470 . 4471) (t 25827 61405 461387 642000)) nil (25827 61410 671196 887000) 0 nil])
([nil nil ((4623 . 4626) (4592 . 4598) (#("min_" 0 4 (fontified nil)) . 4592) (4592 . 4596) (#("min_ts" 0 6 (fontified nil)) . -4592) (4592 . 4598) (#("min_" 0 4 (fontified t)) . -4592) (undo-tree-id3680 . -4) (undo-tree-id3681 . -4) (undo-tree-id3682 . -4) (undo-tree-id3683 . -4) (undo-tree-id3684 . -4) 4596 (4590 . 4596) (#("<" 0 1 (syntax-table (1) fontified t)) . -4590) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) 4591 (4590 . 4591) (4589 . 4590) (apply yas--snippet-revive 4577 4589 #s(yas--snippet nil nil #s(yas--exit 4589 nil) 131 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4589 nil) 131 nil nil nil nil)) (4577 . 4589) (#("created_at()$0" 0 14 (fontified nil)) . 4577) (4577 . 4591) (#("crea" 0 4 (fontified nil)) . 4577) (4577 . 4581) (#("created_at()" 0 12 (fontified nil)) . -4577) (4577 . 4589) (#("crea" 0 4 (fontified t)) . -4577) (undo-tree-id3688 . -4) (undo-tree-id3689 . -4) 4581 (4572 . 4581) (4571 . 4572) (t 25827 61410 711368 73000)) nil (25827 61436 673998 46000) 0 nil])
([nil nil ((4612 . 4619) (apply yas--snippet-revive 4600 4614 #s(yas--snippet nil nil #s(yas--exit 4614 nil) 132 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4614 nil) 132 nil nil nil nil)) (4600 . 4614) (#("array_chunks()$0" 0 16 (fontified nil)) . 4600) (4600 . 4616) (#("array_chunks() (as Iterator)" 0 28 (fontified nil)) . -4600) (4600 . 4628) (4599 . 4600) (#("." 0 1 (fontified t)) . -4599) (undo-tree-id3690 . -1) (#("c" 0 1 (fontified t)) . -4600) (undo-tree-id3691 . -1) 4601 (4599 . 4601) (#("." 0 1 (fontified t)) . -4599) (undo-tree-id3692 . -1) (#("c" 0 1 (fontified t)) . -4600) (undo-tree-id3693 . -1) (#("h" 0 1 (fontified t)) . -4601) (undo-tree-id3694 . -1) (#("u" 0 1 (fontified t)) . -4602) (undo-tree-id3695 . -1) (#("n" 0 1 (fontified t)) . -4603) (undo-tree-id3696 . -1) (#("k" 0 1 (fontified t)) . -4604) (undo-tree-id3697 . -1) 4605 (4599 . 4605) (#("." 0 1 (fontified t)) . -4599) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) 4600 (#("a" 0 1 (fontified t)) . -4600) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (#("r" 0 1 (fontified t)) . -4601) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (#("r" 0 1 (fontified t)) . -4602) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (#("a" 0 1 (fontified t)) . -4603) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) (#("y" 0 1 (fontified t)) . -4604) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (#("_" 0 1 (fontified t)) . -4605) (undo-tree-id3716 . -1) (#("c" 0 1 (fontified t)) . -4606) (undo-tree-id3717 . -1) (#("h" 0 1 (fontified t)) . -4607) (undo-tree-id3718 . -1) (#("u" 0 1 (fontified t)) . -4608) (undo-tree-id3719 . -1) (#("n" 0 1 (fontified t)) . -4609) (undo-tree-id3720 . -1) (#("k" 0 1 (fontified t)) . -4610) (undo-tree-id3721 . -1) (#("s" 0 1 (fontified t)) . -4611) (undo-tree-id3722 . -1) (#(":" 0 1 (fontified t)) . -4612) (undo-tree-id3723 . -1) (#(":" 0 1 (fontified t)) . -4613) (undo-tree-id3724 . -1) (#("<" 0 1 (fontified t)) . -4614) (undo-tree-id3725 . -1) (#("1" 0 1 (fontified nil)) . -4615) (undo-tree-id3726 . -1) (#("0" 0 1 (fontified nil)) . -4616) (undo-tree-id3727 . -1) (#("0" 0 1 (fontified nil)) . -4617) (undo-tree-id3728 . -1) (#(">" 0 1 (fontified nil)) . -4618) (undo-tree-id3729 . -1) (#("(" 0 1 (fontified t)) . -4619) (undo-tree-id3730 . -1) (#(")" 0 1 (fontified t)) . -4620) (undo-tree-id3731 . -1) 4621 (t 25827 61436 691271 421000)) nil (25827 61517 948773 105000) 0 nil])
([nil nil ((4612 . 4619) (apply yas--snippet-revive 4600 4614 #s(yas--snippet nil nil #s(yas--exit 4614 nil) 138 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4614 nil) 138 nil nil nil nil)) (4600 . 4614) (#("array_chunks()$0" 0 16 (fontified nil)) . 4600) (4600 . 4616) (#("array_chunks() (as Iterator)" 0 28 (fontified nil)) . -4600) (4600 . 4628) (4599 . 4600) (apply yas--snippet-revive 4560 4599 #s(yas--snippet nil (#s(yas--field 1 4571 4598 nil nil nil t #s(yas--exit 4599 nil))) #s(yas--exit 4599 nil) 136 nil #s(yas--field 1 4571 4598 nil nil nil t #s(yas--exit 4599 nil)) nil nil)) (4589 . 4598) (apply yas--snippet-revive 4577 4589 #s(yas--snippet nil nil #s(yas--exit 4589 nil) 137 nil nil #s(yas--field 1 4571 4598 nil nil nil t #s(yas--exit 4599 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4589 nil) 137 nil nil #s(yas--field 1 4571 4598 nil nil nil t #s(yas--exit 4599 nil)) nil)) (4577 . 4589) (#("created_at()$0" 0 14 (fontified nil)) . 4577) (4577 . 4591) (#("crea" 0 4 (fontified nil)) . 4577) (4577 . 4581) (#("created_at()" 0 12 (fontified nil)) . -4577) (4577 . 4589) (#("crea" 0 4 (fontified t)) . -4577) (undo-tree-id4213 . -4) (undo-tree-id4214 . -4) 4581 (4572 . 4581) (#("predicate" 0 9 (fontified nil)) . 4572) (4571 . 4572) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4571 4598 nil nil nil t #s(yas--exit 4599 nil))) #s(yas--exit 4599 nil) 136 nil #s(yas--field 1 4571 4598 nil nil nil t #s(yas--exit 4599 nil)) nil nil)) (4560 . 4581) (#("take_while(${1:predicate})$0" 0 28 (fontified nil)) . 4560) (4560 . 4588) (#("take_" 0 5 (fontified nil)) . 4560) (4560 . 4565) (#("take_while(…) (as Iterator)" 0 27 (fontified nil)) . -4560) (4560 . 4587) (#("take_" 0 5 (fontified t)) . -4560) (undo-tree-id4215 . -5) 4565 (4559 . 4565) (apply yas--snippet-revive 4551 4559 #s(yas--snippet nil nil #s(yas--exit 4559 nil) 135 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4559 nil) 135 nil nil nil nil)) (4551 . 4559) (#("by_ref()$0" 0 10 (fontified nil)) . 4551) (4551 . 4561) (#("by_" 0 3 (fontified nil)) . 4551) (4551 . 4554) (#("by_ref() (as Iterator)" 0 22 (fontified nil)) . -4551) (4551 . 4573) (#("by_" 0 3 (fontified t)) . -4551) (undo-tree-id4216 . -3) 4554 (4551 . 4554) (4543 . 4551) (#("=" 0 1 (fontified t)) . -4543) (undo-tree-id4217 . -1) 4544 (4541 . 4544) (#(" " 0 1 (fontified t)) . -4541) (undo-tree-id4218 . -1) 4542 (4534 . 4542) (4532 . 4534) (apply yas--snippet-revive 4682 4709 #s(yas--snippet nil (#s(yas--field 1 4697 4703 nil nil nil t #s(yas--field 2 4705 4708 nil nil nil t #s(yas--exit 4709 nil))) #s(yas--field 2 4705 4708 nil nil nil t #s(yas--exit 4709 nil))) #s(yas--exit 4709 nil) 134 nil #s(yas--field 2 4705 4708 nil nil nil t #s(yas--exit 4709 nil)) nil nil)) (4705 . 4708) (#("msg" 0 3 (fontified nil)) . 4705) (4705 . 4708) (#("msg" 0 3 (fontified t)) . -4705) (undo-tree-id4219 . -3) (undo-tree-id4220 . -3) 4708 (4706 . 4708) (#("message_id" 0 10 (fontified nil)) . 4706) (4705 . 4706) (4697 . 4703) (#("cli" 0 3 (fontified nil)) . 4697) (4697 . 4700) (#("client" 0 6 (fontified nil)) . -4697) (4697 . 4703) (#("cli" 0 3 (fontified t)) . -4697) (undo-tree-id4221 . -3) (undo-tree-id4222 . -3) 4700 (4698 . 4700) (#("http" 0 4 (fontified nil)) . 4698) (4697 . 4698) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4697 4703 nil nil nil t #s(yas--field 2 4705 4708 nil nil nil t #s(yas--exit 4709 nil))) #s(yas--field 2 4705 4708 nil nil nil t #s(yas--exit 4709 nil))) #s(yas--exit 4709 nil) 134 nil #s(yas--field 2 4705 4708 nil nil nil t #s(yas--exit 4709 nil)) nil nil)) (4682 . 4714) (#("delete_message(${1:http}, ${2:message_id})$0" 0 44 (fontified nil)) . 4682) (4682 . 4726) (#("dele" 0 4 (fontified nil)) . 4682) (4682 . 4686) (#("delete_message(…)" 0 17 (fontified nil)) . -4682) (4682 . 4699) (#("dele" 0 4 (fontified t)) . -4682) (undo-tree-id4223 . -4) 4686 (4672 . 4686) (4667 . 4672) (#("	" 0 1 (fontified nil)) . -4671) (undo-tree-id4224 . -1) (4672 . 4673) (4667 . 4672) (4650 . 4667) (#("f" 0 1 (fontified t)) . -4650) (undo-tree-id4225 . -1) (#("o" 0 1 (fontified t)) . -4651) (undo-tree-id4226 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -4652) (undo-tree-id4227 . -1) (#(" " 0 1 (fontified t)) . -4653) (undo-tree-id4228 . -1) 4654 (4650 . 4654) (4646 . 4650) (#("	" 0 1 (fontified nil)) . -4649) (undo-tree-id4229 . -1) (4650 . 4651) (4646 . 4650) (4639 . 4646) (apply yas--snippet-revive 4634 4639 #s(yas--snippet nil nil #s(yas--exit 4639 nil) 133 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4639 nil) 133 nil nil nil nil)) (4634 . 4639) (#("len()$0" 0 7 (fontified nil)) . 4634) (4634 . 4641) (#("len" 0 3 (fontified nil)) . 4634) (4634 . 4637) (#("len()" 0 5 (fontified nil)) . -4634) (4634 . 4639) (#("len" 0 3 (fontified t)) . -4634) (undo-tree-id4230 . -3) 4637 (4632 . 4637) (4626 . 4632) (#("m" 0 1 (fontified t)) . -4626) (undo-tree-id4231 . -1) 4627 (4626 . 4627) (t 25827 61517 967637 496000)) nil (25827 61732 34249 75000) 0 nil])
([nil nil ((apply yas--snippet-revive 4642 4650 #s(yas--snippet nil nil #s(yas--exit 4650 nil) 139 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4650 nil) 139 nil nil nil nil)) (4642 . 4650) (#("by_ref()$0" 0 10 (fontified nil)) . 4642) (4642 . 4652) (#("by_" 0 3 (fontified nil)) . 4642) (4642 . 4645) (#("by_ref() (as Iterator)" 0 22 (fontified nil)) . -4642) (4642 . 4664) (#("by_" 0 3 (fontified t)) . -4642) (undo-tree-id3855 . -3) 4645 (4641 . 4645) (4639 . 4641) (#("a" 0 1 (fontified t)) . -4639) (undo-tree-id3856 . -1) (#("c" 0 1 (fontified t)) . -4640) (undo-tree-id3857 . -1) (#("h" 0 1 (fontified t)) . -4641) (undo-tree-id3858 . -1) (#("." 0 1 (fontified t)) . -4642) (undo-tree-id3859 . -1) 4643 (4636 . 4643) (#("i" 0 1 (fontified t)) . -4636) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (#("t" 0 1 (fontified t)) . -4637) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (#("e" 0 1 (fontified t)) . -4638) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (#("r" 0 1 (fontified t)) . -4639) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (#("." 0 1 (fontified t)) . -4640) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (#("b" 0 1 (fontified t)) . -4641) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (#("y" 0 1 (fontified t)) . -4642) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (#("_" 0 1 (fontified t)) . -4643) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (#("r" 0 1 (fontified t)) . -4644) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (#("e" 0 1 (fontified t)) . -4645) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (#("f" 0 1 (fontified t)) . -4646) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (#("(" 0 1 (fontified t)) . -4647) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) 4648 (#(")" 0 1 (fontified t)) . -4648) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (#("." 0 1 (fontified t)) . -4649) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (#("t" 0 1 (fontified t)) . -4650) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (#("a" 0 1 (fontified t)) . -4651) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (#("k" 0 1 (fontified t)) . -4652) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (#("e" 0 1 (fontified t)) . -4653) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (#("_" 0 1 (fontified t)) . -4654) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (#("w" 0 1 (fontified t)) . -4655) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (#("h" 0 1 (fontified t)) . -4656) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (#("i" 0 1 (fontified t)) . -4657) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (#("l" 0 1 (fontified t)) . -4658) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (#("e" 0 1 (fontified t)) . -4659) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (#("(" 0 1 (fontified t)) . -4660) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (#("|" 0 1 (fontified nil)) . -4661) (undo-tree-id3985 . -1) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (#("m" 0 1 (fontified nil)) . -4662) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (#("|" 0 1 (fontified t)) . -4663) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (#(" " 0 1 (fontified t)) . -4664) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (#("m" 0 1 (fontified t)) . -4665) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (#("." 0 1 (fontified t)) . -4666) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (#("c" 0 1 (fontified t)) . -4667) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (#("r" 0 1 (fontified t)) . -4668) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) 4669 (#("e" 0 1 (fontified t)) . -4669) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (#("a" 0 1 (fontified t)) . -4670) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (#("t" 0 1 (fontified t)) . -4671) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (#("e" 0 1 (fontified t)) . -4672) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (#("d" 0 1 (fontified t)) . -4673) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (#("_" 0 1 (fontified t)) . -4674) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (#("a" 0 1 (fontified t)) . -4675) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (#("t" 0 1 (fontified t)) . -4676) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (#("(" 0 1 (fontified t)) . -4677) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (#(")" 0 1 (fontified t)) . -4678) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (#(" " 0 1 (fontified t)) . -4679) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -4680) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) (#(" " 0 1 (fontified t)) . -4681) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (#("m" 0 1 (fontified t)) . -4682) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (#("i" 0 1 (fontified t)) . -4683) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (#("n" 0 1 (fontified t)) . -4684) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (#("_" 0 1 (fontified t)) . -4685) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (#("t" 0 1 (fontified t)) . -4686) (undo-tree-id4110 . -1) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (#("s" 0 1 (fontified t)) . -4687) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (#(")" 0 1 (fontified t)) . -4688) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (#("." 0 1 (fontified t)) . -4689) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) 4690 (#("a" 0 1 (fontified t)) . -4690) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (#("r" 0 1 (fontified nil)) . -4691) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (#("r" 0 1 (fontified nil)) . -4692) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (#("a" 0 1 (fontified t)) . -4693) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (#("y" 0 1 (fontified t)) . -4694) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (#("_" 0 1 (fontified t)) . -4695) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (#("c" 0 1 (fontified t)) . -4696) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (#("h" 0 1 (fontified t)) . -4697) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (#("u" 0 1 (fontified t)) . -4698) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (#("n" 0 1 (fontified t)) . -4699) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (#("k" 0 1 (fontified t)) . -4700) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (#("s" 0 1 (fontified t)) . -4701) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (#(":" 0 1 (fontified t)) . -4702) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (#(":" 0 1 (fontified t)) . -4703) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (#("<" 0 1 (fontified t)) . -4704) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (#("1" 0 1 (fontified t)) . -4705) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (#("0" 0 1 (fontified t)) . -4706) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (#("0" 0 1 (fontified t)) . -4707) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (#(">" 0 1 (fontified t)) . -4708) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (#("(" 0 1 (fontified t)) . -4709) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (#(")" 0 1 (fontified t)) . -4710) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) 4711 (4621 . 4622)) nil (25827 61732 34158 592000) 0 nil])
([nil nil ((#("		if msgs.len() >= 2 {
" 0 2 (fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 10 (fontified t) 10 16 (fontified t) 16 17 (fontified t syntax-table (1)) 17 23 (fontified t)) . 4653) (undo-tree-id3853 . -22) (undo-tree-id3854 . -21) 4674) nil (25827 61732 33680 490000) 0 nil])
([nil nil ((#(" {
				channelid.delete_message(client, msg)
			}
		}
" 0 2 (fontified t) 2 3 (fontified t) 3 17 (fontified t) 17 32 (fontified t) 32 38 (fontified t) 38 40 (fontified t) 40 43 (fontified t) 43 44 (fontified t) 44 45 (fontified t) 45 49 (fontified t) 49 50 (fontified t) 50 54 (fontified t)) . 4671) (undo-tree-id3849 . -53) (undo-tree-id3850 . -53) (undo-tree-id3851 . -53) (undo-tree-id3852 . -53) 4724) nil (25827 61732 33674 915000) 0 nil])
([nil nil ((4695 . 4700) (#("await" 0 5 (fontified nil)) . -4695) (4695 . 4700) (4694 . 4695) (4694 . 4696) (apply yas--snippet-revive 4665 4694 #s(yas--snippet nil (#s(yas--field 1 4681 4687 nil nil nil t #s(yas--field 2 4689 4693 nil nil nil t #s(yas--exit 4694 nil))) #s(yas--field 2 4689 4693 nil nil nil t #s(yas--exit 4694 nil))) #s(yas--exit 4694 nil) 140 nil #s(yas--field 2 4689 4693 nil nil nil t #s(yas--exit 4694 nil)) nil nil)) (4690 . 4693) (#("message_ids" 0 11 (fontified nil)) . 4690) (4689 . 4690) (4681 . 4687) (#("clie" 0 4 (fontified nil)) . 4681) (4681 . 4685) (#("client" 0 6 (fontified nil)) . -4681) (4681 . 4687) (#("clie" 0 4 (fontified t)) . -4681) (undo-tree-id3732 . -4) (undo-tree-id3733 . -4) 4685 (4682 . 4685) (#("http" 0 4 (fontified nil)) . 4682) (4681 . 4682) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4681 4687 nil nil nil t #s(yas--field 2 4689 4693 nil nil nil t #s(yas--exit 4694 nil))) #s(yas--field 2 4689 4693 nil nil nil t #s(yas--exit 4694 nil))) #s(yas--exit 4694 nil) 140 nil #s(yas--field 2 4689 4693 nil nil nil t #s(yas--exit 4694 nil)) nil nil)) (4665 . 4699) (#("delete_messages(${1:http}, ${2:message_ids})$0" 0 46 (fontified nil)) . 4665) (4665 . 4711) (#("dele" 0 4 (fontified nil)) . 4665) (4665 . 4669) (#("delete_messages(…)" 0 18 (fontified nil)) . -4665) (4665 . 4683) (#("dele" 0 4 (fontified t)) . -4665) (undo-tree-id3734 . -4) 4669 (4665 . 4669) (4664 . 4665) (4655 . 4664) (#("channel" 0 7 (fontified nil)) . 4655) (4655 . 4662) (#("channelid" 0 9 (fontified nil)) . -4655) (4655 . 4664) (#("channel" 0 7 (fontified t)) . -4655) (undo-tree-id3735 . -7) 4662 (4655 . 4662) (4652 . 4655) (#("			" 0 2 (fontified t) 2 3 (fontified t)) . -4654) (undo-tree-id3736 . -2) (undo-tree-id3737 . -2) (undo-tree-id3738 . -2) (undo-tree-id3739 . -2) (undo-tree-id3740 . 1) (undo-tree-id3741 . -2) (undo-tree-id3742 . -2) (undo-tree-id3743 . -2) 4656 (#("f" 0 1 (fontified t)) . -4656) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (#("o" 0 1 (fontified t)) . -4657) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) (undo-tree-id3757 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -4658) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (#(" " 0 1 (fontified t)) . -4659) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1) (undo-tree-id3770 . -1) (undo-tree-id3771 . -1) (#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -4660) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -4661) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (#("g" 0 1 (face font-lock-variable-name-face fontified t)) . -4662) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (#(" " 0 1 (fontified t)) . -4663) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (#("i" 0 1 (fontified t)) . -4664) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -4665) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (#(" " 0 1 (fontified t)) . -4666) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (#("m" 0 1 (fontified t)) . -4667) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (#("s" 0 1 (fontified t)) . -4668) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (#("g" 0 1 (fontified t)) . -4669) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (#("s" 0 1 (fontified t)) . -4670) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) 4671) nil (25827 61732 33644 903000) 0 nil])
([nil nil ((4538 . 4542) (t 25827 61732 53522 789000)) nil (25827 61749 76703 899000) 0 nil])
([nil nil ((apply yas--snippet-revive 4692 4700 #s(yas--snippet nil nil #s(yas--exit 4700 nil) 141 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4700 nil) 141 nil nil nil nil)) (4692 . 4700) (#("as_ref()$0" 0 10 (fontified nil)) . 4692) (4692 . 4702) (#("as_ref() (as AsRef)" 0 19 (fontified nil)) . -4692) (4692 . 4711) (4691 . 4692) (t 25827 61749 86794 486000)) nil (25827 61759 524235 647000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4719) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (#("	" 0 1 (fontified t)) . -4720) (undo-tree-id4236 . -1) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (#("a" 0 1 (fontified t)) . -4721) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) (#("r" 0 1 (fontified t)) . -4722) (undo-tree-id4241 . -1) (undo-tree-id4242 . -1) (#("r" 0 1 (fontified t)) . -4723) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (#("c" 0 1 (fontified t)) . -4724) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (#("h" 0 1 (fontified t)) . -4725) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (#("." 0 1 (fontified t)) . -4726) (undo-tree-id4249 . -1) (#("r" 0 1 (fontified t)) . -4727) (undo-tree-id4250 . -1) (#("e" 0 1 (fontified t)) . -4728) (undo-tree-id4251 . -1) (#("m" 0 1 (fontified t)) . -4729) (undo-tree-id4252 . -1) 4730 (4726 . 4730) (#("." 0 1 (fontified t)) . -4726) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (#("i" 0 1 (fontified t)) . -4727) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -4728) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (#("t" 0 1 (fontified t)) . -4729) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (#("o" 0 1 (fontified t)) . -4730) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (#("_" 0 1 (fontified t)) . -4731) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (#("r" 0 1 (fontified t)) . -4732) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (#("e" 0 1 (fontified t)) . -4733) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (#("m" 0 1 (fontified nil)) . -4734) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (#("a" 0 1 (fontified nil)) . -4735) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (#("i" 0 1 (fontified nil)) . -4736) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (#("n" 0 1 (fontified t)) . -4737) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (#("d" 0 1 (fontified t)) . -4738) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (#("e" 0 1 (fontified t)) . -4739) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (#("r" 0 1 (fontified t)) . -4740) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (#("(" 0 1 (fontified t)) . -4741) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (#(")" 0 1 (fontified t)) . -4742) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) 4743 (apply yas--snippet-revive 4727 4743 #s(yas--snippet nil nil #s(yas--exit 4743 nil) 142 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4743 nil) 142 nil nil nil nil)) (4727 . 4743) (#("into_remainder()$0" 0 18 (fontified nil)) . 4727) (4727 . 4745) (#("into" 0 4 (fontified nil)) . 4727) (4727 . 4731) (#("into_remainder()" 0 16 (fontified nil)) . -4727) (4727 . 4743) (#("into" 0 4 (fontified t)) . -4727) (undo-tree-id4287 . -4) 4731 (4721 . 4731) (4720 . 4721) (#("	" 0 1 (fontified t)) . -4720) (undo-tree-id4288 . -1) (#("f" 0 1 (fontified t)) . -4721) (undo-tree-id4289 . -1) (#("o" 0 1 (fontified t)) . -4722) (undo-tree-id4290 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -4723) (undo-tree-id4291 . -1) (#(" " 0 1 (fontified t)) . -4724) (undo-tree-id4292 . -1) 4725 (4721 . 4725) (4720 . 4721) (#("	" 0 1 (fontified nil)) . 4719) (undo-tree-id4293 . -1) (4718 . 4721) (t 25827 61760 630086 87000)) nil (25827 61876 183145 84000) 0 nil])
([nil current ((#("a" 0 1 (fontified t)) . -4720) (undo-tree-id0 . -1) (#("r" 0 1 (fontified t)) . -4721) (undo-tree-id1 . -1) (#("r" 0 1 (fontified t)) . -4722) (undo-tree-id2 . -1) (#("c" 0 1 (fontified t)) . -4723) (undo-tree-id3 . -1) (#("h" 0 1 (fontified nil)) . -4724) (undo-tree-id4 . -1) (#("." 0 1 (fontified t)) . -4725) (undo-tree-id5 . -1) 4726 (4720 . 4726) (4719 . 4720) (#("a" 0 1 (fontified t)) . -4719) (undo-tree-id6 . -1) 4720 (4719 . 4720) (t 25827 61876 193003 169000)) nil (25827 62054 670579 126000) 0 nil])
nil
